<Type Name="JsonDocument" FullName="System.Text.Json.JsonDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7cb6573dc8ebcc99bc57891401b7523f4130c8d6" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66458003" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonDocument&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonDocument sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type JsonDocument = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9d49e-101">Ofrece un mecanismo de examen del contenido estructural de un valor JSON sin crear automáticamente instancias de valores de datos.</span><span class="sxs-lookup"><span data-stu-id="9d49e-101">Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.</span></span></summary>
    <remarks>
      <format><![CDATA[
      
<span data-ttu-id="9d49e-102">Esta clase usa recursos de la memoria agrupado para minimizar el impacto del recolector de elementos no utilizados (GC) en situaciones de uso elevado.</span><span class="sxs-lookup"><span data-stu-id="9d49e-102">This class utilizes resources from pooled memory to minimize the impact of the garbage collector (GC) in high-usage scenarios.</span></span> <span data-ttu-id="9d49e-103">Error al eliminar correctamente este objeto dará como resultado la memoria no se devuelve al grupo, lo que aumentará el impacto de GC en distintas partes de framework.</span><span class="sxs-lookup"><span data-stu-id="9d49e-103">Failure to properly dispose this object will result in the memory not being returned to the pool, which will increase GC impact across various parts of the framework.</span></span>
              
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="jsonDocument.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.Buffers.ReadOnlySequence&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlySequence(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="9d49e-104">Texto JSON que se va a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-104">The JSON text to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-105">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-105">Options to control the reader behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="9d49e-106">Analiza una secuencia como texto codificado con UTF-8 que representa un único valor de byte JSON en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-106">Parses a sequence as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.</span></span></summary>
        <returns><span data-ttu-id="9d49e-107">Representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-107">A JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="9d49e-108">El <xref:System.Buffers.ReadOnlySequence%601> se pueden usar para toda la duración del objeto JsonDocument, y el llamador debe asegurarse de que los datos en él no cambian durante la vigencia del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d49e-108">The <xref:System.Buffers.ReadOnlySequence%601> may be used for the entire lifetime of the JsonDocument object, and the caller must ensure that the data therein does not change during the object lifetime.</span></span>
               
<span data-ttu-id="9d49e-109">Dado que la entrada se considera texto, una marca de orden de bytes (BOM de UTF-8) no debe estar presente.</span><span class="sxs-lookup"><span data-stu-id="9d49e-109">Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-110"><paramref name="utf8Json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-110"><paramref name="utf8Json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-111"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-111"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As Stream, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.IO.Stream * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="9d49e-112">Datos JSON que se van a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-112">The JSON data to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-113">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-113">Options to control the reader behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="9d49e-114">Analiza un objeto <see cref="T:System.IO.Stream" /> como datos codificados con UTF-8 que representan un único valor JSON en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-114">Parses a <see cref="T:System.IO.Stream" /> as UTF-8-encoded data representing a single JSON value into a JsonDocument.</span></span> <span data-ttu-id="9d49e-115">La secuencia se lee hasta su finalización.</span><span class="sxs-lookup"><span data-stu-id="9d49e-115">The stream is read to completion.</span></span></summary>
        <returns><span data-ttu-id="9d49e-116">Representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-116">A JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-117"><paramref name="utf8Json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-117"><paramref name="utf8Json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-118"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-118"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlyMemory(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="9d49e-119">Texto JSON que se va a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-119">The JSON text to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-120">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-120">Options to control the reader behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="9d49e-121">Analiza la memoria como texto codificado con UTF-8 que representa un valor de byte JSON único en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-121">Parses memory as UTF-8-encoded text representing a single JSON byte value into a JsonDocument.</span></span></summary>
        <returns><span data-ttu-id="9d49e-122">Representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-122">A JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="9d49e-123">El <xref:System.ReadOnlyMemory%601> se usará el valor para toda la duración del objeto JsonDocument y el llamador debe asegurarse de que los datos en él no cambian durante la vigencia del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d49e-123">The <xref:System.ReadOnlyMemory%601> value will be used for the entire lifetime of the JsonDocument object, and the caller must ensure that the data therein does not change during the object lifetime.</span></span>

<span data-ttu-id="9d49e-124">Dado que la entrada se considera texto, una marca de orden de bytes (BOM de UTF-8) no debe estar presente.</span><span class="sxs-lookup"><span data-stu-id="9d49e-124">Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.</span></span>
                 
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-125"><paramref name="utf8Json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-125"><paramref name="utf8Json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-126"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-126"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;char&gt; json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;char&gt; json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As ReadOnlyMemory(Of Char), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;char&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="9d49e-127">Texto JSON que se va a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-127">The JSON text to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-128">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-128">Options to control the reader behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="9d49e-129">Analiza texto que representa un único valor de carácter JSON en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-129">Parses text representing a single JSON character value into a JsonDocument.</span></span></summary>
        <returns><span data-ttu-id="9d49e-130">Representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-130">A JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="9d49e-131">El <xref:System.ReadOnlyMemory%601> valor se puede usar para toda la duración del objeto JsonDocument y el llamador debe asegurarse de que los datos en él no cambian durante la vigencia del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d49e-131">The <xref:System.ReadOnlyMemory%601> value may be used for the entire lifetime of the JsonDocument object, and the caller must ensure that the data therein does not change during the object lifetime.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-132"><paramref name="json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-132"><paramref name="json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-133"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-133"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (string json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(string json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As String, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="9d49e-134">Texto JSON que se va a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-134">The JSON text to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-135">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-135">Options to control the reader behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="9d49e-136">Analiza texto que representa un único valor de cadena JSON en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-136">Parses text representing a single JSON string value into a JsonDocument.</span></span></summary>
        <returns><span data-ttu-id="9d49e-137">Representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-137">A JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-138"><paramref name="json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-138"><paramref name="json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-139"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-139"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt; ParseAsync (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Text.Json.JsonDocument&gt; ParseAsync(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseAsync : System.IO.Stream * System.Text.Json.JsonReaderOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;" Usage="System.Text.Json.JsonDocument.ParseAsync (utf8Json, readerOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="9d49e-140">Datos JSON que se van a analizar.</span><span class="sxs-lookup"><span data-stu-id="9d49e-140">The JSON data to parse.</span></span></param>
        <param name="readerOptions"><span data-ttu-id="9d49e-141">Opciones para controlar el comportamiento de los lectores durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-141">Options to control the reader behavior during parsing.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="9d49e-142">Token para supervisar solicitudes de cancelación.</span><span class="sxs-lookup"><span data-stu-id="9d49e-142">The token to monitor for cancellation requests.</span></span></param>
        <summary><span data-ttu-id="9d49e-143">Analiza un objeto <see cref="T:System.IO.Stream" /> como datos codificados con UTF-8 que representan un único valor JSON en un objeto JsonDocument.</span><span class="sxs-lookup"><span data-stu-id="9d49e-143">Parses a <see cref="T:System.IO.Stream" /> as UTF-8-encoded data representing a single JSON value into a JsonDocument.</span></span> <span data-ttu-id="9d49e-144">La secuencia se lee hasta su finalización.</span><span class="sxs-lookup"><span data-stu-id="9d49e-144">The stream is read to completion.</span></span></summary>
        <returns><span data-ttu-id="9d49e-145">Tarea que genera una representación JsonDocument del valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-145">A task to produce a JsonDocument representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-146"><paramref name="utf8Json" /> no representa un único valor JSON válido.</span><span class="sxs-lookup"><span data-stu-id="9d49e-146"><paramref name="utf8Json" /> does not represent a valid single JSON value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-147"><paramref name="readerOptions" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-147"><paramref name="readerOptions" /> contains unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument ParseValue (ref System.Text.Json.Utf8JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument ParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseValue (ByRef reader As Utf8JsonReader) As JsonDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonDocument ^ ParseValue(System::Text::Json::Utf8JsonReader % reader);" />
      <MemberSignature Language="F#" Value="static member ParseValue :  -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.ParseValue reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9d49e-148">El lector que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="9d49e-148">The reader to read.</span></span></param>
        <summary><span data-ttu-id="9d49e-149">Analiza un valor JSON (incluidos objetos o matrices) del lector proporcionado.</span><span class="sxs-lookup"><span data-stu-id="9d49e-149">Parses one JSON value (including objects or arrays) from the provided reader.</span></span></summary>
        <returns><span data-ttu-id="9d49e-150">Lee un objeto JsonDocument que representa el valor (y los valores anidados) del lector.</span><span class="sxs-lookup"><span data-stu-id="9d49e-150">A JsonDocument representing the value (and nested values) read from the reader.</span></span></returns>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="9d49e-151">Si el <xref:System.Text.Json.Utf8JsonReader.TokenType> propiedad de `reader` es <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> o <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, el lector avanzará mediante una llamada a <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> para determinar el inicio del valor.</span><span class="sxs-lookup"><span data-stu-id="9d49e-151">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will advance by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="9d49e-152">Tras la finalización de este método, `reader` se coloca en el token final en el valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-152">Upon completion of this method, `reader` is positioned at the final token in the JSON value.</span></span> <span data-ttu-id="9d49e-153">Si se produce una excepción, el lector se restablece al estado que tenía cuando se llamó al método.</span><span class="sxs-lookup"><span data-stu-id="9d49e-153">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="9d49e-154">Este método realiza una copia de los datos el lector ha actuado sobre, así que no hay ningún requisito de autor de llamada para mantener la integridad de los datos más allá de la devolución de este método.</span><span class="sxs-lookup"><span data-stu-id="9d49e-154">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-155"><paramref name="reader" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-155"><paramref name="reader" /> contains unsupported options.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-156">No se pudo leer un valor del lector.</span><span class="sxs-lookup"><span data-stu-id="9d49e-156">A value could not be read from the reader.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RootElement">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement RootElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement RootElement" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocument.RootElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootElement As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement RootElement { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.RootElement : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonDocument.RootElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9d49e-157">Obtiene el elemento raíz del documento JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-157">Gets the root element of this JSON document.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseValue">
      <MemberSignature Language="C#" Value="public static bool TryParseValue (ref System.Text.Json.Utf8JsonReader reader, out System.Text.Json.JsonDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader, [out] class System.Text.Json.JsonDocument&amp; document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseValue (ByRef reader As Utf8JsonReader, ByRef document As JsonDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseValue(System::Text::Json::Utf8JsonReader % reader, [Runtime::InteropServices::Out] System::Text::Json::JsonDocument ^ % document);" />
      <MemberSignature Language="F#" Value="static member TryParseValue :  *  -&gt; bool" Usage="System.Text.Json.JsonDocument.TryParseValue (reader, document)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="document" Type="System.Text.Json.JsonDocument" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9d49e-158">El lector que se va a leer.</span><span class="sxs-lookup"><span data-stu-id="9d49e-158">The reader to read.</span></span></param>
        <param name="document"><span data-ttu-id="9d49e-159">Cuando este método devuelve un resultado, contiene el valor analizado.</span><span class="sxs-lookup"><span data-stu-id="9d49e-159">When the method returns, contains the parsed document.</span></span></param>
        <summary><span data-ttu-id="9d49e-160">Intenta analizar un valor JSON (incluidos objetos o matrices) del lector proporcionado.</span><span class="sxs-lookup"><span data-stu-id="9d49e-160">Attempts to parse one JSON value (including objects or arrays) from the provided reader.</span></span></summary>
        <returns><span data-ttu-id="9d49e-161"><see langword="true" /> si un valor se leyó y analizó en un objeto JsonDocument; <see langword="false" /> si el lector se quedó sin datos durante el análisis.</span><span class="sxs-lookup"><span data-stu-id="9d49e-161"><see langword="true" /> if a value was read and parsed into a JsonDocument; <see langword="false" /> if the reader ran out of data while parsing.</span></span> <span data-ttu-id="9d49e-162">Las demás situaciones dan como resultado una excepción.</span><span class="sxs-lookup"><span data-stu-id="9d49e-162">All other situations result in an exception being thrown.</span></span></returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="9d49e-163">Si el <xref:System.Text.Json.Utf8JsonReader.TokenType> propiedad de `reader` es <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> o <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, el lector avanzará mediante una llamada a <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> para determinar el inicio del valor.</span><span class="sxs-lookup"><span data-stu-id="9d49e-163">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will advance by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="9d49e-164">Tras la finalización de este método, `reader` se coloca en el token final en el valor JSON.</span><span class="sxs-lookup"><span data-stu-id="9d49e-164">Upon completion of this method, `reader` is positioned at the final token in the JSON value.</span></span> <span data-ttu-id="9d49e-165">Si se produce una excepción o `false` se devuelve el lector se restablece al estado que tenía cuando se llamó al método.</span><span class="sxs-lookup"><span data-stu-id="9d49e-165">If an exception is thrown or `false` is returned, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="9d49e-166">Este método realiza una copia de los datos el lector ha actuado sobre, así que no hay ningún requisito de autor de llamada para mantener la integridad de los datos más allá de la devolución de este método.</span><span class="sxs-lookup"><span data-stu-id="9d49e-166">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9d49e-167"><paramref name="reader" /> contiene opciones no compatibles.</span><span class="sxs-lookup"><span data-stu-id="9d49e-167"><paramref name="reader" /> contains unsupported options.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="9d49e-168">No se pudo leer un valor del lector.</span><span class="sxs-lookup"><span data-stu-id="9d49e-168">A value could not be read from the reader.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>