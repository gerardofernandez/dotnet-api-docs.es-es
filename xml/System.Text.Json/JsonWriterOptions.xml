<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf62fb82c2065e506a1cdde9519dcfdd4051504" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006694" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ef991-101">Permite al usuario definir el comportamiento personalizado al escribir JSON mediante <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="ef991-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ef991-102">De forma predeterminada, se escribe el JSON sin ninguna sangría o espacio en blanco adicional.</span><span class="sxs-lookup"><span data-stu-id="ef991-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="ef991-103">Además, <xref:System.Text.Json.Utf8JsonWriter> produce una excepción si el usuario intenta escribir JSON no es válida.</span><span class="sxs-lookup"><span data-stu-id="ef991-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef991-104">Obtiene o establece un valor que indica si <see cref="T:System.Text.Json.Utf8JsonWriter" /> debe dar formato a la salida JSON, lo que incluye la aplicación de sangría a tokens de JSON anidados, la adición de nuevas líneas y la adición de espacio en blanco entre los nombres y valores de propiedades.</span><span class="sxs-lookup"><span data-stu-id="ef991-104">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="ef991-105"><see langword="true" /> para dar formato JSON a la salida; <see langword="false" /> escribir sin ningún espacio en blanco adicional.</span><span class="sxs-lookup"><span data-stu-id="ef991-105"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="ef991-106">De manera predeterminada, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ef991-106">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef991-107">Obtiene o establece un valor que indica si <see cref="T:System.Text.Json.Utf8JsonWriter" /> debe omitir la validación estructural y permitir que el usuario escriba JSON no válido.</span><span class="sxs-lookup"><span data-stu-id="ef991-107">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="ef991-108"><see langword="true" /> para omitir la validación estructural y permitir que JSON no válido; <see langword="false" /> para producir una <see cref="T:System.InvalidOperationException" /> en cualquier intento de escribir JSON no válido.</span><span class="sxs-lookup"><span data-stu-id="ef991-108"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="ef991-109">Si se conoce el JSON que se escriben para ser correcta, a continuación, omitiendo la validación (estableciendo esta propiedad en `true`) podría mejorar el rendimiento.</span><span class="sxs-lookup"><span data-stu-id="ef991-109">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="ef991-110">Un ejemplo de donde se iniciará el sistema de escritura JSON no válido (cuando `SkipValidation` está establecido en `false`) es cuando se escribe un valor dentro de un objeto JSON sin un nombre de propiedad.</span><span class="sxs-lookup"><span data-stu-id="ef991-110">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>