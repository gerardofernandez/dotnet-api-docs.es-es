<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541650" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="98629-101">Proporciona una API de alto rendimiento para la escritura de solo avance sin almacenamiento en caché de texto JSON con codificación UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="98629-102">`Utf8JsonWriter` Escribe el texto de forma secuencial con ningún almacenamiento en caché y de forma predeterminada se ajusta a la [JSON RFC](https://tools.ietf.org/html/rfc8259), a excepción de escribir comentarios.</span><span class="sxs-lookup"><span data-stu-id="98629-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="98629-103">Un método que intenta escribir JSON no válido cuando la validación es habilitado inicia un <xref:System.InvalidOperationException> con un mensaje de error específicos del contexto.</span><span class="sxs-lookup"><span data-stu-id="98629-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="98629-104">Puesto que este tipo es un struct ref, no admite directamente async.</span><span class="sxs-lookup"><span data-stu-id="98629-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="98629-105">Sin embargo, proporciona compatibilidad para la reentrada para escribir datos parciales y seguir escribiendo en fragmentos.</span><span class="sxs-lookup"><span data-stu-id="98629-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="98629-106">Para poder dar formato al resultado con sangría y espacios en blanco u omitir la validación, cree una instancia de <xref:System.Text.Json.JsonWriterState> y pásela al sistema de escritura.</span><span class="sxs-lookup"><span data-stu-id="98629-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="98629-107">Instancia de <see cref="T:System.Buffers.IBufferWriter`1" /> que se usa como destino para escribir texto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="98629-108">Estructura que contiene el estado del lector.</span><span class="sxs-lookup"><span data-stu-id="98629-108">A struct that contains the reader state.</span></span> <span data-ttu-id="98629-109">En la primera llamada al constructor, debe reflejar un estado predeterminado; de lo contrario, debe capturar el estado de la instancia anterior de <see cref="T:System.Text.Json.Utf8JsonWriter" /> y devolverlo.</span><span class="sxs-lookup"><span data-stu-id="98629-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="98629-110">Inicializa una nueva instancia de la clase <see cref="T:System.Text.Json.Utf8JsonWriter" /> con el objeto <paramref name="bufferWriter" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="98629-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="98629-111">Puesto que este tipo es un struct ref, es un tipo de pila y todas las limitaciones de structs ref se aplican a él.</span><span class="sxs-lookup"><span data-stu-id="98629-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="98629-112">Este es el motivo por qué el constructor acepta un <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="98629-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="98629-113"><paramref name="bufferWriter" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="98629-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98629-114">Obtiene el número total de bytes confirmados en la salida mediante <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta el momento para la instancia actual de <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="98629-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="98629-115">Esto indica cuánto ha avanzado <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="98629-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="98629-116">El número total de bytes confirmados en la salida por el <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta ahora.</span><span class="sxs-lookup"><span data-stu-id="98629-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98629-117">Obtiene el número total de bytes escritos por <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta el momento para la instancia actual de <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="98629-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="98629-118">Esto incluye los datos que se hayan escrito más allá de lo que ya se ha confirmado.</span><span class="sxs-lookup"><span data-stu-id="98629-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="98629-119">El número total de bytes escritos por el <see cref="T:System.Text.Json.Utf8JsonWriter" /> hasta ahora.</span><span class="sxs-lookup"><span data-stu-id="98629-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98629-120">Obtiene la profundidad del token actual.</span><span class="sxs-lookup"><span data-stu-id="98629-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="98629-121">La profundidad del token actual.</span><span class="sxs-lookup"><span data-stu-id="98629-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="98629-122">El `CurrentDepth` propiedad realiza un seguimiento de la profundidad recursiva de los objetos anidados o matrices dentro del texto JSON escrito hasta ahora.</span><span class="sxs-lookup"><span data-stu-id="98629-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="98629-123"><see langword="true" /> para indicar que no se escribirá ningún dato más; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="98629-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="98629-124">Esto se usa para validar que el código JSON escrito hasta el momento es estructuralmente válido si no hay más datos después.</span><span class="sxs-lookup"><span data-stu-id="98629-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="98629-125">Hace avanzar el objeto <see cref="T:System.Buffers.IBufferWriter`1" /> subyacente según lo que se haya escrito hasta el momento.</span><span class="sxs-lookup"><span data-stu-id="98629-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-126">Se ha escrito JSON incompleto y <paramref name="isFinalBlock" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="98629-127">Por ejemplo, cuando un objeto abierto o una matriz debe cerrarse.</span><span class="sxs-lookup"><span data-stu-id="98629-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-128">Devuelve la instantánea actual del estado <see cref="T:System.Text.Json.Utf8JsonWriter" /> que el autor de la llamada debe capturar y devolver al constructor de <see cref="T:System.Text.Json.Utf8JsonWriter" /> con más datos.</span><span class="sxs-lookup"><span data-stu-id="98629-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="98629-129">Instantánea actual del estado <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="98629-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="98629-130">A diferencia de la <xref:System.Text.Json.Utf8JsonWriter>, que es un struct ref, el estado puede sobrevivir a través de límites de async y await y, por lo tanto, es necesario este tipo para proporcionar soporte técnico para leer más datos de forma asincrónica antes de continuar con una nueva instancia de la <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="98629-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="98629-131">Al obtener el estado para crear un nuevo <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct sin confirmar primero que daría lugar a los datos que se ha escrito en un estado incoherente.</span><span class="sxs-lookup"><span data-stu-id="98629-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="98629-132">Llame a <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> antes de obtener el estado actual.</span><span class="sxs-lookup"><span data-stu-id="98629-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-133">Los datos JSON se han escrito y almacenado en búfer, pero todavía no se han vaciado en <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="98629-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-134">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-135">Valor que se va escribir como un literal "true" o "false" de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-136"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-137">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-138">Escribe el nombre de propiedad y el valor <see cref="T:System.Boolean" /> (como un literal "true" o "false" de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-139"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-140">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-141">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-142">Valor que se va escribir como un literal "true" o "false" de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-143"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-144">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-145">Escribe el nombre de propiedad y el valor <see cref="T:System.Boolean" /> (como un literal "true" o "false" de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-146"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-147">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-148">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-149">Valor que se va escribir como un literal "true" o "false" de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-150"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-151">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-152">Escribe el nombre de propiedad y el valor <see cref="T:System.Boolean" /> (como un literal "true" o "false" de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-153"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-154">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-155">Valor que se va a escribir como un literal "true" o "false" de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-156">Escribe el valor <see cref="T:System.Boolean" /> (como un literal "true" o "false" de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-157">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="98629-158">Valor con codificación UTF-8 que se va escribir como un comentario de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-159"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-160">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-161">Escribe el valor de texto UTF-8 como un comentario de JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="98629-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-162"><paramref name="utf8Value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-163">Valor con codificación UTF-16 que se va escribir como un comentario de JSON transcodificado a UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-164"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-165">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-166">Escribe el valor de texto UTF-16 como un comentario de JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="98629-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-167"><paramref name="value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-168">Valor con codificación UTF-16 que se va escribir como un comentario de JSON transcodificado a UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-169"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-170">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-171">Escribe el valor de cadena de texto como un comentario de JSON (dentro de <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="98629-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-172"><paramref name="value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-173">Escribe el final de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-174">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-175">Escribe el final de un objeto de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-176">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-177">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-178"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-179">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-180">Escribe el nombre de propiedad y el literal "NULL" de JSON como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-181"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-182">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-183">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-184"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-185">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-186">Escribe el nombre de propiedad y el literal "NULL" de JSON como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-187"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-188">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-189">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-190"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-191">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-192">Escribe el nombre de propiedad y el literal "NULL" de JSON como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-193"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-194">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-195">Escribe el literal "NULL" de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-196">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-197">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-198">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-199"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-200">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-201">Escribe el nombre de propiedad y el valor <see cref="T:System.Decimal" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-202">Escribe el <see cref="T:System.Decimal" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-203"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-204">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-205">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-206">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-207"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-208">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-209">Escribe el nombre de propiedad y el valor <see cref="T:System.Double" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-210">Escribe el <see cref="T:System.Double" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-211"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-212">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-213">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-214">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-215"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-216">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-217">Escribe el nombre de propiedad y el valor <see cref="T:System.Int32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-218">Escribe el <see cref="T:System.Int32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-219">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-220"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-221">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-222">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-223">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-224"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-225">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-226">Escribe el nombre de propiedad y el valor <see cref="T:System.Int64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-227">Escribe el <see cref="T:System.Int64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-228">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-229"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-230">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-231">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-232">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-233"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-234">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-235">Escribe el nombre de propiedad y el valor <see cref="T:System.Single" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-236">Escribe el <see cref="T:System.Single" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-237"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-238">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-239">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-240">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-241"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-242">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-243">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-244">Escribe el <see cref="T:System.UInt32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-245">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-246"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-247">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-248">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-249">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-250"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-251">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-252">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-253">Escribe el <see cref="T:System.UInt64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-254">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-255"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-256">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-257">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-258">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-259"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-260">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-261">Escribe el nombre de propiedad y el valor <see cref="T:System.Decimal" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-262">Escribe el <see cref="T:System.Decimal" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-263"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-264">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-265">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-266">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-267"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-268">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-269">Escribe el nombre de propiedad y el valor <see cref="T:System.Double" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-270">Escribe el <see cref="T:System.Double" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-271"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-272">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-273">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-274">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-275"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-276">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-277">Escribe el nombre de propiedad y el valor <see cref="T:System.Int32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-278">Escribe el <see cref="T:System.Int32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-279">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-280"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-281">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-282">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-283">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-284"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-285">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-286">Escribe el nombre de propiedad y el valor <see cref="T:System.Int64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-287">Escribe el <see cref="T:System.Int64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-288">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-289"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-290">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-291">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-292">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-293"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-294">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-295">Escribe el nombre de propiedad y el valor <see cref="T:System.Single" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-296">Escribe el <see cref="T:System.Single" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-297"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-298">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-299">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-300">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-301"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-302">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-303">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-304">Escribe el <see cref="T:System.UInt32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-305">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-306"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-307">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-308">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-309">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-310"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-311">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-312">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-313">Escribe el <see cref="T:System.UInt64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-314">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-315"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-316">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-317">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-318">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-319"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-320">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-321">Escribe el nombre de propiedad y el valor <see cref="T:System.Decimal" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-322">Escribe el <see cref="T:System.Decimal" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-323"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-324">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-325">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-326">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-327"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-328">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-329">Escribe el nombre de propiedad y el valor <see cref="T:System.Double" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-330">Escribe el <see cref="T:System.Double" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-331"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-332">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-333">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-334">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-335"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-336">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-337">Escribe el nombre de propiedad y el valor <see cref="T:System.Int32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-338">Escribe el <see cref="T:System.Int32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-339">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-340"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-341">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-342">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-343">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-344"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-345">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-346">Escribe el nombre de propiedad y el valor <see cref="T:System.Int64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-347">Escribe el <see cref="T:System.Int64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-348">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-349"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-350">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-351">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-352">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-353"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-354">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-355">Escribe el nombre de propiedad y el valor <see cref="T:System.Single" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-356">Escribe el <see cref="T:System.Single" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-357"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-358">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-359">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-360">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-361"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-362">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-363">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt32" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-364">Escribe el <see cref="T:System.UInt32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-365">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-366"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-367">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-368">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-369">Valor que se va escribir como un número de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-370"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-371">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-372">Escribe el nombre de propiedad y el valor <see cref="T:System.UInt64" /> (como un número de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-373">Escribe el <see cref="T:System.UInt64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-374">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-375"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-376">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-377">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-378">Escribe el valor <see cref="T:System.Decimal" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-379">Escribe el <see cref="T:System.Decimal" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-380">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-381">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-382">Escribe el valor <see cref="T:System.Double" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-383">Escribe el <see cref="T:System.Double" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-384">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-385">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-386">Escribe el valor <see cref="T:System.Int32" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-387">Escribe el <see cref="T:System.Int32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-388">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-389">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-390">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-391">Escribe el valor <see cref="T:System.Int64" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-392">Escribe el <see cref="T:System.Int64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-393">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-394">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-395">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-396">Escribe el valor <see cref="T:System.Single" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-397">Escribe el <see cref="T:System.Single" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-398">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-399">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-400">Escribe el valor <see cref="T:System.UInt32" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-401">Escribe el <see cref="T:System.UInt32" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-402">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-403">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-404">Valor que se va a escribir como un número de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-405">Escribe el valor <see cref="T:System.UInt64" /> (como un número de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-406">Escribe el <see cref="T:System.UInt64" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, "G").</span><span class="sxs-lookup"><span data-stu-id="98629-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="98629-407">Por ejemplo, 32767.</span><span class="sxs-lookup"><span data-stu-id="98629-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-408">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-409">Escribe el principio de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-410">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-411">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-411">-or-</span></span>

<span data-ttu-id="98629-412">si esto provocaría que se escribiera código de JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-413">Nombre de propiedad con codificación UTF-8 de la matriz JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-414"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-415">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-416">Escribe el principio de una matriz JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-417"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-418">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-419">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-419">-or-</span></span>

<span data-ttu-id="98629-420">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-421">Nombre de propiedad con codificación UTF-16 de la matriz de JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-422"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-423">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-424">Escribe el principio de una matriz JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-425"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-426">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-427">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-427">-or-</span></span>

<span data-ttu-id="98629-428">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-429">Nombre de propiedad con codificación UTF-16 de la matriz de JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-430"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-431">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-432">Escribe el principio de una matriz JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-433"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-434">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-435">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-435">-or-</span></span>

<span data-ttu-id="98629-436">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98629-437">Escribe el principio de un objeto de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-438">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-439">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-439">-or-</span></span>

<span data-ttu-id="98629-440">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-441">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-442"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-443">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-444">Escribe el principio de un objeto JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-445"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-446">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-447">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-447">-or-</span></span>

<span data-ttu-id="98629-448">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-449">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-450"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-451">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-452">Escribe el principio de un objeto JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-453"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-454">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-455">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-455">-or-</span></span>

<span data-ttu-id="98629-456">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-457">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-458"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-459">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-460">Escribe el principio de un objeto JSON con un nombre de propiedad como clave.</span><span class="sxs-lookup"><span data-stu-id="98629-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-461"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-462">La profundidad del código de JSON ha superado la profundidad máxima de 1000.</span><span class="sxs-lookup"><span data-stu-id="98629-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="98629-463">O bien</span><span class="sxs-lookup"><span data-stu-id="98629-463">-or-</span></span>

<span data-ttu-id="98629-464">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-465">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-466">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-467"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-468">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-469">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTime" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-470">Escribe el <see cref="T:System.DateTime" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-471">Por ejemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="98629-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-472"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-473">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-474">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-475">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-476"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-477">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-478">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-479">Escribe el <see cref="T:System.DateTimeOffset" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-480">Por ejemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="98629-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-481"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-482">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-483">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-484">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-485"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-486">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-487">Escribe el nombre de propiedad y el valor <see cref="T:System.Guid" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-488">Escribe el <see cref="T:System.Guid" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, tenía '), como el formulario: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="98629-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-489"><paramref name="utf8PropertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-490">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-491">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="98629-492">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-493">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-494">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-495">Escribe el nombre de propiedad UTF-8 y el valor de texto UTF-8 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-496">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-497">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-498">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-499">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-500">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-501">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-502">Escribe el nombre de propiedad UTF-8 y el valor de texto UTF-16 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-503">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-504">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="98629-505">Nombre de propiedad con codificación UTF-8 del objeto JSON que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="98629-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="98629-506">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-507">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-508">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-509">Escribe el nombre de propiedad UTF-8 y el valor de texto de cadena (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-510">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-511">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-512">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-513">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-514"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-515">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-516">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTime" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-517">Escribe el <see cref="T:System.DateTime" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-518">Por ejemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="98629-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-519"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-520">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-521">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-522">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-523"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-524">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-525">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-526">Escribe el <see cref="T:System.DateTimeOffset" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-527">Por ejemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="98629-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-528"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-529">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-530">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-531">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-532"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-533">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-534">Escribe el nombre de propiedad y el valor <see cref="T:System.Guid" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-535">Escribe el <see cref="T:System.Guid" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, tenía '), como el formulario: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="98629-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-536"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-537">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-538">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="98629-539">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-540">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-541">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-542">Escribe el nombre de propiedad UTF-16 y el valor de texto UTF-8 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-543">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-544">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-545">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-546">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-547">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-548">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-549">Escribe el nombre de propiedad UTF-16 y el valor de texto UTF-16 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-550">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-551">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-552">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-553">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-554">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-555">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-556">Escribe el nombre de propiedad UTF-16 y el valor de texto de cadena (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-557">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-558">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-559">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-560">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-561"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-562">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-563">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTime" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-564">Escribe el <see cref="T:System.DateTime" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-565">Por ejemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="98629-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-566"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-567">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-568">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-569">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-570"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-571">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-572">Escribe el nombre de propiedad y el valor <see cref="T:System.DateTimeOffset" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-573">Escribe el <see cref="T:System.DateTimeOffset" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-574">Por ejemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="98629-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-575"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-576">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-577">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-578">Valor que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-579"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-580">Es un parámetro opcional; su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-581">Escribe el nombre de propiedad y el valor <see cref="T:System.Guid" /> (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="98629-582">Escribe el <see cref="T:System.Guid" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, tenía '), como el formulario: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="98629-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-583"><paramref name="propertyName" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-584">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-585">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="98629-586">Valor con codificación UTF-8 que se va escribir como una cadena de JSON como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-587">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-588">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-589">Escribe el nombre de propiedad y el valor de texto UTF-8 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-590">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-591">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-592">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-593">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-594">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-595">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-596">Escribe el nombre de propiedad y el valor de texto UTF-16 (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-597">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-598">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="98629-599">Nombre de propiedad con codificación UTF-16 del objeto JSON que se va a transcodificar y escribir como UTF-8.</span><span class="sxs-lookup"><span data-stu-id="98629-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="98629-600">Valor con codificación UTF-16 que se va escribir como una cadena de JSON transcodificada a UTF-8 como parte del par nombre-valor.</span><span class="sxs-lookup"><span data-stu-id="98629-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-601">Si se establece en "false", el sistema de escritura asume que el nombre de propiedad tiene la secuencia de escape correcta y omite el paso de escape.</span><span class="sxs-lookup"><span data-stu-id="98629-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="98629-602">El valor siempre tiene escape</span><span class="sxs-lookup"><span data-stu-id="98629-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="98629-603">Escribe el nombre de propiedad y el valor de texto de cadena (como una cadena de JSON) como parte de un par nombre-valor de un objeto JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-604">Se inicia cuando el valor o el nombre de propiedad especificado es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-605">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-606">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-607">Escribe el valor <see cref="T:System.DateTime" /> (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-608">Escribe el <see cref="T:System.DateTime" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="98629-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="98629-609">Por ejemplo, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="98629-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-610">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-611">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-612">Escribe el valor <see cref="T:System.DateTimeOffset" /> (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-613">Escribe el <see cref="T:System.DateTimeOffset" /> utilizando la ida y vuelta (' o ') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="98629-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="98629-614">Por ejemplo, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="98629-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-615">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-616">Valor que se va a escribir como una cadena de JSON como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="98629-617">Escribe el valor <see cref="T:System.Guid" /> (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="98629-618">Escribe el <see cref="T:System.Guid" /> con el valor predeterminado <see cref="T:System.Buffers.StandardFormat" /> (es decir, tenía '), como el formulario: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="98629-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-619">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="98629-620">El valor con codificación UTF-8 que se va a escribir como un elemento de cadena de JSON de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-621"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-622">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-623">Escribe el valor de texto UTF-8 (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-624"><paramref name="utf8Value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-625">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-626">Valor con codificación UTF-16 que se va a escribir como un elemento de cadena de JSON transcodificado a UTF-8 de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-627"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-628">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-629">Escribe el valor de texto UTF-16 (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-630"><paramref name="value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-631">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="98629-632">Valor con codificación UTF-16 que se va a escribir como un elemento de cadena de JSON transcodificado a UTF-8 de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="98629-633"><see langword="false" /> para indicar que el sistema de escritura debe asumir que el nombre de propiedad tiene la secuencia de escape correcta y omitir el paso de escape; de lo contrario, es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="98629-634">Es un parámetro opcional y su valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="98629-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="98629-635">Escribe el valor de texto de cadena (como una cadena de JSON) como un elemento de una matriz de JSON.</span><span class="sxs-lookup"><span data-stu-id="98629-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98629-636"><paramref name="value" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="98629-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98629-637">Los datos JSON que se van a escribir serían de un tipo JSON no válido (mientras está habilitada la validación).</span><span class="sxs-lookup"><span data-stu-id="98629-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
