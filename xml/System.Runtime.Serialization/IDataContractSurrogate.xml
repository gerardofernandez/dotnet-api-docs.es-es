<Type Name="IDataContractSurrogate" FullName="System.Runtime.Serialization.IDataContractSurrogate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="675d79cac00115c0afd97e8b2f4da4d6f32a10d4" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51927635" /></Metadata><TypeSignature Language="C#" Value="public interface IDataContractSurrogate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataContractSurrogate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IDataContractSurrogate" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataContractSurrogate" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataContractSurrogate" />
  <TypeSignature Language="F#" Value="type IDataContractSurrogate = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="64910-101">Proporciona los métodos necesarios para sustituir un tipo por otro mediante <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> durante la serialización, la deserialización y la exportación e importación de documentos de esquema XML (XSD).</span><span class="sxs-lookup"><span data-stu-id="64910-101">Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> during serialization, deserialization, and export and import of XML schema documents (XSD).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-102">Use <xref:System.Runtime.Serialization.IDataContractSurrogate> al usar <xref:System.Runtime.Serialization.DataContractSerializer> si necesita realizar una de las siguientes acciones: sustituir un tipo u objeto por otro o generar dinámicamente variaciones de esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-102">Use the <xref:System.Runtime.Serialization.IDataContractSurrogate> when using the <xref:System.Runtime.Serialization.DataContractSerializer> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations.</span></span> <span data-ttu-id="64910-103">Para una aplicación de ejemplo, vea [suplente de DataContract](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span><span class="sxs-lookup"><span data-stu-id="64910-103">For a sample application, see [DataContract Surrogate](~/docs/framework/wcf/samples/datacontract-surrogate.md).</span></span> <span data-ttu-id="64910-104">Para obtener más información acerca de los contratos de datos, vea [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="64910-104">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="64910-105">En tiempo de ejecución, puede buscar el <xref:System.Runtime.Serialization.DataContractSerializer> específico para cualquier operación en un servicio con <xref:System.ServiceModel.Description.OperationDescription> para buscar la instancia <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>.</span><span class="sxs-lookup"><span data-stu-id="64910-105">At run time, you can find the specific <xref:System.Runtime.Serialization.DataContractSerializer> for any operation in a service by using the <xref:System.ServiceModel.Description.OperationDescription> to find the <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> instance.</span></span> <span data-ttu-id="64910-106">Para obtener más información acerca de cómo implementar la interfaz para crear un suplente, consulte [suplentes de contratos de datos](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span><span class="sxs-lookup"><span data-stu-id="64910-106">For more information about implementing the interface to create a surrogate, see [Data Contract Surrogates](~/docs/framework/wcf/extending/data-contract-surrogates.md).</span></span>  
  
 <span data-ttu-id="64910-107">También puede usar <xref:System.Runtime.Serialization.IDataContractSurrogate> para afectar a la importación y exportación de esquemas XML al usar las clases <xref:System.Runtime.Serialization.XsdDataContractExporter> y <xref:System.Runtime.Serialization.XsdDataContractImporter>.</span><span class="sxs-lookup"><span data-stu-id="64910-107">You can also use the <xref:System.Runtime.Serialization.IDataContractSurrogate> to affect the import and export of XML schemas when you are using the <xref:System.Runtime.Serialization.XsdDataContractExporter> and <xref:System.Runtime.Serialization.XsdDataContractImporter> classes.</span></span> <span data-ttu-id="64910-108">Para ello, asigne <xref:System.Runtime.Serialization.IDataContractSurrogate> a la propiedad <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ExportOptions> o a la propiedad <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> de la clase <xref:System.Runtime.Serialization.ImportOptions>.</span><span class="sxs-lookup"><span data-stu-id="64910-108">You can do so by assigning the <xref:System.Runtime.Serialization.IDataContractSurrogate> to the <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ExportOptions> class, or to the <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> property of the <xref:System.Runtime.Serialization.ImportOptions> class.</span></span>  <span data-ttu-id="64910-109">Para obtener más información, consulte [esquema de importación y exportación](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span><span class="sxs-lookup"><span data-stu-id="64910-109">For more information, see [Schema Import and Export](~/docs/framework/wcf/feature-details/schema-import-and-export.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64910-110">En el siguiente ejemplo se muestra una implementación de la interfaz <xref:System.Runtime.Serialization.IDataContractSurrogate>.</span><span class="sxs-lookup"><span data-stu-id="64910-110">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate> interface.</span></span> <span data-ttu-id="64910-111">El código sustituye la serialización del tipo `Person` para una clase `PersonSurrogated`.</span><span class="sxs-lookup"><span data-stu-id="64910-111">The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#0](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#0)]
 [!code-vb[IDataContractSurrogate#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
    <related type="Article" href="https://msdn.microsoft.com/library/b0188f3c-00a9-4cf0-a887-a2284c8fb014"><span data-ttu-id="64910-112">Ejemplo de suplente de DataContract</span><span class="sxs-lookup"><span data-stu-id="64910-112">DataContract Surrogate Sample</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/8c31134c-46c5-4ed7-94af-bab0ac0dfce5"><span data-ttu-id="64910-113">Suplentes de contratos de datos</span><span class="sxs-lookup"><span data-stu-id="64910-113">Data Contract Surrogates</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="64910-114">Utilización de contratos de datos</span><span class="sxs-lookup"><span data-stu-id="64910-114">Using Data Contracts</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCustomDataToExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="64910-115">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span><span class="sxs-lookup"><span data-stu-id="64910-115">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Reflection.MemberInfo memberInfo, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(System::Reflection::MemberInfo ^ memberInfo, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : System.Reflection.MemberInfo * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (memberInfo, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="memberInfo"><span data-ttu-id="64910-116"><see cref="T:System.Reflection.MemberInfo" /> que describe el miembro.</span><span class="sxs-lookup"><span data-stu-id="64910-116">A <see cref="T:System.Reflection.MemberInfo" /> that describes the member.</span></span></param>
        <param name="dataContractType"><span data-ttu-id="64910-117">Objeto <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="64910-117">A <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="64910-118">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span><span class="sxs-lookup"><span data-stu-id="64910-118">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
        <returns><span data-ttu-id="64910-119">Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</span><span class="sxs-lookup"><span data-stu-id="64910-119">An object that represents the annotation to be inserted into the XML schema definition.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDataToExport">
      <MemberSignature Language="C#" Value="public object GetCustomDataToExport (Type clrType, Type dataContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetCustomDataToExport(class System.Type clrType, class System.Type dataContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomDataToExport (clrType As Type, dataContractType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetCustomDataToExport(Type ^ clrType, Type ^ dataContractType);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomDataToExport : Type * Type -&gt; obj" Usage="iDataContractSurrogate.GetCustomDataToExport (clrType, dataContractType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clrType" Type="System.Type" />
        <Parameter Name="dataContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clrType"><span data-ttu-id="64910-120">El tipo de CLR que se va a reemplazar.</span><span class="sxs-lookup"><span data-stu-id="64910-120">The CLR type to be replaced.</span></span></param>
        <param name="dataContractType"><span data-ttu-id="64910-121">El tipo de contrato de datos que se va a anotar.</span><span class="sxs-lookup"><span data-stu-id="64910-121">The data contract type to be annotated.</span></span></param>
        <summary><span data-ttu-id="64910-122">Durante las operaciones de exportación de esquema, inserta anotaciones en el esquema para los valores devueltos no nulos.</span><span class="sxs-lookup"><span data-stu-id="64910-122">During schema export operations, inserts annotations into the schema for non-null return values.</span></span></summary>
        <returns><span data-ttu-id="64910-123">Un objeto que representa la anotación que se va a insertar en la definición del esquema XML.</span><span class="sxs-lookup"><span data-stu-id="64910-123">An object that represents the annotation to be inserted into the XML schema definition.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataContractType">
      <MemberSignature Language="C#" Value="public Type GetDataContractType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDataContractType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDataContractType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetDataContractType : Type -&gt; Type" Usage="iDataContractSurrogate.GetDataContractType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="64910-124">El tipo de CLR <see cref="T:System.Type" /> que se va a sustituir.</span><span class="sxs-lookup"><span data-stu-id="64910-124">The CLR type <see cref="T:System.Type" /> to substitute.</span></span></param>
        <summary><span data-ttu-id="64910-125">Durante la serialización, la deserialización y la importación e importación del esquema, devuelve un tipo de contrato de datos que sustituye el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="64910-125">During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</span></span></summary>
        <returns><span data-ttu-id="64910-126"><see cref="T:System.Type" /> que se va a sustituir por el valor <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="64910-126">The <see cref="T:System.Type" /> to substitute for the <paramref name="type" /> value.</span></span> <span data-ttu-id="64910-127"><see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este tipo.</span><span class="sxs-lookup"><span data-stu-id="64910-127">This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="64910-128">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span><span class="sxs-lookup"><span data-stu-id="64910-128">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="64910-129">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A>.</span><span class="sxs-lookup"><span data-stu-id="64910-129">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#1](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#1)]
 [!code-vb[IDataContractSurrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeserializedObject">
      <MemberSignature Language="C#" Value="public object GetDeserializedObject (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetDeserializedObject(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeserializedObject (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDeserializedObject(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetDeserializedObject : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetDeserializedObject (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="64910-130">El objeto deserializado que se va a sustituir.</span><span class="sxs-lookup"><span data-stu-id="64910-130">The deserialized object to be substituted.</span></span></param>
        <param name="targetType"><span data-ttu-id="64910-131"><see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</span><span class="sxs-lookup"><span data-stu-id="64910-131">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span></span></param>
        <summary><span data-ttu-id="64910-132">Durante la deserialización, devuelve un objeto que es un suplente del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="64910-132">During deserialization, returns an object that is a substitute for the specified object.</span></span></summary>
        <returns><span data-ttu-id="64910-133">El objeto deserializado sustituido.</span><span class="sxs-lookup"><span data-stu-id="64910-133">The substituted deserialized object.</span></span> <span data-ttu-id="64910-134">Este objeto debe ser de un tipo que <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> pueda serializar.</span><span class="sxs-lookup"><span data-stu-id="64910-134">This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="64910-135">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span><span class="sxs-lookup"><span data-stu-id="64910-135">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-136">En una implementación simple, use una estructura de control if...then...else para probar si el valor `obj` es del tipo suplente.</span><span class="sxs-lookup"><span data-stu-id="64910-136">In a simple implementation, use an if…then…else control structure to test whether the `obj` value is of the surrogated type.</span></span> <span data-ttu-id="64910-137">En ese caso, transfórmelo como corresponda y devuelva el objeto sustituido.</span><span class="sxs-lookup"><span data-stu-id="64910-137">If so, transform it as necessary and return the substituted object.</span></span> <span data-ttu-id="64910-138">El objeto sustituido puede ser una nueva instancia o la misma instancia `obj`.</span><span class="sxs-lookup"><span data-stu-id="64910-138">The substituted object can be a new instance or the same `obj` instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64910-139">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="64910-139">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#3](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#3)]
 [!code-vb[IDataContractSurrogate#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownCustomDataTypes">
      <MemberSignature Language="C#" Value="public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetKnownCustomDataTypes(class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; customDataTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetKnownCustomDataTypes (customDataTypes As Collection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetKnownCustomDataTypes(System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ customDataTypes);" />
      <MemberSignature Language="F#" Value="abstract member GetKnownCustomDataTypes : System.Collections.ObjectModel.Collection&lt;Type&gt; -&gt; unit" Usage="iDataContractSurrogate.GetKnownCustomDataTypes customDataTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customDataTypes" Type="System.Collections.ObjectModel.Collection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="customDataTypes"><span data-ttu-id="64910-140"><see cref="T:System.Collections.ObjectModel.Collection`1" /> de <see cref="T:System.Type" /> al que se agregarán los tipos conocidos.</span><span class="sxs-lookup"><span data-stu-id="64910-140">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of <see cref="T:System.Type" /> to add known types to.</span></span></param>
        <summary><span data-ttu-id="64910-141">Establece la colección de tipos conocidos para usar con la serialización y deserialización de objetos de datos personalizados.</span><span class="sxs-lookup"><span data-stu-id="64910-141">Sets the collection of known types to use for serialization and deserialization of the custom data objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-142">Este método sólo es necesario durante la exportación o importación del esquema si las anotaciones se insertan en el esquema con el método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>.</span><span class="sxs-lookup"><span data-stu-id="64910-142">This method is required during schema export or schema import only if annotations are inserted into the schema using the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectToSerialize">
      <MemberSignature Language="C#" Value="public object GetObjectToSerialize (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObjectToSerialize(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectToSerialize (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectToSerialize(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectToSerialize : obj * Type -&gt; obj" Usage="iDataContractSurrogate.GetObjectToSerialize (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="64910-143">El objeto que se va a sustituir.</span><span class="sxs-lookup"><span data-stu-id="64910-143">The object to substitute.</span></span></param>
        <param name="targetType"><span data-ttu-id="64910-144"><see cref="T:System.Type" /> al que el objeto sustituido deberá estar asignado.</span><span class="sxs-lookup"><span data-stu-id="64910-144">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</span></span></param>
        <summary><span data-ttu-id="64910-145">Durante la serialización, devuelve un objeto que sustituye el objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="64910-145">During serialization, returns an object that substitutes the specified object.</span></span></summary>
        <returns><span data-ttu-id="64910-146">El objeto sustituido que se serializará.</span><span class="sxs-lookup"><span data-stu-id="64910-146">The substituted object that will be serialized.</span></span> <span data-ttu-id="64910-147"><see cref="T:System.Runtime.Serialization.DataContractSerializer" /> debe poder serializar este objeto.</span><span class="sxs-lookup"><span data-stu-id="64910-147">The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="64910-148">Por ejemplo, se debe marcar con el atributo <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> u otros mecanismos que el serializador reconoce.</span><span class="sxs-lookup"><span data-stu-id="64910-148">For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-149">Este método no debe devolver `null` porque durante la deserialización, los datos se convertirá al tipo <xref:System.Object> y un <xref:System.InvalidCastException> se produce.</span><span class="sxs-lookup"><span data-stu-id="64910-149">This method must not return `null` because on deserialization the data will be cast to type <xref:System.Object> and an <xref:System.InvalidCastException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64910-150">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A>.</span><span class="sxs-lookup"><span data-stu-id="64910-150">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#2](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#2)]
 [!code-vb[IDataContractSurrogate#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedTypeOnImport">
      <MemberSignature Language="C#" Value="public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReferencedTypeOnImport(string typeName, string typeNamespace, object customData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReferencedTypeOnImport (typeName As String, typeNamespace As String, customData As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReferencedTypeOnImport(System::String ^ typeName, System::String ^ typeNamespace, System::Object ^ customData);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedTypeOnImport : string * string * obj -&gt; Type" Usage="iDataContractSurrogate.GetReferencedTypeOnImport (typeName, typeNamespace, customData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeNamespace" Type="System.String" />
        <Parameter Name="customData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="64910-151">El nombre del tipo en esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-151">The name of the type in schema.</span></span></param>
        <param name="typeNamespace"><span data-ttu-id="64910-152">El espacio de nombres del tipo en esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-152">The namespace of the type in schema.</span></span></param>
        <param name="customData"><span data-ttu-id="64910-153">El objeto que representa la anotación insertada en la definición del esquema XML, que son datos que se pueden usar para buscar el tipo al que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="64910-153">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</span></span></param>
        <summary><span data-ttu-id="64910-154">Durante la importación del esquema, devuelve el tipo al que hace referencia el esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-154">During schema import, returns the type referenced by the schema.</span></span></summary>
        <returns><span data-ttu-id="64910-155"><see cref="T:System.Type" /> que se va a usar para el tipo al que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="64910-155">The <see cref="T:System.Type" /> to use for the referenced type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-156">Se deberá devolver `Null` si no existe un tipo de CLR para representar el tipo de esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-156">`Null` should be returned if a CLR type does not exist for representing the schema type.</span></span> <span data-ttu-id="64910-157">Esto producirá un nuevo tipo que se generará durante la importación del esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-157">This will cause a new type to be generated during schema import.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64910-158">En el siguiente ejemplo se muestra una implementación del método <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A>.</span><span class="sxs-lookup"><span data-stu-id="64910-158">The following example shows an implementation of the <xref:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport%2A> method.</span></span>  
  
 [!code-csharp[IDataContractSurrogate#4](~/samples/snippets/csharp/VS_Snippets_CFX/idatacontractsurrogate/cs/source.cs#4)]
 [!code-vb[IDataContractSurrogate#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/idatacontractsurrogate/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessImportedType">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration ProcessImportedType(class System.CodeDom.CodeTypeDeclaration typeDeclaration, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessImportedType (typeDeclaration As CodeTypeDeclaration, compileUnit As CodeCompileUnit) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeDeclaration ^ ProcessImportedType(System::CodeDom::CodeTypeDeclaration ^ typeDeclaration, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="abstract member ProcessImportedType : System.CodeDom.CodeTypeDeclaration * System.CodeDom.CodeCompileUnit -&gt; System.CodeDom.CodeTypeDeclaration" Usage="iDataContractSurrogate.ProcessImportedType (typeDeclaration, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDeclaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="typeDeclaration"><span data-ttu-id="64910-159"><see cref="T:System.CodeDom.CodeTypeDeclaration" /> para procesar que representa la declaración de tipos generada durante la importación del esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-159">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to process that represents the type declaration generated during schema import.</span></span></param>
        <param name="compileUnit"><span data-ttu-id="64910-160"><see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene el otro código generado durante la importación del esquema.</span><span class="sxs-lookup"><span data-stu-id="64910-160">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains the other code generated during schema import.</span></span></param>
        <summary><span data-ttu-id="64910-161">Procesa el tipo generado a partir del esquema importado.</span><span class="sxs-lookup"><span data-stu-id="64910-161">Processes the type that has been generated from the imported schema.</span></span></summary>
        <returns><span data-ttu-id="64910-162"><see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contiene el tipo procesado.</span><span class="sxs-lookup"><span data-stu-id="64910-162">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that contains the processed type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64910-163">En este método, el usuario puede modificar la entrada <xref:System.CodeDom.CodeTypeDeclaration> u otra información en <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="64910-163">The input <xref:System.CodeDom.CodeTypeDeclaration> or other information in the <xref:System.CodeDom.CodeCompileUnit> can be modified by the user in this method.</span></span> <span data-ttu-id="64910-164">Si se devuelve `null`, no se generará el tipo.</span><span class="sxs-lookup"><span data-stu-id="64910-164">If `null` is returned, it will cause the type to not be generated.</span></span> <span data-ttu-id="64910-165">Si se devuelve un nuevo <xref:System.CodeDom.CodeTypeDeclaration>, éste sustituirá el tipo original generado.</span><span class="sxs-lookup"><span data-stu-id="64910-165">If a new <xref:System.CodeDom.CodeTypeDeclaration> is returned, it will replace the original type generated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>