<Type Name="ConflictOptions" FullName="System.Web.UI.ConflictOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5858112fb87350d31cb6e005cc12a65b7e51d560" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64016148" /></Metadata><TypeSignature Language="C#" Value="public enum ConflictOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConflictOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ConflictOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConflictOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConflictOptions" />
  <TypeSignature Language="F#" Value="type ConflictOptions = " />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="ec20b-101">Determina el modo en que los controles de origen de datos de ASP.NET deben controlar los conflictos de datos al actualizar o eliminar datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-101">Determines how ASP.NET data source controls handle data conflicts when updating or deleting data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec20b-102">Control de simultaneidad es una técnica que los almacenes de datos se utilizan para controlar cómo se lee y cuando varios clientes obtienen acceso y manipular los mismos datos puede cambiar en el almacén de datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-102">Concurrency control is a technique that data stores use to control how data is read and changed in the store when multiple clients are accessing and manipulating the same data.</span></span> <span data-ttu-id="ec20b-103">Por ejemplo, un cliente lee los datos y presentarlo a un usuario, mientras que otro cliente lee los mismos datos y los presenta a un usuario diferente.</span><span class="sxs-lookup"><span data-stu-id="ec20b-103">For example, one client reads data and presents it to a user, while another client reads the same data, and presents it to a different user.</span></span> <span data-ttu-id="ec20b-104">Si ambos usuarios actualizarán los datos y envían al almacenamiento de datos, podría producirse algún resultado inesperado, porque los clientes podrían actualizar distintos valores para los mismos datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-104">If both users update the data and submit it to the data storage, some unexpected result might occur, because the clients might update different values for the same data.</span></span> <span data-ttu-id="ec20b-105">Esto se considera un conflicto.</span><span class="sxs-lookup"><span data-stu-id="ec20b-105">This is considered a conflict.</span></span>  
  
 <span data-ttu-id="ec20b-106">El `ConflictDetection` propiedad que se define para los controles de origen de datos ASP.NET se utiliza para determinar cómo deben controlarse los conflictos de datos en el almacenamiento de datos subyacente al almacenamiento de datos subyacente utiliza simultaneidad optimista y una eliminación o una operación de actualización es puede realizar.</span><span class="sxs-lookup"><span data-stu-id="ec20b-106">The `ConflictDetection` property that is defined for ASP.NET data source controls is used to determine how a control handles data conflicts in the underlying data storage when the underlying data storage is using optimistic concurrency and a delete or update operation is performed.</span></span>  
  
 <span data-ttu-id="ec20b-107">De forma predeterminada, el `ConflictDetection` propiedad está establecida en OverwriteChanges, lo que significa que el control de origen de datos sobrescribirá los cambios realizados en una fila de datos entre el momento en que el control de origen de datos en primer lugar lee datos de la fila y el tiempo que se actualiza la fila.</span><span class="sxs-lookup"><span data-stu-id="ec20b-107">By default, the `ConflictDetection` property is set to OverwriteChanges, which means the data source control will overwrite any changes made to a data row between the time the data source control first read data from the row and the time that the row is updated.</span></span> <span data-ttu-id="ec20b-108">La clave principal se utiliza para buscar la fila de datos que se actualiza o elimina, pero no se realiza ninguna otra comparación de los datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-108">The primary key is used for locating the data row that will be updated or deleted, but no other comparison of the data is performed.</span></span> <span data-ttu-id="ec20b-109">Si el control de origen de datos está configurado para usar la opción CompareAllValues, sin embargo, el control transfiere los datos originales en el `oldValues` colecciones de la `Update` y `Delete` métodos para que pueda escribir la lógica para actualizar o eliminar datos solo si Estos valores coinciden con los valores actualmente en el almacenamiento de datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-109">If the data source control is configured to use the CompareAllValues option, however, the control passes the original data in the `oldValues` collections of the `Update` and `Delete` methods so that you can write logic to update or delete data only if these values match the values currently in the data storage.</span></span> <span data-ttu-id="ec20b-110">Los valores coincidentes indican que los datos no han cambiado desde el momento en que se leyó.</span><span class="sxs-lookup"><span data-stu-id="ec20b-110">The matching values indicate that the data has not changed since the time it was read.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
  </Docs>
  <Members>
    <Member MemberName="CompareAllValues">
      <MemberSignature Language="C#" Value="CompareAllValues" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions CompareAllValues = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.CompareAllValues" />
      <MemberSignature Language="VB.NET" Value="CompareAllValues" />
      <MemberSignature Language="C++ CLI" Value="CompareAllValues" />
      <MemberSignature Language="F#" Value="CompareAllValues = 1" Usage="System.Web.UI.ConflictOptions.CompareAllValues" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="ec20b-111">Un control de origen de datos utiliza la colección <paramref name="oldValues" /> de los métodos <see langword="Update" /> y <see langword="Delete" /> para determinar si otro proceso ha modificado los datos.</span><span class="sxs-lookup"><span data-stu-id="ec20b-111">A data source control uses the <paramref name="oldValues" /> collection of the <see langword="Update" /> and <see langword="Delete" /> methods to determine whether the data has been changed by another process.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OverwriteChanges">
      <MemberSignature Language="C#" Value="OverwriteChanges" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions OverwriteChanges = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.OverwriteChanges" />
      <MemberSignature Language="VB.NET" Value="OverwriteChanges" />
      <MemberSignature Language="C++ CLI" Value="OverwriteChanges" />
      <MemberSignature Language="F#" Value="OverwriteChanges = 0" Usage="System.Web.UI.ConflictOptions.OverwriteChanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="ec20b-112">Un control de origen de datos sobrescribe todos los valores de una fila de datos por los suyos propios.</span><span class="sxs-lookup"><span data-stu-id="ec20b-112">A data source control overwrites all values in a data row with its own values for the row.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>