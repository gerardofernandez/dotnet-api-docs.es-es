<Type Name="MarkupProperty" FullName="System.Windows.Markup.Primitives.MarkupProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cec9e4b44f9d6119d8e215019c75697d3421462b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37560306" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.Primitives.MarkupProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupProperty abstract" />
  <TypeSignature Language="F#" Value="type MarkupProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="399d7-101">Clase abstracta que proporciona una descripción de propiedad que se utiliza para escribir en el marcado que encapsula el acceso a las propiedades y sus valores.</span><span class="sxs-lookup"><span data-stu-id="399d7-101">Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-102">Una propiedad se representa como una cadena o una lista de elementos.</span><span class="sxs-lookup"><span data-stu-id="399d7-102">A property is either represented as a string or a list of items.</span></span>  
  
 <span data-ttu-id="399d7-103">Si la propiedad se puede representar como una cadena, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-103">If the property can be represented as a string, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`.</span></span>  
  
 <span data-ttu-id="399d7-104">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `true`, la propiedad es una lista de elementos.</span><span class="sxs-lookup"><span data-stu-id="399d7-104">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is a list of items.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.ComponentModel.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As AttributeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::ComponentModel::AttributeCollection ^ Attributes { System::ComponentModel::AttributeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.ComponentModel.AttributeCollection" Usage="System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-105">Cuando se invalida en una clase derivada, obtiene los atributos asociados a esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-105">When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="399d7-106">Colección de atributos.</span><span class="sxs-lookup"><span data-stu-id="399d7-106">The collection of attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-107">Cuando se reemplaza en una clase derivada, obtiene el identificador de <see cref="T:System.Windows.DependencyProperty" /> para la propiedad de marcado si la propiedad se implementa como propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="399d7-107">When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" /> identifier for the markup property if the property is implemented as a dependency property</span></span></summary>
        <value><span data-ttu-id="399d7-108">Identificador de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="399d7-108">The dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-109">Devuelve el comportamiento predeterminado `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-109">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttached">
      <MemberSignature Language="C#" Value="public virtual bool IsAttached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAttached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAttached { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttached : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-110">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una <see cref="T:System.Windows.DependencyProperty" /> adjunta.</span><span class="sxs-lookup"><span data-stu-id="399d7-110">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is an attached <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <value><span data-ttu-id="399d7-111"><see langword="true" /> si la propiedad es una <see cref="T:System.Windows.DependencyProperty" /> adjunta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-111"><see langword="true" /> if the property is an attached <see cref="T:System.Windows.DependencyProperty" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-112">El comportamiento predeterminado es devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-112">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="399d7-113">Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> no `null` y <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> puede ser `null`, pero no es necesario.</span><span class="sxs-lookup"><span data-stu-id="399d7-113">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> is not `null` and <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> can be `null`, but is not required to be.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposite">
      <MemberSignature Language="C#" Value="public virtual bool IsComposite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsComposite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsComposite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsComposite : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-114">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una propiedad compuesta.</span><span class="sxs-lookup"><span data-stu-id="399d7-114">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> is a composite property.</span></span></summary>
        <value><span data-ttu-id="399d7-115"><see langword="true" /> si esta propiedad es una propiedad compuesta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-115"><see langword="true" /> is this property is a composite property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-116">El comportamiento predeterminado es devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-116">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="399d7-117">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `false`, la propiedad se puede representar como una cadena y <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> son válidas para usar.</span><span class="sxs-lookup"><span data-stu-id="399d7-117">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `false`, the property can be represented as a string and <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> are valid to use.</span></span>  
  
 <span data-ttu-id="399d7-118">Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `true`, la propiedad es uno o varios elementos y <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> es válido utilizar.</span><span class="sxs-lookup"><span data-stu-id="399d7-118">If <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> is `true`, the property is one or more items and <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> is valid to use.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructorArgument">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructorArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructorArgument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructorArgument As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructorArgument { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructorArgument : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-119">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa un argumento de constructor.</span><span class="sxs-lookup"><span data-stu-id="399d7-119">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a constructor argument.</span></span></summary>
        <value><span data-ttu-id="399d7-120">Es <see langword="true" /> si esta propiedad representa un argumento de constructor; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-120"><see langword="true" /> if this property represents a constructor argument; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-121">El comportamiento predeterminado es devuelto `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-121">The default behavior is return `false`.</span></span>  
  
 <span data-ttu-id="399d7-122">Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-122">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="399d7-123">Solo se usa XAML <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> para representar los argumentos de constructor de instancias de <xref:System.Windows.Markup.MarkupExtension>.</span><span class="sxs-lookup"><span data-stu-id="399d7-123">XAML only uses <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> for representing the constructor arguments of instances of <xref:System.Windows.Markup.MarkupExtension>.</span></span> <span data-ttu-id="399d7-124">Consulte [extensiones de marcado y XAML de WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="399d7-124">See [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContent">
      <MemberSignature Language="C#" Value="public virtual bool IsContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContent : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-125">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el contenido directo de una colección.</span><span class="sxs-lookup"><span data-stu-id="399d7-125">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents direct content of a collection.</span></span></summary>
        <value><span data-ttu-id="399d7-126"><see langword="true" /> si la propiedad representa el contenido directo; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-126"><see langword="true" /> if the property represents direct content; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-127">El comportamiento predeterminado es devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-127">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="399d7-128">Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-128">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="399d7-129">Los diccionarios se incluyen al determinar si esto <xref:System.Windows.Markup.Primitives.MarkupProperty> representa el contenido directo.</span><span class="sxs-lookup"><span data-stu-id="399d7-129">Dictionaries are included when determining whether this <xref:System.Windows.Markup.Primitives.MarkupProperty> represents direct content.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual bool IsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKey : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-130">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa la clave utilizada por <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> para almacenar el elemento en un diccionario.</span><span class="sxs-lookup"><span data-stu-id="399d7-130">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> to store the item in a dictionary.</span></span></summary>
        <value><span data-ttu-id="399d7-131"><see langword="true" /> si esta propiedad representa una clave; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-131"><see langword="true" /> if this property represents a key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-132">El comportamiento predeterminado es devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="399d7-132">The default behavior is to return `false`.</span></span>  
  
 <span data-ttu-id="399d7-133">Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-133">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are `null`.</span></span>  
  
 <span data-ttu-id="399d7-134">XAML usará la propiedad identificada como una `x:Key` atributo.</span><span class="sxs-lookup"><span data-stu-id="399d7-134">XAML will use the identified property as an `x:Key` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueAsString">
      <MemberSignature Language="C#" Value="public virtual bool IsValueAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueAsString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValueAsString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValueAsString { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueAsString : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-135">Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el texto que se pasa a un convertidor de tipos para crear una instancia de la propiedad o si se debe utilizar un constructor.</span><span class="sxs-lookup"><span data-stu-id="399d7-135">When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</span></span></summary>
        <value><span data-ttu-id="399d7-136"><see langword="true" />, si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa una cadena; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-136"><see langword="true" />, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> represents a string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-137">El comportamiento predeterminado es devolver `false.`</span><span class="sxs-lookup"><span data-stu-id="399d7-137">The default behavior is to return `false.`</span></span>  
  
 <span data-ttu-id="399d7-138">Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-138">When <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> are both `null`.</span></span>  
  
 <span data-ttu-id="399d7-139">Si la propiedad se proporciona a través de <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> es `true`, será la única propiedad que proporcionará el tipo.</span><span class="sxs-lookup"><span data-stu-id="399d7-139">If the property is provided through <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> and <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> is `true`, it will be the only property the type will provide.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Markup.Primitives.MarkupObject&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Items As IEnumerable(Of MarkupObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ Items { System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : seq&lt;System.Windows.Markup.Primitives.MarkupObject&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-140">Cuando se invalida en una clase derivada, obtiene el elemento que constituye el valor de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="399d7-140">When overridden in a derived class, gets the items that make up the value of this property.</span></span></summary>
        <value><span data-ttu-id="399d7-141">Los elementos que forman el valor de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="399d7-141">The items that make up the value of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-142">Si la propiedad no es una enumeración, se devolverá un único elemento.</span><span class="sxs-lookup"><span data-stu-id="399d7-142">If the property is not an enumeration, only one item will be returned.</span></span>  
  
 <span data-ttu-id="399d7-143">Si la propiedad es una enumeración o enumerable, se devolverán todos los elementos.</span><span class="sxs-lookup"><span data-stu-id="399d7-143">If the property is an enumeration, or enumerable, all the items will be returned.</span></span>  
  
 <span data-ttu-id="399d7-144">Siempre se devuelve al menos un elemento, ya que <xref:System.Windows.Markup.Primitives.MarkupObject> no creará un <xref:System.Windows.Markup.Primitives.MarkupProperty> para las propiedades sin elementos.</span><span class="sxs-lookup"><span data-stu-id="399d7-144">At least one item is always returned, because <xref:System.Windows.Markup.Primitives.MarkupObject> will not create a <xref:System.Windows.Markup.Primitives.MarkupProperty> for properties with no items.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-145">Cuando se invalida en una clase derivada, obtiene un nombre que se utiliza para diagnósticos e informes de errores.</span><span class="sxs-lookup"><span data-stu-id="399d7-145">When overridden in a derived class, gets a name that is used for diagnostics and error reporting.</span></span></summary>
        <value><span data-ttu-id="399d7-146">Nombre de la propiedad del identificador.</span><span class="sxs-lookup"><span data-stu-id="399d7-146">The identifier property name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-147">Este valor no debe utilizar un serializador.</span><span class="sxs-lookup"><span data-stu-id="399d7-147">A serializer should not use this value.</span></span> <span data-ttu-id="399d7-148">Debe usar el <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> o <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="399d7-148">It should use the <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> and/or <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyDescriptor As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::PropertyDescriptor ^ PropertyDescriptor { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyDescriptor : System.ComponentModel.PropertyDescriptor" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-149">Cuando se invalida en una clase derivada, obtiene <see cref="T:System.ComponentModel.PropertyDescriptor" /> para la propiedad de marcado.</span><span class="sxs-lookup"><span data-stu-id="399d7-149">When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the markup property.</span></span></summary>
        <value><span data-ttu-id="399d7-150">El descriptor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="399d7-150">The property descriptor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-151">Devuelve el comportamiento predeterminado `null`.</span><span class="sxs-lookup"><span data-stu-id="399d7-151">The default behavior returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-152">Cuando se reemplaza en una clase derivada, obtiene el tipo CLR de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="399d7-152">When overridden in a derived class, gets the CLR type of the property.</span></span></summary>
        <value><span data-ttu-id="399d7-153">Tipo CLR.</span><span class="sxs-lookup"><span data-stu-id="399d7-153">The CLR type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringValue">
      <MemberSignature Language="C#" Value="public abstract string StringValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StringValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StringValue { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringValue : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-154">Cuando se invalida en una clase derivada, obtiene el valor de cadena de esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-154">When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="399d7-155">Valor de cadena.</span><span class="sxs-lookup"><span data-stu-id="399d7-155">The string value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TypeReferences As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeReferences : seq&lt;Type&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-156">Cuando se reemplaza en una clase derivada, obtiene el conjunto de tipos a los que esta propiedad <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> hará referencia cuando serialice su valor como una cadena.</span><span class="sxs-lookup"><span data-stu-id="399d7-156">When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> will reference when it serializes its value as a string.</span></span></summary>
        <value><span data-ttu-id="399d7-157">Conjunto de tipos.</span><span class="sxs-lookup"><span data-stu-id="399d7-157">The set of types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="399d7-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> permite a un serializador para asegurarse de que el deserializador tiene suficiente información para convertir las referencias a estos tipos de las representaciones de cadena.</span><span class="sxs-lookup"><span data-stu-id="399d7-158"><xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> enables a serializer to ensure that the de-serializer has enough information to convert references to these type from the string representations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="399d7-159">Cuando se reemplaza en una clase derivada, obtiene el valor actual de <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span><span class="sxs-lookup"><span data-stu-id="399d7-159">When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</span></span></summary>
        <value><span data-ttu-id="399d7-160">El valor actual.</span><span class="sxs-lookup"><span data-stu-id="399d7-160">The current value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>