<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba4618ed283635784b6afb23ea13d5f3d0bb7852" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52372282" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8bec3-101">Proporciona una clase base para especificar el comportamiento dinámico en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="8bec3-102">Esta clase se debe heredar; no se puede crear una instancia de la clase directamente.</span><span class="sxs-lookup"><span data-stu-id="8bec3-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-103">La `DynamicObject` clase le permite definir qué operaciones se pueden realizar en objetos dinámicos y cómo realizar esas operaciones.</span><span class="sxs-lookup"><span data-stu-id="8bec3-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="8bec3-104">Por ejemplo, puede definir lo que sucede al intentar obtener o establecer una propiedad de objeto, llamar a un método o realizar operaciones matemáticas estándar como la suma o multiplicación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="8bec3-105">Esta clase puede ser útil si desea crear un protocolo más conveniente para una biblioteca.</span><span class="sxs-lookup"><span data-stu-id="8bec3-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="8bec3-106">Por ejemplo, si los usuarios de su biblioteca tienen que utilizar una sintaxis como `Scriptobj.SetProperty("Count", 1)`, puede proporcionar la capacidad de usar la sintaxis de mucho más sencilla, como `scriptobj.Count = 1`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="8bec3-107">No se puede crear directamente una instancia de la `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="8bec3-108">Para implementar el comportamiento dinámico, es posible que desee heredar el `DynamicObject` clase e invalidar los métodos necesarios.</span><span class="sxs-lookup"><span data-stu-id="8bec3-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="8bec3-109">Por ejemplo, si tiene solo las operaciones para establecer y obtener propiedades, simplemente puede invalidar el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="8bec3-110">En C#, para habilitar el comportamiento dinámico para las instancias de clases derivadas de la `DynamicObject` (clase), debe usar el `dynamic` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="8bec3-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="8bec3-111">Para obtener más información, vea [Uso del tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="8bec3-111">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="8bec3-112">En Visual Basic, se admiten operaciones dinámicas mediante el enlace en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="8bec3-113">Para obtener más información, consulte [temprana y enlace tardío](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="8bec3-113">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
 <span data-ttu-id="8bec3-114">En el ejemplo de código siguiente se muestra cómo crear una instancia de una clase que se deriva el `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="8bec3-115">También puede agregar sus propios miembros a las clases derivadas de la `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="8bec3-116">Si su clase define propiedades y también invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, dynamic language runtime (DLR) usa primero el enlazador del lenguaje para buscar una definición estática de una propiedad en la clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="8bec3-117">Si no hay ninguna propiedad de este tipo, DLR llama a la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="8bec3-118">El `DynamicObject` clase implementa la interfaz DLR <xref:System.Dynamic.IDynamicMetaObjectProvider>, lo que permite compartir instancias de la `DynamicObject` clase entre los lenguajes que admiten el modelo de interoperabilidad DLR.</span><span class="sxs-lookup"><span data-stu-id="8bec3-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="8bec3-119">Por ejemplo, puede crear una instancia de la `DynamicObject` clase en C# y, a continuación, páselo a una función de IronPython.</span><span class="sxs-lookup"><span data-stu-id="8bec3-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="8bec3-120">Para obtener más información, consulte [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8bec3-120">For more information, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8bec3-121">Si tiene un escenario simple en el que se necesita un objeto que solo puede agregar y quitar miembros en tiempo de ejecución, pero que no es necesario definir operaciones específicas y no tiene miembros estáticos, utilice el <xref:System.Dynamic.ExpandoObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="8bec3-122">Si tiene un escenario más avanzado en el que necesita definir cómo los objetos dinámicos de participar en el protocolo de interoperabilidad, o que necesita para administrar el almacenamiento en caché de la distribución dinámica rápida DLR, cree su propia implementación de la <xref:System.Dynamic.IDynamicMetaObjectProvider> interfaz.</span><span class="sxs-lookup"><span data-stu-id="8bec3-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-123">Suponga que desea proporcionar una sintaxis alternativa para tener acceso a los valores en un diccionario, así que, en lugar de escribir `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` en Visual Basic), puede escribir `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="8bec3-124">Además, desea que esta sintaxis entre mayúsculas y minúsculas, por lo que `sampleDictionary.Text` es equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="8bec3-125">En el ejemplo de código siguiente se muestra el `DynamicDictionary` (clase), que se deriva el `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="8bec3-126">El `DynamicDictionary` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor e invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para admitir la nueva sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8bec3-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="8bec3-127">También proporciona un `Count` contiene la propiedad, que muestra cuántos propiedades dinámicas en el diccionario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="8bec3-128">Para obtener más ejemplos, vea [crear contenedores con DynamicObject](https://go.microsoft.com/fwlink/?LinkId=169008) en el blog de C# preguntas más frecuentes.</span><span class="sxs-lookup"><span data-stu-id="8bec3-128">For more examples, see [Creating Wrappers with DynamicObject](https://go.microsoft.com/fwlink/?LinkId=169008) on the C# Frequently Asked Questions blog.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bec3-129">Permite a los tipos derivados inicializar una nueva instancia del tipo <see cref="T:System.Dynamic.DynamicObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-130">No se puede crear directamente una instancia de la <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-131">Para implementar el comportamiento dinámico, debe heredar de la <xref:System.Dynamic.DynamicObject> clase e invalidar los métodos necesarios.</span><span class="sxs-lookup"><span data-stu-id="8bec3-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="8bec3-132">En C#, para habilitar el comportamiento dinámico para las instancias de las clases derivadas de la <xref:System.Dynamic.DynamicObject> (clase), debe usar el `dynamic` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="8bec3-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="8bec3-133">Para obtener más información, vea [Uso del tipo dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span><span class="sxs-lookup"><span data-stu-id="8bec3-133">For more information, see [Using Type dynamic](~/docs/csharp/programming-guide/types/using-type-dynamic.md).</span></span>  
  
 <span data-ttu-id="8bec3-134">En Visual Basic, se admiten operaciones dinámicas mediante el enlace en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="8bec3-135">Para obtener más información, consulte [temprana y enlace tardío](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span><span class="sxs-lookup"><span data-stu-id="8bec3-135">For more information, see [Early and Late Binding](https://msdn.microsoft.com/library/d6ff7f1e-b94f-4205-ab8d-5cfa91758724).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-136">En el ejemplo de código siguiente se muestra cómo crear una instancia de las clases que se derivan de la <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bec3-137">Devuelve la enumeración de todos los nombres de miembro dinámicos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="8bec3-138">Secuencia que contiene nombres de miembros dinámicos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-139">Este método existe solo con fines de depuración.</span><span class="sxs-lookup"><span data-stu-id="8bec3-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="8bec3-140">Expresión que representa el objeto <see cref="T:System.Dynamic.DynamicMetaObject" /> que se va a enviar a los métodos virtuales dinámicos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="8bec3-141">Proporciona un objeto <see cref="T:System.Dynamic.DynamicMetaObject" /> que envía a los métodos virtuales dinámicos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="8bec3-142">El objeto se puede encapsular dentro de otro objeto <see cref="T:System.Dynamic.DynamicMetaObject" /> para proporcionar un comportamiento personalizado para acciones individuales.</span><span class="sxs-lookup"><span data-stu-id="8bec3-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="8bec3-143">Este método admite la infraestructura de Dynamic Language Runtime para los implementadores de lenguaje y no está pensado para que se use directamente en el código.</span><span class="sxs-lookup"><span data-stu-id="8bec3-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="8bec3-144">Objeto de tipo <see cref="T:System.Dynamic.DynamicMetaObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj *  -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-145">Proporciona información sobre la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="8bec3-145">Provides information about the binary operation.</span></span> <span data-ttu-id="8bec3-146">La propiedad <c>binder.Operation</c> devuelve un objeto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="8bec3-147">Por ejemplo, para la instrucción <c>sum = first + second</c>, donde <c>first</c> y <c>second</c> se derivan de la clase <see langword="DynamicObject" />, <c>binder.Operation</c> devuelve <c>ExpressionType.Add</c>.</span><span class="sxs-lookup"><span data-stu-id="8bec3-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="8bec3-148">Operando derecho de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="8bec3-148">The right operand for the binary operation.</span></span> <span data-ttu-id="8bec3-149">Por ejemplo, para la instrucción <c>sum = first + second</c>, donde <c>first</c> y <c>second</c> se derivan de la clase <see langword="DynamicObject" />, <paramref name="arg" /> es igual a <c>second</c>.</span><span class="sxs-lookup"><span data-stu-id="8bec3-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-150">Resultado de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="8bec3-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="8bec3-151">Proporciona la implementación de operaciones binarias.</span><span class="sxs-lookup"><span data-stu-id="8bec3-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="8bec3-152">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para operaciones como la suma o la multiplicación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="8bec3-153"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-154">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-155">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-156">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se debe realizar las operaciones binarias para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-157">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-158">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-159">Este método se llama cuando tiene operaciones binarias como suma o multiplicación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="8bec3-160">Por ejemplo, si la <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> se invalida el método, se invoca automáticamente para instrucciones como `sum = first + second` o `multiply = first*second`, donde `first` se deriva el `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="8bec3-161">Puede obtener información sobre el tipo de la operación binaria mediante el `Operation` propiedad de la `binder` parámetro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="8bec3-162">Si el objeto dinámico solo se usa en C# y Visual Basic, el `binder.Operation` propiedad puede tener uno de los siguientes valores de la <xref:System.Linq.Expressions.ExpressionType> enumeración.</span><span class="sxs-lookup"><span data-stu-id="8bec3-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="8bec3-163">Sin embargo, en otros lenguajes, como IronPython o IronRuby, puede tener otros valores.</span><span class="sxs-lookup"><span data-stu-id="8bec3-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="8bec3-164">Valor</span><span class="sxs-lookup"><span data-stu-id="8bec3-164">Value</span></span>|<span data-ttu-id="8bec3-165">Descripción</span><span class="sxs-lookup"><span data-stu-id="8bec3-165">Description</span></span>|<span data-ttu-id="8bec3-166">C#</span><span class="sxs-lookup"><span data-stu-id="8bec3-166">C#</span></span>|<span data-ttu-id="8bec3-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="8bec3-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="8bec3-168">Una operación de suma sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="8bec3-169">Una operación de asignación compuesta de suma sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="8bec3-170">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="8bec3-171">Bit a bit `AND` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="8bec3-172">Bit a bit `AND` operación de asignación compuesta.</span><span class="sxs-lookup"><span data-stu-id="8bec3-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="8bec3-173">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="8bec3-174">Una operación de división aritmética.</span><span class="sxs-lookup"><span data-stu-id="8bec3-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="8bec3-175">Una operación de asignación compuesta de división aritmética.</span><span class="sxs-lookup"><span data-stu-id="8bec3-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="8bec3-176">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="8bec3-177">Bit a bit `XOR` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="8bec3-178">Bit a bit `XOR` operación de asignación compuesta.</span><span class="sxs-lookup"><span data-stu-id="8bec3-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="8bec3-179">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="8bec3-180">Una comparación "mayor que".</span><span class="sxs-lookup"><span data-stu-id="8bec3-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="8bec3-181">Una comparación "mayor o igual a".</span><span class="sxs-lookup"><span data-stu-id="8bec3-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="8bec3-182">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="8bec3-183">Una operación de desplazamiento a la izquierda bit a bit.</span><span class="sxs-lookup"><span data-stu-id="8bec3-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="8bec3-184">Una operación de asignación compuesta de desplazamiento a la izquierda bit a bit.</span><span class="sxs-lookup"><span data-stu-id="8bec3-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="8bec3-185">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="8bec3-186">Una comparación "menor que".</span><span class="sxs-lookup"><span data-stu-id="8bec3-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="8bec3-187">Una comparación "menor o igual que".</span><span class="sxs-lookup"><span data-stu-id="8bec3-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="8bec3-188">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="8bec3-189">Una operación de resto aritmético.</span><span class="sxs-lookup"><span data-stu-id="8bec3-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="8bec3-190">Operación de asignación compuesta y resto aritmético.</span><span class="sxs-lookup"><span data-stu-id="8bec3-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="8bec3-191">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="8bec3-192">Una operación de multiplicación sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="8bec3-193">Una operación de asignación compuesta de multiplicación sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="8bec3-194">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="8bec3-195">Una comparación de desigualdad.</span><span class="sxs-lookup"><span data-stu-id="8bec3-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="8bec3-196">Bit a bit o lógica `OR` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="8bec3-197">Bit a bit o lógica `OR` asignación compuesta.</span><span class="sxs-lookup"><span data-stu-id="8bec3-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="8bec3-198">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="8bec3-199">Una operación matemática de elevar un número a una potencia.</span><span class="sxs-lookup"><span data-stu-id="8bec3-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="8bec3-200">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="8bec3-201">Una operación de desplazamiento a la derecha bit a bit.</span><span class="sxs-lookup"><span data-stu-id="8bec3-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="8bec3-202">Una operación de asignación compuesta de desplazamiento a la derecha bit a bit.</span><span class="sxs-lookup"><span data-stu-id="8bec3-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="8bec3-203">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="8bec3-204">Una operación de resta sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="8bec3-205">Una operación de asignación compuesta de resta sin comprobación de desbordamiento, para operandos numéricos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="8bec3-206">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="8bec3-207">Para implementar `OrElse` (`a || b`) y `AndAlso` (`a && b`) las operaciones para objetos dinámicos en C#, puede desear implementar tanto el <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método y el <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="8bec3-208">El `OrElse` consta de operación de unario `IsTrue` operación y el archivo binario `Or` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="8bec3-209">El `Or` se realiza solo si el resultado de la `IsTrue` operación es `false`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="8bec3-210">El `AndAlso` consta de operación de unario `IsFalse` operación y el archivo binario `And` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="8bec3-211">El `And` se realiza solo si el resultado de la `IsFalse` operación es `false`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-212">Suponga que necesita una estructura de datos para almacenar representaciones numéricas y textuales de números, y desea definir las operaciones matemáticas básicas como la suma o resta de este tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="8bec3-213">En el ejemplo de código siguiente se muestra el `DynamicNumber` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-214">`DynamicNumber` invalida el <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método para habilitar las operaciones matemáticas.</span><span class="sxs-lookup"><span data-stu-id="8bec3-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="8bec3-215">También invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso a los elementos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="8bec3-216">En este ejemplo, se admiten solo las operaciones de suma y resta.</span><span class="sxs-lookup"><span data-stu-id="8bec3-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="8bec3-217">Si se intenta escribir una instrucción como `resultNumber = firstNumber*secondNumber`, se produce una excepción en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder *  -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-218">Proporciona información sobre la operación de conversión.</span><span class="sxs-lookup"><span data-stu-id="8bec3-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="8bec3-219">La propiedad <c>binder.Type</c> proporciona el tipo en el que se debe convertir el objeto.</span><span class="sxs-lookup"><span data-stu-id="8bec3-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="8bec3-220">Por ejemplo, para la instrucción <c>(String)sampleObject</c> en C# (<c>CType(sampleObject, Type)</c> en Visual Basic), donde <c>sampleObject</c> es una instancia de la clase derivada de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Type</c> devuelve el tipo <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="8bec3-221">La propiedad <c>binder.Explicit</c> proporciona información sobre el tipo de conversión que se produce.</span><span class="sxs-lookup"><span data-stu-id="8bec3-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="8bec3-222">Devuelve <see langword="true" /> para la conversión explícita y <see langword="false" /> para la conversión implícita.</span><span class="sxs-lookup"><span data-stu-id="8bec3-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-223">Resultado de la operación de conversión de tipos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="8bec3-224">Proporciona la implementación de las operaciones de conversión de tipos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="8bec3-225">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar el comportamiento dinámico de las operaciones que convierten un objeto de un tipo a otro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="8bec3-226"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-227">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-228">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-229">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se debe realizar una conversión de tipos para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-230">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-231">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-232">En C#, si se invalida este método, se invoca automáticamente cuando haya una conversión explícita o implícita, como se muestra en el ejemplo de código siguiente.</span><span class="sxs-lookup"><span data-stu-id="8bec3-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="8bec3-233">En Visual Basic, se admite solo la conversión explícita.</span><span class="sxs-lookup"><span data-stu-id="8bec3-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="8bec3-234">Si invalida este método, llame a él mediante el <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> o <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> funciones.</span><span class="sxs-lookup"><span data-stu-id="8bec3-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-235">Suponga que necesita una estructura de datos para almacenar representaciones numéricas y textuales de números, y desea definir conversiones de esta estructura de datos para las cadenas y enteros.</span><span class="sxs-lookup"><span data-stu-id="8bec3-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="8bec3-236">En el ejemplo de código siguiente se muestra el `DynamicNumber` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-237">`DynamicNumber` invalida el <xref:System.Dynamic.DynamicObject.TryConvert%2A> método para habilitar la conversión de tipos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="8bec3-238">También invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso a los elementos de datos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="8bec3-239">En este ejemplo, se admite solo la conversión a cadenas y enteros.</span><span class="sxs-lookup"><span data-stu-id="8bec3-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="8bec3-240">Si se intenta convertir un objeto en cualquier otro tipo, se produce una excepción en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-241">Proporciona información sobre la operación de inicialización.</span><span class="sxs-lookup"><span data-stu-id="8bec3-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="8bec3-242">Argumentos que se pasan al objeto durante la inicialización.</span><span class="sxs-lookup"><span data-stu-id="8bec3-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="8bec3-243">Por ejemplo, para la operación <c>new SampleType(100)</c>, donde <c>SampleType</c> es el tipo derivado de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> es igual que 100.</span><span class="sxs-lookup"><span data-stu-id="8bec3-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-244">Resultado de la inicialización.</span><span class="sxs-lookup"><span data-stu-id="8bec3-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="8bec3-245">Proporciona la implementación de las operaciones que inicializan una nueva instancia de un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="8bec3-246">Este método no está pensado para su uso en C# o Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="8bec3-247"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-248">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-249">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-250">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se debe inicializar una nueva instancia del objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="8bec3-251">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-252">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-253">Los compiladores de Visual Basic y C# nunca emiten código para usar este método porque no admiten tipos de primera clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="8bec3-254">Este método está pensado para los idiomas que admiten la inicialización de objetos dinámicos mediante sintaxis similar a `dynamic new`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-255">Proporciona información sobre la eliminación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="8bec3-256">Índices que se van a eliminar.</span><span class="sxs-lookup"><span data-stu-id="8bec3-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="8bec3-257">Proporciona la implementación de las operaciones que eliminan un objeto por índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="8bec3-258">Este método no está pensado para su uso en C# o Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="8bec3-259"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-260">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-261">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-262">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se debería eliminar un valor que tiene un índice especificado.</span><span class="sxs-lookup"><span data-stu-id="8bec3-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="8bec3-263">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-264">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-265">Los compiladores de Visual Basic y C# nunca emiten código para usar este método porque no admiten este tipo de operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="8bec3-266">Este método está pensado para los idiomas que admiten la sintaxis para eliminar los objetos por índice, como `del sampleObject[1,2]` en Python.</span><span class="sxs-lookup"><span data-stu-id="8bec3-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-267">Proporciona información sobre la eliminación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="8bec3-268">Proporciona la implementación de las operaciones que eliminan un miembro de objeto.</span><span class="sxs-lookup"><span data-stu-id="8bec3-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="8bec3-269">Este método no está pensado para su uso en C# o Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="8bec3-270"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-271">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-272">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-273">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se debería eliminar un miembro de objeto.</span><span class="sxs-lookup"><span data-stu-id="8bec3-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="8bec3-274">Cuando no se reemplaza este método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-275">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-276">Los compiladores de Visual Basic y C# nunca emiten código para usar este método porque no admiten este tipo de operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="8bec3-277">Este método está pensado para los idiomas que admiten la sintaxis para eliminar miembros, como `del sampleObject.SampleMember` en Python.</span><span class="sxs-lookup"><span data-stu-id="8bec3-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-278">Proporciona información sobre la operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="8bec3-279">Índices que se usan en la operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="8bec3-280">Por ejemplo, para la operación <c>sampleObject[3]</c> en C# (<c>sampleObject(3)</c> en Visual Basic), donde <c>sampleObject</c> se deriva de la clase <see langword="DynamicObject" />, <c>indexes[0]</c> es igual que 3.</span><span class="sxs-lookup"><span data-stu-id="8bec3-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-281">Resultado de la operación de índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="8bec3-282">Proporciona la implementación de las operaciones que obtienen un valor por índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="8bec3-283">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para las operaciones de indización.</span><span class="sxs-lookup"><span data-stu-id="8bec3-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="8bec3-284"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-285">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-286">(En la mayoría de los casos, se inicia una excepción en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-287">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo obtener un valor de índice se debe realizar para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-288">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-289">(En la mayoría de los casos, se inicia una excepción en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-290">Si se invalida este método, se invoca automáticamente cuando haya una operación como `sampleObject[3]` en C# o `sampleObject(3)` en Visual Basic, donde `sampleObject` se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-291">Suponga que desea crear un objeto en el que las propiedades pueden ser acceder mediante nombres como `Property0`, `Property1`, y así sucesivamente, o por índice, por lo que, por ejemplo, `sampleObject.Property0` es equivalente a `sampleObject[0]` en C# o `sampleObject(0)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="8bec3-292">En el ejemplo de código siguiente se muestra el `SampleDynamicObject` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-293">El `SampleDynamicObject` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor.</span><span class="sxs-lookup"><span data-stu-id="8bec3-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="8bec3-294">`SampleDynamicObject` invalida el <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> y <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> métodos para habilitar el acceso por índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="8bec3-295">Invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso por nombre de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8bec3-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder *  -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-296">Proporciona información sobre el objeto que llamó a la operación dinámica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="8bec3-297">La propiedad <c>binder.Name</c> proporciona el nombre del miembro en el que se realiza la operación dinámica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="8bec3-298">Por ejemplo, para la instrucción <c>Console.WriteLine(sampleObject.SampleProperty)</c>, donde <c>sampleObject</c> es una instancia de la clase derivada de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> devuelve "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="8bec3-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="8bec3-299">La propiedad <c>binder.IgnoreCase</c> especifica si el nombre de miembro distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="8bec3-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-300">Resultado de la operación Get.</span><span class="sxs-lookup"><span data-stu-id="8bec3-300">The result of the get operation.</span></span> <span data-ttu-id="8bec3-301">Por ejemplo, si se llama al método para una propiedad, se puede asignar el valor de la propiedad a <paramref name="result" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="8bec3-302">Proporciona la implementación de las operaciones que obtienen valores de miembro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="8bec3-303">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para operaciones como obtener el valor de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="8bec3-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="8bec3-304"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-305">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-306">(En la mayoría de los casos, se inicia una excepción en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-307">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deben realizar las operaciones que obtienen valores de miembro para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-308">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-309">(En la mayoría de los casos, se inicia una excepción en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-310">Este método se llama cuando tiene instrucciones como `Console.WriteLine(sampleObject.SampleProperty)`, donde `sampleObject` es una instancia de la clase derivada de la <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="8bec3-311">También puede agregar sus propios miembros a las clases derivadas de la `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="8bec3-312">Si su clase define propiedades y también invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, dynamic language runtime (DLR) usa primero el enlazador del lenguaje para buscar una definición estática de una propiedad en la clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="8bec3-313">Si no hay ninguna propiedad de este tipo, DLR llama a la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-314">Suponga que desea proporcionar una sintaxis alternativa para tener acceso a los valores en un diccionario, así que, en lugar de escribir `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` en Visual Basic), puede escribir `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="8bec3-315">Además, esta sintaxis debe ser entre mayúsculas y minúsculas, por lo que `sampleDictionary.Text` es equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="8bec3-316">En el ejemplo de código siguiente se muestra el `DynamicDictionary` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-317">El `DynamicDictionary` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor e invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para admitir la nueva sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8bec3-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="8bec3-318">También proporciona un `Count` contiene la propiedad, que muestra cuántos propiedades dinámicas en el diccionario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-319">Proporciona información sobre la operación de invocación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="8bec3-320">Argumentos que se pasan al objeto durante la operación de invocación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="8bec3-321">Por ejemplo, para la operación <c>sampleObject(100)</c>, donde <c>sampleObject</c> se deriva de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> es igual que 100.</span><span class="sxs-lookup"><span data-stu-id="8bec3-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-322">Resultado de la invocación de objeto.</span><span class="sxs-lookup"><span data-stu-id="8bec3-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="8bec3-323">Proporciona la implementación para las operaciones que invocan un objeto.</span><span class="sxs-lookup"><span data-stu-id="8bec3-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="8bec3-324">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para operaciones como invocar un objeto o un delegado.</span><span class="sxs-lookup"><span data-stu-id="8bec3-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="8bec3-325"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-326">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-327">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-328">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deben realizar las operaciones que invocan un objeto para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-329">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-330">(En la mayoría de los casos, se inicia una excepción en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-331">Si se invalida este método, se invoca automáticamente cuando haya una operación como `sampleObject(100)`, donde `sampleObject` se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="8bec3-332">Se admite la operación para invocar un objeto en C#, pero no en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="8bec3-333">El compilador de Visual Basic nunca emite código para usar este método y el lenguaje Visual Basic no admite la sintaxis similar a `sampleObject(100)`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-334">Suponga que necesita una estructura de datos para almacenar representaciones numéricas y textuales de números.</span><span class="sxs-lookup"><span data-stu-id="8bec3-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="8bec3-335">Desea poder especificar individualmente el valor para cada propiedad y poder inicializar todas las propiedades de una sola instrucción.</span><span class="sxs-lookup"><span data-stu-id="8bec3-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="8bec3-336">En el ejemplo de código siguiente se muestra el `DynamicNumber` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-337">`DynamicNumber` invalida el <xref:System.Dynamic.DynamicObject.TryInvoke%2A> método para habilitar la inicialización de todas las propiedades al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="8bec3-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="8bec3-338">También invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso a las propiedades de objeto individuales.</span><span class="sxs-lookup"><span data-stu-id="8bec3-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] *  -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-339">Proporciona información sobre la operación dinámica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="8bec3-340">La propiedad <c>binder.Name</c> proporciona el nombre del miembro en el que se realiza la operación dinámica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="8bec3-341">Por ejemplo, para la instrucción <c>sampleObject.SampleMethod(100)</c>, donde <c>sampleObject</c> es una instancia de la clase derivada de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> devuelve "SampleMethod".</span><span class="sxs-lookup"><span data-stu-id="8bec3-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="8bec3-342">La propiedad <c>binder.IgnoreCase</c> especifica si el nombre de miembro distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="8bec3-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="8bec3-343">Argumentos que se pasan al miembro de objeto durante la operación de invocación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="8bec3-344">Por ejemplo, para la instrucción <c>sampleObject.SampleMethod(100)</c>, donde <c>sampleObject</c> se deriva de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> es igual que 100.</span><span class="sxs-lookup"><span data-stu-id="8bec3-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-345">Resultado de la invocación del miembro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="8bec3-346">Proporciona la implementación de las operaciones que invocan un miembro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="8bec3-347">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para operaciones como llamar a un método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="8bec3-348"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-349">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-350">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-351">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deben realizar las operaciones que invocan un miembro de objeto para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-352">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-353">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-354">Si se invalida este método, se invoca automáticamente cuando se realiza una operación como `sampleObject.SampleMethod(100)`, donde `sampleObject` se deriva el `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="8bec3-355">También puede agregar sus propios métodos a las clases que se derivan de la <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-356">Por ejemplo, si invalida el <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> método, el sistema de distribución dinámica primero intenta determinar si el método especificado existe en la clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="8bec3-357">Si no se encuentra el método, usa el <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="8bec3-358">Este método no admite `ref` y `out` parámetros.</span><span class="sxs-lookup"><span data-stu-id="8bec3-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="8bec3-359">Todos los parámetros en el `args` matriz se pasan por valor.</span><span class="sxs-lookup"><span data-stu-id="8bec3-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-360">Suponga que desea proporcionar una sintaxis alternativa para tener acceso a los valores en un diccionario, así que, en lugar de escribir `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` en Visual Basic), puede escribir `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="8bec3-361">Además, desea poder llamar a todos los métodos de diccionario estándar en este diccionario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="8bec3-362">En el ejemplo de código siguiente se muestra el `DynamicDictionary` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-363">El `DynamicDictionary` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor.</span><span class="sxs-lookup"><span data-stu-id="8bec3-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="8bec3-364">Invalida el <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> método para admitir los métodos de la <xref:System.Collections.Generic.Dictionary%602> clase e invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para admitir la nueva sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8bec3-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="8bec3-365">También proporciona un `Print` método, que imprime todos los valores y las claves del diccionario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-366">Proporciona información sobre la operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="8bec3-367">Índices que se usan en la operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="8bec3-368">Por ejemplo, para la operación <c>sampleObject[3] = 10</c> en C# (<c>sampleObject(3) = 10</c> en Visual Basic), donde <c>sampleObject</c> se deriva de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>indexes[0]</c> es igual que 3.</span><span class="sxs-lookup"><span data-stu-id="8bec3-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="8bec3-369">Valor que se establece en el objeto que tiene el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="8bec3-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="8bec3-370">Por ejemplo, para la operación <c>sampleObject[3] = 10</c> en C# (<c>sampleObject(3) = 10</c> en Visual Basic), donde <c>sampleObject</c> se deriva de la clase <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> es igual a 10.</span><span class="sxs-lookup"><span data-stu-id="8bec3-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="8bec3-371">Proporciona la implementación de las operaciones que establecen un valor por índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="8bec3-372">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar el comportamiento dinámico de las operaciones que tienen acceso a los objetos por un índice especificado.</span><span class="sxs-lookup"><span data-stu-id="8bec3-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="8bec3-373"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-374">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-375">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-376">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deben realizar las operaciones que tienen acceso a un objeto por índice para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-377">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-378">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-379">Si se invalida este método, se invoca automáticamente cuando haya una operación como `sampleObject[3] = 10` en C# o `sampleObject(3) = 10` en Visual Basic, donde `sampleObject` se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-380">Suponga que desea crear un objeto en el que las propiedades pueden ser acceder mediante nombres como `Property0`, `Property1`, y así sucesivamente, o por índice, por lo que, por ejemplo, `sampleObject.Property0` es equivalente a `sampleObject[0]` en C# o `sampleObject(0)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8bec3-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="8bec3-381">En el ejemplo de código siguiente se muestra el `SampleDynamicObject` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-382">El `SampleDynamicObject` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor.</span><span class="sxs-lookup"><span data-stu-id="8bec3-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="8bec3-383">`SampleDynamicObject` invalida el <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> y <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> métodos para habilitar el acceso por índice.</span><span class="sxs-lookup"><span data-stu-id="8bec3-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="8bec3-384">Invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso por nombre de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8bec3-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-385">Proporciona información sobre el objeto que llamó a la operación dinámica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="8bec3-386">La propiedad <c>binder.Name</c> proporciona el nombre del miembro al que se asigna el valor.</span><span class="sxs-lookup"><span data-stu-id="8bec3-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="8bec3-387">Por ejemplo, para la instrucción <c>sampleObject.SampleProperty = "Test"</c>, donde <c>sampleObject</c> es una instancia de la clase derivada de la clase <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> devuelve "SampleProperty".</span><span class="sxs-lookup"><span data-stu-id="8bec3-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="8bec3-388">La propiedad <c>binder.IgnoreCase</c> especifica si el nombre de miembro distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="8bec3-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="8bec3-389">Valor que se va a establecer para el miembro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-389">The value to set to the member.</span></span> <span data-ttu-id="8bec3-390">Por ejemplo, para <c>sampleObject.SampleProperty = "Test"</c>, donde <c>sampleObject</c> es una instancia de la clase derivada de la clase <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> es "Test".</span><span class="sxs-lookup"><span data-stu-id="8bec3-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="8bec3-391">Proporciona la implementación de las operaciones que establecen valores de miembro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="8bec3-392">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar un comportamiento dinámico para operaciones como establecer el valor de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="8bec3-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="8bec3-393"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-394">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-395">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-396">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deben realizar las operaciones que establecen un valor a un miembro de un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-397">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-398">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-399">Este método se llama cuando tiene instrucciones como `sampleObject.SampleProperty = "Test"`, donde `sampleObject` es una instancia de la clase que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="8bec3-400">También puede agregar sus propios miembros a las clases derivadas de la `DynamicObject` clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="8bec3-401">Si su clase define propiedades y también invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método, dynamic language runtime (DLR) usa primero el enlazador del lenguaje para buscar una definición estática de una propiedad en la clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="8bec3-402">Si no hay ninguna propiedad de este tipo, DLR llama a la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-403">Suponga que desea proporcionar una sintaxis alternativa para tener acceso a los valores en un diccionario, así que, en lugar de escribir `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` en Visual Basic), puede escribir `sampleDictionary.Text = "Sample text"`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="8bec3-404">Además, esta sintaxis debe ser entre mayúsculas y minúsculas, por lo que `sampleDictionary.Text` es equivalente a `sampleDictionary.text`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="8bec3-405">En el ejemplo de código siguiente se muestra el `DynamicDictionary` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-406">El `DynamicDictionary` clase contiene un objeto de la `Dictionary<string, object>` tipo (`Dictionary(Of String, Object)` en Visual Basic) para almacenar los pares clave-valor e invalida el <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para admitir la nueva sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8bec3-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="8bec3-407">También proporciona un `Count` contiene la propiedad, que muestra cuántos propiedades dinámicas en el diccionario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder *  -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="8bec3-408">Proporciona información sobre la operación unaria.</span><span class="sxs-lookup"><span data-stu-id="8bec3-408">Provides information about the unary operation.</span></span> <span data-ttu-id="8bec3-409">La propiedad <c>binder.Operation</c> devuelve un objeto <see cref="T:System.Linq.Expressions.ExpressionType" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="8bec3-410">Por ejemplo, para la instrucción <c>negativeNumber = -number</c>, donde <c>number</c> se deriva de la clase <see langword="DynamicObject" />, <c>binder.Operation</c> devuelve "Negate".</span><span class="sxs-lookup"><span data-stu-id="8bec3-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="8bec3-411">Resultado de la operación unaria.</span><span class="sxs-lookup"><span data-stu-id="8bec3-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="8bec3-412">Proporciona la implementación de operaciones unarias.</span><span class="sxs-lookup"><span data-stu-id="8bec3-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="8bec3-413">Las clases derivadas de la clase <see cref="T:System.Dynamic.DynamicObject" /> pueden invalidar este método para especificar el comportamiento dinámico de operaciones como negación, incremento o decremento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="8bec3-414"><see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bec3-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8bec3-415">Si este método devuelve <see langword="false" />, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-416">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bec3-417">Las clases derivadas de la <xref:System.Dynamic.DynamicObject> clase puede invalidar este método para especificar cómo se deberían realizar operaciones unarias para un objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="8bec3-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="8bec3-418">Cuando no se reemplaza el método, el enlazador del lenguaje en tiempo de ejecución determina el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="8bec3-419">(En la mayoría de los casos, se inicia una excepción específica del lenguaje en tiempo de ejecución).</span><span class="sxs-lookup"><span data-stu-id="8bec3-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="8bec3-420">Este método se llama cuando tiene operaciones unarias como negación, incremento o decremento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="8bec3-421">Por ejemplo, si la <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método se invalide, este método se invoca automáticamente para instrucciones como `negativeNumber = -number`, donde `number` se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="8bec3-422">Puede obtener información sobre el tipo de la operación unaria mediante el `Operation` propiedad de la `binder` parámetro.</span><span class="sxs-lookup"><span data-stu-id="8bec3-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="8bec3-423">Si el objeto dinámico solo se usa en C# y Visual Basic, el `binder.Operation` propiedad puede tener uno de los siguientes valores de la <xref:System.Linq.Expressions.ExpressionType> enumeración.</span><span class="sxs-lookup"><span data-stu-id="8bec3-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="8bec3-424">Sin embargo, en otros lenguajes, como IronPython o IronRuby, puede tener otros valores.</span><span class="sxs-lookup"><span data-stu-id="8bec3-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="8bec3-425">Valor</span><span class="sxs-lookup"><span data-stu-id="8bec3-425">Value</span></span>|<span data-ttu-id="8bec3-426">Descripción</span><span class="sxs-lookup"><span data-stu-id="8bec3-426">Description</span></span>|<span data-ttu-id="8bec3-427">C#</span><span class="sxs-lookup"><span data-stu-id="8bec3-427">C#</span></span>|<span data-ttu-id="8bec3-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="8bec3-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="8bec3-429">Una operación de decremento unario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="8bec3-430">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="8bec3-431">Una operación de incremento unario.</span><span class="sxs-lookup"><span data-stu-id="8bec3-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="8bec3-432">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="8bec3-433">Una negación aritmética.</span><span class="sxs-lookup"><span data-stu-id="8bec3-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="8bec3-434">Una negación lógica.</span><span class="sxs-lookup"><span data-stu-id="8bec3-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="8bec3-435">Una los complemento.</span><span class="sxs-lookup"><span data-stu-id="8bec3-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="8bec3-436">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="8bec3-437">Un valor de la condición es false.</span><span class="sxs-lookup"><span data-stu-id="8bec3-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="8bec3-438">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="8bec3-439">Un valor de la condición es true.</span><span class="sxs-lookup"><span data-stu-id="8bec3-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="8bec3-440">No se admite.</span><span class="sxs-lookup"><span data-stu-id="8bec3-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="8bec3-441">Unario más.</span><span class="sxs-lookup"><span data-stu-id="8bec3-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="8bec3-442">Para implementar `OrElse` (`a || b`) y `AndAlso` (`a && b`) las operaciones para objetos dinámicos en C#, puede desear implementar tanto el <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método y el <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8bec3-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="8bec3-443">El `OrElse` consta de operación de unario `IsTrue` operación y el archivo binario `Or` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="8bec3-444">El `Or` se realiza solo si el resultado de la `IsTrue` operación es `false`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="8bec3-445">El `AndAlso` consta de operación de unario `IsFalse` operación y el archivo binario `And` operación.</span><span class="sxs-lookup"><span data-stu-id="8bec3-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="8bec3-446">El `And` se realiza solo si el resultado de la `IsFalse` operación es `false`.</span><span class="sxs-lookup"><span data-stu-id="8bec3-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bec3-447">Suponga que necesita una estructura de datos para almacenar representaciones numéricas y textuales de los números, y desea definir una operación de negación matemática para tales datos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="8bec3-448">En el ejemplo de código siguiente se muestra el `DynamicNumber` (clase), que se deriva el <xref:System.Dynamic.DynamicObject> clase.</span><span class="sxs-lookup"><span data-stu-id="8bec3-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="8bec3-449">`DynamicNumber` invalida el <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> método para habilitar la operación de negación matemática.</span><span class="sxs-lookup"><span data-stu-id="8bec3-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="8bec3-450">Es también invalida la <xref:System.Dynamic.DynamicObject.TrySetMember%2A> y <xref:System.Dynamic.DynamicObject.TryGetMember%2A> métodos para habilitar el acceso a los elementos.</span><span class="sxs-lookup"><span data-stu-id="8bec3-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="8bec3-451">En este ejemplo, se admite solo la operación de negación matemática.</span><span class="sxs-lookup"><span data-stu-id="8bec3-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="8bec3-452">Si se intenta escribir una instrucción como `negativeNumber = +number`, se produce una excepción en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="8bec3-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>