<Type Name="IList&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5da70a2f413b34d3f0831128f920baea87c1ff7" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52733309" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IList&lt;TValue&gt; : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IList`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1&lt;!TValue&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.IList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IList(Of TValue)&#xA;Implements IBidirectionalContainer(Of TValue), ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IList : ICloneable, Microsoft::VisualC::StlClr::Generic::IBidirectionalContainer&lt;TValue&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IList&lt;'Value&gt; = interface&#xA;    interface IBidirectionalContainer&lt;'Value&gt;&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">
      <span data-ttu-id="6f8ca-101">Tipo de un elemento de la lista.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6f8ca-101">The type of a list element.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="6f8ca-102">Define la interfaz para un objeto <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">list</see> de STL/CLR.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6f8ca-102">Defines the interface for an STL/CLR <see href="https://docs.microsoft.com/cpp/dotnet/list-stl-clr">list</see> object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="assign">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-103">Reemplaza todos los elementos del contenedor por los elementos especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-103">Replaces all elements of the container with the specified elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-104">Para obtener más información, consulte [List:: assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-104">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member assign : System.Collections.IEnumerable -&gt; unit" Usage="iList.assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="6f8ca-105">Enumeración cuyos elementos se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-105">The enumeration whose elements are to be inserted into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-106">Reemplaza la secuencia controlada por la secuencia que designa el enumerador especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-106">Replaces the controlled sequence with the sequence that is designated by the given enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-107">Para obtener más información, consulte [List:: assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-107">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member assign : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.assign (_First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_First">
          <span data-ttu-id="6f8ca-108">Posición inicial del intervalo de elementos que se va a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-108">The beginning position of the range of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="6f8ca-109">Primera posición después del intervalo de elementos que se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-109">The first position beyond the range of elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-110">Reemplaza la secuencia controlada por la secuencia <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-110">Replaces the controlled sequence with the sequence <c>[</c><paramref name="_First" /><c>,</c><paramref name="_Last" /><c>)</c>.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-111">Para obtener más información, consulte [List:: assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-111">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="assign">
      <MemberSignature Language="C#" Value="public void assign (int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void assign(int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub assign (_Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void assign(int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member assign : int * 'Value -&gt; unit" Usage="iList.assign (_Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Count">
          <span data-ttu-id="6f8ca-112">Número de elementos que se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-112">The number of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="6f8ca-113">Valor de los elementos que se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-113">The value of the elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-114">Reemplaza la secuencia controlada por el número especificado del elemento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-114">Replaces the controlled sequence with the specified number of the given element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-115">Para obtener más información, consulte [List:: assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-115">For more information, see [list::assign (STL/CLR)](https://docs.microsoft.com/cpp/dotnet/list-stl-clr).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back">
      <MemberSignature Language="C#" Value="public TValue back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.back" />
      <MemberSignature Language="VB.NET" Value="Public Function back () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % back();" />
      <MemberSignature Language="F#" Value="abstract member back : unit -&gt; " Usage="iList.back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-116">Tiene acceso al último elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-116">Accesses the last element of the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-117">Último elemento de la secuencia controlada, que no debe estar vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-117">The last element of the controlled sequence, which must be non-empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-118">Para obtener más información, consulte [List (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-118">For more information, see [list::back (STL/CLR)](/cpp/dotnet/list-stl-clr#back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="back_item">
      <MemberSignature Language="C#" Value="public TValue back_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue back_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.back_item" />
      <MemberSignature Language="VB.NET" Value="Public Property back_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue back_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.back_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.back_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-119">Tiene acceso al último elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-119">Accesses the last element of the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6f8ca-120">Último elemento de la secuencia controlada, que no debe estar vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-120">The last element of the controlled sequence, which must be non-empty.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-121">Para obtener más información, consulte [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-121">For more information, see [list::back_item (STL/CLR)](/cpp/dotnet/list-stl-clr#back_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="begin">
      <MemberSignature Language="C#" Value="public void begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void begin(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function begin (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ begin(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member begin :  -&gt; unit" Usage="iList.begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-122">Iterador de acceso aleatorio que designa el primer elemento de la secuencia controlada o apunta inmediatamente después del final de una secuencia vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-122">A random-access iterator that designates the first element of the controlled sequence, or just beyond the end of an empty sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-123">Se usa para obtener un iterador que designe el principio de la secuencia controlada, indicado por <paramref name="current" />, pero su estado puede cambiar si cambia la longitud de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-123">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-124">Designa el principio de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-124">Designates the beginning of the controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-125">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-125">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="6f8ca-126">Para obtener más información, consulte [List:: begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-126">For more information, see [list::begin (STL/CLR)](/cpp/dotnet/list-stl-clr#begin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="clear">
      <MemberSignature Language="C#" Value="public void clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void clear();" />
      <MemberSignature Language="F#" Value="abstract member clear : unit -&gt; unit" Usage="iList.clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-127">Quita todos los elementos del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-127">Removes all elements from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-128">Para obtener más información, consulte [List:: Clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-128">For more information, see [list::clear (STL/CLR)](/cpp/dotnet/list-stl-clr#clear).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="empty">
      <MemberSignature Language="C#" Value="public bool empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.empty" />
      <MemberSignature Language="VB.NET" Value="Public Function empty () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool empty();" />
      <MemberSignature Language="F#" Value="abstract member empty : unit -&gt; bool" Usage="iList.empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-129">Prueba si el contenedor no tiene elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-129">Tests whether the container has no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-130">Es <see langword="true" /> si el contenedor no tiene elementos; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-130">
              <see langword="true" /> if the container has no elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-131">Para obtener más información, consulte [List:: Empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-131">For more information, see [list::empty (STL/CLR)](/cpp/dotnet/list-stl-clr#empty).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="end">
      <MemberSignature Language="C#" Value="public void end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void end(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function end (ByRef  As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ end(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member end :  -&gt; unit" Usage="iList.end " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-132">Iterador de acceso aleatorio que apunta justo después del final de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-132">A random-access iterator that points just beyond the end of the controlled sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-133">Se usa para obtener un iterador que designe el final de dicha secuencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-133">You use it to obtain an iterator that designates the end of the controlled sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-134">El estado no cambia si cambia la longitud de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-134">Its status does not change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-135">Designa el final de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-135">Designates the end of the controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-136">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-136">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="6f8ca-137">Para obtener más información, consulte [List:: end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-137">For more information, see [list::end (STL/CLR)](/cpp/dotnet/list-stl-clr#end).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="erase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-138">Quita todos los elementos del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-138">Removes elements from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-139">Para obtener más información, consulte [List:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-139">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _Where)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-140">Iterador que designa el primer elemento que se conserva después de los elementos quitados o <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> si no existe ningún elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-140">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span>
          </span>
        </param>
        <param name="_Where">
          <span data-ttu-id="6f8ca-141">Posición del elemento que se va a borrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-141">The position of the element to erase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-142">Quita el único elemento de la secuencia controlada a la que apunta el iterador especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-142">Removes the single element of the controlled sequence pointed to by the given iterator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-143">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-143">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="6f8ca-144">Para obtener más información, consulte [List:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-144">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="erase">
      <MemberSignature Language="C#" Value="public void erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last_iter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void erase(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First_iter, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last_iter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Function erase (ByRef  As ContainerBidirectionalIterator(Of TValue), _First_iter As ContainerBidirectionalIterator(Of TValue), _Last_iter As ContainerBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ erase(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First_iter, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last_iter);" />
      <MemberSignature Language="F#" Value="abstract member erase :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.erase (, _First_iter, _Last_iter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_First_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-145">Iterador que designa el primer elemento que se conserva después de los elementos quitados o <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> si no existe ningún elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-145">An iterator that designates the first element remaining beyond any elements removed, or <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" /> if no such element exists.</span>
          </span>
        </param>
        <param name="_First_iter">
          <span data-ttu-id="6f8ca-146">Posición inicial del intervalo de elementos que se van a borrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-146">The beginning position of the range of elements to erase.</span>
          </span>
        </param>
        <param name="_Last_iter">
          <span data-ttu-id="6f8ca-147">Primera posición después del intervalo de elementos que se van a borrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-147">The first position beyond the range of elements to erase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-148">Quita los elementos de la secuencia controlada del intervalo \[*\_First\_iter*, *\_Last\_iter*).</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-148">Removes the elements of the controlled sequence in the range \[*\_First\_iter*, *\_Last\_iter*).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-149">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-149">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="6f8ca-150">Para obtener más información, consulte [List:: Erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-150">For more information, see [list::erase (STL/CLR)](/cpp/dotnet/list-stl-clr#erase).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front">
      <MemberSignature Language="C#" Value="public TValue front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.front" />
      <MemberSignature Language="VB.NET" Value="Public Function front () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue % front();" />
      <MemberSignature Language="F#" Value="abstract member front : unit -&gt; " Usage="iList.front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-151">Tiene acceso al primer elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-151">Accesses the first element of the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-152">Primer elemento de la secuencia controlada, que no debe estar vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-152">The first element of the controlled sequence, which must be non-empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-153">Para obtener más información, consulte [List:: front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-153">For more information, see [list::front (STL/CLR)](/cpp/dotnet/list-stl-clr#front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="front_item">
      <MemberSignature Language="C#" Value="public TValue front_item { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue front_item" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.IList`1.front_item" />
      <MemberSignature Language="VB.NET" Value="Public Property front_item As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue front_item { TValue get(); void set(TValue value); };" />
      <MemberSignature Language="F#" Value="member this.front_item : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.IList&lt;'Value&gt;.front_item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-154">Tiene acceso al primer elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-154">Accesses the first element of the container.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6f8ca-155">Primer elemento de la secuencia controlada, que no debe estar vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-155">The first element of the controlled sequence, which must be non-empty.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-156">Para obtener más información, consulte [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-156">For more information, see [list::front_item (STL/CLR)](/cpp/dotnet/list-stl-clr#front_item).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="insert">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-157">Agrega elementos al contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-157">Adds elements to the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-158">Para obtener más información, consulte [List:: Insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-158">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where_iter, System.Collections.IEnumerable _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where_iter, class System.Collections.IEnumerable _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where_iter As ContainerBidirectionalIterator(Of TValue), _Right As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where_iter, System::Collections::IEnumerable ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * System.Collections.IEnumerable -&gt; unit" Usage="iList.insert (_Where_iter, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where_iter" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="_Where_iter">
          <span data-ttu-id="6f8ca-159">Posición del contenedor delante de la que se va a insertar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-159">The position in the container to insert before.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="6f8ca-160">Enumeración cuyos elementos se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-160">The enumeration whose elements are to be inserted into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-161">Inserta los elementos del enumerador especificado en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-161">Inserts the elements of the specified enumerator into the container.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt;&amp; , class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function insert (ByRef  As ContainerBidirectionalIterator(Of TValue), _Where As ContainerBidirectionalIterator(Of TValue), _Val As TValue) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ % , Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert :  * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * 'Value -&gt; unit" Usage="iList.insert (, _Where, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-162">Iterador que designa el elemento recientemente insertado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-162">An iterator that designates the newly inserted element.</span>
          </span>
        </param>
        <param name="_Where">
          <span data-ttu-id="6f8ca-163">Posición en el contenedor que sigue inmediatamente a los elementos insertados recientemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-163">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="6f8ca-164">Valor del elemento que se va a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-164">The value of the element to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-165">Inserta un elemento con el valor especificado en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-165">Inserts an element of the given value into the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-166">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-166">An iterator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _First As IInputIterator(Of TValue), _Last As IInputIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; unit" Usage="iList.insert (_Where, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="6f8ca-167">Posición en el contenedor que sigue inmediatamente a los elementos insertados recientemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-167">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="6f8ca-168">Posición inicial del intervalo de elementos que se va a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-168">The beginning position of the range of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="6f8ca-169">Primera posición después del intervalo de elementos que se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-169">The first position beyond the range of elements to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-170">Inserta la secuencia [<paramref name="_First" />, <paramref name="_Last" />) en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-170">Inserts the sequence [<paramref name="_First" />, <paramref name="_Last" />) into the container.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="insert">
      <MemberSignature Language="C#" Value="public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void insert(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, int32 _Count, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub insert (_Where As ContainerBidirectionalIterator(Of TValue), _Count As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void insert(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, int _Count, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member insert : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * int * 'Value -&gt; unit" Usage="iList.insert (_Where, _Count, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Count" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="6f8ca-171">Posición en el contenedor que sigue inmediatamente a los elementos insertados recientemente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-171">The position in the container immediately following the newly inserted elements.</span>
          </span>
        </param>
        <param name="_Count">
          <span data-ttu-id="6f8ca-172">Número de elementos que se van a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-172">The number of elements to insert into the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="6f8ca-173">Valor del elemento que se va a insertar en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-173">The value of the element to insert into the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-174">Inserta un elemento con el valor especificado en el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-174">Inserts an element of the given value into the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="6f8ca-175">Para obtener más información, consulte [List:: Insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-175">For more information, see [list::insert (STL/CLR)](/cpp/dotnet/list-stl-clr#insert).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="merge">
      <MemberSignature Language="C#" Value="public void merge (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void merge(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub merge (_Right As IList(Of TValue), _Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void merge(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member merge : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.merge (_Right, _Pred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="6f8ca-176">Contenedor en el que se va a combinar este contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-176">The container to merge into this container.</span>
          </span>
        </param>
        <param name="_Pred">
          <span data-ttu-id="6f8ca-177">Functor de tipo booleano para comparar pares de elementos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-177">The Boolean functor for comparing pairs of elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-178">Combina dos secuencias controladas ordenadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-178">Merges two ordered controlled sequences.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-179">Para obtener más información, consulte [List:: Merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-179">For more information, see [list::merge (STL/CLR)](/cpp/dotnet/list-stl-clr#merge).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_back">
      <MemberSignature Language="C#" Value="public void pop_back ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_back() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_back" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_back ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_back();" />
      <MemberSignature Language="F#" Value="abstract member pop_back : unit -&gt; unit" Usage="iList.pop_back " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-180">Quita el último elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-180">Removes the last element from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-181">Para obtener más información, consulte [List:: pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-181">For more information, see [list::pop_back (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="pop_front">
      <MemberSignature Language="C#" Value="public void pop_front ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void pop_front() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.pop_front" />
      <MemberSignature Language="VB.NET" Value="Public Sub pop_front ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void pop_front();" />
      <MemberSignature Language="F#" Value="abstract member pop_front : unit -&gt; unit" Usage="iList.pop_front " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-182">Quita el primer elemento del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-182">Removes the first element from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-183">Para obtener más información, consulte [List:: pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-183">For more information, see [list::pop_front (STL/CLR)](/cpp/dotnet/list-stl-clr#pop_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_back">
      <MemberSignature Language="C#" Value="public void push_back (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_back(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_back (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_back(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_back : 'Value -&gt; unit" Usage="iList.push_back _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="6f8ca-184">Valor del elemento que se va a anexar al contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-184">The value of the element to append to the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-185">Agrega un nuevo elemento al final del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-185">Adds a new element to the end of the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-186">Para obtener más información, consulte [List:: push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-186">For more information, see [list::push_back (STL/CLR)](/cpp/dotnet/list-stl-clr#push_back).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="push_front">
      <MemberSignature Language="C#" Value="public void push_front (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void push_front(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub push_front (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void push_front(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member push_front : 'Value -&gt; unit" Usage="iList.push_front _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="6f8ca-187">Valor del elemento que se va a insertar al principio del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-187">The value of the element to insert at the beginning of the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-188">Agrega un nuevo elemento al principio del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-188">Adds a new element to the beginning of the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-189">Para obtener más información, consulte [List:: push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-189">For more information, see [list::push_front (STL/CLR)](/cpp/dotnet/list-stl-clr#push_front).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rbegin">
      <MemberSignature Language="C#" Value="public void rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rbegin(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rbegin (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rbegin(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rbegin :  -&gt; unit" Usage="iList.rbegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-190">Iterador inverso que designa el último elemento de la secuencia controlada o la posición inmediatamente después del principio de una secuencia vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-190">A reverse iterator that designates the last element of the controlled sequence, or the position just beyond the beginning of an empty sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-191">Por lo tanto, designa el parámetro <paramref name="beginning" /> de la secuencia inversa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-191">Hence, it designates the <paramref name="beginning" /> of the reverse sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-192">Se usa para obtener un iterador que designe el principio de la secuencia controlada mostrada en orden inverso, indicado por <paramref name="current" />, pero su estado puede cambiar si cambia la longitud de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-192">You use it to obtain an iterator that designates the <paramref name="current" /> beginning of the controlled sequence that is seen in reverse order, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-193">Designa el principio de la secuencia controlada inversa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-193">Designates the beginning of the reversed controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-194">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-194">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="6f8ca-195">Para obtener más información, consulte [List:: rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-195">For more information, see [list::rbegin (STL/CLR)](/cpp/dotnet/list-stl-clr#rbegin).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove">
      <MemberSignature Language="C#" Value="public void remove (TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove(!TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove (_Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove(TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member remove : 'Value -&gt; unit" Usage="iList.remove _Val" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Val">
          <span data-ttu-id="6f8ca-196">Valor del elemento que se va a quitar del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-196">The value of the element to remove from the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-197">Quita un elemento que tiene un valor especificado desde el contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-197">Removes an element that has a specified value from the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-198">Para obtener más información, consulte [List:: Remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-198">For more information, see [list::remove (STL/CLR)](/cpp/dotnet/list-stl-clr#remove).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="remove_if">
      <MemberSignature Language="C#" Value="public void remove_if (Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void remove_if(class Microsoft.VisualC.StlClr.UnaryDelegate`2&lt;!TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub remove_if (_Pred As UnaryDelegate(Of TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void remove_if(Microsoft::VisualC::StlClr::UnaryDelegate&lt;TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member remove_if : Microsoft.VisualC.StlClr.UnaryDelegate&lt;'Value, bool&gt; -&gt; unit" Usage="iList.remove_if _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.UnaryDelegate&lt;TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="6f8ca-199">Prueba de tipo booleano que determina los elementos que se van a quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-199">A Boolean test that determines which elements will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-200">Quita los elementos del contenedor que pasan una prueba especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-200">Removes elements from the container that pass a specified test.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="6f8ca-201">Para obtener más información, consulte [List:: remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-201">For more information, see [list::remove_if (STL/CLR)](/cpp/dotnet/list-stl-clr#remove_if).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="rend">
      <MemberSignature Language="C#" Value="public void rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.void rend(class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function rend (ByRef  As ReverseBidirectionalIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ rend(Microsoft::VisualC::StlClr::Generic::ReverseBidirectionalIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="abstract member rend :  -&gt; unit" Usage="iList.rend " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="">
          <span data-ttu-id="6f8ca-202">Iterador inverso que apunta inmediatamente después del principio de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-202">A reverse iterator that points just beyond the beginning of the controlled sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-203">Por lo tanto, designa el parámetro <paramref name="end" /> de la secuencia inversa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-203">Hence, it designates the <paramref name="end" /> of the reverse sequence.</span>
          </span>
          <span data-ttu-id="6f8ca-204">Se usa para obtener un iterador que designe el final de la secuencia controlada mostrada en orden inverso, indicado por <paramref name="current" />, pero su estado puede cambiar si cambia la longitud de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-204">You use it to obtain an iterator that designates the <paramref name="current" /> end of the controlled sequence seen in reverse order, but its status can change if the length of the controlled sequence changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-205">Designa el final de la secuencia controlada inversa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-205">Designates the end of the reversed controlled sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-206">Un iterador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-206">An iterator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
 <span data-ttu-id="6f8ca-207">Para obtener más información, consulte [List:: rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-207">For more information, see [list::rend (STL/CLR)](/cpp/dotnet/list-stl-clr#rend).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="resize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-208">Cambia el número de elementos del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-208">Changes the number of elements in the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-209">Para obtener más información, consulte [List:: Resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-209">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize);" />
      <MemberSignature Language="F#" Value="abstract member resize : int -&gt; unit" Usage="iList.resize _Newsize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Newsize">
          <span data-ttu-id="6f8ca-210">Nuevo tamaño del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-210">The new size of the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-211">Cambia el número de elementos del contenedor al tamaño especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-211">Changes the number of elements in the container to the specified size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-212">Para obtener más información, consulte [List:: Resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-212">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="resize">
      <MemberSignature Language="C#" Value="public void resize (int _Newsize, TValue _Val);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void resize(int32 _Newsize, !TValue _Val) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub resize (_Newsize As Integer, _Val As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void resize(int _Newsize, TValue _Val);" />
      <MemberSignature Language="F#" Value="abstract member resize : int * 'Value -&gt; unit" Usage="iList.resize (_Newsize, _Val)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Newsize" Type="System.Int32" />
        <Parameter Name="_Val" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="_Newsize">
          <span data-ttu-id="6f8ca-213">Nuevo tamaño del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-213">The new size of the container.</span>
          </span>
        </param>
        <param name="_Val">
          <span data-ttu-id="6f8ca-214">Valor de los elementos de relleno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-214">The value of the padding elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-215">Cambia el número de elementos del contenedor al tamaño especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-215">Changes the number of elements in the container to the specified size.</span>
          </span>
          <span data-ttu-id="6f8ca-216">Si el nuevo tamaño es mayor que el tamaño anterior, los valores especificados se anexarán al contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-216">If the new size is larger than the old size, the given values will be appended to the container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-217">Para obtener más información, consulte [List:: Resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-217">For more information, see [list::resize (STL/CLR)](/cpp/dotnet/list-stl-clr#resize).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reverse">
      <MemberSignature Language="C#" Value="public void reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void reverse();" />
      <MemberSignature Language="F#" Value="abstract member reverse : unit -&gt; unit" Usage="iList.reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-218">Invierte los elementos de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-218">Reverses the elements of the controlled sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-219">Para obtener más información, consulte [List:: Reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-219">For more information, see [list::reverse (STL/CLR)](/cpp/dotnet/list-stl-clr#reverse).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="size">
      <MemberSignature Language="C#" Value="public int size ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 size() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.size" />
      <MemberSignature Language="VB.NET" Value="Public Function size () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int size();" />
      <MemberSignature Language="F#" Value="abstract member size : unit -&gt; int" Usage="iList.size " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-220">Cuenta el número de elementos del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-220">Counts the number of elements in the container.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f8ca-221">Longitud de la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-221">The length of the controlled sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-222">Para obtener más información, consulte [List:: Size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-222">For more information, see [list::size (STL/CLR)](/cpp/dotnet/list-stl-clr#size).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="sort">
      <MemberSignature Language="C#" Value="public void sort (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void sort(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub sort (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void sort(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member sort : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.sort _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="6f8ca-223">Operador que se utilizará con el fin de comparar los elementos para su ordenación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-223">The operator that will be used to compare elements for ordering.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-224">Ordena la secuencia controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-224">Orders the controlled sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-225">Para obtener más información, consulte [List:: Sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-225">For more information, see [list::sort (STL/CLR)](/cpp/dotnet/list-stl-clr#sort).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="splice">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f8ca-226">Reordena los vínculos situados entre nodos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-226">Reorders links between nodes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-227">Para obtener más información, consulte [List:: splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-227">For more information, see [list::splice (STL/CLR)](/cpp/dotnet/list-stl-clr#splice).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="6f8ca-228">Posición del contenedor delante de la que se debe unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-228">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="6f8ca-229">Contenedor desde el que se une.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-229">The container to splice from.</span>
          </span>
          <span data-ttu-id="6f8ca-230">Todos los elementos se quitarán de este contenedor después de la operación de unión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-230">All elements will be removed from this container after the splice operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-231">Inserta la secuencia especificada en el contenedor delante de la posición indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-231">Inserts the given sequence into the container before the specified position.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="6f8ca-232">Posición del contenedor delante de la que se debe unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-232">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="6f8ca-233">Contenedor desde el que se une.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-233">The container to splice from.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="6f8ca-234">Posición del elemento que se va a unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-234">The position of the element to splice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-235">Quita el elemento del contenedor especificado al que apunta <paramref name="_First" /> y lo inserta delante del elemento de la secuencia controlada a la que apunta <paramref name="_Where" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-235">Removes the element from the given container pointed to by <paramref name="_First" /> and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="splice">
      <MemberSignature Language="C#" Value="public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Where, Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt; _Last);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void splice(class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Where, class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _First, class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1&lt;!TValue&gt; _Last) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub splice (_Where As ContainerBidirectionalIterator(Of TValue), _Right As IList(Of TValue), _First As ContainerBidirectionalIterator(Of TValue), _Last As ContainerBidirectionalIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void splice(Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Where, Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _First, Microsoft::VisualC::StlClr::Generic::ContainerBidirectionalIterator&lt;TValue&gt; ^ _Last);" />
      <MemberSignature Language="F#" Value="abstract member splice : Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.IList&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;'Value&gt; -&gt; unit" Usage="iList.splice (_Where, _Right, _First, _Last)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Where" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
        <Parameter Name="_First" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
        <Parameter Name="_Last" Type="Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Where">
          <span data-ttu-id="6f8ca-236">Posición del contenedor delante de la que se debe unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-236">The position in the container before which to splice.</span>
          </span>
        </param>
        <param name="_Right">
          <span data-ttu-id="6f8ca-237">Contenedor desde el que se une.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-237">The container to splice from.</span>
          </span>
        </param>
        <param name="_First">
          <span data-ttu-id="6f8ca-238">Posición inicial del intervalo de elementos que se van a unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-238">The beginning position of the range of elements to splice.</span>
          </span>
        </param>
        <param name="_Last">
          <span data-ttu-id="6f8ca-239">Primera posición después del intervalo de elementos que se van a unir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-239">The first position beyond the range of elements to splice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-240">Quita el intervalo de elementos [<paramref name="_First" />, <paramref name="_Last" />) desde el contenedor especificado y lo inserta delante del elemento de la secuencia controlada a la que apunta <paramref name="_Where" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-240">Removes the range of elements [<paramref name="_First" />, <paramref name="_Last" />) from the given container and inserts it before the element in the controlled sequence pointed to by <paramref name="_Where" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="swap">
      <MemberSignature Language="C#" Value="public void swap (Microsoft.VisualC.StlClr.IList&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void swap(class Microsoft.VisualC.StlClr.IList`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub swap (_Right As IList(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void swap(Microsoft::VisualC::StlClr::IList&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member swap : Microsoft.VisualC.StlClr.IList&lt;'Value&gt; -&gt; unit" Usage="iList.swap _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.IList&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right">
          <span data-ttu-id="6f8ca-241">Contenedor con el que se va a intercambiar el contenido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-241">The container to swap contents with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-242">Intercambia el contenido de dos contenedores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-242">Swaps the contents of two containers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-243">Para obtener más información, consulte [List:: swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-243">For more information, see [list::swap (STL/CLR)](/cpp/dotnet/list-stl-clr#swap).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="unique">
      <MemberSignature Language="C#" Value="public void unique (Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,bool&gt; _Pred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void unique(class Microsoft.VisualC.StlClr.BinaryDelegate`3&lt;!TValue, !TValue, bool&gt; _Pred) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub unique (_Pred As BinaryDelegate(Of TValue, TValue, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void unique(Microsoft::VisualC::StlClr::BinaryDelegate&lt;TValue, TValue, bool&gt; ^ _Pred);" />
      <MemberSignature Language="F#" Value="abstract member unique : Microsoft.VisualC.StlClr.BinaryDelegate&lt;'Value, 'Value, bool&gt; -&gt; unit" Usage="iList.unique _Pred" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pred" Type="Microsoft.VisualC.StlClr.BinaryDelegate&lt;TValue,TValue,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="_Pred">
          <span data-ttu-id="6f8ca-244">Comparador que determina si los pares de elemento son únicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-244">The comparer that determines whether element pairs are unique.</span>
          </span>
          <span data-ttu-id="6f8ca-245">El elemento que no es único se quitará del contenedor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-245">An element that is not unique will be removed from the container.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f8ca-246">Quita los elementos adyacentes que superan una prueba especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f8ca-246">Removes adjacent elements that pass a specified test.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f8ca-247">Para obtener más información, consulte [List:: UNIQUE (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span><span class="sxs-lookup"><span data-stu-id="6f8ca-247">For more information, see [list::unique (STL/CLR)](/cpp/dotnet/list-stl-clr#unique).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>