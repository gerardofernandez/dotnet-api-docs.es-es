<Type Name="ServiceXNameTypeConverter" FullName="System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="542ccad830bcdce30946a6b75d9ad42933eab2cd" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53515769" /></Metadata><TypeSignature Language="C#" Value="public class ServiceXNameTypeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceXNameTypeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceXNameTypeConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceXNameTypeConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type ServiceXNameTypeConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="224f2-101">Una implementación específica de WCF de un convertidor de tipos <see cref="T:System.Xml.Linq.XName" /> que no requiere que las instancias de <see cref="T:System.Xml.Linq.XName" /> especifiquen un espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="224f2-101">A WCF-specific implementation of a <see cref="T:System.Xml.Linq.XName" /> type converter that does not require <see cref="T:System.Xml.Linq.XName" /> instances to specify a namespace.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceXNameTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceXNameTypeConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="224f2-102">Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />.</span><span class="sxs-lookup"><span data-stu-id="224f2-102">Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="serviceXNameTypeConverter.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="224f2-103">Contexto del descriptor de tipos</span><span class="sxs-lookup"><span data-stu-id="224f2-103">The type descriptor context</span></span></param>
        <param name="sourceType"><span data-ttu-id="224f2-104">Tipo desde el que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="224f2-104">The type to convert from.</span></span></param>
        <summary><span data-ttu-id="224f2-105">Obtiene un valor que indica si este convertidor puede convertir un objeto de un tipo a una clase <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="224f2-105">Gets a value that indicates whether this converter can convert an object of one type to an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="224f2-106">Es <see langword="true" /> si el convertidor puede realizar la conversión; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="224f2-106"><see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="serviceXNameTypeConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="224f2-107">Contexto del descriptor de tipos.</span><span class="sxs-lookup"><span data-stu-id="224f2-107">The type descriptor context.</span></span></param>
        <param name="destinationType"><span data-ttu-id="224f2-108">Tipo al que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="224f2-108">The type to convert to.</span></span></param>
        <summary><span data-ttu-id="224f2-109">Obtiene un valor que indica si este convertidor puede convertir una instancia de <see cref="T:System.Xml.Linq.XName" /> en un objeto del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="224f2-109">Gets a value that indicates whether this converter can convert an <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="224f2-110">Es <see langword="true" /> si el convertidor puede realizar la conversión; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="224f2-110"><see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="serviceXNameTypeConverter.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="224f2-111">Contexto del descriptor de tipos.</span><span class="sxs-lookup"><span data-stu-id="224f2-111">The type descriptor context.</span></span></param>
        <param name="culture"><span data-ttu-id="224f2-112">Referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="224f2-112">The current culture.</span></span></param>
        <param name="value"><span data-ttu-id="224f2-113">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="224f2-113">The object to convert.</span></span></param>
        <summary><span data-ttu-id="224f2-114">Convierte el valor especificado en una instancia de <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="224f2-114">Converts the specified value to a <see cref="T:System.Xml.Linq.XName" /> instance.</span></span></summary>
        <returns><span data-ttu-id="224f2-115">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="224f2-115">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="224f2-116">Este método no agregará un espacio de nombres predeterminado si no se especifica uno en el objeto que se está convirtiendo.</span><span class="sxs-lookup"><span data-stu-id="224f2-116">This method will not add a default namespace if one is not specified in the object being converted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="serviceXNameTypeConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="224f2-117">Contexto del descriptor de tipos.</span><span class="sxs-lookup"><span data-stu-id="224f2-117">The type descriptor context.</span></span></param>
        <param name="culture"><span data-ttu-id="224f2-118">Referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="224f2-118">The current culture.</span></span></param>
        <param name="value"><span data-ttu-id="224f2-119">Valor que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="224f2-119">The value to convert.</span></span></param>
        <param name="destinationType"><span data-ttu-id="224f2-120">Tipo al que se va a convertir el valor.</span><span class="sxs-lookup"><span data-stu-id="224f2-120">The type to convert the value to.</span></span></param>
        <summary><span data-ttu-id="224f2-121">Convierte una instancia de <see cref="T:System.Xml.Linq.XName" /> en un objeto del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="224f2-121">Converts a <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span></span></summary>
        <returns><span data-ttu-id="224f2-122">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="224f2-122">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="224f2-123">Este método devuelve un nombre local sin calificar si no se ha proporcionado ningún espacio de nombres en la clase <xref:System.Xml.Linq.XName> que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="224f2-123">This method returns an unqualified local name if no namespace has been provided in the <xref:System.Xml.Linq.XName> being converted.</span></span> <span data-ttu-id="224f2-124">Un nombre local sin calificar es una clase <xref:System.Xml.Linq.XName> que no contiene ningún espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="224f2-124">An unqualified local name is a <xref:System.Xml.Linq.XName> that contains no namespace.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>