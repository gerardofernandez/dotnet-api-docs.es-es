<Type Name="CommandManager" FullName="System.Windows.Input.CommandManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67872d417ef12f0a53a5ee10a7a4feeee7555e71" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52224896" /></Metadata><TypeSignature Language="C#" Value="public sealed class CommandManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CommandManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommandManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandManager sealed" />
  <TypeSignature Language="F#" Value="type CommandManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="229c2-101">Proporciona métodos de utilidad relacionados con los comandos que registran objetos <see cref="T:System.Windows.Input.CommandBinding" /> y <see cref="T:System.Windows.Input.InputBinding" /> para propietarios de clase y comandos, agregan y quitan controladores de eventos de comando y proporcionan servicios para consultar el estado de un comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-101">Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding" /> and <see cref="T:System.Windows.Input.InputBinding" /> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229c2-102">El <xref:System.Windows.Input.CommandManager> es responsable de administrar los comandos enrutados.</span><span class="sxs-lookup"><span data-stu-id="229c2-102">The <xref:System.Windows.Input.CommandManager> is responsible for managing routed commands.</span></span>  <span data-ttu-id="229c2-103">Para obtener más información acerca de los comandos, consulte [información general sobre comandos](~/docs/framework/wpf/advanced/commanding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="229c2-103">For more information about commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
 <span data-ttu-id="229c2-104">Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> para registrar un <xref:System.Windows.Input.CommandBinding> a una clase en lugar de una instancia.</span><span class="sxs-lookup"><span data-stu-id="229c2-104">Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="229c2-105">Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> para registrar un <xref:System.Windows.Input.InputBinding> a una clase en lugar de una instancia.</span><span class="sxs-lookup"><span data-stu-id="229c2-105">Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="229c2-106">El método <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> fuerza a <xref:System.Windows.Input.CommandManager> a generar el evento <xref:System.Windows.Input.CommandManager.RequerySuggested>.</span><span class="sxs-lookup"><span data-stu-id="229c2-106">The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  <span data-ttu-id="229c2-107">El <xref:System.Windows.Input.CommandManager.RequerySuggested> evento informa a un origen de comando para el comando está asociado para determinar si puede ejecutar el comando de consulta.</span><span class="sxs-lookup"><span data-stu-id="229c2-107">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ICommandSource" />
    <altmember cref="T:System.Windows.Input.ICommand" />
  </Docs>
  <Members>
    <Member MemberName="AddCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-108">Elemento al que se va a asociar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-108">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-109">puede ejecutar el controlador.</span><span class="sxs-lookup"><span data-stu-id="229c2-109">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="229c2-110">Asocia el <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> especificado al elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-110">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-111">En el ejemplo siguiente se crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> y los asocia a un <xref:System.Windows.Controls.Button> que es un origen de comando para el <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-111">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="229c2-112">En primer lugar, el <xref:System.Windows.Controls.Button> se creó y asoció la <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-112">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="229c2-113">Después, se crean <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y <xref:System.Windows.Input.ExecutedRoutedEventHandler>.</span><span class="sxs-lookup"><span data-stu-id="229c2-113">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="229c2-114">Y por último, los controladores se asocian a la <xref:System.Windows.Controls.Button> utilizando el <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> y <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="229c2-114">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-115">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-115"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-116">Elemento al que se va a asociar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-116">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-117">Controlador ejecutado.</span><span class="sxs-lookup"><span data-stu-id="229c2-117">The executed handler.</span></span></param>
        <summary><span data-ttu-id="229c2-118">Asocia el <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> especificado al elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-118">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-119">En el ejemplo siguiente se crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> y los asocia a un <xref:System.Windows.Controls.Button> que es un origen de comando para el <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-119">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="229c2-120">En primer lugar, el <xref:System.Windows.Controls.Button> se creó y asoció la <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-120">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="229c2-121">Después, se crean <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y <xref:System.Windows.Input.ExecutedRoutedEventHandler>.</span><span class="sxs-lookup"><span data-stu-id="229c2-121">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="229c2-122">Y por último, los controladores se asocian a la <xref:System.Windows.Controls.Button> utilizando el <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> y <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="229c2-122">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-123">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-123"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-124">Elemento al que se va a asociar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-124">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-125">puede ejecutar el controlador.</span><span class="sxs-lookup"><span data-stu-id="229c2-125">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="229c2-126">Asocia el <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> especificado al elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-126">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-127">En el ejemplo siguiente se crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> y los asocia a un <xref:System.Windows.Controls.Button> que es un origen de comando para el <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-127">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="229c2-128">En primer lugar, el <xref:System.Windows.Controls.Button> se creó y asoció la <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-128">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="229c2-129">Después, se crean <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y <xref:System.Windows.Input.ExecutedRoutedEventHandler>.</span><span class="sxs-lookup"><span data-stu-id="229c2-129">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="229c2-130">Por último, los controladores se asocian a la <xref:System.Windows.Controls.Button> utilizando el <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> y <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="229c2-130">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-131">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-131"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddPreviewExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-132">Elemento al que se va a asociar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-132">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-133">puede ejecutar el controlador.</span><span class="sxs-lookup"><span data-stu-id="229c2-133">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="229c2-134">Asocia el <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> especificado al elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-134">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-135">En el ejemplo siguiente se crea un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> y los asocia a un <xref:System.Windows.Controls.Button> que es un origen de comando para el <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-135">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="229c2-136">En primer lugar, el <xref:System.Windows.Controls.Button> se creó y asoció la <xref:System.Windows.Input.ApplicationCommands.Help%2A> comando.</span><span class="sxs-lookup"><span data-stu-id="229c2-136">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="229c2-137">Después, se crean <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y <xref:System.Windows.Input.ExecutedRoutedEventHandler>.</span><span class="sxs-lookup"><span data-stu-id="229c2-137">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="229c2-138">Por último, los controladores se asocian a la <xref:System.Windows.Controls.Button> utilizando el <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> y <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="229c2-138">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-139">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-139"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.CanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="F#" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" Usage="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="229c2-140">Se produce cuando se llama al método <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> en <see cref="T:System.Windows.Input.RoutedCommand" /> y no se controla el evento <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-140">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> event was not handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="229c2-141">Información sobre eventos enrutados</span><span class="sxs-lookup"><span data-stu-id="229c2-141">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="229c2-142">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="229c2-142">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|<span data-ttu-id="229c2-143">Estrategia de enrutamiento</span><span class="sxs-lookup"><span data-stu-id="229c2-143">Routing strategy</span></span>|<span data-ttu-id="229c2-144">Propagación</span><span class="sxs-lookup"><span data-stu-id="229c2-144">Bubbling</span></span>|  
|<span data-ttu-id="229c2-145">delegado</span><span class="sxs-lookup"><span data-stu-id="229c2-145">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent CanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent CanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.CanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ CanExecuteEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable CanExecuteEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.CanExecuteEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="229c2-146">Identifica el evento adjunto <see cref="E:System.Windows.Input.CommandManager.CanExecute" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-146">Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.Executed" />
      <MemberSignature Language="VB.NET" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="F#" Value="see AddExecutedHandler, and RemoveExecutedHandler" Usage="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="229c2-147">Se produce cuando se llama al método <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> en <see cref="T:System.Windows.Input.RoutedCommand" /> y no se controla el evento <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-147">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> event was not handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="229c2-148">Información sobre eventos enrutados</span><span class="sxs-lookup"><span data-stu-id="229c2-148">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="229c2-149">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="229c2-149">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|<span data-ttu-id="229c2-150">Estrategia de enrutamiento</span><span class="sxs-lookup"><span data-stu-id="229c2-150">Routing strategy</span></span>|<span data-ttu-id="229c2-151">Propagación</span><span class="sxs-lookup"><span data-stu-id="229c2-151">Bubbling</span></span>|  
|<span data-ttu-id="229c2-152">delegado</span><span class="sxs-lookup"><span data-stu-id="229c2-152">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />
      </Docs>
    </Member>
    <Member MemberName="ExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.ExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ExecutedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExecutedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.ExecutedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="229c2-153">Identifica el evento adjunto <see cref="E:System.Windows.Input.CommandManager.Executed" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-153">Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateRequerySuggested">
      <MemberSignature Language="C#" Value="public static void InvalidateRequerySuggested ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvalidateRequerySuggested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InvalidateRequerySuggested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InvalidateRequerySuggested();" />
      <MemberSignature Language="F#" Value="static member InvalidateRequerySuggested : unit -&gt; unit" Usage="System.Windows.Input.CommandManager.InvalidateRequerySuggested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="229c2-154">Obliga a <see cref="T:System.Windows.Input.CommandManager" /> a provocar el evento <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-154">Forces the <see cref="T:System.Windows.Input.CommandManager" /> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229c2-155">El <xref:System.Windows.Input.CommandManager> solo presta atención a ciertas condiciones para determinar cuándo ha cambiado el destino del comando, como un cambio en el foco de teclado.</span><span class="sxs-lookup"><span data-stu-id="229c2-155">The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</span></span>  <span data-ttu-id="229c2-156">En situaciones donde la <xref:System.Windows.Input.CommandManager> no determinar con certeza un cambio en las condiciones que provocan un comando a no ser capaz de ejecutar, <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> se puede llamar para forzar la <xref:System.Windows.Input.CommandManager> para generar el <xref:System.Windows.Input.CommandManager.RequerySuggested> eventos.</span><span class="sxs-lookup"><span data-stu-id="229c2-156">In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="229c2-157">En el ejemplo siguiente se usa un <xref:System.Windows.Threading.DispatcherTimer> para llamar periódicamente a <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> para forzar la <xref:System.Windows.Input.CommandManager> para generar el <xref:System.Windows.Input.CommandManager.RequerySuggested> eventos.</span><span class="sxs-lookup"><span data-stu-id="229c2-157">The following example uses a <xref:System.Windows.Threading.DispatcherTimer> to periodically call <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
 [!code-csharp[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" Usage="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="229c2-158">Se produce cuando se llama al método <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> en <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-158">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="229c2-159">Información sobre eventos enrutados</span><span class="sxs-lookup"><span data-stu-id="229c2-159">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="229c2-160">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="229c2-160">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|<span data-ttu-id="229c2-161">Estrategia de enrutamiento</span><span class="sxs-lookup"><span data-stu-id="229c2-161">Routing strategy</span></span>|<span data-ttu-id="229c2-162">Túnel</span><span class="sxs-lookup"><span data-stu-id="229c2-162">Tunneling</span></span>|  
|<span data-ttu-id="229c2-163">delegado</span><span class="sxs-lookup"><span data-stu-id="229c2-163">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.CanExecute" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewCanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewCanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewCanExecuteEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewCanExecuteEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.PreviewCanExecuteEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="229c2-164">Identifica el evento adjunto <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-164">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" Usage="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="229c2-165">Se produce cuando se llama al método <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> en <see cref="T:System.Windows.Input.RoutedCommand" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-165">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="229c2-166">Información sobre eventos enrutados</span><span class="sxs-lookup"><span data-stu-id="229c2-166">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="229c2-167">Campo de identificador</span><span class="sxs-lookup"><span data-stu-id="229c2-167">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|<span data-ttu-id="229c2-168">Estrategia de enrutamiento</span><span class="sxs-lookup"><span data-stu-id="229c2-168">Routing strategy</span></span>|<span data-ttu-id="229c2-169">Túnel</span><span class="sxs-lookup"><span data-stu-id="229c2-169">Tunneling</span></span>|  
|<span data-ttu-id="229c2-170">delegado</span><span class="sxs-lookup"><span data-stu-id="229c2-170">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.Executed" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewExecutedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewExecutedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.PreviewExecutedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="229c2-171">Identifica el evento adjunto <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-171">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassCommandBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassCommandBinding (Type type, System.Windows.Input.CommandBinding commandBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassCommandBinding(class System.Type type, class System.Windows.Input.CommandBinding commandBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassCommandBinding(Type ^ type, System::Windows::Input::CommandBinding ^ commandBinding);" />
      <MemberSignature Language="F#" Value="static member RegisterClassCommandBinding : Type * System.Windows.Input.CommandBinding -&gt; unit" Usage="System.Windows.Input.CommandManager.RegisterClassCommandBinding (type, commandBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="commandBinding" Type="System.Windows.Input.CommandBinding" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="229c2-172">Clase con la que debe registrarse <paramref name="commandBinding" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-172">The class with which to register <paramref name="commandBinding" />.</span></span></param>
        <param name="commandBinding"><span data-ttu-id="229c2-173">Enlace de comandos que debe registrarse.</span><span class="sxs-lookup"><span data-stu-id="229c2-173">The command binding to register.</span></span></param>
        <summary><span data-ttu-id="229c2-174">Registra <see cref="T:System.Windows.Input.CommandBinding" /> con el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-174">Registers a <see cref="T:System.Windows.Input.CommandBinding" /> with the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229c2-175">Este método permite un <xref:System.Windows.Input.CommandBinding> va a asociar a una clase en lugar de una instancia de una clase.</span><span class="sxs-lookup"><span data-stu-id="229c2-175">This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-176">El valor de <paramref name="type" /> o <paramref name="commandBinding" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-176"><paramref name="type" /> or <paramref name="commandBinding" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassInputBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassInputBinding (Type type, System.Windows.Input.InputBinding inputBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassInputBinding(class System.Type type, class System.Windows.Input.InputBinding inputBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassInputBinding(Type ^ type, System::Windows::Input::InputBinding ^ inputBinding);" />
      <MemberSignature Language="F#" Value="static member RegisterClassInputBinding : Type * System.Windows.Input.InputBinding -&gt; unit" Usage="System.Windows.Input.CommandManager.RegisterClassInputBinding (type, inputBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="inputBinding" Type="System.Windows.Input.InputBinding" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="229c2-177">Tipo con el que debe registrarse <paramref name="inputBinding" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-177">The type to register <paramref name="inputBinding" /> with.</span></span></param>
        <param name="inputBinding"><span data-ttu-id="229c2-178">Enlace de entrada que debe registrarse.</span><span class="sxs-lookup"><span data-stu-id="229c2-178">The input binding to register.</span></span></param>
        <summary><span data-ttu-id="229c2-179">Registra el <see cref="T:System.Windows.Input.InputBinding" /> especificado con el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-179">Registers the specified <see cref="T:System.Windows.Input.InputBinding" /> with the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229c2-180">Este método permite una <xref:System.Windows.Input.InputBinding> va a asociar a un tipo en lugar de una instancia de una clase.</span><span class="sxs-lookup"><span data-stu-id="229c2-180">This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-181">El valor de <paramref name="type" /> o <paramref name="inputBinding" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-181"><paramref name="type" /> or <paramref name="inputBinding" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemoveCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemoveCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-182">Elemento del que se va a quitar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-182">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-183">puede ejecutar el controlador.</span><span class="sxs-lookup"><span data-stu-id="229c2-183">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="229c2-184">Desasocia el <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> especificado del elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-184">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-185">En el ejemplo siguiente se separa un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> que tenía anteriormente se ha adjuntado a un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="229c2-185">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-186">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-186"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemoveExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-187">Elemento del que se va a quitar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-187">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-188">Controlador ejecutado.</span><span class="sxs-lookup"><span data-stu-id="229c2-188">The executed handler.</span></span></param>
        <summary><span data-ttu-id="229c2-189">Desasocia el <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> especificado del elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-189">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-190">En el ejemplo siguiente se separa un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> que tenía anteriormente se ha adjuntado a un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="229c2-190">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-191">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-191"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-192">Elemento del que se va a quitar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-192">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-193">puede ejecutar el controlador.</span><span class="sxs-lookup"><span data-stu-id="229c2-193">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="229c2-194">Desasocia el <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> especificado del elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-194">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-195">En el ejemplo siguiente se separa un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> que tenía anteriormente se ha adjuntado a un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="229c2-195">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-196">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-196"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemovePreviewExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="229c2-197">Elemento del que se va a quitar <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-197">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="229c2-198">Controlador ejecutado.</span><span class="sxs-lookup"><span data-stu-id="229c2-198">The executed handler.</span></span></param>
        <summary><span data-ttu-id="229c2-199">Desasocia el <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> especificado del elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="229c2-199">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="229c2-200">En el ejemplo siguiente se separa un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> y un <xref:System.Windows.Input.ExecutedRoutedEventHandler> que tenía anteriormente se ha adjuntado a un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="229c2-200">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="229c2-201">El valor de <paramref name="element" /> o <paramref name="handler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="229c2-201"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RequerySuggested">
      <MemberSignature Language="C#" Value="public static event EventHandler RequerySuggested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RequerySuggested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.RequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event RequerySuggested As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ RequerySuggested;" />
      <MemberSignature Language="F#" Value="member this.RequerySuggested : EventHandler " Usage="member this.RequerySuggested : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="229c2-202">Se produce cuando <see cref="T:System.Windows.Input.CommandManager" /> detecta condiciones que podrían cambiar la capacidad de un comando de ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="229c2-202">Occurs when the <see cref="T:System.Windows.Input.CommandManager" /> detects conditions that might change the ability of a command to execute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="229c2-203">Este evento acapara el controlador como una referencia débil.</span><span class="sxs-lookup"><span data-stu-id="229c2-203">This event holds onto the handler as a weak reference.</span></span> <span data-ttu-id="229c2-204">Los objetos que realizan escuchas para este evento deben mantener una referencia fuerte a su controlador de eventos para evitar que se recolecte.</span><span class="sxs-lookup"><span data-stu-id="229c2-204">Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</span></span> <span data-ttu-id="229c2-205">Esto puede realizarse al tener un campo privado y asignar al controlador como el valor antes o después de adjuntar a este evento.</span><span class="sxs-lookup"><span data-stu-id="229c2-205">This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>