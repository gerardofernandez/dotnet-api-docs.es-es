<Type Name="Vector&lt;T&gt;" FullName="System.Numerics.Vector&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dcc4281f664e28ee090bae43331f08f750d0a78f" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56762955" /></Metadata><TypeSignature Language="C#" Value="public struct Vector&lt;T&gt; : IEquatable&lt;System.Numerics.Vector&lt;T&gt;&gt;, IFormattable where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Vector`1&lt;struct .ctor (class System.ValueType) T&gt; extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Numerics.Vector`1&lt;!T&gt;&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Numerics.Vector`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector(Of T)&#xA;Implements IEquatable(Of Vector(Of T)), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : value classpublic value class Vector : IEquatable&lt;System::Numerics::Vector&lt;T&gt;&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type Vector&lt;'T (requires 'T : struct)&gt; = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Numerics.Vectors</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Numerics.Vector&lt;T&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="e3a2d-101">Tipo de vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-101">The vector type.</span></span> <span data-ttu-id="e3a2d-102"><c>T</c> puede ser cualquier tipo numérico primitivo.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-102"><c>T</c> can be any primitive numeric type.</span></span></typeparam>
    <summary><span data-ttu-id="e3a2d-103">Representa un vector único de un tipo numérico especificado que es adecuado para la optimización de bajo nivel de algoritmos paralelos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-103">Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-104"><xref:System.Numerics.Vector%601> es una estructura inmutable que representa un vector único de un tipo numérico especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-104"><xref:System.Numerics.Vector%601> is an immutable structure that represents a single vector of a specified numeric type.</span></span> <span data-ttu-id="e3a2d-105">El recuento de un <xref:System.Numerics.Vector%601> instancia es fijo, pero su límite superior es el registro de la CPU dependientes.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-105">The count of a <xref:System.Numerics.Vector%601> instance is fixed, but its upper limit is CPU-register dependent.</span></span> <span data-ttu-id="e3a2d-106">Se está diseñado para usarse como un bloque de creación para la vectorización de algoritmos de gran tamaño.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-106">It is intended to be used as a building block for vectorizing large algorithms.</span></span>  
  
 <span data-ttu-id="e3a2d-107">El <xref:System.Numerics.Vector%601> estructura proporciona compatibilidad para la aceleración de hardware.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-107">The <xref:System.Numerics.Vector%601> structure provides support for hardware acceleration.</span></span>  
 
 <span data-ttu-id="e3a2d-108">La siguiente tabla muestra qué tipo de datos numéricos primitivos y combinación de la operación utiliza instrucciones intrínsecas para las ejecuciones más rápidas:</span><span class="sxs-lookup"><span data-stu-id="e3a2d-108">The following table shows which primitive numeric data type and operation combination uses intrinsic instructions for faster executions:</span></span>
 
| <span data-ttu-id="e3a2d-109">Tipo primitivo</span><span class="sxs-lookup"><span data-stu-id="e3a2d-109">Primitive type</span></span> | `+` | `-` | `*` | `/` |
| --- | :---: | :---: | :---: | :---: |
|`sbyte` | <span data-ttu-id="e3a2d-110">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-110">Yes</span></span> | <span data-ttu-id="e3a2d-111">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-111">Yes</span></span> | <span data-ttu-id="e3a2d-112">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-112">No</span></span> | <span data-ttu-id="e3a2d-113">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-113">No</span></span> |
|`byte` | <span data-ttu-id="e3a2d-114">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-114">Yes</span></span> | <span data-ttu-id="e3a2d-115">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-115">Yes</span></span> | <span data-ttu-id="e3a2d-116">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-116">No</span></span> | <span data-ttu-id="e3a2d-117">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-117">No</span></span> |
|`short` | <span data-ttu-id="e3a2d-118">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-118">Yes</span></span> | <span data-ttu-id="e3a2d-119">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-119">Yes</span></span> | <span data-ttu-id="e3a2d-120">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-120">Yes</span></span> | <span data-ttu-id="e3a2d-121">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-121">No</span></span> |
|`ushort` | <span data-ttu-id="e3a2d-122">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-122">Yes</span></span> | <span data-ttu-id="e3a2d-123">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-123">Yes</span></span> | <span data-ttu-id="e3a2d-124">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-124">No</span></span> | <span data-ttu-id="e3a2d-125">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-125">No</span></span> |
| `int` | <span data-ttu-id="e3a2d-126">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-126">Yes</span></span> | <span data-ttu-id="e3a2d-127">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-127">Yes</span></span> | <span data-ttu-id="e3a2d-128">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-128">Yes</span></span> | <span data-ttu-id="e3a2d-129">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-129">No</span></span> |
| `uint` | <span data-ttu-id="e3a2d-130">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-130">Yes</span></span> | <span data-ttu-id="e3a2d-131">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-131">Yes</span></span> | <span data-ttu-id="e3a2d-132">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-132">No</span></span> | <span data-ttu-id="e3a2d-133">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-133">No</span></span> |
| `long` | <span data-ttu-id="e3a2d-134">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-134">Yes</span></span> | <span data-ttu-id="e3a2d-135">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-135">Yes</span></span> | <span data-ttu-id="e3a2d-136">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-136">No</span></span> | <span data-ttu-id="e3a2d-137">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-137">No</span></span> |
| `ulong` | <span data-ttu-id="e3a2d-138">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-138">Yes</span></span> | <span data-ttu-id="e3a2d-139">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-139">Yes</span></span> | <span data-ttu-id="e3a2d-140">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-140">No</span></span> | <span data-ttu-id="e3a2d-141">No</span><span class="sxs-lookup"><span data-stu-id="e3a2d-141">No</span></span> |
| `float` | <span data-ttu-id="e3a2d-142">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-142">Yes</span></span> | <span data-ttu-id="e3a2d-143">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-143">Yes</span></span> | <span data-ttu-id="e3a2d-144">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-144">Yes</span></span> | <span data-ttu-id="e3a2d-145">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-145">Yes</span></span> |
| `double` | <span data-ttu-id="e3a2d-146">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-146">Yes</span></span> | <span data-ttu-id="e3a2d-147">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-147">Yes</span></span> | <span data-ttu-id="e3a2d-148">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-148">Yes</span></span> | <span data-ttu-id="e3a2d-149">Sí</span><span class="sxs-lookup"><span data-stu-id="e3a2d-149">Yes</span></span> |

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (Span&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Span`1&lt;!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.#ctor(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (values As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(Span&lt;T&gt; values);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; : Span&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; values" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="values" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(T value);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; : 'T -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-150">Tipo numérico que define el tipo de los componentes del vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-150">The numeric type that defines the type of the components in the vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-151">Crea un vector cuyos componentes son de un tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-151">Creates a vector whose components are of a specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-152">`value` puede ser cualquier tipo numérico primitivo (es decir, un valor numérico tipo cuya <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> propiedad devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-152">`value` can be any primitive numeric type (that is, a numeric type whose <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (T[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (values As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(cli::array &lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; : 'T[] -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; values" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="values" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="e3a2d-153">Matriz numérica.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-153">A numeric array.</span></span></param>
        <summary><span data-ttu-id="e3a2d-154">Crea un vector a partir de una matriz especificada.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-154">Creates a vector from a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-155">`values` debe contener al menos <xref:System.Numerics.Vector%601.Count%2A> elementos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-155">`values` must contain at least <xref:System.Numerics.Vector%601.Count%2A> elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3a2d-156"><paramref name="values" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-156"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (T[] values, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] values, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (values As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(cli::array &lt;T&gt; ^ values, int index);" />
      <MemberSignature Language="F#" Value="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; : 'T[] * int -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="new System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; (values, index)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="values" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="e3a2d-157">Matriz numérica.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-157">A numeric array.</span></span></param>
        <param name="index"><span data-ttu-id="e3a2d-158">Posición de índice inicial a partir de la cual se va a crear el vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-158">The starting index position from which to create the vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-159">Crea un vector a partir de una matriz especificada comenzando en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-159">Creates a vector from a specified array starting at a specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-160">La matriz debe contener al menos <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elementos desde el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-160">The array must contain at least <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elements from the specified index.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3a2d-161"><paramref name="values" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-161"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="e3a2d-162"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-162"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="e3a2d-163">O bien</span><span class="sxs-lookup"><span data-stu-id="e3a2d-163">-or-</span></span> 
<span data-ttu-id="e3a2d-164">La longitud de <paramref name="values" /> menos <paramref name="index" /> es menor que <see cref="P:System.Numerics.Vector`1.Count" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-164">The length of <paramref name="values" /> minus <paramref name="index" /> is less than <see cref="P:System.Numerics.Vector`1.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="vector.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e3a2d-165">Matriz que se va a recibir una copia de los valores del vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-165">The array to receive a copy of the vector values.</span></span></param>
        <summary><span data-ttu-id="e3a2d-166">Copia la instancia de vector en una matriz de destino especificada.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-166">Copies the vector instance to a specified destination array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-167">Comienza la operación de copia en el índice 0 de `destination`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-167">The copy operation begins at index 0 of `destination`.</span></span> <span data-ttu-id="e3a2d-168">La matriz de destino debe tener al menos <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elementos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-168">The destination array must have at least <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3a2d-169"><paramref name="destination" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-169"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3a2d-170">El número de elementos del vector actual es mayor que el número de elementos disponibles en la matriz <paramref name="destination" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-170">The number of elements in the current vector is greater than the number of elements available in the <paramref name="destination" /> array.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] destination, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T(), startIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ destination, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="vector.CopyTo (destination, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="e3a2d-171">Matriz que se va a recibir una copia de los valores del vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-171">The array to receive a copy of the vector values.</span></span></param>
        <param name="startIndex"><span data-ttu-id="e3a2d-172">Índice inicial de <paramref name="destination" /> donde debe comenzar la operación de copia.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-172">The starting index in <paramref name="destination" /> at which to begin the copy operation.</span></span></param>
        <summary><span data-ttu-id="e3a2d-173">Copia la instancia de vector en una matriz de destino especificada a partir de una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-173">Copies the vector instance to a specified destination array starting at a specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-174">Comienza la operación de copia en el índice `startIndex` de `destination`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-174">The copy operation begins at index `startIndex` of `destination`.</span></span> <span data-ttu-id="e3a2d-175">La matriz de destino debe tener al menos `startIndex`  +  <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elementos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-175">The destination array must have at least `startIndex` + <xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType> elements.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3a2d-176"><paramref name="destination" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-176"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e3a2d-177">El número de elementos de la instancia actual es mayor que el número de elementos disponibles desde <paramref name="startIndex" /> hasta el final de la matriz <paramref name="destination" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-177">The number of elements in the current instance is greater than the number of elements available from <paramref name="startIndex" /> to the end of the <paramref name="destination" /> array.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e3a2d-178"><paramref name="index" /> es menor que cero o mayor que el último indice de <paramref name="destination" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-178"><paramref name="index" /> is less than zero or greater than the last index in <paramref name="destination" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public static int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3a2d-179">Devuelve el número de elementos almacenado en el vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-179">Returns the number of elements stored in the vector.</span></span></summary>
        <value><span data-ttu-id="e3a2d-180">Número de elementos almacenado en el vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-180">The number of elements stored in the vector.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="e3a2d-181">No se admite el acceso al captador de propiedad mediante reflexión.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-181">Access to the property getter via reflection is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Numerics.Vector&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Numerics.Vector`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Numerics::Vector&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="vector.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="e3a2d-182">Vector con el que se va a comparar esta instancia.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-182">The vector to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="e3a2d-183">Devuelve un valor que indica si esta instancia es igual que un vector especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-183">Returns a value that indicates whether this instance is equal to a specified vector.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-184"><see langword="true" /> si la instancia actual y <paramref name="other" /> son iguales; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-184"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-185">Dos vectores son iguales si son del mismo tipo, tienen el mismo número de valores, y cada valor de la instancia actual es igual al valor correspondiente en `other`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-185">Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in `other`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e3a2d-186">Objeto que se va a comparar con esta instancia.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-186">The object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="e3a2d-187">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-187">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-188"><see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-188"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e3a2d-189">El método devuelve <see langword="false" /> si <paramref name="obj" /> es NULL o si <paramref name="obj" /> es un vector de un tipo diferente al de la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-189">The method returns <see langword="false" /> if <paramref name="obj" /> is null, or if <paramref name="obj" /> is a vector of a different type than the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-190">Dos vectores son iguales si son del mismo tipo, tienen el mismo número de valores, y cada valor de la instancia actual es igual al valor correspondiente en `other`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-190">Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in `other`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3a2d-191">Devuelve el código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-191">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-192">Código hash.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-192">The hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="e3a2d-193">Índice del elemento que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-193">The index of the element to return.</span></span></param>
        <summary><span data-ttu-id="e3a2d-194">Obtiene el elemento situado en un índice especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-194">Gets the element at a specified index.</span></span></summary>
        <value><span data-ttu-id="e3a2d-195">Elemento situado en el índice <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-195">The element at index <paramref name="index" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="e3a2d-196"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-196"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="e3a2d-197">O bien</span><span class="sxs-lookup"><span data-stu-id="e3a2d-197">-or-</span></span> 
 <span data-ttu-id="e3a2d-198"><paramref name="index" /> es mayor o igual que <see cref="P:System.Numerics.Vector`1.Count" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-198"><paramref name="index" /> is greater than or equal to <see cref="P:System.Numerics.Vector`1.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.Vector`1&lt;!T&gt; One" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector`1.One" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property One As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::Vector&lt;T&gt; One { System::Numerics::Vector&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.One : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3a2d-199">Devuelve un vector que únicamente contiene unos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-199">Returns a vector containing all ones.</span></span></summary>
        <value><span data-ttu-id="e3a2d-200">Vector que contiene únicamente unos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-200">A vector containing all ones.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator + (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Addition(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator +(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left + right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-201">Primer vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-201">The first vector to add.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-202">Segundo vector que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-202">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="e3a2d-203">Suma dos vectores.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-203">Adds two vectors together.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-204">Vector sumado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-204">The summed vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-205">El <xref:System.Numerics.Vector%601.op_Addition%2A> método define la operación de suma para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-205">The <xref:System.Numerics.Vector%601.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator &amp; (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_BitwiseAnd(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator And (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator &amp;(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( &amp;&amp;&amp; ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left &amp;&amp;&amp; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-206">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-206">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-207">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-207">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-208">Devuelve un nuevo vector realizando una operación <see langword="And" /> bit a bit en cada uno de los elementos de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-208">Returns a new vector by performing a bitwise <see langword="And" /> operation on each of the elements in two vectors.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-209">Vector resultante de la operación <see langword="And" /> bit a bit de <paramref name="left" /> y <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-209">The vector that results from the bitwise <see langword="And" /> of <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-210">El <xref:System.Numerics.Vector%601.op_BitwiseAnd%2A> método define bit a bit `And` operación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-210">The <xref:System.Numerics.Vector%601.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator | (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_BitwiseOr(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Or (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator |(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( ||| ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left ||| right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-211">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-211">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-212">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-212">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-213">Devuelve un nuevo vector realizando una operación <see langword="Or" /> bit a bit en cada uno de los elementos de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-213">Returns a new vector by performing a bitwise <see langword="Or" /> operation on each of the elements in two vectors.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-214">Vector resultante de la operación <see langword="Or" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-214">The vector that results from the bitwise <see langword="Or" /> of the elements in <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-215">El <xref:System.Numerics.Vector%601.op_BitwiseOr%2A> método define bit a bit `Or` operación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-215">The <xref:System.Numerics.Vector%601.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator / (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Division(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator /(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left / right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-216">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-216">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-217">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-217">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-218">Divide el primer vector entre el segundo.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-218">Divides the first vector by the second.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-219">Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-219">The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-220">El <xref:System.Numerics.Vector%601.op_Division%2A> método define la operación de división para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-220">The <xref:System.Numerics.Vector%601.op_Division%2A> method defines the division operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-221">Primer vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-221">The first vector to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-222">Segundo vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-222">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="e3a2d-223">Devuelve un valor que indica si cada par de elementos de los dos vectores especificados son iguales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-223">Returns a value that indicates whether each pair of elements in two specified vectors are equal.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-224"><see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-224"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-225">Dos vectores son iguales si son del mismo tipo, tienen el mismo número de valores y cada valor de `left` es igual al valor correspondiente en `right`.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-225">Two vectors are equal if they are of the same type, have the same number of values, and each value in `left` is equal to the corresponding value in `right`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator ^ (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_ExclusiveOr(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Xor (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator ^(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( ^^^ ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left ^^^ right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-226">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-226">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-227">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-227">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-228">Devuelve un nuevo vector realizando una operación <see langword="XOr" /> bit a bit en cada uno de los elementos de dos vectores.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-228">Returns a new vector by performing a bitwise <see langword="XOr" /> operation on each of the elements in two vectors.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-229">Vector resultante de la operación <see langword="XOr" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-229">The vector that results from the bitwise <see langword="XOr" /> of the elements in <paramref name="left" /> and <paramref name="right" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-230">El <xref:System.Numerics.Vector%601.op_ExclusiveOr%2A> método define bit a bit `XOr` operación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-230">The <xref:System.Numerics.Vector%601.op_ExclusiveOr%2A> method defines the bitwise `XOr` operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;byte&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;unsigned int8&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;System::Byte&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;byte&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-231">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-231">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-232">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-232">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Byte" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-233">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-233">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-234">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-234">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;double&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;float64&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;double&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;double&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-235">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-235">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-236">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-236">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-237">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-237">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-238">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-238">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;short&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;int16&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;short&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int16&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-239">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-239">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-240">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int16" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-240">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-241">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-241">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-242">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-242">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;int&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;int32&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;int&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-243">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-243">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-244">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-244">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-245">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-245">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-246">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-246">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;long&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;int64&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;long&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;int64&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-247">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-247">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-248">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-248">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-249">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-249">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-250">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-250">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;sbyte&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;int8&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;System::SByte&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;sbyte&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.SByte&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-251">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-251">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-252">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.SByte" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-252">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.SByte" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-253">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-253">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-254">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-254">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;float&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;float32&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;float&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;single&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-255">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-255">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-256">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-256">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-257">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-257">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-258">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-258">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;ushort&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;unsigned int16&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;System::UInt16&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint16&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt16&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-259">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-259">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-260">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt16" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-260">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt16" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-261">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-261">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-262">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-262">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;uint&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;unsigned int32&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;System::UInt32&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint32&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-263">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-263">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-264">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-264">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-265">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-265">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-266">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-266">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Numerics.Vector&lt;ulong&gt; (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;unsigned int64&gt; op_Explicit(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Vector(Of T)) As Vector(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Numerics::Vector&lt;System::UInt64&gt;(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;uint64&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-267">Vector que se va a reinterpretar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-267">The vector to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e3a2d-268">Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-268">Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-269">Vector reinterpretado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-269">The reinterpreted vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-270">El <xref:System.Numerics.Vector%601.op_Explicit%2A> operador define una conversión de restricción; requiere un operador de conversión (en C#) o un método de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e3a2d-270">The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Vector(Of T), right As Vector(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; bool" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-271">Primer vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-271">The first vector to compare.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-272">Segundo vector que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-272">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="e3a2d-273">Devuelve un valor que indica si cada par de elementos de los vectores especificados es igual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-273">Returns a value that indicates whether any single pair of elements in the specified vectors is equal.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-274"><see langword="true" /> si los pares de elementos de la izquierda y la derecha son iguales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-274"><see langword="true" /> if any element pairs in left and right are equal.</span></span> <span data-ttu-id="e3a2d-275"><see langword="false" /> si no hay ningún par de elementos iguales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-275"><see langword="false" /> if no element pairs are equal.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator * (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Multiply(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator *(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left * right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-276">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-276">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-277">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-277">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-278">Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-278">Returns a new vector whose values are the product of each pair of elements in two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-279">El vector de producto basado en elemento.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-279">The element-wise product vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-280">El <xref:System.Numerics.Vector%601.op_Multiply%2A> método define la operación de multiplicación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-280">The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator * (System.Numerics.Vector&lt;T&gt; value, T factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Multiply(valuetype System.Numerics.Vector`1&lt;!T&gt; value, !T factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (value As Vector(Of T), factor As T) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator *(System::Numerics::Vector&lt;T&gt; value, T factor);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * 'T -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="value * factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="factor" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-281">Vector de origen.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-281">The source vector.</span></span></param>
        <param name="factor"><span data-ttu-id="e3a2d-282">Valor escalar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-282">A scalar value.</span></span></param>
        <summary><span data-ttu-id="e3a2d-283">Multiplica un vector por un valor escalar especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-283">Multiplies a vector by a specified scalar value.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-284">Vector escalado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-284">The scaled vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-285">El <xref:System.Numerics.Vector%601.op_Multiply%2A> método define la operación de multiplicación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-285">The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator * (T factor, System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Multiply(!T factor, valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (factor As T, value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator *(T factor, System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member ( * ) : 'T * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="factor * value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="T" />
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="e3a2d-286">Valor escalar.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-286">The scalar value.</span></span></param>
        <param name="value"><span data-ttu-id="e3a2d-287">Vector de origen.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-287">The source vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-288">Multiplica un vector por un valor escalar especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-288">Multiplies a vector by a specified scalar value.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-289">Vector escalado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-289">The scaled vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-290">El <xref:System.Numerics.Vector%601.op_Multiply%2A> método define la operación de multiplicación para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-290">The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator ~ (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_OnesComplement(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator Not (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator ~(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member op_OnesComplement : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.op_OnesComplement value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-291">Vector de origen.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-291">The source vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-292">Devuelve un nuevo vector cuyos elementos se obtienen tomando el complemento de uno de los elementos de un vector especificado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-292">Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-293">Vector complemento de uno.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-293">The one's complement vector.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator - (System.Numerics.Vector&lt;T&gt; left, System.Numerics.Vector&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_Subtraction(valuetype System.Numerics.Vector`1&lt;!T&gt; left, valuetype System.Numerics.Vector`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator -(System::Numerics::Vector&lt;T&gt; left, System::Numerics::Vector&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; * System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Numerics.Vector&lt;T&gt;" />
        <Parameter Name="right" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="e3a2d-294">Primer vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-294">The first vector.</span></span></param>
        <param name="right"><span data-ttu-id="e3a2d-295">Segundo vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-295">The second vector.</span></span></param>
        <summary><span data-ttu-id="e3a2d-296">Resta el segundo vector del primero.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-296">Subtracts the second vector from the first.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-297">Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-297">The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-298">El <xref:System.Numerics.Vector%601.op_Subtraction%2A> método define la operación de resta para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-298">The <xref:System.Numerics.Vector%601.op_Subtraction%2A> method defines the subtraction operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; operator - (System.Numerics.Vector&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Numerics.Vector`1&lt;!T&gt; op_UnaryNegation(valuetype System.Numerics.Vector`1&lt;!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (value As Vector(Of T)) As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Numerics::Vector&lt;T&gt; operator -(System::Numerics::Vector&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt; -&gt; System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="- value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.Vector&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e3a2d-299">Vector que se va a convertir en negativo.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-299">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="e3a2d-300">Convierte en negativo un vector concreto.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-300">Negates a given vector.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-301">Vector convertido en negativo.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-301">The negated vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-302">El <xref:System.Numerics.Vector%601.op_UnaryNegation%2A> método define la operación de negación unaria para <xref:System.Numerics.Vector%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-302">The <xref:System.Numerics.Vector%601.op_UnaryNegation%2A> method defines the unary negation operation for <xref:System.Numerics.Vector%601> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3a2d-303">Devuelve la representación de cadena de este vector usando el formato predeterminado.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-303">Returns the string representation of this vector using default formatting.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-304">Representación de cadena de este vector.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-304">The string representation of this vector.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-305">Este método devuelve una cadena en la que cada elemento del vector con formato utilizando la cadena de formato (general) de la "G" y las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-305">This method returns a string in which each element of the vector is formatted using the "G" (general) format string and the formatting conventions of the current thread culture.</span></span> <span data-ttu-id="e3a2d-306">La referencia cultural actual <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> seguida por un espacio de propiedad se usa para separar cada elemento.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-306">The current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> property followed by a space is used to separate each element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="vector.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="e3a2d-307">o  que define el formato de los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-307">A  or  that defines the format of individual elements.</span></span></param>
        <summary><span data-ttu-id="e3a2d-308">Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-308">Returns the string representation of this vector using the specified format string to format individual elements.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-309">Representación de cadena de la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-309">The string representation of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-310">Este método devuelve una cadena en la que cada elemento del vector con formato utilizando `format` y las convenciones de formato de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-310">This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions.</span></span> <span data-ttu-id="e3a2d-311">La referencia cultural actual <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> seguida por un espacio de propiedad se usa para separar cada elemento.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-311">The current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> property followed by a space is used to separate each element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="vector.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="e3a2d-312">o  que define el formato de los elementos individuales.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-312">A  or  that defines the format of individual elements.</span></span></param>
        <param name="formatProvider"><span data-ttu-id="e3a2d-313">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-313">A format provider that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="e3a2d-314">Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-314">Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</span></span></summary>
        <returns><span data-ttu-id="e3a2d-315">Representación de cadena de la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-315">The string representation of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3a2d-316">Este método devuelve una cadena en la que cada elemento del vector con formato mediante `format` y `formatProvider`y el proveedor de formato <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> seguida por un espacio de propiedad se usa para separar cada elemento.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-316">This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType> property followed by a space is used to separate each element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static System.Numerics.Vector&lt;T&gt; Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Numerics.Vector`1&lt;!T&gt; Zero" />
      <MemberSignature Language="DocId" Value="P:System.Numerics.Vector`1.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Zero As Vector(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Numerics::Vector&lt;T&gt; Zero { System::Numerics::Vector&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Zero : System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;" Usage="System.Numerics.Vector&lt;'T (requires 'T : struct)&gt;.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Numerics.Vectors</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Numerics.Vector&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3a2d-317">Devuelve un vector que únicamente contiene ceros.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-317">Returns a vector containing all zeroes.</span></span></summary>
        <value><span data-ttu-id="e3a2d-318">Vector que contiene únicamente  ceros.</span><span class="sxs-lookup"><span data-stu-id="e3a2d-318">A vector containing all zeroes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>