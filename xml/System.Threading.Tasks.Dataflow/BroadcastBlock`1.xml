<Type Name="BroadcastBlock&lt;T&gt;" FullName="System.Threading.Tasks.Dataflow.BroadcastBlock&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea788c23b8f981f0b9aeea27b648a1b322e1b332" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56404141" /></Metadata><TypeSignature Language="C#" Value="public sealed class BroadcastBlock&lt;T&gt; : System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;T,T&gt;, System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BroadcastBlock`1&lt;T&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!T, !T&gt;, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!T&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!T&gt;, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BroadcastBlock(Of T)&#xA;Implements IPropagatorBlock(Of T, T), IReceivableSourceBlock(Of T), ISourceBlock(Of T), ITargetBlock(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class BroadcastBlock sealed : System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;T, T&gt;, System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;T&gt;, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T&gt;, System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type BroadcastBlock&lt;'T&gt; = class&#xA;    interface IDataflowBlock&#xA;    interface IPropagatorBlock&lt;'T, 'T&gt;&#xA;    interface ISourceBlock&lt;'T&gt;&#xA;    interface ITargetBlock&lt;'T&gt;&#xA;    interface IReceivableSourceBlock&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.5.25.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
    <AssemblyVersion>4.6.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IDataflowBlock</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;T,T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayContent,nq}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;dotnet-uwp-10.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.Dataflow.BroadcastBlock`1/DebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="06770-101">Especifica el tipo de los datos almacenados en el búfer por este bloque de flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="06770-101">Specifies the type of the data buffered by this dataflow block.</span></span></typeparam>
    <summary><span data-ttu-id="06770-102">Proporciona un búfer para almacenar a lo sumo un elemento cada vez, sobrescribiendo cada mensaje con el siguiente a medida que llegan.</span><span class="sxs-lookup"><span data-stu-id="06770-102">Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 <span data-ttu-id="06770-103"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601> expone a lo sumo un elemento a la vez.</span><span class="sxs-lookup"><span data-stu-id="06770-103"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601> exposes at most one element at a time.</span></span> <span data-ttu-id="06770-104">Sin embargo, a diferencia de <xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601>, ese elemento se sobrescribirán según los nuevos elementos se proporcionan para el bloque.</span><span class="sxs-lookup"><span data-stu-id="06770-104">However, unlike <xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601>, that element will be overwritten as new elements are provided to the block.</span></span> <span data-ttu-id="06770-105"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601> garantiza que el elemento actual se difunde a cualquier destino enlazado antes de permitir que el elemento que se sobrescriban.</span><span class="sxs-lookup"><span data-stu-id="06770-105"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601> ensures that the current element is broadcast to any linked targets before allowing the element to be overwritten.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BroadcastBlock (Func&lt;T,T&gt; cloningFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!T, !T&gt; cloningFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cloningFunction As Func(Of T, T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BroadcastBlock(Func&lt;T, T&gt; ^ cloningFunction);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt; : Func&lt;'T, 'T&gt; -&gt; System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt;" Usage="new System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt; cloningFunction" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cloningFunction" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <param name="cloningFunction"><span data-ttu-id="06770-106">Función que se va a usar para clonar los datos cuando se ofrezcan a otros bloques.</span><span class="sxs-lookup"><span data-stu-id="06770-106">The function to use to clone the data when offered to other blocks.</span></span></param>
        <summary><span data-ttu-id="06770-107">Inicializa la instancia <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> con la función de clonación especificada.</span><span class="sxs-lookup"><span data-stu-id="06770-107">Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> with the specified cloning function.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BroadcastBlock (Func&lt;T,T&gt; cloningFunction, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!T, !T&gt; cloningFunction, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BroadcastBlock(Func&lt;T, T&gt; ^ cloningFunction, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt; : Func&lt;'T, 'T&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt;" Usage="new System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt; (cloningFunction, dataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cloningFunction" Type="System.Func&lt;T,T&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="cloningFunction"><span data-ttu-id="06770-108">Función que se va a usar para clonar los datos cuando se ofrezcan a otros bloques.</span><span class="sxs-lookup"><span data-stu-id="06770-108">The function to use to clone the data when offered to other blocks.</span></span></param>
        <param name="dataflowBlockOptions"><span data-ttu-id="06770-109">Las opciones con las que se va a configurar este <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-109">The options with which to configure this  <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</span></span></param>
        <summary><span data-ttu-id="06770-110">Inicializa <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> con la función de clonación y <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="06770-110">Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> with the specified cloning function and  <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-111">El valor de <paramref name="dataflowBlockOptions" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-111">The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Complete();" />
      <MemberSignature Language="F#" Value="abstract member Complete : unit -&gt; unit&#xA;override this.Complete : unit -&gt; unit" Usage="broadcastBlock.Complete " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06770-112">Señala a <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que no debe aceptar ni mostrar más mensajes ni usar más mensajes pospuestos.</span><span class="sxs-lookup"><span data-stu-id="06770-112">Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-113">Una vez <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A> ha sido llamado en un bloque de flujo de datos, ese bloque se completará y su <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> tarea entrará en un estado final una vez procesado todos los datos estaban disponibles.</span><span class="sxs-lookup"><span data-stu-id="06770-113">After <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A> has been called on a dataflow block, that block will complete, and its  <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> task will enter a final state after it has processed all previously available data.</span></span> <span data-ttu-id="06770-114"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A> Will no bloque esperar la finalización que se produzca, pero en su lugar, se iniciará la solicitud; para esperar la finalización que se produzca, el <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> se puede usar la tarea.</span><span class="sxs-lookup"><span data-stu-id="06770-114"><xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A> will not block waiting for completion to occur, but rather will initiate the request; to wait for completion to occur, the <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> task may be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Dataflow.BroadcastBlock&lt;'T&gt;.Completion" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06770-115">Obtiene un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación asincrónica y la finalización del bloque de flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="06770-115">Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</span></span></summary>
        <value><span data-ttu-id="06770-116">Tarea.</span><span class="sxs-lookup"><span data-stu-id="06770-116">The task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-117">Un bloque de flujo de datos se considera finalizado cuando no está procesando actualmente un mensaje y cuando se garantiza que no procesará los mensajes de más.</span><span class="sxs-lookup"><span data-stu-id="06770-117">A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages.</span></span> <span data-ttu-id="06770-118">El valor devuelto <xref:System.Threading.Tasks.Task> le transición al estado completado cuando se haya completado el bloque asociado.</span><span class="sxs-lookup"><span data-stu-id="06770-118">The returned <xref:System.Threading.Tasks.Task> will transition to a completed state when the associated block has completed.</span></span> <span data-ttu-id="06770-119">Realizará la transición a la <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> semántica definido por el estado cuando el bloque complete su procesamiento correctamente de acuerdo con el bloque de flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="06770-119">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state when the block completes its processing successfully according to the dataflow block's defined semantics.</span></span> <span data-ttu-id="06770-120">Realizará la transición a la <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Faulted> estado cuando el bloque de flujo de datos ha completado el procesamiento antes de tiempo debido a una excepción no controlada y pasará a la <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Canceled> estado cuando se haya completado el bloque de flujo de datos antes de tiempo de procesamiento debido a la recepción de una solicitud de cancelación.</span><span class="sxs-lookup"><span data-stu-id="06770-120">It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Faulted> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> state when the dataflow block has completed processing prematurely due to receiving a cancellation request.</span></span> <span data-ttu-id="06770-121">Si la tarea se completa en el <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, su `Exception` propiedad devolverá un <xref:System.AggregateException> que contiene una o más excepciones que provocó que se producirá un error en el bloque.</span><span class="sxs-lookup"><span data-stu-id="06770-121">If the task completes in the <xref:System.Threading.Tasks.TaskStatus.Faulted> state, its `Exception` property will return an <xref:System.AggregateException> containing the one or more exceptions that caused the block to fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinkTo (target As ITargetBlock(Of T), linkOptions As DataflowLinkOptions) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions);" />
      <MemberSignature Language="F#" Value="abstract member LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable&#xA;override this.LinkTo : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'T&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions -&gt; IDisposable" Usage="broadcastBlock.LinkTo (target, linkOptions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="06770-122"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> con la que conectar este origen.</span><span class="sxs-lookup"><span data-stu-id="06770-122">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</span></span></param>
        <param name="linkOptions"><span data-ttu-id="06770-123">Instancia de <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura el vínculo.</span><span class="sxs-lookup"><span data-stu-id="06770-123">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</span></span></param>
        <summary><span data-ttu-id="06770-124">Vincula el <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="06770-124">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="06770-125">IDisposable que, al llamar a Dispose, desvinculará el origen del destino.</span><span class="sxs-lookup"><span data-stu-id="06770-125">An IDisposable that, upon calling Dispose, will unlink the source from the target.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-126"><paramref name="target" /> es NULL (Nothing en Visual Basic) o <paramref name="linkOptions" /> es NULL (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="06770-126"><paramref name="target" /> is null (Nothing in Visual Basic) or  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception ^ exception) = System::Threading::Tasks::Dataflow::IDataflowBlock::Fault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="06770-127"><see cref="T:System.Exception" /> que causó el error.</span><span class="sxs-lookup"><span data-stu-id="06770-127">The  <see cref="T:System.Exception" /> that caused the faulting.</span></span></param>
        <summary><span data-ttu-id="06770-128">Hace que la interfaz <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> se complete en un estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> .</span><span class="sxs-lookup"><span data-stu-id="06770-128">Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-129">Después de <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> ha sido llamado en un bloque de flujo de datos, ese bloque se completará y su <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> tarea entrará en un estado final.</span><span class="sxs-lookup"><span data-stu-id="06770-129">After <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A> task will enter a final state.</span></span> <span data-ttu-id="06770-130">Un error en un bloque, como con cancelar un bloque, hace que los mensajes almacenados en búfer (sin procesar mensajes de entrada así como los mensajes de salida unoffered) que se pierdan.</span><span class="sxs-lookup"><span data-stu-id="06770-130">Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-131">El valor de <paramref name="exception" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-131">The <paramref name="exception" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;.TryReceiveAll">
      <MemberSignature Language="C#" Value="bool IReceivableSourceBlock&lt;T&gt;.TryReceiveAll (out System.Collections.Generic.IList&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;.TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!T&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&lt;T&gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Function TryReceiveAll (ByRef items As IList(Of T)) As Boolean Implements IReceivableSourceBlock(Of T).TryReceiveAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;.TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;T&gt; ^ % items) = System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;T&gt;::TryReceiveAll;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="06770-132">Elementos recibidos del origen.</span><span class="sxs-lookup"><span data-stu-id="06770-132">The items received from the source.</span></span></param>
        <summary><span data-ttu-id="06770-133">Intentos de recibir sincrónicamente todos los elementos disponibles de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-133">Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="06770-134">Es <see langword="true" /> si se podían recibir uno o más elementos; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="06770-134"><see langword="true" /> if one or more items could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-135">Este método no bloquear la espera para el origen proporcionar un elemento.</span><span class="sxs-lookup"><span data-stu-id="06770-135">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="06770-136">Devolverá después de comprobar los elementos, si un elemento que estaba disponible.</span><span class="sxs-lookup"><span data-stu-id="06770-136">It will return after checking for elements, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="T ISourceBlock&lt;T&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !T System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Function ConsumeMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of T), ByRef messageConsumed As Boolean) As T Implements ISourceBlock(Of T).ConsumeMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual T System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ConsumeMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt; ^ target, [Runtime::InteropServices::Out] bool % messageConsumed) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;T&gt;::ConsumeMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="06770-137"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del mensaje que se está usando.</span><span class="sxs-lookup"><span data-stu-id="06770-137">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being consumed.</span></span></param>
        <param name="target"><span data-ttu-id="06770-138"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consume el mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-138">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consuming the message.</span></span></param>
        <param name="messageConsumed"><span data-ttu-id="06770-139"><see langword="true" /> si se ha consumido correctamente el mensaje; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="06770-139"><see langword="true" /> if the message was successfully consumed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="06770-140">Lo llama una interfaz <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculada para aceptar y usar una estructura <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> ofrecida previamente por esta interfaz <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-140">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to accept and consume a <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="06770-141">Valor del mensaje consumido.</span><span class="sxs-lookup"><span data-stu-id="06770-141">The value of the consumed message.</span></span> <span data-ttu-id="06770-142">Esto puede corresponder a una instancia diferente de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que se ha reservado y pasado previamente como <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />.</span><span class="sxs-lookup"><span data-stu-id="06770-142">This may correspond to a different  <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance than was previously reserved and passed as the <paramref name="messageHeader" /> to <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />.</span></span> <span data-ttu-id="06770-143">La interfaz <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo debe usar el valor devuelto en lugar del valor pasado como <paramref name="messageValue" /> mediante <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="06770-143">The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> must use the returned value instead of the value passed as <paramref name="messageValue" /> through <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.</span></span>  
  
<span data-ttu-id="06770-144">Si el mensaje solicitado no está disponible, el valor devuelto será <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-144">If the message requested is not available, the return value will be <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-145">Solo <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instancias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instancia puede utilizar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, y solo debe usarse para consumir <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instancias ofrecen previamente por este origen al destino.</span><span class="sxs-lookup"><span data-stu-id="06770-145">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, and it must only be used to consume <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously offered by this source to the target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="06770-146"><paramref name="messageHeader" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="06770-146">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-147">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-147">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;T&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberSignature Language="VB.NET" Value="Sub ReleaseReservation (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of T)) Implements ISourceBlock(Of T).ReleaseReservation" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReleaseReservation(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;T&gt;::ReleaseReservation;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="06770-148"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del mensaje reservado que se va a liberar.</span><span class="sxs-lookup"><span data-stu-id="06770-148">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the reserved message being released.</span></span></param>
        <param name="target"><span data-ttu-id="06770-149"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera el mensaje que reservó previamente.</span><span class="sxs-lookup"><span data-stu-id="06770-149">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> releasing the message it previously reserved.</span></span></param>
        <summary><span data-ttu-id="06770-150">Lo llama una interfaz <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculada para liberar una estructura <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservada previamente por esta interfaz <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-150">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to release a previously reserved <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-151">Solo <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instancias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instancia puede utilizar `ReleaseReservation`, y solo debe usarse para liberar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instancias previamente y correctamente reservadas por el destino.</span><span class="sxs-lookup"><span data-stu-id="06770-151">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use `ReleaseReservation`, and it must only be used to release <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously and successfully reserved by the target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="06770-152"><paramref name="messageHeader" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="06770-152">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-153">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-153">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="06770-154"><paramref name="target" /> no tiene el mensaje reservado.</span><span class="sxs-lookup"><span data-stu-id="06770-154">The <paramref name="target" /> did not have the message reserved.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;T&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberSignature Language="VB.NET" Value="Function ReserveMessage (messageHeader As DataflowMessageHeader, target As ITargetBlock(Of T)) As Boolean Implements ISourceBlock(Of T).ReserveMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReserveMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt; ^ target) = System::Threading::Tasks::Dataflow::ISourceBlock&lt;T&gt;::ReserveMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="06770-155"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del mensaje que se está reservando.</span><span class="sxs-lookup"><span data-stu-id="06770-155">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being reserved.</span></span></param>
        <param name="target"><span data-ttu-id="06770-156"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva el mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-156">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> reserving the message.</span></span></param>
        <summary><span data-ttu-id="06770-157">Lo llama una interfaz <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculada para reservar una estructura <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> ofrecida previamente por esta interfaz <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-157">Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="06770-158"><see langword="true" /> si se ha procesado correctamente el mensaje; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="06770-158"><see langword="true" /> if the message was successfully reserved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-159">Solo <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instancias vinculadas a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instancia puede utilizar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, y solo debe usarse para reservar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instancias ofrecen previamente por este origen al destino.</span><span class="sxs-lookup"><span data-stu-id="06770-159">Only <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instances linked to this <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instance may use <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, and it must only be used to reserve <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instances previously offered by this source to the target.</span></span>  
  
 <span data-ttu-id="06770-160">Si `true` se devuelve, el <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> posteriormente debe llamar a <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> o <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> para este mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-160">If `true` is returned, the  <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> must subsequently call either  <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> or  <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> for this message.</span></span> <span data-ttu-id="06770-161">Si no lo hace posible la imposibilidad de propagar mensajes a esta ni a otros destinos de origen.</span><span class="sxs-lookup"><span data-stu-id="06770-161">Failure to do so may result in the source being unable to propagate any further messages to this or other targets.</span></span>  
  
 <span data-ttu-id="06770-162"><xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> no debe llamarse mientras mantiene los bloqueos internos del destino.</span><span class="sxs-lookup"><span data-stu-id="06770-162"><xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A> must not be called while the target is holding any internal locks.</span></span> <span data-ttu-id="06770-163">Si lo hace, infringirán la jerarquía de bloqueos necesaria para evitar los interbloqueos en una red de flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="06770-163">Doing so will violate the lock hierarchy necessary to avoid deadlocks in a dataflow network.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="06770-164"><paramref name="messageHeader" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="06770-164">The <paramref name="messageHeader" /> is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06770-165">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06770-165">The <paramref name="target" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;T&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, T messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !T messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!T&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&lt;T&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function OfferMessage (messageHeader As DataflowMessageHeader, messageValue As T, source As ISourceBlock(Of T), consumeToAccept As Boolean) As DataflowMessageStatus Implements ITargetBlock(Of T).OfferMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Threading::Tasks::Dataflow::DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;.OfferMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, T messageValue, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T&gt; ^ source, bool consumeToAccept) = System::Threading::Tasks::Dataflow::ITargetBlock&lt;T&gt;::OfferMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="T" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><span data-ttu-id="06770-166">Instancia de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa el encabezado del mensaje que se va a ofrecer.</span><span class="sxs-lookup"><span data-stu-id="06770-166">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance that represents the header of the message being offered.</span></span></param>
        <param name="messageValue"><span data-ttu-id="06770-167">Valor del mensaje que se va a ofrecer.</span><span class="sxs-lookup"><span data-stu-id="06770-167">The value of the message being offered.</span></span></param>
        <param name="source"><span data-ttu-id="06770-168"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que ofrece el mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-168">The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> offering the message.</span></span> <span data-ttu-id="06770-169">Éste puede ser null.</span><span class="sxs-lookup"><span data-stu-id="06770-169">This may be null.</span></span></param>
        <param name="consumeToAccept"><span data-ttu-id="06770-170">Establézcalo en <see langword="true" /> para indicar al destino para llamar a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> sincrónicamente durante la llamada a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de devolver <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para usar el mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-170">Set to <see langword="true" /> to instruct the target to call <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> synchronously during the call to <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prior to returning <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, in order to consume the message.</span></span></param>
        <summary><span data-ttu-id="06770-171">Ofrece un mensaje a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, dando al destino la oportunidad de usar o de posponer el mensaje.</span><span class="sxs-lookup"><span data-stu-id="06770-171">Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, giving the target the opportunity to consume or postpone the message.</span></span></summary>
        <returns><span data-ttu-id="06770-172">Estado del mensaje ofrecido.</span><span class="sxs-lookup"><span data-stu-id="06770-172">The status of the offered message.</span></span> <span data-ttu-id="06770-173">Si el destino aceptó el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> y el origen ya no debe usar más el mensaje ofrecido, ya que ahora es propiedad del destino.</span><span class="sxs-lookup"><span data-stu-id="06770-173">If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> is returned, and the source should no longer use the offered message, because it is now owned by the target.</span></span> <span data-ttu-id="06770-174">Si el destino pospuso el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> como notificación de que el destino puede intentar más adelante consumir o reservar el mensaje; mientras tanto, el origen todavía posee el mensaje y puede ofrecerlo a otros bloques.</span><span class="sxs-lookup"><span data-stu-id="06770-174">If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.</span></span>  
  
<span data-ttu-id="06770-175">Si el destino habría pospuesto de otra forma el mensaje, pero <paramref name="source" /> era <see langword="null" />, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="06770-175">If the target would have otherwise postponed message, but <paramref name="source" /> was <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is instead returned.</span></span>  
  
<span data-ttu-id="06770-176">Si el destino intentó aceptar el mensaje pero no pudo hacerlo porque el origen entrega el mensaje a otro destino o lo descarta simplemente, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.</span><span class="sxs-lookup"><span data-stu-id="06770-176">If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> is returned.</span></span>  
  
<span data-ttu-id="06770-177">Si el destino eligió no aceptar el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.</span><span class="sxs-lookup"><span data-stu-id="06770-177">If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is returned.</span></span> <span data-ttu-id="06770-178">Si el destino eligió no aceptar el mensaje y nunca aceptará otro mensaje de este origen, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</span><span class="sxs-lookup"><span data-stu-id="06770-178">If the target chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="06770-179"><paramref name="messageHeader" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="06770-179">The  <paramref name="messageHeader" /> is not valid.</span></span>  
  
<span data-ttu-id="06770-180">O bien, <paramref name="consumeToAccept" /> solo puede ser true si se le proporciona un valor <paramref name="source" /> distinto de NULL.</span><span class="sxs-lookup"><span data-stu-id="06770-180">-or- <paramref name="consumeToAccept" /> may only be true if provided with a non-null <paramref name="source" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="broadcastBlock.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06770-181">Devuelve una cadena que representa el nombre con formato de esta instancia de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</span><span class="sxs-lookup"><span data-stu-id="06770-181">Returns a string that represents the formatted name of this  <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></summary>
        <returns><span data-ttu-id="06770-182">Cadena que representa el nombre con formato de esta instancia de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</span><span class="sxs-lookup"><span data-stu-id="06770-182">A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-183">Se hereda de <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="06770-183">Inherited from  <xref:System.Object>.</span></span> <span data-ttu-id="06770-184">Usa el <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> opción.</span><span class="sxs-lookup"><span data-stu-id="06770-184">Uses the  <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> option.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;T&gt; filter, out T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!T&gt; filter, [out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of T), ByRef item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryReceive(Predicate&lt;T&gt; ^ filter, [Runtime::InteropServices::Out] T % item);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : Predicate&lt;'T&gt; *  -&gt; bool&#xA;override this.TryReceive : Predicate&lt;'T&gt; *  -&gt; bool" Usage="broadcastBlock.TryReceive (filter, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.5.25.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
        <AssemblyVersion>4.6.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;T&gt;" />
        <Parameter Name="item" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="06770-185">Predicado que un valor debe pasar correctamente para que se reciba.</span><span class="sxs-lookup"><span data-stu-id="06770-185">The predicate a value must successfully pass in order for it to be received.</span></span>  <span data-ttu-id="06770-186"><paramref name="filter" /> puede ser <see langword="null" />, en cuyo caso se pasarán todos los elementos.</span><span class="sxs-lookup"><span data-stu-id="06770-186"><paramref name="filter" /> may be <see langword="null" />, in which case all items will pass.</span></span></param>
        <param name="item"><span data-ttu-id="06770-187">Elemento recibido del origen.</span><span class="sxs-lookup"><span data-stu-id="06770-187">The item received from the source.</span></span></param>
        <summary><span data-ttu-id="06770-188">Intentos de recibir sincrónicamente un elemento de salida disponible de <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span><span class="sxs-lookup"><span data-stu-id="06770-188">Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span></span></summary>
        <returns><span data-ttu-id="06770-189">Es <see langword="true" /> si se pudo recibir un elemento; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="06770-189"><see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06770-190">Este método no bloquear la espera para el origen proporcionar un elemento.</span><span class="sxs-lookup"><span data-stu-id="06770-190">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="06770-191">Devolverá después de comprobar si un elemento, si un elemento que estaba disponible.</span><span class="sxs-lookup"><span data-stu-id="06770-191">It will return after checking for an element, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>