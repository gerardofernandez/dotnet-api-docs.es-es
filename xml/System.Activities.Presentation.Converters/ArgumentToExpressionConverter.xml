<Type Name="ArgumentToExpressionConverter" FullName="System.Activities.Presentation.Converters.ArgumentToExpressionConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03b78af56f83c40f70b6041957af4664bea819f0" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53295152" /></Metadata><TypeSignature Language="C#" Value="public class ArgumentToExpressionConverter : System.Windows.Data.IValueConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ArgumentToExpressionConverter extends System.Object implements class System.Windows.Data.IValueConverter" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ArgumentToExpressionConverter&#xA;Implements IValueConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArgumentToExpressionConverter : System::Windows::Data::IValueConverter" />
  <TypeSignature Language="F#" Value="type ArgumentToExpressionConverter = class&#xA;    interface IValueConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Data.IValueConverter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="013bc-101">Define la asignación entre argumentos y expresiones y proporciona la funcionalidad para convertir estos objetos de unos a otros.</span><span class="sxs-lookup"><span data-stu-id="013bc-101">Defines the mapping between arguments and expressions and provides the functionality to convert between these objects.</span></span> <span data-ttu-id="013bc-102">Normalmente, este convertidor se utiliza mediante declaración cuando se usa un objeto <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> en un diseñador de actividad personalizado.</span><span class="sxs-lookup"><span data-stu-id="013bc-102">Typically, this converter is used declaratively when using an <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> in a custom activity designer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013bc-103">Este convertidor también se puede utilizar de manera imperativa; sin embargo, no se recomienda este uso.</span><span class="sxs-lookup"><span data-stu-id="013bc-103">This converter can also be used imperatively; however, this usage is not recommended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="013bc-104">El siguiente fragmento de código XAML muestra cómo utilizar ArgumentToExpressionConverter en un diseñador de actividad personalizado que utiliza un objeto ExpressionTextBox.</span><span class="sxs-lookup"><span data-stu-id="013bc-104">The following XAML snippet shows how to use the ArgumentToExpressionConverter in a custom activity designer that uses an ExpressionTextBox.</span></span>  
  
```  
<sapv:ExpressionTextBox   
    Expression="{Binding Path=ModelItem.SampleValue,   
                         Mode=TwoWay,   
                         Converter={StaticResource ArgumentToExpressionConverter},   
                         ConverterParameter=In }"  
    ExpressionType="s:String"  
    OwnerActivity="{Binding Path=ModelItem}"  
   />  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentToExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArgumentToExpressionConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="013bc-105">Inicializa una nueva instancia de la clase <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" />.</span><span class="sxs-lookup"><span data-stu-id="013bc-105">Initializes a new instance of the <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Convert(object value, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (value As Object, targetType As Type, parameter As Object, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Convert(System::Object ^ value, Type ^ targetType, System::Object ^ parameter, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member Convert : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj&#xA;override this.Convert : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj" Usage="argumentToExpressionConverter.Convert (value, targetType, parameter, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="013bc-106">Valor generado por el origen de enlace.</span><span class="sxs-lookup"><span data-stu-id="013bc-106">The value produced by the binding source.</span></span></param>
        <param name="targetType"><span data-ttu-id="013bc-107">El tipo de la propiedad del destino de enlace.</span><span class="sxs-lookup"><span data-stu-id="013bc-107">The type of the binding target property.</span></span></param>
        <param name="parameter"><span data-ttu-id="013bc-108">Parámetro de convertidor que se va a usar.</span><span class="sxs-lookup"><span data-stu-id="013bc-108">The converter parameter to use.</span></span></param>
        <param name="culture"><span data-ttu-id="013bc-109"><see cref="T:System.Globalization.CultureInfo" /> que se va a usar en el convertidor.</span><span class="sxs-lookup"><span data-stu-id="013bc-109">The <see cref="T:System.Globalization.CultureInfo" /> to use in the converter.</span></span></param>
        <summary><span data-ttu-id="013bc-110">Convierte el argumento especificado en una expresión.</span><span class="sxs-lookup"><span data-stu-id="013bc-110">Converts the specified argument into an expression.</span></span></summary>
        <returns><span data-ttu-id="013bc-111">Una instancia de <see cref="T:System.Object" /> que contiene el elemento Argument.Expression convertido.</span><span class="sxs-lookup"><span data-stu-id="013bc-111">An instance of <see cref="T:System.Object" /> that contains the converted Argument.Expression.</span></span>  
  
<span data-ttu-id="013bc-112">Contiene el objeto Argument.Expression convertido.</span><span class="sxs-lookup"><span data-stu-id="013bc-112">Contains the converted Argument.Expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="013bc-113">El parámetro `parameter`.</span><span class="sxs-lookup"><span data-stu-id="013bc-113">The `parameter`,</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertBack">
      <MemberSignature Language="C#" Value="public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertBack(object value, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertBack (value As Object, targetType As Type, parameter As Object, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertBack(System::Object ^ value, Type ^ targetType, System::Object ^ parameter, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member ConvertBack : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj&#xA;override this.ConvertBack : obj * Type * obj * System.Globalization.CultureInfo -&gt; obj" Usage="argumentToExpressionConverter.ConvertBack (value, targetType, parameter, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="013bc-114">Objeto Argument.Expression que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="013bc-114">The Argument.Expression to convert.</span></span></param>
        <param name="targetType"><span data-ttu-id="013bc-115">Sin implementar.</span><span class="sxs-lookup"><span data-stu-id="013bc-115">Not implemented.</span></span></param>
        <param name="parameter"><span data-ttu-id="013bc-116">Sin implementar.</span><span class="sxs-lookup"><span data-stu-id="013bc-116">Not implemented.</span></span></param>
        <param name="culture"><span data-ttu-id="013bc-117">Sin implementar.</span><span class="sxs-lookup"><span data-stu-id="013bc-117">Not implemented.</span></span></param>
        <summary><span data-ttu-id="013bc-118">Convierte el objeto Argument.Expression en un argumento.</span><span class="sxs-lookup"><span data-stu-id="013bc-118">Converts the specified Argument.Expression into an argument.</span></span></summary>
        <returns><span data-ttu-id="013bc-119">Devuelve <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="013bc-119">Returns <see cref="T:System.Object" />.</span></span>  
  
<span data-ttu-id="013bc-120">Contiene el argumento convertido.</span><span class="sxs-lookup"><span data-stu-id="013bc-120">Contains the converted argument.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>