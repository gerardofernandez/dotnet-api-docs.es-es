<Type Name="IReceiveMessageCallback" FullName="System.ServiceModel.Activities.IReceiveMessageCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bf881cdb426d41ae694308b5b6050855428b739" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64042140" /></Metadata><TypeSignature Language="C#" Value="public interface IReceiveMessageCallback" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReceiveMessageCallback" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Activities.IReceiveMessageCallback" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReceiveMessageCallback" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReceiveMessageCallback" />
  <TypeSignature Language="F#" Value="type IReceiveMessageCallback = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fef27-101">Implementa una devolución de llamada que se ejecuta cuando las actividades <see cref="T:System.ServiceModel.Activities.Receive" /> y <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> reciben un mensaje de servicio.</span><span class="sxs-lookup"><span data-stu-id="fef27-101">Implements a callback to be executed when a service message is received by the <see cref="T:System.ServiceModel.Activities.Receive" /> and <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> activities.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef27-102">El siguiente ejemplo muestra cómo implementar la interfaz <xref:System.ServiceModel.Activities.IReceiveMessageCallback> para tener acceso a un encabezado de mensaje cuando se recibe un mensaje.</span><span class="sxs-lookup"><span data-stu-id="fef27-102">The following example shows how to implement the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> interface to access a message header when a message is received.</span></span>  
  
 [!code-csharp[AccessingOperationContext#1](~/samples/snippets/csharp/VS_Snippets_CFX/accessingoperationcontext/cs/receiveinstanceidcallback.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnReceiveMessage">
      <MemberSignature Language="C#" Value="public void OnReceiveMessage (System.ServiceModel.OperationContext operationContext, System.Activities.ExecutionProperties activityExecutionProperties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnReceiveMessage(class System.ServiceModel.OperationContext operationContext, class System.Activities.ExecutionProperties activityExecutionProperties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activities.IReceiveMessageCallback.OnReceiveMessage(System.ServiceModel.OperationContext,System.Activities.ExecutionProperties)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnReceiveMessage(System::ServiceModel::OperationContext ^ operationContext, System::Activities::ExecutionProperties ^ activityExecutionProperties);" />
      <MemberSignature Language="F#" Value="abstract member OnReceiveMessage : System.ServiceModel.OperationContext * System.Activities.ExecutionProperties -&gt; unit" Usage="iReceiveMessageCallback.OnReceiveMessage (operationContext, activityExecutionProperties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="activityExecutionProperties" Type="System.Activities.ExecutionProperties" />
      </Parameters>
      <Docs>
        <param name="operationContext"><span data-ttu-id="fef27-103">El contexto de la operación en el que se recibió el mensaje.</span><span class="sxs-lookup"><span data-stu-id="fef27-103">The operation context under which the message received.</span></span></param>
        <param name="activityExecutionProperties"><span data-ttu-id="fef27-104">El conjunto de propiedades de ejecución disponibles dentro del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="fef27-104">The set of execution properties available within the workflow.</span></span></param>
        <summary><span data-ttu-id="fef27-105">Se ejecuta cuando se recibe un mensaje de servicio.</span><span class="sxs-lookup"><span data-stu-id="fef27-105">Executed when a service message is received.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef27-106">El siguiente ejemplo muestra cómo implementar la interfaz <xref:System.ServiceModel.Activities.IReceiveMessageCallback> para tener acceso a un encabezado de mensaje cuando se recibe un mensaje.</span><span class="sxs-lookup"><span data-stu-id="fef27-106">The following example shows how to implement the <xref:System.ServiceModel.Activities.IReceiveMessageCallback> interface to access a message header when a message is received.</span></span>  
  
 [!code-csharp[AccessingOperationContext#1](~/samples/snippets/csharp/VS_Snippets_CFX/accessingoperationcontext/cs/receiveinstanceidcallback.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>