<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d6c687966db4854e256b5b7bacffbf9954f32da" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52602045" /></Metadata><TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanCng = class&#xA;    inherit ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3c1a9-101">Proporciona una implementación CNG (Cryptography Next Generation) del algoritmo Diffie-Hellman de curva elíptica (ECDH).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span></span> <span data-ttu-id="3c1a9-102">Esta clase se utiliza para realizar operaciones criptográficas.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-102">This class is used to perform cryptographic operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-103">La <xref:System.Security.Cryptography.ECDiffieHellmanCng> clase permite a dos partes intercambian material de clave privada, incluso si se están comunicando a través de un canal público.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="3c1a9-104">Ambas partes pueden calcular el mismo valor de secreto, que se conoce como el *acuerdo confidencial* en las clases administradas de Diffie-Hellman.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="3c1a9-105">El acuerdo confidencial, a continuación, se utiliza para una variedad de propósitos, como una clave simétrica.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="3c1a9-106">Sin embargo, en lugar de exponer el acuerdo confidencial directamente, la <xref:System.Security.Cryptography.ECDiffieHellmanCng> clase realiza algún procesamiento posterior en el contrato antes de que proporciona el valor.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="3c1a9-107">Este procesamiento post se conoce como el *(KDF) de función de derivación de clave*; puede seleccionar qué KDF que desee usar y establecer sus parámetros a través de un conjunto de propiedades en la instancia del objeto Diffie-Hellman.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="3c1a9-108">Función de derivación de claves</span><span class="sxs-lookup"><span data-stu-id="3c1a9-108">Key derivation function</span></span>|<span data-ttu-id="3c1a9-109">Propiedades</span><span class="sxs-lookup"><span data-stu-id="3c1a9-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="3c1a9-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -El algoritmo hash que se utiliza para procesar el acuerdo confidencial.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="3c1a9-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -Una matriz de bytes opcional para anteponer al acuerdo confidencial antes de utilizar un valor hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="3c1a9-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Una matriz de bytes opcional que se anexará al acuerdo confidencial antes de utilizar un valor hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="3c1a9-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -El algoritmo hash que se utiliza para procesar el acuerdo confidencial.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="3c1a9-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-Una matriz de bytes opcional para anteponer al acuerdo confidencial antes de utilizar un valor hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="3c1a9-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Una matriz de bytes opcional que se anexará al acuerdo confidencial antes de utilizar un valor hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="3c1a9-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> -La etiqueta de derivación de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="3c1a9-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> -El valor de inicialización para la derivación de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="3c1a9-118">El resultado de pasar el acuerdo confidencial a través de la función de derivación de claves es una matriz de bytes que se puede usar como material de clave para la aplicación.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="3c1a9-119">El número de bytes del material de clave generado es dependiente de la función de derivación de claves. Por ejemplo, SHA-256 generará 256 bits de material de clave, mientras que SHA-512 generará 512 bits del material de clave. El flujo básico de un intercambio de claves de ECDH es como sigue:</span><span class="sxs-lookup"><span data-stu-id="3c1a9-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="3c1a9-120">Alice y Bob crean un par de claves que se usará para la operación de intercambio de claves Diffie-Hellman</span><span class="sxs-lookup"><span data-stu-id="3c1a9-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="3c1a9-121">Alice y Bob configura KDF con parámetros en el acuerdo en.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="3c1a9-122">Alicia envía a Roberto su clave pública.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="3c1a9-123">Bob envía su clave pública de Alicia.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="3c1a9-124">Alice y Bob Utilice claves públicas de los demás para generar el acuerdo confidencial y aplique el KDF para el acuerdo confidencial al generar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c1a9-125">El ejemplo siguiente muestra cómo usar el <xref:System.Security.Cryptography.ECDiffieHellmanCng> clase para establecer un intercambio de claves y cómo se usa esa clave para cifrar un mensaje que se puede enviar a través de un canal público y los descifra.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-126">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c1a9-127">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> con un par de claves aleatorio.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-128">El par de claves aleatorio tiene una longitud de clave pública predeterminada de 521 bits.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : int -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng keySize" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize"><span data-ttu-id="3c1a9-129">Tamaño de la clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-129">The size of the key.</span></span> <span data-ttu-id="3c1a9-130">Los tamaños de clave válidos son 256, 384 y 521 bits.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-130">Valid key sizes are 256, 384, and 521 bits.</span></span></param>
        <summary><span data-ttu-id="3c1a9-131">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> con un par de claves aleatorio usando el tamaño de clave especificado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-132">El par de claves aleatorio tendrá la longitud de clave pública definida por el `keySize` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-133"><paramref name="keySize" /> especifica una longitud no válida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-133"><paramref name="keySize" /> specifies an invalid length.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3c1a9-134">Las clases de Cryptography Next Generation (CNG) no se admiten en este sistema.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.CngKey -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="3c1a9-135">La clave que se usará como entrada para las operaciones criptográficas llevadas a cabo por el objeto actual.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-135">The key that will be used as input to the cryptographic operations performed by the current object.</span></span></param>
        <summary><span data-ttu-id="3c1a9-136">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> mediante el objeto <see cref="T:System.Security.Cryptography.CngKey" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-137">El valor de <paramref name="key" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-137"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-138"><paramref name="key" /> no especifica un grupo de algoritmos Diffie-Hellman de curva elíptica (ECDH).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-138"><paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3c1a9-139">Las clases de Cryptography Next Generation (CNG) no se admiten en este sistema.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.ECDiffieHellmanCng : System.Security.Cryptography.ECCurve -&gt; System.Security.Cryptography.ECDiffieHellmanCng" Usage="new System.Security.Cryptography.ECDiffieHellmanCng curve" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="3c1a9-140">La curva usada para generar el par de claves pública-privada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-140">The curve used to generate the public/private key pair.</span></span></param>
        <summary><span data-ttu-id="3c1a9-141">Crea una nueva instancia de la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> cuyo par de claves pública-privada se genera sobre la curva especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-142">`curve` debe validar (es decir, debe devolver `true`) cuando se pasan a la <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> método y debe ser un número primo explícito o con nombre.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-143"><paramref name="curve" /> no se valida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-143"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-144">Deriva bytes que se pueden usar como una clave mediante una función hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-144">Derives bytes that can be used as a key using a hash function .</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHash : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHash (otherPartyPublicKey, hashAlgorithm, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-145">Clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-145">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="3c1a9-146">Algoritmo hash que se va a usar para derivar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-146">The hash algorithm  to use to derive the key material.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="3c1a9-147">Valor para anteponer al secreto derivado antes de la operación hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-147">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="3c1a9-148">Valor para anexar al secreto derivado antes de la operación hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-148">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="3c1a9-149">Deriva bytes que se pueden usar como una clave mediante una función hash, dada la clave pública de otra parte, el nombre del algoritmo hash, un valor Prepend y un valor Append.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-150">Material de clave del intercambio de claves con la clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-150">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-151">Si el valor de `secretPrepend` o `secretAppend` es `null`, se tratan como matrices vacías.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-152">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-152"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-153"><paramref name="otherPartyPublicKey" /> no es una clave ECDH o no tiene el tamaño correcto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-153"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
<span data-ttu-id="3c1a9-154">O bien</span><span class="sxs-lookup"><span data-stu-id="3c1a9-154">-or-</span></span> 
 <span data-ttu-id="3c1a9-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="3c1a9-155"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="3c1a9-156">es <see langword="null" /> o <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-156">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-157">Todos los demás errores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-157">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-158">Deriva bytes que se pueden usar como una clave mediante un código de autenticación de mensajes basado en hash (HMAC).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-158">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyFromHmac : System.Security.Cryptography.ECDiffieHellmanPublicKey * System.Security.Cryptography.HashAlgorithmName * byte[] * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyFromHmac (otherPartyPublicKey, hashAlgorithm, hmacKey, secretPrepend, secretAppend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-159">Clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-159">The other party's public key.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="3c1a9-160">Algoritmo hash que se va a usar para derivar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-160">The hash algorithm to use to derive the key material.</span></span></param>
        <param name="hmacKey"><span data-ttu-id="3c1a9-161">Clave para HMAC.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-161">The key for the HMAC.</span></span></param>
        <param name="secretPrepend"><span data-ttu-id="3c1a9-162">Valor para anteponer al secreto derivado antes de la operación hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-162">A value to prepend to the derived secret before hashing.</span></span></param>
        <param name="secretAppend"><span data-ttu-id="3c1a9-163">Valor para anexar al secreto derivado antes de la operación hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-163">A value to append to the derived secret before hashing.</span></span></param>
        <summary><span data-ttu-id="3c1a9-164">Deriva bytes que se pueden usar como una clave mediante un código de autenticación de mensajes basado en hash (HMAC).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-164">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span></span></summary>
        <returns><span data-ttu-id="3c1a9-165">Material de clave del intercambio de claves con la clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-165">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-166">Si el valor de `secretPrepend` o `secretAppend` es `null`, se tratan como matrices vacías.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-166">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="3c1a9-167">Si el valor de `hmacKey` es `null`, el resultado del algoritmo Diffie-Hellman de curva elíptica (ECDH) que se utilizará como clave HMAC.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-167">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-168">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-168"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-169"><paramref name="otherPartyPublicKey" /> no es una clave ECDH o no tiene el tamaño correcto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-169"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span>  
  
<span data-ttu-id="3c1a9-170">O bien</span><span class="sxs-lookup"><span data-stu-id="3c1a9-170">-or-</span></span> 
 <span data-ttu-id="3c1a9-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span><span class="sxs-lookup"><span data-stu-id="3c1a9-171"><paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span></span> <span data-ttu-id="3c1a9-172">es <see langword="null" /> o <see cref="F:System.String.Empty" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-172">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-173">Todos los demás errores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-173">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-174">Deriva el material de clave que se genera del acuerdo confidencial entre dos partes.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-174">Derives the key material that is generated from the secret agreement between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-175">El algoritmo de Diffie-Hellman de curva elíptica (ECDH) acepta la clave privada y clave pública de la otra parte como entrada y produce el acuerdo confidencial como salida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-175">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party's public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="3c1a9-176">La función de derivación de claves (KDF), a continuación, toma el acuerdo confidencial y genera el material de clave como salida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-176">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.CngKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-177">Objeto que contiene la parte pública de la clave Diffie-Hellman de curva elíptica (ECDH) de la otra parte en el intercambio de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-177">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="3c1a9-178">Deriva el material de clave que se genera del acuerdo confidencial entre dos partes, según un objeto <see cref="T:System.Security.Cryptography.CngKey" /> que contiene la clave pública de la segunda parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-178">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-179">Matriz de bytes que contiene el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-179">A byte array that contains the key material.</span></span> <span data-ttu-id="3c1a9-180">Esta información se genera a partir del acuerdo confidencial que se calcula de la clave privada del objeto actual y de la clave pública especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-180">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-181">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-181"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-182"><paramref name="otherPartyPublicKey" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-182"><paramref name="otherPartyPublicKey" /> is invalid.</span></span> <span data-ttu-id="3c1a9-183">Su propiedad <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> no especifica <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> o su tamaño de clave no coincide con el tamaño de clave de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-183">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c1a9-184">La propiedad <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> de este objeto especifica la función de derivación de claves <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />, pero <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> o <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-184">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-185">Todos los demás errores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-185">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyMaterial : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyMaterial otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-186">Clave pública de la otra parte en el intercambio de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-186">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="3c1a9-187">Deriva el material de clave que se genera del acuerdo confidencial entre dos partes, según un objeto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> que contiene la clave pública de la segunda parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-187">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-188">Matriz de bytes que contiene el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-188">A byte array that contains the key material.</span></span> <span data-ttu-id="3c1a9-189">Esta información se genera a partir del acuerdo confidencial que se calcula de la clave privada del objeto actual y de la clave pública especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-189">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-190">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-190"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-191"><paramref name="otherPartyPublicKey" /> no es una clave <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-191"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberSignature Language="F#" Value="override this.DeriveKeyTls : System.Security.Cryptography.ECDiffieHellmanPublicKey * byte[] * byte[] -&gt; byte[]" Usage="eCDiffieHellmanCng.DeriveKeyTls (otherPartyPublicKey, prfLabel, prfSeed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-192">Clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-192">The other party's public key.</span></span></param>
        <param name="prfLabel"><span data-ttu-id="3c1a9-193">Etiqueta PRF con codificación ASCII.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-193">The ASCII-encoded PRF label.</span></span></param>
        <param name="prfSeed"><span data-ttu-id="3c1a9-194">Valor de inicialización de PRF de 64 bytes.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-194">The 64-byte PRF seed.</span></span></param>
        <summary><span data-ttu-id="3c1a9-195">Deriva bytes que se pueden usar como una clave mediante un algoritmo de derivación de la función pesudoaleatoria (PRF) de seguridad de capa de transporte (TLS).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-195">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-196">Material de clave del intercambio de claves con la clave pública de la otra parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-196">The key material from the key exchange with the other party's public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-197">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-197"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c1a9-198">O bien</span><span class="sxs-lookup"><span data-stu-id="3c1a9-198">-or-</span></span> 
 <span data-ttu-id="3c1a9-199">El valor de <paramref name="prfLabel" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-199"><paramref name="prfLabel" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c1a9-200">O bien</span><span class="sxs-lookup"><span data-stu-id="3c1a9-200">-or-</span></span> 
 <span data-ttu-id="3c1a9-201">El valor de <paramref name="prfSeed" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-201"><paramref name="prfSeed" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-202"><paramref name="otherPartyPublicKey" /> no es una clave ECDH o no tiene el tamaño correcto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-202"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-203"><paramref name="prfSeed" /> no es exactamente 64 bytes de longitud.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-203"><paramref name="prfSeed" /> is not exactly 64 bytes in length.</span></span>  
  
<span data-ttu-id="3c1a9-204">O bien</span><span class="sxs-lookup"><span data-stu-id="3c1a9-204">-or-</span></span> 
<span data-ttu-id="3c1a9-205">Todos los demás errores criptográficos.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-205">All other cryptographic errors.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-206">Obtiene un identificador para el acuerdo confidencial generado entre dos partes.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-206">Gets a handle to the secret agreement generated between two parties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-207">El <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> sobrecargas del método son para usuarios avanzados que necesitan un identificador para el acuerdo confidencial sin procesar en lugar del material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-207">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="3c1a9-208">El identificador del acuerdo confidencial se puede usar en la plataforma llamadas para realizar cualquier trabajo que no se ajusta mediante la invocación de la <xref:System.Security.Cryptography.ECDiffieHellmanCng> clase.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-208">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.CngKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-209">Objeto que contiene la parte pública de la clave Diffie-Hellman de curva elíptica (ECDH) de la otra parte en el intercambio de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-209">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="3c1a9-210">Obtiene un identificador para el acuerdo confidencial generado entre dos partes, según un objeto <see cref="T:System.Security.Cryptography.CngKey" /> que contiene la clave pública de la segunda parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-210">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-211">Identificador del acuerdo confidencial.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-211">A handle to the secret agreement.</span></span> <span data-ttu-id="3c1a9-212">Esta información se calcula a partir de la clave privada del objeto actual y la clave pública especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-212">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-213">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-213"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-214"><paramref name="otherPartyPublicKey" /> no es una clave ECDH o no tiene el tamaño correcto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-214"><paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-215">Todos los demás errores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-215">All other errors.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="3c1a9-216">Para obtener permiso llamar a código no administrado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-216">for permission to call unmanaged code.</span></span> <span data-ttu-id="3c1a9-217">Valor de petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-217">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="3c1a9-218">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="3c1a9-218">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberSignature Language="F#" Value="member this.DeriveSecretAgreementHandle : System.Security.Cryptography.ECDiffieHellmanPublicKey -&gt; Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" Usage="eCDiffieHellmanCng.DeriveSecretAgreementHandle otherPartyPublicKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey"><span data-ttu-id="3c1a9-219">Clave pública de la otra parte en el intercambio de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-219">The public key from the other party in the key exchange.</span></span></param>
        <summary><span data-ttu-id="3c1a9-220">Obtiene un identificador para el acuerdo confidencial generado entre dos partes, según un objeto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> que contiene la clave pública de la segunda parte.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-220">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-221">Identificador del acuerdo confidencial.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-221">A handle to the secret agreement.</span></span> <span data-ttu-id="3c1a9-222">Esta información se calcula a partir de la clave privada del objeto actual y la clave pública especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-222">This information is calculated from the current object's private key and the specified public key.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-223">El valor de <paramref name="otherPartyPublicKey" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-223"><paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-224"><paramref name="otherPartyPublicKey" /> no es una clave <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-224"><paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eCDiffieHellmanCng.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportExplicitParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportExplicitParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="3c1a9-225">Es <see langword="true" /> si se van a incluir parámetros privados; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-225"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3c1a9-226">Exporta la clave y parámetros de curva explícitos que usa el objeto <see cref="T:System.Security.Cryptography.ECCurve" /> en un objeto <see cref="T:System.Security.Cryptography.ECParameters" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-226">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-227">La clave y parámetros de curva explícitos que usa el objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-227">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-228">El método no puede obtener valores de curva.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-228">The method cannot obtain curve values.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3c1a9-229">Esta plataforma no admite la exportación explícita.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-229">Explicit export is not supported by this platform.</span></span> <span data-ttu-id="3c1a9-230">Se requiere Windows 10, o bien versiones posteriores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-230">Windows 10 or higher is required.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="override this.ExportParameters : bool -&gt; System.Security.Cryptography.ECParameters" Usage="eCDiffieHellmanCng.ExportParameters includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="3c1a9-231">Es <see langword="true" /> si se van a incluir parámetros privados; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-231"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3c1a9-232">Exporta la clave que usa el objeto <see cref="T:System.Security.Cryptography.ECCurve" /> en un objeto <see cref="T:System.Security.Cryptography.ECParameters" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-232">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-233">La clave y parámetros de curva con nombre que usa el objeto <see cref="T:System.Security.Cryptography.ECCurve" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-233">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-234">Si la clave se creó como una curva con nombre, el <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> campo contiene parámetros de curva con nombre;          en caso contrario, contiene parámetros explícitos.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-234">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-235">El método no puede obtener valores de curva.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-235">The method cannot obtain curve values.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-236">Deserializa la información de clave de una cadena XML.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-236">Deserializes the key information from an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberSignature Language="F#" Value="abstract member FromXmlString : string -&gt; unit&#xA;override this.FromXmlString : string -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString xmlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString"><span data-ttu-id="3c1a9-237">Información de clave basada en XML que se va a deserializar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-237">The XML-based key information to be deserialized.</span></span></param>
        <summary><span data-ttu-id="3c1a9-238">Este método no se implementa.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-238">This method is not implemented.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-239">Para deserializar una clave de XML, utilice el <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> sobrecargar en su lugar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-239">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3c1a9-240">Este método no se ha invalidado para esta instancia.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-240">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="member this.FromXmlString : string * System.Security.Cryptography.ECKeyXmlFormat -&gt; unit" Usage="eCDiffieHellmanCng.FromXmlString (xml, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml"><span data-ttu-id="3c1a9-241">Información de clave basada en XML que se va a deserializar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-241">The XML-based key information to be deserialized.</span></span></param>
        <param name="format"><span data-ttu-id="3c1a9-242">Uno de los valores de la enumeración que especifica el formato de la cadena XML.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-242">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="3c1a9-243">El único formato actualmente aceptado es <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-243">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="3c1a9-244">Deserializa la información de clave de una cadena XML mediante el formato especificado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-244">Deserializes the key information from an XML string by using the specified format.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-245">El valor de <paramref name="xml" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-245"><paramref name="xml" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c1a9-246"><paramref name="xml" /> es incorrecto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-246"><paramref name="xml" /> is malformed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3c1a9-247"><paramref name="format" /> especifica un formato no válido.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-247"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="3c1a9-248">El único valor aceptado es <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-248">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-249">Todos los demás errores.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-249">All other errors.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberSignature Language="F#" Value="override this.GenerateKey : System.Security.Cryptography.ECCurve -&gt; unit" Usage="eCDiffieHellmanCng.GenerateKey curve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve"><span data-ttu-id="3c1a9-250">La curva usada para generar un par de claves pública-privada efímeras.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-250">The curve used to generate an ephemeral public/private key pair.</span></span></param>
        <summary><span data-ttu-id="3c1a9-251">Genera un nuevo par de claves pública-privada efímeras para la curva especificada.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-251">Generates a new ephemeral public/private key pair for the specified curve.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-252">`curve` debe validar (es decir, debe devolver true cuando se pasan a la <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> método) y no debe ser implícita.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-252">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="3c1a9-253">Las curvas de característica 2 no se admiten en Windows.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-253">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-254"><paramref name="curve" /> no se valida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-254"><paramref name="curve" /> does not validate.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.CngAlgorithm with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-255">Obtiene o establece el algoritmo hash que se utiliza al generar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-255">Gets or sets the hash algorithm to use when generating key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-256">Objeto que especifica el algoritmo hash.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-256">An object that specifies the hash algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-257">Esta propiedad la usa solo si de objetos de Cryptography Next Generation (CNG) el <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> o <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> valor se establece en el <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-257">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="3c1a9-258">Esta propiedad acepta los siguientes algoritmos: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, y <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-258">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="3c1a9-259">También se pueden usar otros algoritmos hash personalizado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-259">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="3c1a9-260">El algoritmo predeterminado es <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-260">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c1a9-261">El valor es <see langword="null." /></span><span class="sxs-lookup"><span data-stu-id="3c1a9-261">The value is <see langword="null." /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HmacKey : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-262">Obtiene o establece la clave del código de autenticación de mensajes basado en hash (HMAC) que se utiliza para derivar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-262">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-263">La clave del código de autenticación de mensajes basado en hash (HMAC) que se utiliza para derivar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-263">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-264">Esta propiedad solo aplica cuando el <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> valor se establece en el <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad y el <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> propiedad es `false`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-264">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="3c1a9-265">De forma predeterminada, el valor es `null`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-265">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberSignature Language="F#" Value="override this.ImportParameters : System.Security.Cryptography.ECParameters -&gt; unit" Usage="eCDiffieHellmanCng.ImportParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="3c1a9-266">Los parámetros de la curva que se importarán.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-266">The curve's parameters to import.</span></span></param>
        <summary><span data-ttu-id="3c1a9-267">Importa los parámetros especificados para un objeto <see cref="T:System.Security.Cryptography.ECCurve" /> como una clave en la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-267">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-268">El <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> método reemplaza la clave existente que funciona con este objeto mediante la creación de un nuevo <xref:System.Security.Cryptography.CngKey> objeto.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-268">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="3c1a9-269">Si `parameters` contiene sólo el <xref:System.Security.Cryptography.ECParameters.Q> campo, a continuación, se importa solo una clave pública.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-269">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="3c1a9-270">Si `parameters` también contiene <xref:System.Security.Cryptography.ECParameters.D>, a continuación, se importarán un par de claves completo.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-270">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="3c1a9-271">El `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> valor especifica el tipo de la curva para importar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-271">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="3c1a9-272"><paramref name="parameters" /> no se valida.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-272"><paramref name="parameters" /> does not validate.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="3c1a9-273"><paramref name="parameters" /> hace referencia a una curva que no se puede importar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-273"><paramref name="parameters" /> references a curve that cannot be imported..</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="3c1a9-274"><paramref name="parameters" /> hace referencia a una curva que esta plataforma no admite.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-274"><paramref name="parameters" /> references a curve that is not supported by this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Security.Cryptography.CngKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-275">Especifica la <see cref="T:System.Security.Cryptography.CngKey" /> utilizada por el objeto actual para operaciones criptográficas.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-275">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span></span></summary>
        <value><span data-ttu-id="3c1a9-276">Par de claves utilizado por este objeto para realizar operaciones criptográficas.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-276">The key pair used by this object to perform cryptographic operations.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberSignature Language="F#" Value="member this.KeyDerivationFunction : System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-277">Obtiene o establece la función de derivación de claves para la clase <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-277">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span></span></summary>
        <value><span data-ttu-id="3c1a9-278">Uno de los valores de la enumeración <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> o <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-278">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span></span> <span data-ttu-id="3c1a9-279">El valor predeterminado es <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-279">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-280">Esta propiedad especifica la función de derivación de claves que se utiliza para transformar el acuerdo confidencial en material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-280">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3c1a9-281">El valor de la enumeración está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-281">The enumeration value is out of range.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="KeySize">
      <MemberSignature Language="C#" Value="public override int KeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property KeySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeySize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeySize : int with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-282">Obtiene o establece el valor de la etiqueta que se utiliza para la derivación de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-282">Gets or sets the label value that is used for key derivation.</span></span></summary>
        <value><span data-ttu-id="3c1a9-283">Valor de la etiqueta.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-283">The label value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-284">Este valor se utiliza para la derivación de claves si la <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> valor se establece en el <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-284">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="3c1a9-285">De forma predeterminada, es `null`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-285">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PublicKey : System.Security.Cryptography.ECDiffieHellmanPublicKey" Usage="System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-286">Obtiene la clave pública que puede utilizar otro objeto <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> para generar un acuerdo confidencial compartido.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-286">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span></span></summary>
        <value><span data-ttu-id="3c1a9-287">Clave pública que está asociada a esta instancia del objeto <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-287">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretAppend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-288">Obtiene o establece un valor que se anexará al acuerdo confidencial al generar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-288">Gets or sets a value that will be appended to the secret agreement when generating key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-289">Valor que se anexa al acuerdo confidencial.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-289">The value that is appended to the secret agreement.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-290">Este valor se utiliza para la derivación de claves si la <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> o <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> se utiliza la función de derivación de claves (KDF).</span><span class="sxs-lookup"><span data-stu-id="3c1a9-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="3c1a9-291">El valor se anexa al acuerdo confidencial y el valor combinado se pasa a KDF para generar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-291">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="3c1a9-292">De forma predeterminada, el valor es `null`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecretPrepend : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-293">Obtiene o establece un valor que se agregará al principio del acuerdo confidencial cuando se deriva el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-293">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-294">Valor que se anexa al principio del acuerdo confidencial durante la derivación de claves.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-294">The value that is appended to the beginning of the secret agreement during key derivation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-295">Este valor se utiliza para la derivación de claves si el <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad se establece en uno de los siguientes valores:</span><span class="sxs-lookup"><span data-stu-id="3c1a9-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="3c1a9-296">El valor se antepone al acuerdo confidencial y el valor combinado se pasa a la función de derivación de claves (KDF) para generar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-296">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="3c1a9-297">De forma predeterminada, el valor es `null`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-297">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Seed : byte[] with get, set" Usage="System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-298">Obtiene o establece el valor de inicialización que se utilizará cuando se deriva el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-298">Gets or sets the seed value that will be used when deriving key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-299">El valor de inicialización.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-299">The seed value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-300">Este valor se utiliza para la derivación de claves si la <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad está establecida en <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-300">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="3c1a9-301">De forma predeterminada, el valor es `null`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-301">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c1a9-302">Serializa la información de clave en una cadena XML.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-302">Serializes the key information to an XML string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberSignature Language="F#" Value="abstract member ToXmlString : bool -&gt; string&#xA;override this.ToXmlString : bool -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString includePrivateParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters"><span data-ttu-id="3c1a9-303">Es <see langword="true" /> si se van a incluir parámetros privados; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-303"><see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="3c1a9-304">Este método no se implementa.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-304">This method is not implemented.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-305">No es aplicable.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-305">Not applicable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c1a9-306">Para convertir la clave actual en una representación XML, utilice el <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> sobrecargar en su lugar.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-306">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="3c1a9-307">Este método no se ha invalidado para esta instancia.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-307">This method was not overridden for this instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberSignature Language="F#" Value="member this.ToXmlString : System.Security.Cryptography.ECKeyXmlFormat -&gt; string" Usage="eCDiffieHellmanCng.ToXmlString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="3c1a9-308">Uno de los valores de la enumeración que especifica el formato de la cadena XML.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-308">One of the enumeration values that specifies the format of the XML string.</span></span> <span data-ttu-id="3c1a9-309">El único formato actualmente aceptado es <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-309">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></param>
        <summary><span data-ttu-id="3c1a9-310">Serializa la información de clave en una cadena XML mediante el formato especificado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-310">Serializes the key information to an XML string by using the specified format.</span></span></summary>
        <returns><span data-ttu-id="3c1a9-311">Objeto de cadena que contiene la información de clave, serializada en una cadena XML, según el formato solicitado.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-311">A string object that contains the key information, serialized to an XML string, according to the requested format.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3c1a9-312"><paramref name="format" /> especifica un formato no válido.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-312"><paramref name="format" /> specifies an invalid format.</span></span> <span data-ttu-id="3c1a9-313">El único valor aceptado es <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-313">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseSecretAgreementAsHmacKey : bool" Usage="System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Cng</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c1a9-314">Obtiene un valor que indica si el acuerdo confidencial se utiliza como clave de código de autenticación de mensajes basado en hash (HMAC) para derivar el material de clave.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-314">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span></span></summary>
        <value><span data-ttu-id="3c1a9-315"><see langword="true" /> si el acuerdo confidencial se utiliza como una clave HMAC para derivar el material de clave; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-315"><see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="3c1a9-316">Este valor se utiliza para la derivación de claves si la <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> propiedad está establecida en <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-316">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="3c1a9-317">De forma predeterminada, el valor es `false`.</span><span class="sxs-lookup"><span data-stu-id="3c1a9-317">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>