<Type Name="HashAlgorithm" FullName="System.Security.Cryptography.HashAlgorithm">
  <Metadata><Meta Name="ms.openlocfilehash" Value="337dbc56f7f766824323fb7d5e8159f86f762087" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52602794" /></Metadata><TypeSignature Language="C#" Value="public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HashAlgorithm extends System.Object implements class System.IDisposable, class System.Security.Cryptography.ICryptoTransform" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HashAlgorithm" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HashAlgorithm&#xA;Implements ICryptoTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class HashAlgorithm abstract : System::Security::Cryptography::ICryptoTransform" />
  <TypeSignature Language="F#" Value="type HashAlgorithm = class&#xA;    interface IDisposable&#xA;    interface ICryptoTransform" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Cryptography.ICryptoTransform</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cc49e-101">Representa la clase base de la que deben derivarse todas las implementaciones de algoritmos hash criptográficos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-101">Represents the base class from which all implementations of cryptographic hash algorithms must derive.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-102">Las funciones hash son fundamentales para la criptografía moderna.</span><span class="sxs-lookup"><span data-stu-id="cc49e-102">Hash functions are fundamental to modern cryptography.</span></span> <span data-ttu-id="cc49e-103">Estas funciones asignan cadenas binarias de longitud arbitraria a cadenas binarias pequeñas de una longitud fija, conocido como valores hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-103">These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values.</span></span> <span data-ttu-id="cc49e-104">Una función hash criptográfica tiene la propiedad que es poco factible encontrar dos entradas distintas cuyo hash en el mismo valor.</span><span class="sxs-lookup"><span data-stu-id="cc49e-104">A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value.</span></span> <span data-ttu-id="cc49e-105">Las funciones hash se utilizan normalmente con firmas digitales y la integridad de datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-105">Hash functions are commonly used with digital signatures and for data integrity.</span></span>  
  
 <span data-ttu-id="cc49e-106">El hash se utiliza como un valor único de tamaño fijo que representa una gran cantidad de datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-106">The hash is used as a unique value of fixed size representing a large amount of data.</span></span> <span data-ttu-id="cc49e-107">Los valores hash de dos conjuntos de datos deben coincidir si también coincide con los datos correspondientes.</span><span class="sxs-lookup"><span data-stu-id="cc49e-107">Hashes of two sets of data should match if the corresponding data also matches.</span></span> <span data-ttu-id="cc49e-108">Los pequeños cambios en el resultado de datos grandes cambios imprevisibles en el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-108">Small changes to the data result in large unpredictable changes in the hash.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc49e-109">El siguiente código de ejemplo calcula el <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash para una matriz.</span><span class="sxs-lookup"><span data-stu-id="cc49e-109">The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array.</span></span> <span data-ttu-id="cc49e-110">En este ejemplo se supone que hay una matriz de bytes predefinidos `dataArray[]`.</span><span class="sxs-lookup"><span data-stu-id="cc49e-110">This example assumes that there is a predefined byte array `dataArray[]`.</span></span> <span data-ttu-id="cc49e-111"><xref:System.Security.Cryptography.SHA1CryptoServiceProvider> es una clase derivada de <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-111"><xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of <xref:System.Security.Cryptography.HashAlgorithm>.</span></span>  
  
 [!code-cpp[Classic HashAlgorithm Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HashAlgorithm Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CS/source.cs#1)]
 [!code-vb[Classic HashAlgorithm Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="cc49e-112">Al heredar de la <see cref="T:System.Security.Cryptography.HashAlgorithm" /> (clase), debe reemplazar los miembros siguientes: <see cref="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" /> y <see cref="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-112">When you inherit from the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class, you must override the following members:  <see cref="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />.</span></span></para></block>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="cc49e-113">servicios criptográficos</span><span class="sxs-lookup"><span data-stu-id="cc49e-113">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HashAlgorithm ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HashAlgorithm();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-114">Inicializa una nueva instancia de la clase <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-114">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-115">No se puede crear una instancia de una clase abstracta.</span><span class="sxs-lookup"><span data-stu-id="cc49e-115">You cannot create an instance of an abstract class.</span></span> <span data-ttu-id="cc49e-116">Código de la aplicación crea una nueva instancia de una clase derivada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-116">Application code creates a new instance of a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReuseTransform">
      <MemberSignature Language="C#" Value="public virtual bool CanReuseTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReuseTransform" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReuseTransform As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReuseTransform { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReuseTransform : bool" Usage="System.Security.Cryptography.HashAlgorithm.CanReuseTransform" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-117">Obtiene un valor que indica si la transformación actual puede volver a usarse.</span><span class="sxs-lookup"><span data-stu-id="cc49e-117">Gets a value indicating whether the current transform can be reused.</span></span></summary>
        <value><span data-ttu-id="cc49e-118">Siempre es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-118">Always <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTransformMultipleBlocks">
      <MemberSignature Language="C#" Value="public virtual bool CanTransformMultipleBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTransformMultipleBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTransformMultipleBlocks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTransformMultipleBlocks { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTransformMultipleBlocks : bool" Usage="System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-119">Cuando se invalida en una clase derivada, obtiene un valor que indica si se pueden transformar varios bloques.</span><span class="sxs-lookup"><span data-stu-id="cc49e-119">When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.</span></span></summary>
        <value><span data-ttu-id="cc49e-120"><see langword="true" /> si se pueden transformar varios bloques; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-120"><see langword="true" /> if multiple blocks can be transformed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="hashAlgorithm.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-121">Libera todos los recursos que utiliza la clase <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-121">Releases all resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-122">Este método es una simple llamada a la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="cc49e-122">This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cc49e-123">Una llamada a `Dispose` permite a los recursos utilizados por la <xref:System.Security.Cryptography.HashAlgorithm> clase se reasignen para otros fines.</span><span class="sxs-lookup"><span data-stu-id="cc49e-123">Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes.</span></span> <span data-ttu-id="cc49e-124">Para obtener más información acerca de `Dispose`, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="cc49e-124">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeHash">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc49e-125">Calcula el valor hash de los datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-125">Computes the hash value for the input data.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (buffer As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : byte[] -&gt; byte[]" Usage="hashAlgorithm.ComputeHash buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="cc49e-126">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-126">The input to compute the hash code for.</span></span></param>
        <summary><span data-ttu-id="cc49e-127">Calcula el valor hash para la matriz de bytes especificada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-127">Computes the hash value for the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="cc49e-128">Código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-128">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc49e-129">El ejemplo siguiente se calcula el <xref:System.Security.Cryptography.SHA256> valor hash de una cadena y devuelve el hash como una cadena con formato hexadecimal de 64 caracteres.</span><span class="sxs-lookup"><span data-stu-id="cc49e-129">The following example computes the <xref:System.Security.Cryptography.SHA256> hash value of a string and returns the hash as a 64-character, hexadecimal-formatted string.</span></span>  <span data-ttu-id="cc49e-130">La cadena de hash creada por este ejemplo de código es compatible con cualquier función hash SHA256 (en cualquier plataforma) que crea una cadena de hash de 64 caracteres, con formato hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="cc49e-130">The hash string created by this code example is compatible with any SHA256 hash function (on any platform) that creates a 64-character, hexadecimal-formatted hash string.</span></span>  
  
 [!code-csharp[HashAlgorithm.ComputeHash-1](~/samples/snippets/csharp/api/system.security.cryptography/hashalgorithm/example1.cs)]
 [!code-vb[HashAlgorithm.ComputeHash-1](~/samples/snippets/visualbasic/api/system.security.cryptography/hashalgorithm/example1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cc49e-131">El valor de <paramref name="buffer" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-131"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-132">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-132">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (System.IO.Stream inputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(class System.IO.Stream inputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (inputStream As Stream) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(System::IO::Stream ^ inputStream);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : System.IO.Stream -&gt; byte[]" Usage="hashAlgorithm.ComputeHash inputStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputStream"><span data-ttu-id="cc49e-133">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-133">The input to compute the hash code for.</span></span></param>
        <summary><span data-ttu-id="cc49e-134">Calcula el valor hash del objeto <see cref="T:System.IO.Stream" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-134">Computes the hash value for the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <returns><span data-ttu-id="cc49e-135">Código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-135">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  

<span data-ttu-id="cc49e-136">En el ejemplo siguiente se calcula el <xref:System.Security.Cryptography.SHA256> hash para todos los archivos en un directorio.</span><span class="sxs-lookup"><span data-stu-id="cc49e-136">The following example calculates the <xref:System.Security.Cryptography.SHA256> hash for all files in a directory.</span></span>  
  
[!code-csharp[HashAlgorithm.ComputeHash Example](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SHA256 Example/CS/source.cs#1)]
[!code-vb[HashAlgorithm.ComputeHash Example](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SHA256 Example/VB/source.vb#1)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-137">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-137">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (buffer As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : byte[] * int * int -&gt; byte[]" Usage="hashAlgorithm.ComputeHash (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="cc49e-138">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-138">The input to compute the hash code for.</span></span></param>
        <param name="offset"><span data-ttu-id="cc49e-139">Desplazamiento en la matriz de bytes a partir del cual se empezarán a usar los datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-139">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="count"><span data-ttu-id="cc49e-140">Número de bytes de la matriz que se van a usar como datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-140">The number of bytes in the array to use as data.</span></span></param>
        <summary><span data-ttu-id="cc49e-141">Calcula el valor hash para la región especificada de la matriz de bytes indicada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-141">Computes the hash value for the specified region of the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="cc49e-142">Código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-142">The computed hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc49e-143"><paramref name="count" /> es un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="cc49e-143"><paramref name="count" /> is an invalid value.</span></span>  
  
<span data-ttu-id="cc49e-144">O bien</span><span class="sxs-lookup"><span data-stu-id="cc49e-144">-or-</span></span> 
 <span data-ttu-id="cc49e-145">La longitud de <paramref name="buffer" /> no es válida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-145"><paramref name="buffer" /> length is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cc49e-146">El valor de <paramref name="buffer" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-146"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc49e-147"><paramref name="offset" /> está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-147"><paramref name="offset" /> is out of range.</span></span> <span data-ttu-id="cc49e-148">Este parámetro requiere un número no negativo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-148">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-149">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-149">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc49e-150">Crea una instancia de una implementación de un algoritmo hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-150">Creates an instance of an implementation of a hash algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithm Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.HashAlgorithm Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::HashAlgorithm ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.HashAlgorithm" Usage="System.Security.Cryptography.HashAlgorithm.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-151">Crea una instancia de la implementación predeterminada de un algoritmo hash .</span><span class="sxs-lookup"><span data-stu-id="cc49e-151">Creates an instance of the default implementation of a hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="cc49e-152">Una nueva instancia de <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />, a menos que la configuración predeterminada se haya cambiado usando .</span><span class="sxs-lookup"><span data-stu-id="cc49e-152">A new <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> instance, unless the default settings have been changed using the .</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-153">De forma predeterminada, esta sobrecarga se utiliza el <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementación de un algoritmo hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-153">By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm.</span></span> <span data-ttu-id="cc49e-154">Si desea especificar una implementación diferente, use el <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> sobrecarga, que le permite especificar un nombre de algoritmo, en su lugar.</span><span class="sxs-lookup"><span data-stu-id="cc49e-154">If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.</span></span> <span data-ttu-id="cc49e-155">El sistema de configuración de criptografía define la implementación predeterminada de <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-155">The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithm Create (string hashName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.HashAlgorithm Create(string hashName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (hashName As String) As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::HashAlgorithm ^ Create(System::String ^ hashName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.HashAlgorithm" Usage="System.Security.Cryptography.HashAlgorithm.Create hashName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hashName"><span data-ttu-id="cc49e-156">La implementación de algoritmo hash a usar.</span><span class="sxs-lookup"><span data-stu-id="cc49e-156">The hash algorithm implementation to use.</span></span> <span data-ttu-id="cc49e-157">En la tabla siguiente se muestran los valores válidos para el parámetro <paramref name="hashName" /> y los algoritmos a los que se asignan.</span><span class="sxs-lookup"><span data-stu-id="cc49e-157">The following table shows the valid values for the <paramref name="hashName" /> parameter and the algorithms they map to.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="cc49e-158">Valor de parámetro</span><span class="sxs-lookup"><span data-stu-id="cc49e-158">Parameter value</span></span> 
 </term><description> <span data-ttu-id="cc49e-159">Implementaciones</span><span class="sxs-lookup"><span data-stu-id="cc49e-159">Implements</span></span> 
 </description></listheader><item><term> <span data-ttu-id="cc49e-160">SHA</span><span class="sxs-lookup"><span data-stu-id="cc49e-160">SHA</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-161">SHA1</span><span class="sxs-lookup"><span data-stu-id="cc49e-161">SHA1</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-162">System.Security.Cryptography.SHA1</span><span class="sxs-lookup"><span data-stu-id="cc49e-162">System.Security.Cryptography.SHA1</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-163">System.Security.Cryptography.HashAlgorithm</span><span class="sxs-lookup"><span data-stu-id="cc49e-163">System.Security.Cryptography.HashAlgorithm</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-164">MD5</span><span class="sxs-lookup"><span data-stu-id="cc49e-164">MD5</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-165">System.Security.Cryptography.MD5</span><span class="sxs-lookup"><span data-stu-id="cc49e-165">System.Security.Cryptography.MD5</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="cc49e-166">SHA256</span><span class="sxs-lookup"><span data-stu-id="cc49e-166">SHA256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="cc49e-167">SHA-256</span><span class="sxs-lookup"><span data-stu-id="cc49e-167">SHA-256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="cc49e-168">System.Security.Cryptography.SHA256</span><span class="sxs-lookup"><span data-stu-id="cc49e-168">System.Security.Cryptography.SHA256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="cc49e-169">SHA384</span><span class="sxs-lookup"><span data-stu-id="cc49e-169">SHA384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="cc49e-170">SHA-384</span><span class="sxs-lookup"><span data-stu-id="cc49e-170">SHA-384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="cc49e-171">System.Security.Cryptography.SHA384</span><span class="sxs-lookup"><span data-stu-id="cc49e-171">System.Security.Cryptography.SHA384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="cc49e-172">SHA512</span><span class="sxs-lookup"><span data-stu-id="cc49e-172">SHA512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> <span data-ttu-id="cc49e-173">SHA-512</span><span class="sxs-lookup"><span data-stu-id="cc49e-173">SHA-512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> <span data-ttu-id="cc49e-174">System.Security.Cryptography.SHA512</span><span class="sxs-lookup"><span data-stu-id="cc49e-174">System.Security.Cryptography.SHA512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item></list></param>
        <summary><span data-ttu-id="cc49e-175">Crea una instancia de la implementación especificada de un algoritmo hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-175">Creates an instance of the specified implementation of a hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="cc49e-176">Una nueva instancia del algoritmo hash especificado o <see langword="null" /> si <paramref name="hashName" /> no es un algoritmo hash válido.</span><span class="sxs-lookup"><span data-stu-id="cc49e-176">A new instance of the specified hash algorithm, or <see langword="null" /> if <paramref name="hashName" /> is not a valid hash algorithm.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc49e-177">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-177">Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="hashAlgorithm.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-178">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-178">Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-179">Llame a `Dispose` cuando haya terminado de usar <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-179">Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>.</span></span> <span data-ttu-id="cc49e-180">El método `Dispose` deja el <xref:System.Security.Cryptography.HashAlgorithm> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="cc49e-180">The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state.</span></span> <span data-ttu-id="cc49e-181">Después de llamar a `Dispose`, debe liberar todas las referencias a la <xref:System.Security.Cryptography.HashAlgorithm> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Security.Cryptography.HashAlgorithm> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="cc49e-181">After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying.</span></span>  
  
 <span data-ttu-id="cc49e-182">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="cc49e-182">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc49e-183">Realice siempre una llamada a `Dispose` antes de liberar la última referencia al objeto <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-183">Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>.</span></span> <span data-ttu-id="cc49e-184">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Security.Cryptography.HashAlgorithm> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="cc49e-184">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="hashAlgorithm.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="cc49e-185">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="cc49e-185"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="cc49e-186">Libera los recursos no administrados que usa <see cref="T:System.Security.Cryptography.HashAlgorithm" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="cc49e-186">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-187">Este método se llama por el público `Dispose()` método y el `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="cc49e-187">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="cc49e-188">`Dispose()` invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="cc49e-188">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="cc49e-189">`Finalize` invoca `Dispose` con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="cc49e-189">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="cc49e-190">Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.Security.Cryptography.HashAlgorithm> hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cc49e-190">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references.</span></span> <span data-ttu-id="cc49e-191">Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cc49e-191">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cc49e-192">
            <see langword="Dispose" /> puede recibir varias llamadas de otros objetos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-192">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="cc49e-193">Cuando se reemplaza <see langword="Dispose(Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-193">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="cc49e-194">Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, consulte [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="cc49e-194">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="cc49e-195">Para obtener más información acerca de <see langword="Dispose" /> y <see langword="Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="cc49e-195">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="public virtual byte[] Hash { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Hash" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.Hash" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Hash As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ Hash { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hash : byte[]" Usage="System.Security.Cryptography.HashAlgorithm.Hash" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-196">Obtiene el valor del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-196">Gets the value of the computed hash code.</span></span></summary>
        <value><span data-ttu-id="cc49e-197">Valor actual del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-197">The current value of the computed hash code.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-198">El <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propiedad es una matriz de bytes; el <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> propiedad es un valor que representa los bits.</span><span class="sxs-lookup"><span data-stu-id="cc49e-198">The <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits.</span></span> <span data-ttu-id="cc49e-199">Por lo tanto, el número de elementos de <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> es una octava parte el tamaño de <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-199">Therefore, the number of elements in <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException"><span data-ttu-id="cc49e-200">El valor de <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-200"><see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-201">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-201">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected virtual void HashCore (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub HashCore (source As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void HashCore(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="abstract member HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit&#xA;override this.HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="hashAlgorithm.HashCore source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected abstract void HashCore (byte[] array, int ibStart, int cbSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HashCore(unsigned int8[] array, int32 ibStart, int32 cbSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub HashCore (array As Byte(), ibStart As Integer, cbSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void HashCore(cli::array &lt;System::Byte&gt; ^ array, int ibStart, int cbSize);" />
      <MemberSignature Language="F#" Value="abstract member HashCore : byte[] * int * int -&gt; unit" Usage="hashAlgorithm.HashCore (array, ibStart, cbSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="ibStart" Type="System.Int32" />
        <Parameter Name="cbSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="cc49e-202">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-202">The input to compute the hash code for.</span></span></param>
        <param name="ibStart"><span data-ttu-id="cc49e-203">Desplazamiento en la matriz de bytes a partir del cual se empezarán a usar los datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-203">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="cbSize"><span data-ttu-id="cc49e-204">Número de bytes de la matriz de bytes que se van a usar como datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-204">The number of bytes in the byte array to use as data.</span></span></param>
        <summary><span data-ttu-id="cc49e-205">Cuando se invalida en una clase derivada, enruta los datos escritos en el objeto al algoritmo hash para el cálculo del valor hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-205">When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-206">Se llama a este método no es el código de aplicación.</span><span class="sxs-lookup"><span data-stu-id="cc49e-206">This method is not called by application code.</span></span>  
  
 <span data-ttu-id="cc49e-207">Este método abstracto realiza el cálculo de hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-207">This abstract method performs the hash computation.</span></span> <span data-ttu-id="cc49e-208">Cada operación de escritura para el objeto de secuencia criptográfico pasa los datos a través de este método.</span><span class="sxs-lookup"><span data-stu-id="cc49e-208">Every write to the cryptographic stream object passes the data through this method.</span></span> <span data-ttu-id="cc49e-209">Para cada bloque de datos, este método actualiza el estado del objeto hash, por lo que se devuelve un valor de hash correcto al final del flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-209">For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashFinal">
      <MemberSignature Language="C#" Value="protected abstract byte[] HashFinal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashFinal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HashFinal () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ HashFinal();" />
      <MemberSignature Language="F#" Value="abstract member HashFinal : unit -&gt; byte[]" Usage="hashAlgorithm.HashFinal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-210">Cuando se invalida en una clase derivada, finaliza el cálculo hash una vez que el objeto de secuencia criptográfico termina de procesar los últimos datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-210">When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</span></span></summary>
        <returns><span data-ttu-id="cc49e-211">Código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-211">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-212">Este método finaliza cualquier cálculo parcial y devuelve el valor hash correcto para el flujo de datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-212">This method finalizes any partial computation and returns the correct hash value for the data stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSize">
      <MemberSignature Language="C#" Value="public virtual int HashSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.HashSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HashSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HashSize : int" Usage="System.Security.Cryptography.HashAlgorithm.HashSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-213">Obtiene el tamaño en bits del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-213">Gets the size, in bits, of the computed hash code.</span></span></summary>
        <value><span data-ttu-id="cc49e-214">Obtiene el tamaño en bits del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-214">The size, in bits, of the computed hash code.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSizeValue">
      <MemberSignature Language="C#" Value="protected int HashSizeValue;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 HashSizeValue" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue" />
      <MemberSignature Language="VB.NET" Value="Protected HashSizeValue As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int HashSizeValue;" />
      <MemberSignature Language="F#" Value="val mutable HashSizeValue : int" Usage="System.Security.Cryptography.HashAlgorithm.HashSizeValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-215">Representa el tamaño en bits del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-215">Represents the size, in bits, of the computed hash code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-216">El algoritmo hash especifica el tamaño del código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-216">The hash algorithm specifies the size of the hash code.</span></span> <span data-ttu-id="cc49e-217">Por ejemplo, <xref:System.Security.Cryptography.SHA1> utiliza un tamaño de hash de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="cc49e-217">For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.</span></span>  
  
 <span data-ttu-id="cc49e-218">Este campo se tiene acceso a través de la <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cc49e-218">This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashValue">
      <MemberSignature Language="C#" Value="protected internal byte[] HashValue;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly unsigned int8[] HashValue" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.HashValue" />
      <MemberSignature Language="VB.NET" Value="Protected Friend HashValue As Byte() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::Byte&gt; ^ HashValue;" />
      <MemberSignature Language="F#" Value="val mutable HashValue : byte[]" Usage="System.Security.Cryptography.HashAlgorithm.HashValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-219">Representa el valor del código hash calculado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-219">Represents the value of the computed hash code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-220">Este campo se tiene acceso a través de la <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cc49e-220">This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit" Usage="hashAlgorithm.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-221">Inicializa la implementación de la clase <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-221">Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBlockSize">
      <MemberSignature Language="C#" Value="public virtual int InputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputBlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InputBlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int InputBlockSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBlockSize : int" Usage="System.Security.Cryptography.HashAlgorithm.InputBlockSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.InputBlockSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-222">Cuando se invalida en una clase derivada, obtiene el tamaño del bloque de entrada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-222">When overridden in a derived class, gets the input block size.</span></span></summary>
        <value><span data-ttu-id="cc49e-223">Tamaño del bloque de entrada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-223">The input block size.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-224">A menos que se reemplaza, esta propiedad devuelve el valor 1.</span><span class="sxs-lookup"><span data-stu-id="cc49e-224">Unless overridden, this property returns the value 1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputBlockSize">
      <MemberSignature Language="C#" Value="public virtual int OutputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputBlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OutputBlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int OutputBlockSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputBlockSize : int" Usage="System.Security.Cryptography.HashAlgorithm.OutputBlockSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-225">Cuando se invalida en una clase derivada, obtiene el tamaño del bloque de salida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-225">When overridden in a derived class, gets the output block size.</span></span></summary>
        <value><span data-ttu-id="cc49e-226">Tamaño del bloque de salida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-226">The output block size.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-227">A menos que se reemplaza, esta propiedad devuelve el valor 1.</span><span class="sxs-lookup"><span data-stu-id="cc49e-227">Unless overridden, this property returns the value 1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected int State;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 State" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.State" />
      <MemberSignature Language="VB.NET" Value="Protected State As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int State;" />
      <MemberSignature Language="F#" Value="val mutable State : int" Usage="System.Security.Cryptography.HashAlgorithm.State" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc49e-228">Representa el estado del cálculo del valor hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-228">Represents the state of the hash computation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-229">Este campo se utiliza para impedir que los usuarios cambien la clave de un algoritmo hash con clave durante una operación de hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-229">This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation.</span></span> <span data-ttu-id="cc49e-230">Cuando un cambio de clave es legítimo, el valor de este campo es cero antes y después de una operación de hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-230">When a key change is legitimate, the value of this field is zero both before and after a hash operation.</span></span> <span data-ttu-id="cc49e-231">Cuando un cambio de clave no es legítimo, el valor de este campo es distinto de cero.</span><span class="sxs-lookup"><span data-stu-id="cc49e-231">When a key change is not legitimate, the value of this field is nonzero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc49e-232">Libera los recursos no administrados que usa <see cref="T:System.Security.Cryptography.HashAlgorithm" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="cc49e-232">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="cc49e-233">Este método se llama al método Dispose() público y el método Finalize.</span><span class="sxs-lookup"><span data-stu-id="cc49e-233">This method is called by the public Dispose() method and the Finalize method.</span></span> <span data-ttu-id="cc49e-234">Dispose() invoca el método Dispose (Boolean) protegido con el parámetro de eliminación establecido en true.</span><span class="sxs-lookup"><span data-stu-id="cc49e-234">Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set to true.</span></span> <span data-ttu-id="cc49e-235">Finalizar invoca Dispose con el parámetro de eliminación establecido en false.</span><span class="sxs-lookup"><span data-stu-id="cc49e-235">Finalize invokes Dispose with disposing set to false.</span></span>

<span data-ttu-id="cc49e-236">Cuando el parámetro de eliminación es true, este método libera todos los recursos mantenidos por los objetos administrados que este <xref:System.Security.Cryptography.HashAlgorithm> referencias.</span><span class="sxs-lookup"><span data-stu-id="cc49e-236">When the disposing parameter is true, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references.</span></span> <span data-ttu-id="cc49e-237">Este método invoca al método Dispose() de cada objeto que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cc49e-237">This method invokes the Dispose() method of each referenced object.</span></span>

<span data-ttu-id="cc49e-238">**Notas para los herederos:**</span><span class="sxs-lookup"><span data-stu-id="cc49e-238">**Notes to Inheritors:**</span></span>

<span data-ttu-id="cc49e-239">Dispose puede llamarse varias veces por otros objetos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-239">Dispose can be called multiple times by other objects.</span></span> <span data-ttu-id="cc49e-240">Al reemplazar el método Dispose (Boolean), tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a Dispose.</span><span class="sxs-lookup"><span data-stu-id="cc49e-240">When overriding Dispose(Boolean), be careful not to reference objects that have been previously disposed in an earlier call to Dispose.</span></span> <span data-ttu-id="cc49e-241">Para obtener más información sobre cómo implementar Dispose (Boolean), consulte [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="cc49e-241">For more information about how to implement Dispose(Boolean), see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

<span data-ttu-id="cc49e-242">Para obtener más información acerca de Dispose y Finalize, vea [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [reemplazar el método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v%3dvs.100)).</span><span class="sxs-lookup"><span data-stu-id="cc49e-242">For more information about Dispose and Finalize, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v%3dvs.100)).</span></span>

]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="cc49e-243">servicios criptográficos</span><span class="sxs-lookup"><span data-stu-id="cc49e-243">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TransformBlock">
      <MemberSignature Language="C#" Value="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 TransformBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount, unsigned int8[] outputBuffer, int32 outputOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TransformBlock (inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer, outputBuffer As Byte(), outputOffset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int TransformBlock(cli::array &lt;System::Byte&gt; ^ inputBuffer, int inputOffset, int inputCount, cli::array &lt;System::Byte&gt; ^ outputBuffer, int outputOffset);" />
      <MemberSignature Language="F#" Value="abstract member TransformBlock : byte[] * int * int * byte[] * int -&gt; int&#xA;override this.TransformBlock : byte[] * int * int * byte[] * int -&gt; int" Usage="hashAlgorithm.TransformBlock (inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
        <Parameter Name="outputBuffer" Type="System.Byte[]" />
        <Parameter Name="outputOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer"><span data-ttu-id="cc49e-244">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-244">The input to compute the hash code for.</span></span></param>
        <param name="inputOffset"><span data-ttu-id="cc49e-245">Desplazamiento en la matriz de bytes de entrada a partir del cual se van a empezar a usar los datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-245">The offset into the input byte array from which to begin using data.</span></span></param>
        <param name="inputCount"><span data-ttu-id="cc49e-246">Número de bytes de la matriz de bytes de entrada que se van a usar como datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-246">The number of bytes in the input byte array to use as data.</span></span></param>
        <param name="outputBuffer"><span data-ttu-id="cc49e-247">Copia de la parte de la matriz de entrada usada para calcular el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-247">A copy of the part of the input array used to compute the hash code.</span></span></param>
        <param name="outputOffset"><span data-ttu-id="cc49e-248">Desplazamiento en la matriz de bytes de salida a partir del cual se van a empezar a escribir los datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-248">The offset into the output byte array from which to begin writing data.</span></span></param>
        <summary><span data-ttu-id="cc49e-249">Calcula el valor hash para la región especificada de la matriz de bytes de entrada y copia la región especificada de la matriz de bytes de entrada resultante en la región indicada de la matriz de bytes de salida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-249">Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.</span></span></summary>
        <returns><span data-ttu-id="cc49e-250">Número de bytes escritos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-250">The number of bytes written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-251">Debe llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> método antes de llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método.</span><span class="sxs-lookup"><span data-stu-id="cc49e-251">You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method.</span></span> <span data-ttu-id="cc49e-252">Debe llamar a ambos métodos antes de recuperar el último valor hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-252">You must call both methods before you retrieve the final hash value.</span></span>  
  
 <span data-ttu-id="cc49e-253">Para recuperar el último valor hash después de llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método, obtenga la matriz de bytes contenida en el <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cc49e-253">To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
 <span data-ttu-id="cc49e-254">Una llamada a la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> método con otra entrada y salida matrices da como resultado un <xref:System.IO.IOException>.</span><span class="sxs-lookup"><span data-stu-id="cc49e-254">Calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method with different input and output arrays results in an <xref:System.IO.IOException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc49e-255">Uso de ejemplos de código siguiente el <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método con el <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> método a una cadena de hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-255">The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.</span></span>  
  
 [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]
 [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc49e-256"><paramref name="inputCount" /> utiliza un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="cc49e-256"><paramref name="inputCount" /> uses an invalid value.</span></span>  
  
<span data-ttu-id="cc49e-257">O bien</span><span class="sxs-lookup"><span data-stu-id="cc49e-257">-or-</span></span> 
 <span data-ttu-id="cc49e-258"><paramref name="inputBuffer" /> tiene una longitud no válida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-258"><paramref name="inputBuffer" /> has an invalid length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cc49e-259">El valor de <paramref name="inputBuffer" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-259"><paramref name="inputBuffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc49e-260"><paramref name="inputOffset" /> está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-260"><paramref name="inputOffset" /> is out of range.</span></span> <span data-ttu-id="cc49e-261">Este parámetro requiere un número no negativo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-261">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-262">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-262">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransformFinalBlock">
      <MemberSignature Language="C#" Value="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] TransformFinalBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TransformFinalBlock (inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ TransformFinalBlock(cli::array &lt;System::Byte&gt; ^ inputBuffer, int inputOffset, int inputCount);" />
      <MemberSignature Language="F#" Value="abstract member TransformFinalBlock : byte[] * int * int -&gt; byte[]&#xA;override this.TransformFinalBlock : byte[] * int * int -&gt; byte[]" Usage="hashAlgorithm.TransformFinalBlock (inputBuffer, inputOffset, inputCount)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer"><span data-ttu-id="cc49e-263">La entrada para la cual se calcula el código hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-263">The input to compute the hash code for.</span></span></param>
        <param name="inputOffset"><span data-ttu-id="cc49e-264">Desplazamiento en la matriz de bytes a partir del cual se empezarán a usar los datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-264">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="inputCount"><span data-ttu-id="cc49e-265">Número de bytes de la matriz de bytes que se van a usar como datos.</span><span class="sxs-lookup"><span data-stu-id="cc49e-265">The number of bytes in the byte array to use as data.</span></span></param>
        <summary><span data-ttu-id="cc49e-266">Calcula el valor hash para la región especificada de la matriz de bytes indicada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-266">Computes the hash value for the specified region of the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="cc49e-267">Una matriz que es una copia de la parte de la entrada a la que se aplica el algoritmo hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-267">An array that is a copy of the part of the input that is hashed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc49e-268">Debe llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método después de llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> método pero antes de recuperar el último valor hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-268">You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.</span></span>  
  
 <span data-ttu-id="cc49e-269">Tenga en cuenta que el valor devuelto de este método no es el valor hash, pero solo una copia de la parte con hash de los datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="cc49e-269">Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.</span></span>  <span data-ttu-id="cc49e-270">Para recuperar el último valor con hash después de llamar a la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método, obtenga la matriz de bytes contenida en el <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cc49e-270">To retrieve the final hashed value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc49e-271">Uso de ejemplos de código siguiente el <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> método con el <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> método a una cadena de hash.</span><span class="sxs-lookup"><span data-stu-id="cc49e-271">The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.</span></span>  
  
 [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]
 [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc49e-272"><paramref name="inputCount" /> utiliza un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="cc49e-272"><paramref name="inputCount" /> uses an invalid value.</span></span>  
  
<span data-ttu-id="cc49e-273">O bien</span><span class="sxs-lookup"><span data-stu-id="cc49e-273">-or-</span></span> 
 <span data-ttu-id="cc49e-274"><paramref name="inputBuffer" /> tiene una longitud de desplazamiento no válida.</span><span class="sxs-lookup"><span data-stu-id="cc49e-274"><paramref name="inputBuffer" /> has an invalid offset length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cc49e-275">El valor de <paramref name="inputBuffer" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="cc49e-275"><paramref name="inputBuffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc49e-276"><paramref name="inputOffset" /> está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-276"><paramref name="inputOffset" /> is out of range.</span></span> <span data-ttu-id="cc49e-277">Este parámetro requiere un número no negativo.</span><span class="sxs-lookup"><span data-stu-id="cc49e-277">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cc49e-278">El objeto ya se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="cc49e-278">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryComputeHash">
      <MemberSignature Language="C#" Value="public bool TryComputeHash (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryComputeHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TryComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryComputeHash (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryComputeHash(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryComputeHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  -&gt; bool" Usage="hashAlgorithm.TryComputeHash (source, destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryHashFinal">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashFinal (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashFinal(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TryHashFinal(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashFinal (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashFinal(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryHashFinal : Span&lt;byte&gt; *  -&gt; bool&#xA;override this.TryHashFinal : Span&lt;byte&gt; *  -&gt; bool" Usage="hashAlgorithm.TryHashFinal (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>