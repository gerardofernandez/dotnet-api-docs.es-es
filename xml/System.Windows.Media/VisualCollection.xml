<Type Name="VisualCollection" FullName="System.Windows.Media.VisualCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b800078576abb97f6cef67dd84cd15a031c9513" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52224706" /></Metadata><TypeSignature Language="C#" Value="public sealed class VisualCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.VisualCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualCollection sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type VisualCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="93be1-101">Representa una colección ordenada de objetos <see cref="T:System.Windows.Media.Visual" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-101">Represents an ordered collection of <see cref="T:System.Windows.Media.Visual" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-102">Un <xref:System.Windows.Media.VisualCollection> disfruta implícitamente de afinidad de contexto.</span><span class="sxs-lookup"><span data-stu-id="93be1-102">A <xref:System.Windows.Media.VisualCollection> has implied context affinity.</span></span> <span data-ttu-id="93be1-103">Si un procedimiento intenta obtener acceso a la <xref:System.Windows.Media.VisualCollection> desde un contexto diferente que el contexto del objeto propietario <xref:System.Windows.Media.ContainerVisual>, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="93be1-103">If a procedure attempts to access the <xref:System.Windows.Media.VisualCollection> from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93be1-104">El ejemplo siguiente muestra cómo crear un <xref:System.Windows.Media.VisualCollection> y agregarles miembros.</span><span class="sxs-lookup"><span data-stu-id="93be1-104">The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.</span></span>  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  <span data-ttu-id="93be1-105">Para obtener un ejemplo completo, vea [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span><span class="sxs-lookup"><span data-stu-id="93be1-105">For the complete sample, see [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualCollection (System.Windows.Media.Visual parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Visual parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualCollection(System::Windows::Media::Visual ^ parent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.VisualCollection : System.Windows.Media.Visual -&gt; System.Windows.Media.VisualCollection" Usage="new System.Windows.Media.VisualCollection parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="93be1-106">Objeto visual primario cuya colección <see cref="T:System.Windows.Media.VisualCollection" /> se devuelve.</span><span class="sxs-lookup"><span data-stu-id="93be1-106">The parent visual object whose <see cref="T:System.Windows.Media.VisualCollection" /> is returned.</span></span></param>
        <summary><span data-ttu-id="93be1-107">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-107">Initializes a new instance of the <see cref="T:System.Windows.Media.VisualCollection" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.Add visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="93be1-108">Clase <see cref="T:System.Windows.Media.Visual" /> que se va a anexar a la colección <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-108">The <see cref="T:System.Windows.Media.Visual" /> to append to the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="93be1-109">Anexa un objeto <see cref="T:System.Windows.Media.Visual" /> al final de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-109">Appends a <see cref="T:System.Windows.Media.Visual" /> to the end of the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <returns><span data-ttu-id="93be1-110">Índice de la colección donde se agregó el objeto especificado por el parámetro <paramref name="visual" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-110">The index in the collection at which <paramref name="visual" /> was added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-111">Agregar un <xref:System.Windows.Media.Visual> cuyo valor es `null` está permitido y no genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="93be1-111">Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception.</span></span>  
  
 <span data-ttu-id="93be1-112">El <xref:System.Windows.Media.VisualCollection.Add%2A> método también establece la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.</span><span class="sxs-lookup"><span data-stu-id="93be1-112">The <xref:System.Windows.Media.VisualCollection.Add%2A> method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="93be1-113">Si necesita mayor control de bajo nivel sobre la implementación de almacenamiento subyacente de los objetos visuales secundarios de una clase personalizada, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="93be1-113">If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="93be1-114">Al usar estos métodos, debe definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-114">When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="93be1-115">El ejemplo siguiente muestra cómo crear un <xref:System.Windows.Media.VisualCollection> y agregarles miembros.</span><span class="sxs-lookup"><span data-stu-id="93be1-115">The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.</span></span>  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  <span data-ttu-id="93be1-116">Para obtener un ejemplo completo, vea [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span><span class="sxs-lookup"><span data-stu-id="93be1-116">For the complete sample, see [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93be1-117">Se produce una excepción <see cref="T:System.ArgumentException" /> si <see cref="T:System.Windows.Media.Visual" /> es un elemento raíz.</span><span class="sxs-lookup"><span data-stu-id="93be1-117">An <see cref="T:System.ArgumentException" /> is thrown if the <see cref="T:System.Windows.Media.Visual" /> is a root element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Windows.Media.VisualCollection.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93be1-118">Obtiene o establece el número de elementos que puede contener <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-118">Gets or sets the number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> can contain.</span></span></summary>
        <value><span data-ttu-id="93be1-119">Número de elementos que puede contener <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-119">The number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-120">El valor de <xref:System.Windows.Media.VisualCollection.Capacity%2A> es el número de elementos que el <xref:System.Windows.Media.VisualCollection> es capaz de almacenar.</span><span class="sxs-lookup"><span data-stu-id="93be1-120">The value of <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.</span></span> <span data-ttu-id="93be1-121"><xref:System.Windows.Media.VisualCollection.Count%2A> es el número de objetos visuales que son en realidad el <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-121"><xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="93be1-122"><xref:System.Windows.Media.VisualCollection.Capacity%2A> es siempre mayor o igual que <xref:System.Windows.Media.VisualCollection.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="93be1-122"><xref:System.Windows.Media.VisualCollection.Capacity%2A> is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>.</span></span> <span data-ttu-id="93be1-123">Si <xref:System.Windows.Media.VisualCollection.Count%2A> supera <xref:System.Windows.Media.VisualCollection.Capacity%2A> al agregar elementos, la capacidad de la <xref:System.Windows.Media.VisualCollection> aumenta.</span><span class="sxs-lookup"><span data-stu-id="93be1-123">If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased.</span></span> <span data-ttu-id="93be1-124">De forma predeterminada <xref:System.Windows.Media.VisualCollection.Capacity%2A> es cero.</span><span class="sxs-lookup"><span data-stu-id="93be1-124">By default <xref:System.Windows.Media.VisualCollection.Capacity%2A> is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93be1-125"><see cref="P:System.Windows.Media.VisualCollection.Capacity" /> se establece en un valor que es menor que <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-125"><see cref="P:System.Windows.Media.VisualCollection.Capacity" /> is set to a value that is less than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="visualCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93be1-126">Quita todos los elementos de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-126">Removes all elements from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-127">El <xref:System.Windows.Media.VisualCollection.Count%2A> se restablece en cero.</span><span class="sxs-lookup"><span data-stu-id="93be1-127">The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero.</span></span> <span data-ttu-id="93be1-128">El valor de la <xref:System.Windows.Media.VisualCollection.Capacity%2A> permanece sin cambios.</span><span class="sxs-lookup"><span data-stu-id="93be1-128">The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="93be1-129">Para restablecer la capacidad de la <xref:System.Windows.Media.VisualCollection>, establezca el <xref:System.Windows.Media.VisualCollection.Capacity%2A> propiedad tenga el tamaño deseado.</span><span class="sxs-lookup"><span data-stu-id="93be1-129">To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Media.Visual -&gt; bool" Usage="visualCollection.Contains visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="93be1-130"><see cref="T:System.Windows.Media.Visual" /> que se va a buscar en la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-130">The <see cref="T:System.Windows.Media.Visual" /> to search for in the collection.</span></span></param>
        <summary><span data-ttu-id="93be1-131">Devuelve un valor <see cref="T:System.Boolean" /> que indica si el objeto <see cref="T:System.Windows.Media.Visual" /> especificado se encuentra en la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-131">Returns a <see cref="T:System.Boolean" /> value that indicates whether the specified <see cref="T:System.Windows.Media.Visual" /> is contained in the collection.</span></span></summary>
        <returns><span data-ttu-id="93be1-132"><see langword="true" /> si la colección contiene el objeto <paramref name="visual" />; en cualquier otro caso, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-132"><see langword="true" /> if <paramref name="visual" /> is contained in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-133">El escenario del peor caso en tiempo de ejecución de esta función es `O(n)`, donde `n` es el número de elementos de la <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-133">The worst-case runtime scenario of this function is `O(n)`, where `n` is the number of items in the <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="93be1-134">Copia la colección actual a la matriz que se pasa.</span><span class="sxs-lookup"><span data-stu-id="93be1-134">Copies the current collection into the passed array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="93be1-135"><see cref="T:System.Array" /> unidimensional que es el destino de los elementos que se copian desde la colección <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-135">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements that are copied from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <param name="index"><span data-ttu-id="93be1-136">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="93be1-136">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="93be1-137">Copia los elementos de la colección a una matriz, empezando por un índice específico de la matriz.</span><span class="sxs-lookup"><span data-stu-id="93be1-137">Copies the items in the collection to an array, starting at a specific array index.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Media.Visual[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Windows.Media.Visual[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Visual(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Windows::Media::Visual ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.Media.Visual[] * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Media.Visual[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="93be1-138">Matriz de objetos <see cref="T:System.Windows.Media.Visual" /> (que debe tener índices de base cero).</span><span class="sxs-lookup"><span data-stu-id="93be1-138">An array of <see cref="T:System.Windows.Media.Visual" /> objects (which must have zero-based indexing).</span></span></param>
        <param name="index"><span data-ttu-id="93be1-139">Índice de <paramref name="array" /> por el que se ha de comenzar la copia.</span><span class="sxs-lookup"><span data-stu-id="93be1-139">The index to start copying from within <paramref name="array" />.</span></span></param>
        <summary><span data-ttu-id="93be1-140">Copia la actual colección a la matriz de objetos <see cref="T:System.Windows.Media.Visual" /> que se pasa.</span><span class="sxs-lookup"><span data-stu-id="93be1-140">Copies the current collection into the passed <see cref="T:System.Windows.Media.Visual" /> array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Media.VisualCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93be1-141">Obtiene el número de elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-141">Gets the number of elements in the collection.</span></span></summary>
        <value><span data-ttu-id="93be1-142">Número de elementos que <see cref="T:System.Windows.Media.VisualCollection" /> contiene.</span><span class="sxs-lookup"><span data-stu-id="93be1-142">The number of elements that the <see cref="T:System.Windows.Media.VisualCollection" /> contains.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-143"><xref:System.Windows.Media.VisualCollection.Count%2A> es el número de elementos que son en realidad el <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-143"><xref:System.Windows.Media.VisualCollection.Count%2A> is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="93be1-144"><xref:System.Windows.Media.VisualCollection.Capacity%2A> es el número de elementos que el <xref:System.Windows.Media.VisualCollection> es capaz de almacenar.</span><span class="sxs-lookup"><span data-stu-id="93be1-144"><xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.</span></span>  
  
 <span data-ttu-id="93be1-145"><xref:System.Windows.Media.VisualCollection.Count%2A> siempre es menor o igual que <xref:System.Windows.Media.VisualCollection.Capacity%2A>.</span><span class="sxs-lookup"><span data-stu-id="93be1-145"><xref:System.Windows.Media.VisualCollection.Count%2A> is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>.</span></span> <span data-ttu-id="93be1-146">Si <xref:System.Windows.Media.VisualCollection.Count%2A> supera <xref:System.Windows.Media.VisualCollection.Capacity%2A> al agregar elementos, se duplica la capacidad de la lista mediante la reasignación automática de la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</span><span class="sxs-lookup"><span data-stu-id="93be1-146">If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.VisualCollection/Enumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As VisualCollection.Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::VisualCollection::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Windows.Media.VisualCollection.Enumerator" Usage="visualCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.VisualCollection+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93be1-147">Recupera un enumerador que puede recorrer en iteración la colección <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-147">Retrieves an enumerator that can iterate through the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <returns><span data-ttu-id="93be1-148">Enumerador que se puede utilizar para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-148">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.IndexOf visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="93be1-149">Objeto <see cref="T:System.Windows.Media.Visual" /> que se va a buscar en la interfaz <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-149">The <see cref="T:System.Windows.Media.Visual" /> to locate in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="93be1-150">Devuelve el índice de base cero del objeto <see cref="T:System.Windows.Media.Visual" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-150">Returns the zero-based index of the <see cref="T:System.Windows.Media.Visual" />.</span></span></summary>
        <returns><span data-ttu-id="93be1-151">Índice del objeto <see cref="T:System.Windows.Media.Visual" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-151">The index of the <see cref="T:System.Windows.Media.Visual" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-152">Si el <xref:System.Windows.Media.Visual> no está en el <xref:System.Windows.Media.VisualCollection>, se devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="93be1-152">If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned.</span></span> <span data-ttu-id="93be1-153">Si `null` se pasa al método, el índice de la primera entrada que tiene `null` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="93be1-153">If `null` is passed to the method, the index of the first entry that has `null` is returned.</span></span> <span data-ttu-id="93be1-154">Si no hay ninguna entrada null, se devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="93be1-154">If there is no null entry, -1 is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Insert (index, visual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93be1-155">Índice de base cero donde se va a insertar el valor.</span><span class="sxs-lookup"><span data-stu-id="93be1-155">The zero-based index at which the value should be inserted.</span></span></param>
        <param name="visual"><span data-ttu-id="93be1-156">Objeto <see cref="T:System.Windows.Media.Visual" /> que se va a insertar en <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-156">The <see cref="T:System.Windows.Media.Visual" /> to insert into the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="93be1-157">Inserta un elemento en <see cref="T:System.Windows.Media.VisualCollection" />, en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="93be1-157">Inserts an element into the <see cref="T:System.Windows.Media.VisualCollection" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-158">Si <xref:System.Windows.Media.VisualCollection.Count%2A> ya es igual a <xref:System.Windows.Media.VisualCollection.Capacity%2A>, la capacidad de la <xref:System.Windows.Media.VisualCollection> aumenta antes de la nueva <xref:System.Windows.Media.Visual> se inserta.</span><span class="sxs-lookup"><span data-stu-id="93be1-158">If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted.</span></span> <span data-ttu-id="93be1-159">Si `index` es igual a <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` se agrega al final de <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-159">If `index` is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` is added to the end of <xref:System.Windows.Media.VisualCollection>.</span></span> <span data-ttu-id="93be1-160">Objetos de cualquier objeto visual existente que sea igual o mayor que `index` se desplazan para dar cabida a la nueva <xref:System.Windows.Media.Visual>, y sus valores de índice se actualizan.</span><span class="sxs-lookup"><span data-stu-id="93be1-160">Any existing visual objects that are equal to or greater than `index` are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated.</span></span>  
  
 <span data-ttu-id="93be1-161">El <xref:System.Windows.Media.VisualCollection.Insert%2A> método también establece la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.</span><span class="sxs-lookup"><span data-stu-id="93be1-161">The <xref:System.Windows.Media.VisualCollection.Insert%2A> method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="93be1-162">Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="93be1-162">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="93be1-163">Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-163">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93be1-164"><paramref name="index" /> es menor que cero o mayor que <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-164"><paramref name="index" /> is less than zero or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93be1-165">Obtiene un valor que indica si <see cref="T:System.Windows.Media.VisualCollection" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="93be1-165">Gets a value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="93be1-166">Valor que indica si <see cref="T:System.Windows.Media.VisualCollection" /> es de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="93be1-166">The value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-167">Esta propiedad es siempre `false` para todos los <xref:System.Windows.Media.VisualCollection> objetos.</span><span class="sxs-lookup"><span data-stu-id="93be1-167">This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93be1-168">Obtiene un valor que indica si el acceso a <see cref="T:System.Windows.Media.VisualCollection" /> está sincronizado (es seguro para subprocesos).</span><span class="sxs-lookup"><span data-stu-id="93be1-168">Gets a value that indicates whether access to the <see cref="T:System.Windows.Media.VisualCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="93be1-169">Valor que indica si la colección <see cref="T:System.Windows.Media.VisualCollection" /> está sincronizada (segura para la ejecución de subprocesos).</span><span class="sxs-lookup"><span data-stu-id="93be1-169">The value that indicates whether the <see cref="T:System.Windows.Media.VisualCollection" /> is synchronized (thread-safe).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-170">Esta propiedad es siempre `false` para todos los <xref:System.Windows.Media.VisualCollection> objetos.</span><span class="sxs-lookup"><span data-stu-id="93be1-170">This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Visual this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Visual ^ default[int] { System::Windows::Media::Visual ^ get(int index); void set(int index, System::Windows::Media::Visual ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Media.Visual with get, set" Usage="System.Windows.Media.VisualCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93be1-171">Índice de base cero de la colección <see cref="T:System.Windows.Media.VisualCollection" /> donde se va a obtener o establecer el objeto <see cref="T:System.Windows.Media.Visual" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-171">The zero-based index of the <see cref="T:System.Windows.Media.VisualCollection" /> from which to get or set the <see cref="T:System.Windows.Media.Visual" />.</span></span></param>
        <summary><span data-ttu-id="93be1-172">Obtiene o establece el objeto <see cref="T:System.Windows.Media.Visual" /> que está almacenado en el índice de base cero especificado de la colección <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-172">Gets or sets the <see cref="T:System.Windows.Media.Visual" /> that is stored at the zero-based index of the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <value><span data-ttu-id="93be1-173">Objeto <see cref="T:System.Windows.Media.Visual" /> que está almacenado en el índice especificado por el parámetro <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-173">The <see cref="T:System.Windows.Media.Visual" /> that is stored at <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-174">Esta propiedad proporciona la capacidad para tener acceso a un determinado <xref:System.Windows.Media.Visual> en el <xref:System.Windows.Media.VisualCollection> mediante un índice.</span><span class="sxs-lookup"><span data-stu-id="93be1-174">This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93be1-175">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="index" /> es igual o mayor que el valor de <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-175"><paramref name="index" /> is less than zero, or <paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93be1-176">El nuevo elemento secundario ya tiene un elemento primario, o bien, el valor en el índice especificado no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-176">The new child element already has a parent, or the value at the specified index is not <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Remove visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><span data-ttu-id="93be1-177"><see cref="T:System.Windows.Media.Visual" /> que se va a quitar de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-177">The <see cref="T:System.Windows.Media.Visual" /> to remove from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></param>
        <summary><span data-ttu-id="93be1-178">Quita el objeto <see cref="T:System.Windows.Media.Visual" /> especificado de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-178">Removes the specified <see cref="T:System.Windows.Media.Visual" /> object from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-179">Los objetos visuales que siguen el objeto eliminado se desplazan para ocupar la posición vacante y sus valores de índice se actualizan.</span><span class="sxs-lookup"><span data-stu-id="93be1-179">The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.</span></span> <span data-ttu-id="93be1-180">Si `visual` es `null`, la primera `null` se quita la entrada.</span><span class="sxs-lookup"><span data-stu-id="93be1-180">If `visual` is `null`, the first `null` entry is removed.</span></span> <span data-ttu-id="93be1-181">Tenga en cuenta que quitar un `null` movimiento es lineal en el tamaño de la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-181">Note that removing a `null` entry is linear in the size of the collection.</span></span>  
  
 <span data-ttu-id="93be1-182">El <xref:System.Windows.Media.VisualCollection.Remove%2A> método también quita la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.</span><span class="sxs-lookup"><span data-stu-id="93be1-182">The <xref:System.Windows.Media.VisualCollection.Remove%2A> method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="93be1-183">Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="93be1-183">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="93be1-184">Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-184">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="visualCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93be1-185">Índice de base cero del objeto visual que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="93be1-185">The zero-based index of the visual to remove.</span></span></param>
        <summary><span data-ttu-id="93be1-186">Quita el objeto visual del índice especificado en <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-186">Removes the visual object at the specified index in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-187">Los objetos visuales que siguen el objeto eliminado se desplazan para ocupar la posición vacante y sus valores de índice se actualizan.</span><span class="sxs-lookup"><span data-stu-id="93be1-187">The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.</span></span>  
  
 <span data-ttu-id="93be1-188">El <xref:System.Windows.Media.VisualCollection.RemoveAt%2A> método también quita la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.</span><span class="sxs-lookup"><span data-stu-id="93be1-188">The <xref:System.Windows.Media.VisualCollection.RemoveAt%2A> method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child `visual`.</span></span>  
  
 <span data-ttu-id="93be1-189">Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="93be1-189">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="93be1-190">Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-190">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93be1-191">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="index" /> es igual o mayor que el valor de <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-191"><paramref name="index" /> is less than zero, or <paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.VisualCollection.Count" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="visualCollection.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="93be1-192">Índice de base cero del intervalo de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="93be1-192">The zero-based index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="93be1-193">Número de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="93be1-193">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="93be1-194">Quita un intervalo de objetos visuales de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-194">Removes a range of visual objects from the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93be1-195">Los objetos visuales que siguen los objetos quitados se desplazan para ocupan las posiciones vacantes y sus valores de índice se actualizan.</span><span class="sxs-lookup"><span data-stu-id="93be1-195">The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.</span></span>  
  
 <span data-ttu-id="93be1-196">El <xref:System.Windows.Media.VisualCollection.RemoveRange%2A> método también quita las relaciones de elementos primarios y secundarios entre el objeto visual primario, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el intervalo de elementos visuales secundarios.</span><span class="sxs-lookup"><span data-stu-id="93be1-196">The <xref:System.Windows.Media.VisualCollection.RemoveRange%2A> method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.</span></span>  
  
 <span data-ttu-id="93be1-197">Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="93be1-197">If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods.</span></span> <span data-ttu-id="93be1-198">Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.</span><span class="sxs-lookup"><span data-stu-id="93be1-198">When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="93be1-199">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="count" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="93be1-199"><paramref name="index" /> is less than zero or <paramref name="count" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="93be1-200"><paramref name="index" /> y <paramref name="count" /> no hacen referencia a un intervalo de elementos válido de <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-200"><paramref name="index" /> and <paramref name="count" /> do not refer to a valid range of elements in the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="93be1-201">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Windows.Media.VisualCollection" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-201">Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Media.VisualCollection" />.</span></span></summary>
        <value><span data-ttu-id="93be1-202">Valor de tipo <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-202">A value of type <see cref="T:System.Object" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="93be1-203">Este miembro es compatible con la infraestructura de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] y no está diseñado para utilizarse directamente desde el código.</span><span class="sxs-lookup"><span data-stu-id="93be1-203">This member supports the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="93be1-204">Para una descripción de este miembro, vea <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="93be1-204">For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</span></span></summary>
        <returns><span data-ttu-id="93be1-205">Objeto que puede usarse para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="93be1-205">An object that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>