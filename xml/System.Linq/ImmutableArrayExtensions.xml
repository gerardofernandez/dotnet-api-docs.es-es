<Type Name="ImmutableArrayExtensions" FullName="System.Linq.ImmutableArrayExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="568cea991eb7c625905f9610a1add21d77178039" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52239677" /></Metadata><TypeSignature Language="C#" Value="public static class ImmutableArrayExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableArrayExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.ImmutableArrayExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ImmutableArrayExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableArrayExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableArrayExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7cfd9-101">Invalidaciones de método de extensión LINQ que ofrecen una mayor eficiencia para <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que los métodos estándar de LINQ</span><span class="sxs-lookup"><span data-stu-id="7cfd9-101">LINQ extension method overrides that offer greater efficiency for <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> than the standard LINQ methods</span></span> 
 <span data-ttu-id="7cfd9-102">**Paquete NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">sobre las colecciones inmutables y la instalación</see>)</span><span class="sxs-lookup"><span data-stu-id="7cfd9-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Aggregate&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,T,T&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Aggregate&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`3&lt;!!T, !!T, !!T&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of T) (immutableArray As ImmutableArray(Of T), func As Func(Of T, T, T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Aggregate(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, T, T&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'T, 'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Aggregate (immutableArray, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;T,T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-103">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-103">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-104">Colección a la que se va a aplicar la función.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-104">The collection to apply the function to.</span></span></param>
        <param name="func"><span data-ttu-id="7cfd9-105">Función que se va a invocar en cada elemento de manera acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-105">A function to be invoked on each element, in a cumulative way.</span></span></param>
        <summary><span data-ttu-id="7cfd9-106">Aplica una función a una secuencia de elementos de forma acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-106">Applies a function to a sequence of elements in a cumulative way.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-107">Valor final después de aplicar la función acumulativa a todos los elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-107">The final value after the cumulative function has been applied to all elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cfd9-108"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> método simplifica la realizan un cálculo sobre una secuencia de valores.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-108"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="7cfd9-109">Este método funciona mediante una llamada a `func` una vez para cada elemento de origen.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-109">This method works by calling `func` one time for each element in source.</span></span> <span data-ttu-id="7cfd9-110">Cada vez que `func` se llama, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> pasa el elemento de la secuencia y un valor agregado (como el primer argumento a func).</span><span class="sxs-lookup"><span data-stu-id="7cfd9-110">Each time `func` is called, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> passes both the element from the sequence and an aggregated value (as the first argument to func).</span></span> <span data-ttu-id="7cfd9-111">El valor de la `seed` parámetro se utiliza como valor agregado inicial.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-111">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="7cfd9-112">El resultado de `func` reemplaza el valor agregado anterior.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-112">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="7cfd9-113"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> Devuelve el resultado final de `func`.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-113"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> returns the final result of `func`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TAccumulate,T&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TAccumulate,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, TAccumulate seed, Func&lt;TAccumulate,T,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TAccumulate, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!T, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TAccumulate, T) (immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAccumulate, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, TAccumulate seed, Func&lt;TAccumulate, T, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * 'Accumulate * Func&lt;'Accumulate, 'T, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.ImmutableArrayExtensions.Aggregate (immutableArray, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,T,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAccumulate"><span data-ttu-id="7cfd9-114">Tipo del valor acumulado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-114">The type of the accumulated value.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-115">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-115">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-116">Colección a la que se va a aplicar la función.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-116">The collection to apply the function to.</span></span></param>
        <param name="seed"><span data-ttu-id="7cfd9-117">Valor de inicio del acumulador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-117">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="7cfd9-118">Función que se va a invocar en cada elemento de manera acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-118">A function to be invoked on each element, in a cumulative way.</span></span></param>
        <summary><span data-ttu-id="7cfd9-119">Aplica una función a una secuencia de elementos de forma acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-119">Applies a function to a sequence of elements in a cumulative way.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-120">Valor final del acumulador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-120">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cfd9-121"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> método simplifica la realizan un cálculo sobre una secuencia de valores.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-121"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="7cfd9-122">Este método funciona mediante una llamada a `func` una vez para cada elemento de origen.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-122">This method works by calling `func` one time for each element in source.</span></span> <span data-ttu-id="7cfd9-123">Cada vez que `func` se llama, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> pasa el elemento de la secuencia y un valor agregado (como el primer argumento a func).</span><span class="sxs-lookup"><span data-stu-id="7cfd9-123">Each time `func` is called, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> passes both the element from the sequence and an aggregated value (as the first argument to func).</span></span> <span data-ttu-id="7cfd9-124">El valor de la `seed` parámetro se utiliza como valor agregado inicial.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-124">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="7cfd9-125">El resultado de `func` reemplaza el valor agregado anterior.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-125">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="7cfd9-126"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> Devuelve el resultado final de `func`.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-126"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> returns the final result of `func`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TAccumulate,TResult,T&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TAccumulate,TResult,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, TAccumulate seed, Func&lt;TAccumulate,T,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TAccumulate, TResult, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!T, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TAccumulate, TResult, T) (immutableArray As ImmutableArray(Of T), seed As TAccumulate, func As Func(Of TAccumulate, T, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAccumulate, typename TResult, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, TAccumulate seed, Func&lt;TAccumulate, T, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * 'Accumulate * Func&lt;'Accumulate, 'T, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.ImmutableArrayExtensions.Aggregate (immutableArray, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,T,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAccumulate"><span data-ttu-id="7cfd9-127">Tipo del valor acumulado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-127">The type of the accumulated value.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="7cfd9-128">Tipo de resultado devuelto por el selector de resultados.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-128">The type of result returned by the result selector.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-129">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-129">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-130">Colección a la que se va a aplicar la función.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-130">The collection to apply the function to.</span></span></param>
        <param name="seed"><span data-ttu-id="7cfd9-131">Valor de inicio del acumulador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-131">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="7cfd9-132">Función que se va a invocar en cada elemento de manera acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-132">A function to be invoked on each element, in a cumulative way.</span></span></param>
        <param name="resultSelector">To be added.</param>
        <summary><span data-ttu-id="7cfd9-133">Aplica una función a una secuencia de elementos de forma acumulativa.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-133">Applies a function to a sequence of elements in a cumulative way.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-134">Valor final del acumulador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-134">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cfd9-135"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> método simplifica la realizan un cálculo sobre una secuencia de valores.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-135"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="7cfd9-136">Este método funciona mediante una llamada a `func` una vez para cada elemento de origen.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-136">This method works by calling `func` one time for each element in source.</span></span> <span data-ttu-id="7cfd9-137">Cada vez que `func` se llama, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> pasa el elemento de la secuencia y un valor agregado (como el primer argumento a func).</span><span class="sxs-lookup"><span data-stu-id="7cfd9-137">Each time `func` is called, <xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> passes both the element from the sequence and an aggregated value (as the first argument to func).</span></span> <span data-ttu-id="7cfd9-138">El valor de la `seed` parámetro se utiliza como valor agregado inicial.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-138">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="7cfd9-139">El resultado de `func` reemplaza el valor agregado anterior.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-139">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="7cfd9-140"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> Devuelve el resultado final de `func`.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-140"><xref:System.Linq.ImmutableArrayExtensions.Aggregate%2A> returns the final result of `func`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="All&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.All (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-141">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-141">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-142">Matriz para buscar coincidencias.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-142">The array to check for matches.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-143">Predicado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-143">The predicate.</span></span></param>
        <summary><span data-ttu-id="7cfd9-144">Obtiene un valor que indica si todos los elementos de esta matriz coinciden con una condición determinada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-144">Gets a value indicating whether all elements in this array match a given condition.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-145"><see langword="true" /> si todos los elementos de la secuencia de origen pasan la prueba en el predicado especificado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-145"><see langword="true" /> if every element of the source sequence passes the test in the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of T) (immutableArray As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member Any : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.Any immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-146">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-146">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-147">Matriz para buscar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-147">The array to check for elements.</span></span></param>
        <summary><span data-ttu-id="7cfd9-148">Obtiene un valor que indica si la matriz contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-148">Gets a value indicating whether the array contains any elements.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-149"><see langword="true" /> si la matriz contiene un elemento; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-149"><see langword="true" /> if the array contains an elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;T&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!T&gt; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Any : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.Any builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-150">Tipo de los elementos de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-150">The type of elements in the array.</span></span></typeparam>
        <param name="builder"><span data-ttu-id="7cfd9-151">Generador para buscar coincidencias.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-151">The builder to check for matches.</span></span></param>
        <summary><span data-ttu-id="7cfd9-152">Devuelve un valor que indica si la colección contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-152">Returns a value indicating whether this collection contains any elements.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-153"><see langword="true" /> si el generador de matrices contiene elementos; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-153"><see langword="true" /> if the array builder contains any elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.Any (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-154">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-154">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-155">Matriz para buscar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-155">The array to check for elements.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-156">Delegado que define las condiciones que deben coincidir con los elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-156">The delegate that defines the condition to match to an element.</span></span></param>
        <summary><span data-ttu-id="7cfd9-157">Obtiene un valor que indica si la matriz contiene elementos que coinciden con una condición especificada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-157">Gets a value indicating whether the array contains any elements that match a specified condition.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-158"><see langword="true" /> si un elemento coincide con la condición especificada; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-158"><see langword="true" /> if an element matches the specified condition; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ElementAt&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ElementAt&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of T) (immutableArray As ImmutableArray(Of T), index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T ElementAt(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * int -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.ElementAt (immutableArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-159">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-159">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-160">Matriz en la que buscar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-160">The array to find an element in.</span></span></param>
        <param name="index"><span data-ttu-id="7cfd9-161">Índice del elemento que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-161">The index for the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="7cfd9-162">Devuelve el elemento situado en un índice especificado de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-162">Returns the element at a specified index in the array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-163">Elemento que se encuentra en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-163">The item at the specified index.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ElementAtOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ElementAtOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of T) (immutableArray As ImmutableArray(Of T), index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T ElementAtOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * int -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.ElementAtOrDefault (immutableArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-164">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-164">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-165">Matriz en la que buscar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-165">The array to find an element in.</span></span></param>
        <param name="index"><span data-ttu-id="7cfd9-166">Índice del elemento que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-166">The index for the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="7cfd9-167">Devuelve el elemento situado en un índice especificado de una secuencia o un valor predeterminado si el índice está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-167">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-168">Elemento del índice especificado, o el valor predeterminado si no se encuentra el índice.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-168">The item at the specified index, or the default value if the index is not found.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="First&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T First&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T First&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T First(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member First : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.First immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-169">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-169">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-170">Matriz de la que obtener un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-170">The array to get an item from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-171">Devuelve el primer elemento de una matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-171">Returns the first element in an array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-172">Primer elemento de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-172">The first item in the array.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-173">Si la matriz está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-173">If the array is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T First&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T First&lt;T&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!T&gt; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T First(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ builder);" />
      <MemberSignature Language="F#" Value="static member First : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.First builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-174">Tipo de elementos de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-174">The type of items in the array.</span></span></typeparam>
        <param name="builder"><span data-ttu-id="7cfd9-175">Generador del que recuperar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-175">The builder to retrieve an item from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-176">Devuelve el primer elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-176">Returns the first element in the collection.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-177">Primer elemento de la lista.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-177">The first item in the list.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-178">Si la matriz está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-178">If the array is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T First&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T First&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T First(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.First (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-179">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-179">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-180">Matriz de la que obtener un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-180">The array to get an item from.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-181">Delegado que define las condiciones del elemento que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-181">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="7cfd9-182">Devuelve el primer elemento de una secuencia que satisface una condición especificada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-182">Returns the first element in a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-183">Primer elemento de la lista si cumple la condición especificada por <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-183">The first item in the list if it meets the condition specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-184">Si la matriz está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-184">If the array is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FirstOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FirstOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T FirstOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.FirstOrDefault immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-185">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-185">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-186">Matriz del que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-186">The array to retrieve items from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-187">Devuelve el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-187">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-188">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-188">The first item in the list, if found; otherwise the default value for the item type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FirstOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FirstOrDefault&lt;T&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!T&gt; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T FirstOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ builder);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.FirstOrDefault builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-189">Tipo del elemento del generador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-189">The type of item in the builder.</span></span></typeparam>
        <param name="builder"><span data-ttu-id="7cfd9-190">Generador del que recuperar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-190">The builder to retrieve an element from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-191">Devuelve el primer elemento de la colección o el valor predeterminado si la colección está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-191">Returns the first element in the collection, or the default value if the collection is empty.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-192">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-192">The first item in the list, if found; otherwise the default value for the item type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T FirstOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FirstOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T FirstOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.FirstOrDefault (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-193">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-193">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-194">Matriz de la que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-194">The array to retrieve elments from.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-195">Delegado que define las condiciones del elemento que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-195">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="7cfd9-196">Devuelve el primer elemento de la secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-196">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-197">Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-197">The first item in the list, if found; otherwise the default value for the item type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Last&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Last&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Last(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member Last : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Last immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-198">Tipo de elemento incluido en la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-198">The type of element contained by the array.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-199">Matriz del que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-199">The array to retrieve items from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-200">Devuelve el último elemento de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-200">Returns the last element of the array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-201">Último elemento de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-201">The last element in the array.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-202">Se produce si la colección está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-202">Thrown if the collection is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Last&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Last&lt;T&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!T&gt; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Last(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Last : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Last builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-203">Tipo del elemento del generador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-203">The type of item in the builder.</span></span></typeparam>
        <param name="builder"><span data-ttu-id="7cfd9-204">Generador del que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-204">The builder to retrieve elements from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-205">Devuelve el último elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-205">Returns the last element in the collection.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-206">Último elemento del generador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-206">The last element in the builder.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-207">Se produce si la colección está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-207">Thrown if the collection is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Last&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Last&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Last(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Last (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-208">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-208">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-209">Matriz de la que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-209">The array to retrieve elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-210">Delegado que define las condiciones del elemento que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-210">The delegate that defines the conditions of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="7cfd9-211">Devuelve el último elemento de una secuencia que satisface una condición especificada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-211">Returns the last element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-212">Último elemento de la matriz que satisface la condición <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-212">The last element of the array that satisfies the <paramref name="predicate" /> condition.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-213">Se produce si la colección está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-213">Thrown if the collection is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LastOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T LastOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T LastOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.LastOrDefault immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-214">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-214">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-215">Matriz del que recuperar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-215">The array to retrieve items from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-216">Devuelve el último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-216">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-217">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-217">The last element of a sequence, or a default value if the sequence contains no elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LastOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T LastOrDefault&lt;T&gt;(class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!!T&gt; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray`1.Builder{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T LastOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ builder);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.LastOrDefault builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-218">Tipo del elemento del generador.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-218">The type of item in the builder.</span></span></typeparam>
        <param name="builder"><span data-ttu-id="7cfd9-219">Generador del que recuperar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-219">The builder to retrieve an element from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-220">Devuelve el último elemento de la colección o el valor predeterminado si la colección está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-220">Returns the last element in the collection, or the default value if the collection is empty.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-221">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-221">The last element of a sequence, or a default value if the sequence contains no elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T LastOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T LastOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T LastOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.LastOrDefault (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-222">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-222">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-223">Matriz de la que recuperar un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-223">The array to retrieve an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-224">Delegado que define las condiciones del elemento que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-224">The delegate that defines the conditions of the element to search for.</span></span></param>
        <summary><span data-ttu-id="7cfd9-225">Devuelve el último elemento de una secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-225">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-226">Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-226">The last element of a sequence, or a default value if the sequence contains no elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;T,TResult&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;T, TResult&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of T, TResult) (immutableArray As ImmutableArray(Of T), selector As Func(Of T, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.ImmutableArrayExtensions.Select (immutableArray, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;T,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-227">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-227">The type of element contained by the collection.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="7cfd9-228">Tipo del elemento del resultado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-228">The type of the result element.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-229">Matriz inmutable de la que seleccionar elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-229">The immutable array to select items from.</span></span></param>
        <param name="selector"><span data-ttu-id="7cfd9-230">Función de transformación que se va a aplicar a cada elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-230">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="7cfd9-231">Proyecta cada elemento de una secuencia a un nuevo formulario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-231">Projects each element of a sequence into a new form.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-232"><see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar una función de transformación en cada elemento del origen.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-232">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of source.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Immutable.ImmutableArray&lt;TSource&gt; immutableArray, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TSource&gt; immutableArray, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (immutableArray As ImmutableArray(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Immutable::ImmutableArray&lt;TSource&gt; immutableArray, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : System.Collections.Immutable.ImmutableArray&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.ImmutableArrayExtensions.SelectMany (immutableArray, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="7cfd9-233">Tipo de los elementos de <paramref name="immutableArray" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-233">The type of the elements of <paramref name="immutableArray" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="7cfd9-234">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-234">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="7cfd9-235">Tipo de los elementos de la secuencia resultante.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-235">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-236">La matriz inmutable.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-236">The immutable array.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="7cfd9-237">Una función de transformación que se va a aplicar a cada elemento de la secuencia de entrada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-237">A transform function to apply to each element of the input sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="7cfd9-238">Una función de transformación que se va a aplicar a cada elemento de la secuencia intermedia.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-238">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="7cfd9-239">Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una única secuencia e invoca una función del selector de resultados en cada elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-239">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-240"><see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="immutableArray" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-240">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result             of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each             element of <paramref name="immutableArray" /> and then mapping each of those sequence elements and their             corresponding source element to a result element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TDerived,TBase&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TDerived,TBase&gt; (this System.Collections.Immutable.ImmutableArray&lt;TBase&gt; immutableArray, System.Collections.Generic.IEnumerable&lt;TDerived&gt; items, System.Collections.Generic.IEqualityComparer&lt;TBase&gt; comparer = null) where TDerived : TBase;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(!!TBase) TDerived, TBase&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TBase&gt; immutableArray, class System.Collections.Generic.IEnumerable`1&lt;!!TDerived&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!!TBase&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TDerived As TBase, TBase As TBase) (immutableArray As ImmutableArray(Of TBase), items As IEnumerable(Of TDerived), Optional comparer As IEqualityComparer(Of TBase) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : System.Collections.Immutable.ImmutableArray&lt;'Base&gt; * seq&lt;#'Base&gt; * System.Collections.Generic.IEqualityComparer&lt;'Base&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.SequenceEqual (immutableArray, items, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>TBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TBase" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;TBase&gt;" RefType="this" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;TDerived&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TBase&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="7cfd9-241">Tipo de elemento de la matriz comparada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-241">The type of element in the compared array.</span></span></typeparam>
        <typeparam name="TBase"><span data-ttu-id="7cfd9-242">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-242">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-243">Matriz que se va a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-243">The array to use for comparison.</span></span></param>
        <param name="items"><span data-ttu-id="7cfd9-244">Elementos que se van a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-244">The items to use for comparison.</span></span></param>
        <param name="comparer"><span data-ttu-id="7cfd9-245">Comparador que se va a utilizar para comprobar la igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-245">The comparer to use to check for equality.</span></span></param>
        <summary><span data-ttu-id="7cfd9-246">Determina si dos secuencias son iguales según un comparador de igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-246">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-247"><see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-247"><see langword="true" /> to indicate the sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TDerived,TBase&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TDerived,TBase&gt; (this System.Collections.Immutable.ImmutableArray&lt;TBase&gt; immutableArray, System.Collections.Immutable.ImmutableArray&lt;TDerived&gt; items, System.Collections.Generic.IEqualityComparer&lt;TBase&gt; comparer = null) where TDerived : TBase;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(!!TBase) TDerived, TBase&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TBase&gt; immutableArray, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TDerived&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!!TBase&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TDerived As TBase, TBase As TBase) (immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), Optional comparer As IEqualityComparer(Of TBase) = null) As Boolean" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : System.Collections.Immutable.ImmutableArray&lt;'Base&gt; * System.Collections.Immutable.ImmutableArray&lt;#'Base&gt; * System.Collections.Generic.IEqualityComparer&lt;'Base&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.SequenceEqual (immutableArray, items, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>TBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TBase" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;TBase&gt;" RefType="this" />
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TBase&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="7cfd9-248">Tipo de elemento de la matriz comparada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-248">The type of element in the compared array.</span></span></typeparam>
        <typeparam name="TBase"><span data-ttu-id="7cfd9-249">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-249">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-250">Matriz que se va a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-250">The array to use for comparison.</span></span></param>
        <param name="items"><span data-ttu-id="7cfd9-251">Elementos que se van a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-251">The items to use for comparison.</span></span></param>
        <param name="comparer"><span data-ttu-id="7cfd9-252">Comparador que se va a utilizar para comprobar la igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-252">The comparer to use to check for equality.</span></span></param>
        <summary><span data-ttu-id="7cfd9-253">Determina si dos secuencias son iguales según un comparador de igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-253">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-254"><see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-254"><see langword="true" /> to indicate the sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TDerived,TBase&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TDerived,TBase&gt; (this System.Collections.Immutable.ImmutableArray&lt;TBase&gt; immutableArray, System.Collections.Immutable.ImmutableArray&lt;TDerived&gt; items, Func&lt;TBase,TBase,bool&gt; predicate) where TDerived : TBase;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;(!!TBase) TDerived, TBase&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TBase&gt; immutableArray, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TDerived&gt; items, class System.Func`3&lt;!!TBase, !!TBase, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TDerived As TBase, TBase As TBase) (immutableArray As ImmutableArray(Of TBase), items As ImmutableArray(Of TDerived), predicate As Func(Of TBase, TBase, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived, typename TBase&gt;&#xA; where TDerived : TBase[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Immutable::ImmutableArray&lt;TBase&gt; immutableArray, System::Collections::Immutable::ImmutableArray&lt;TDerived&gt; items, Func&lt;TBase, TBase, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : System.Collections.Immutable.ImmutableArray&lt;'Base&gt; * System.Collections.Immutable.ImmutableArray&lt;#'Base&gt; * Func&lt;'Base, 'Base, bool&gt; -&gt; bool" Usage="System.Linq.ImmutableArrayExtensions.SequenceEqual (immutableArray, items, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <BaseTypeName>TBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TBase" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;TBase&gt;" RefType="this" />
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;" />
        <Parameter Name="predicate" Type="System.Func&lt;TBase,TBase,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"><span data-ttu-id="7cfd9-255">Tipo de elemento de la matriz comparada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-255">The type of element in the compared array.</span></span></typeparam>
        <typeparam name="TBase"><span data-ttu-id="7cfd9-256">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-256">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-257">Matriz que se va a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-257">The array to use for comparison.</span></span></param>
        <param name="items"><span data-ttu-id="7cfd9-258">Elementos que se van a utilizar para la comparación.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-258">The items to use for comparison.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-259">Comparador que se va a utilizar para comprobar la igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-259">The comparer to use to check for equality.</span></span></param>
        <summary><span data-ttu-id="7cfd9-260">Determina si dos secuencias son iguales según un comparador de igualdad.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-260">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-261"><see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-261"><see langword="true" /> to indicate the sequences are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Single&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Single&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Single(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member Single : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Single immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-262">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-262">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-263">Matriz de la que se recupera el elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-263">The array to retrieve the element from.</span></span></param>
        <summary><span data-ttu-id="7cfd9-264">Devuelve el único elemento de una secuencia y produce una excepción si no hay exactamente un elemento en la secuencia.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-264">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-265">Elemento de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-265">The element in the sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Single&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Single&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Single(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.Single (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-266">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-266">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary><span data-ttu-id="7cfd9-267">Devuelve el único elemento de una secuencia que cumpla una condición especificada y produce una excepción si existe más de un elemento de este tipo.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-267">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-268">Devuelve <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-268">Returns <see cref="T:System.Boolean" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SingleOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SingleOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of T) (immutableArray As ImmutableArray(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T SingleOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.SingleOrDefault immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-269">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-269">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-270">Matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-270">The array.</span></span></param>
        <summary><span data-ttu-id="7cfd9-271">Devuelve el único elemento de la matriz o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-271">Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-272">Elemento de la matriz o valor predeterminado si la matriz está vacía.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-272">The element in the array, or the default value if the array is empty.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-273"><paramref name="source" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-273"><paramref name="source" /> contains more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SingleOrDefault&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SingleOrDefault&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T SingleOrDefault(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; 'T" Usage="System.Linq.ImmutableArrayExtensions.SingleOrDefault (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-274">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-274">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-275">Matriz de la que se obtiene el elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-275">The array to get the element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-276">Condición que debe satisfacer el elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-276">The condition the element must satisfy.</span></span></param>
        <summary><span data-ttu-id="7cfd9-277">Devuelve el único elemento de una secuencia que cumpla la condición especificada, o bien, un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-277">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-278">Elemento si cumple la condición especificada; en caso contrario, el elemento predeterminado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-278">The element if it satisfies the specified condition; otherwise the default element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7cfd9-279">Varios elementos satisfacen la condición de <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-279">More than one element satisfies the condition in <paramref name="predicate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] ToArray&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] ToArray&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of T) (immutableArray As ImmutableArray(Of T)) As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;T&gt; ^ ToArray(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray);" />
      <MemberSignature Language="F#" Value="static member ToArray : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; 'T[]" Usage="System.Linq.ImmutableArrayExtensions.ToArray immutableArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-280">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-280">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray">To be added.</param>
        <summary><span data-ttu-id="7cfd9-281">Copia el contenido de la matriz en una matriz mutable.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-281">Copies the contents of this array to a mutable array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-282">Matriz de la instancia recién creada.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-282">The newly instantiated array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,T&gt; ToDictionary&lt;TKey,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!T&gt; ToDictionary&lt;TKey, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TKey, T) (immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey)) As Dictionary(Of TKey, T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, T&gt; ^ ToDictionary(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'T&gt;" Usage="System.Linq.ImmutableArrayExtensions.ToDictionary (immutableArray, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;T,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="7cfd9-283">Tipo de la clave.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-283">The type of the key.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-284">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-284">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-285">Matriz desde la que crear un diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-285">The array to create a dictionary from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="7cfd9-286">Selector de claves.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-286">The key selector.</span></span></param>
        <summary><span data-ttu-id="7cfd9-287">Crea un diccionario basado en el contenido de esta matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-287">Creates a dictionary based on the contents of this array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-288">Diccionario recién inicializado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-288">The newly initialized dictionary.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TKey,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,T&gt; ToDictionary&lt;TKey,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!T&gt; ToDictionary&lt;TKey, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TKey, T) (immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, T&gt; ^ ToDictionary(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'T&gt;" Usage="System.Linq.ImmutableArrayExtensions.ToDictionary (immutableArray, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;T,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="7cfd9-289">Tipo de la clave.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-289">The type of the key.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-290">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-290">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-291">Matriz desde la que crear un diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-291">The array to create a dictionary from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="7cfd9-292">Selector de claves.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-292">The key selector.</span></span></param>
        <param name="comparer"><span data-ttu-id="7cfd9-293">Comparador con el que inicializar el diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-293">The comparer to initialize the dictionary with.</span></span></param>
        <summary><span data-ttu-id="7cfd9-294">Crea un diccionario basado en el contenido de esta matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-294">Creates a dictionary based on the contents of this array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-295">Diccionario recién inicializado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-295">The newly initialized dictionary.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TKey,TElement,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TKey,TElement,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,TKey&gt; keySelector, Func&lt;T,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TKey, TElement, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, !!TKey&gt; keySelector, class System.Func`2&lt;!!T, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TKey, TElement, T) (immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TElement, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, TKey&gt; ^ keySelector, Func&lt;T, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'Key&gt; * Func&lt;'T, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.ImmutableArrayExtensions.ToDictionary (immutableArray, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;T,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;T,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="7cfd9-296">Tipo de la clave.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-296">The type of the key.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="7cfd9-297">Tipo del elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-297">The type of the element.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-298">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-298">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-299">Matriz desde la que crear un diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-299">The array to create a dictionary from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="7cfd9-300">Selector de claves.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-300">The key selector.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="7cfd9-301">Selector de elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-301">The element selector.</span></span></param>
        <summary><span data-ttu-id="7cfd9-302">Crea un diccionario basado en el contenido de esta matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-302">Creates a dictionary based on the contents of this array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-303">Diccionario recién inicializado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-303">The newly initialized dictionary.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TKey,TElement,T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TKey,TElement,T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,TKey&gt; keySelector, Func&lt;T,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TKey, TElement, T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, !!TKey&gt; keySelector, class System.Func`2&lt;!!T, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TKey, TElement, T) (immutableArray As ImmutableArray(Of T), keySelector As Func(Of T, TKey), elementSelector As Func(Of T, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TElement, typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, TKey&gt; ^ keySelector, Func&lt;T, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, 'Key&gt; * Func&lt;'T, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.ImmutableArrayExtensions.ToDictionary (immutableArray, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;T,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;T,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="7cfd9-304">Tipo de la clave.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-304">The type of the key.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="7cfd9-305">Tipo del elemento.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-305">The type of the element.</span></span></typeparam>
        <typeparam name="T"><span data-ttu-id="7cfd9-306">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-306">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-307">Matriz desde la que crear un diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-307">The array to create a dictionary from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="7cfd9-308">Selector de claves.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-308">The key selector.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="7cfd9-309">Selector de elementos.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-309">The element selector.</span></span></param>
        <param name="comparer"><span data-ttu-id="7cfd9-310">Comparador con el que inicializar el diccionario.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-310">The comparer to initialize the dictionary with.</span></span></param>
        <summary><span data-ttu-id="7cfd9-311">Crea un diccionario basado en el contenido de esta matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-311">Creates a dictionary based on the contents of this array.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-312">Diccionario recién inicializado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-312">The newly initialized dictionary.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; Where&lt;T&gt; (this System.Collections.Immutable.ImmutableArray&lt;T&gt; immutableArray, Func&lt;T,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; Where&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; immutableArray, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of T) (immutableArray As ImmutableArray(Of T), predicate As Func(Of T, Boolean)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ Where(System::Collections::Immutable::ImmutableArray&lt;T&gt; immutableArray, Func&lt;T, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; seq&lt;'T&gt;" Usage="System.Linq.ImmutableArrayExtensions.Where (immutableArray, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="immutableArray" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="7cfd9-313">Tipo de elemento incluido en la colección.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-313">The type of element contained by the collection.</span></span></typeparam>
        <param name="immutableArray"><span data-ttu-id="7cfd9-314">Matriz que se va a filtrar.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-314">The array to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="7cfd9-315">Condición que se va a utilizar para filtrar el contenido de la matriz.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-315">The condition to use for filtering the array content.</span></span></param>
        <summary><span data-ttu-id="7cfd9-316">Filtra una secuencia de valores en función de un predicado.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-316">Filters a sequence of values based on a predicate.</span></span></summary>
        <returns><span data-ttu-id="7cfd9-317">Devuelve <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que cumplen la condición.</span><span class="sxs-lookup"><span data-stu-id="7cfd9-317">Returns <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements that meet the condition.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>