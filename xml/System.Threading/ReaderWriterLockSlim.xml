<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0fee7c4885e8d1b579011bb73bd7952ec0ae6dc1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58696269" /></Metadata><TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6850d-101">Representa un bloqueo que se utiliza para administrar el acceso a un recurso y que permite varios subprocesos para la lectura o acceso exclusivo para la escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-102">Use <xref:System.Threading.ReaderWriterLockSlim> para proteger un recurso que es por varios subprocesos que lee y escribe en un subproceso a la vez.</span><span class="sxs-lookup"><span data-stu-id="6850d-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="6850d-103"><xref:System.Threading.ReaderWriterLockSlim> permite que varios subprocesos en modo de lectura, permite que un subproceso esté en modo de escritura con propiedad exclusiva del bloqueo y permite que un subproceso que tiene acceso de lectura a estar en modo de lectura actualizable desde el que el subproceso puede actualizar a modo de escritura sin tener que abandonar s acceso de lectura al recurso.</span><span class="sxs-lookup"><span data-stu-id="6850d-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-104"><xref:System.Threading.ReaderWriterLockSlim> es similar a <xref:System.Threading.ReaderWriterLock>, pero se han simplificado las reglas para la recursividad y para actualizar y degradar el estado de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="6850d-105"><xref:System.Threading.ReaderWriterLockSlim> evita muchos casos de interbloqueo potencial.</span><span class="sxs-lookup"><span data-stu-id="6850d-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="6850d-106">Además, el rendimiento de <xref:System.Threading.ReaderWriterLockSlim> es significativamente mayor que <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="6850d-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="6850d-107"><xref:System.Threading.ReaderWriterLockSlim> se recomienda para todos los nuevos desarrollos.</span><span class="sxs-lookup"><span data-stu-id="6850d-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="6850d-108">De forma predeterminada, las nuevas instancias de <xref:System.Threading.ReaderWriterLockSlim> se crean con el <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> marca y no permiten la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="6850d-109">Se recomienda esta directiva predeterminada para todo el desarrollo nuevo, porque la recursividad introduce una complicación innecesaria y hace que el código sea más susceptible a los interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="6850d-110">Para simplificar la migración a partir de existente, los proyectos que utilizan <xref:System.Threading.Monitor> o <xref:System.Threading.ReaderWriterLock>, puede usar el <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> marca para crear instancias de <xref:System.Threading.ReaderWriterLockSlim> que permiten la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="6850d-111">Un subproceso puede entrar en el bloqueo en tres modos: modo de lectura actualizable, modo de escritura y modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="6850d-112">(En el resto de este tema, "modo de lectura actualizable" se denomina "modo de actualización" y la frase "escriba `x` modo" se usa con preferencia a las frases más largas "entrar en el bloqueo en `x` modo".)</span><span class="sxs-lookup"><span data-stu-id="6850d-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="6850d-113">Independientemente de la directiva de recursividad, sólo un subproceso puede estar en modo de escritura en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="6850d-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="6850d-114">Cuando un subproceso está en modo de escritura, ningún otro subproceso puede entrar en el bloqueo en cualquier modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="6850d-115">Puede ser solo un subproceso en modo de actualización en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="6850d-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="6850d-116">Puede ser cualquier número de subprocesos en modo de lectura y puede haber un subproceso en modo de actualización mientras otros subprocesos están en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6850d-117">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="6850d-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="6850d-118">Cuando haya terminado de utilizar el tipo, debe deshacerse de él directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="6850d-119">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="6850d-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="6850d-120">Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6850d-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="6850d-121">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="6850d-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="6850d-122"><xref:System.Threading.ReaderWriterLockSlim> ha logrado la afinidad de subprocesos; es decir, cada uno de ellos <xref:System.Threading.Thread> objeto debe realizar sus propias llamadas de método para activar y desactivar los modos de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="6850d-123">No hay ningún subproceso puede cambiar el modo de otro subproceso.</span><span class="sxs-lookup"><span data-stu-id="6850d-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="6850d-124">Si un <xref:System.Threading.ReaderWriterLockSlim> no permite la recursividad, un subproceso que intenta entrar en el bloqueo puede bloquear por varias razones:</span><span class="sxs-lookup"><span data-stu-id="6850d-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="6850d-125">Un subproceso intenta entrar en modo de lectura se bloquea si hay subprocesos a la espera de entrar en modo de escritura o si hay un solo subproceso en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6850d-126">Cuando se ponen en cola los escritores de bloqueo nuevos lectores es una directiva de equidad de bloqueo que favorece a escritores.</span><span class="sxs-lookup"><span data-stu-id="6850d-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="6850d-127">La directiva de equidad actual equilibra la equidad para lectores y escritores, para mejorar el rendimiento en los escenarios más comunes.</span><span class="sxs-lookup"><span data-stu-id="6850d-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="6850d-128">Las versiones futuras de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] puede introducir nuevas directivas de equidad.</span><span class="sxs-lookup"><span data-stu-id="6850d-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="6850d-129">Un subproceso intenta entrar en modo de actualización se bloquea si ya hay un subproceso en modo de actualización, si no hay subprocesos en espera de entrar en modo de escritura, o si hay un solo subproceso en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="6850d-130">Un subproceso intenta entrar en modo de escritura se bloquea si hay un subproceso en cualquiera de los tres modos.</span><span class="sxs-lookup"><span data-stu-id="6850d-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="6850d-131">Actualizar y degradar bloqueos</span><span class="sxs-lookup"><span data-stu-id="6850d-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="6850d-132">Modo de actualización está pensado para los casos donde un subproceso normalmente lee desde el recurso protegido, pero es posible que deba escribir en él, si se cumple alguna condición.</span><span class="sxs-lookup"><span data-stu-id="6850d-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="6850d-133">Un subproceso ha entrado en un <xref:System.Threading.ReaderWriterLockSlim> en modo de actualización tiene acceso de lectura al recurso protegido y puede actualizar a modo de escritura mediante una llamada a la <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> o <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="6850d-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="6850d-134">Porque puede haber solo un subproceso en modo de actualización a la vez, no se puede actualizar a modo de escritura interbloqueo cuando no se permite la recursividad, que es la directiva predeterminada.</span><span class="sxs-lookup"><span data-stu-id="6850d-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6850d-135">Independientemente de la directiva de recursividad, un subproceso que entró inicialmente en lectura no se permite el modo para actualizar a modo de actualización o en modo de escritura, porque ese modelo genera una gran probabilidad de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="6850d-136">Por ejemplo, si dos subprocesos en modo de lectura intentan entrar en modo de escritura, producirán el interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="6850d-137">Modo de actualización está diseñado para evitar estos interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-138">Si hay otros subprocesos en modo de lectura, el subproceso que está actualizando se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="6850d-139">Mientras el subproceso está bloqueado, se bloquean otros subprocesos que intentan entrar en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="6850d-140">Cuando todos los subprocesos han salido del modo de lectura, el subproceso actualizable bloqueado entra en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="6850d-141">Si hay otros subprocesos en espera de entrar en modo de escritura, siguen bloqueados, porque el subproceso que está en modo de actualización evita que obtengan acceso exclusivo al recurso.</span><span class="sxs-lookup"><span data-stu-id="6850d-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="6850d-142">Cuando el subproceso en modo de actualización sale del modo de escritura, pueden hacer otros subprocesos que están esperando para entrar en modo de lectura, por lo tanto, a menos que haya subprocesos esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="6850d-143">El subproceso en modo de actualización puede actualizar y degradar indefinidamente, siempre y cuando sea el único subproceso que escribe en el recurso protegido.</span><span class="sxs-lookup"><span data-stu-id="6850d-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6850d-144">Si permite que varios subprocesos entren en modo de escritura o en modo de actualización, no debe permitir que un subproceso monopolice el modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="6850d-145">En caso contrario, los subprocesos que intentan escribir escriben modo directamente se bloquearán indefinidamente y, mientras estén bloqueados, otros subprocesos no podrá entrar en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="6850d-146">Puede degradar un subproceso en modo de actualización para el modo de lectura llamar primero a la <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> método y, a continuación, llamar a la <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> método.</span><span class="sxs-lookup"><span data-stu-id="6850d-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="6850d-147">Este modelo de degradación se permite para todas las directivas de recursividad de bloqueo, incluso <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span><span class="sxs-lookup"><span data-stu-id="6850d-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="6850d-148">Después de cambiar el modo de lectura, un subproceso no puede volver a escribir en modo de actualización hasta que ha salido del modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="6850d-149">Escribir el bloqueo de forma recursiva</span><span class="sxs-lookup"><span data-stu-id="6850d-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="6850d-150">Puede crear un <xref:System.Threading.ReaderWriterLockSlim> que admite la entrada de bloqueo recursiva mediante el <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor que especifica la directiva de bloqueo y especificando <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6850d-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-151">No se recomienda el uso de la recursividad para el desarrollo nuevo, ya que introduce una complicación innecesaria y hace que el código sea más susceptible a los interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-152">Para un <xref:System.Threading.ReaderWriterLockSlim> que permite la recursividad, se puede decir lo siguiente acerca de los modos de un subproceso puede entrar:</span><span class="sxs-lookup"><span data-stu-id="6850d-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="6850d-153">Un subproceso en modo de lectura puede especificar el modo de lectura de forma recursiva, pero no puede entrar en modo de escritura o en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="6850d-154">Si intenta hacerlo, un <xref:System.Threading.LockRecursionException> se produce.</span><span class="sxs-lookup"><span data-stu-id="6850d-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="6850d-155">Escribir lee modo y, a continuación, escribir en modo de escritura o en modo de actualización es un modelo con muchas probabilidades de interbloqueos, por lo que no está permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="6850d-156">Como se explicó anteriormente, en modo de actualización se proporciona para los casos donde es necesario actualizar un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="6850d-157">Un subproceso en modo de actualización puede especificar el modo de lectura o modo de escritura y puede especificar cualquiera de los tres modos de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="6850d-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="6850d-158">Sin embargo, se intenta escribir escribir bloques de modo si hay otros subprocesos en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="6850d-159">Puede especificar el modo de lectura o en modo de un subproceso en modo de escritura y puede especificar cualquiera de los tres modos de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="6850d-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="6850d-160">Un subproceso que no ha entrado en el bloqueo puede entrar en cualquier modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="6850d-161">Este intento puede bloquear por las mismas razones como un intento de entrar en un bloqueo no recursivo.</span><span class="sxs-lookup"><span data-stu-id="6850d-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="6850d-162">Un subproceso puede salir de los modos que ha entrado en cualquier orden, siempre y cuando sale de cada modo exactamente como tantas veces como entró en ese modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="6850d-163">Si un subproceso intenta salir de un modo demasiadas veces, o para salir de un modo no ha entrado, un <xref:System.Threading.SynchronizationLockException> se produce.</span><span class="sxs-lookup"><span data-stu-id="6850d-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="6850d-164">Estados de bloqueo</span><span class="sxs-lookup"><span data-stu-id="6850d-164">Lock States</span></span>  
 <span data-ttu-id="6850d-165">Le resultará útil considerar el bloqueo en términos de sus Estados.</span><span class="sxs-lookup"><span data-stu-id="6850d-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="6850d-166">Un <xref:System.Threading.ReaderWriterLockSlim> puede estar en uno de los cuatro estados: no se especifica, leer, actualizar y escribir.</span><span class="sxs-lookup"><span data-stu-id="6850d-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="6850d-167">No se ha especificado: En este estado, no hay ningún subproceso ha entrado en el bloqueo (o todos los subprocesos salgan del bloqueo).</span><span class="sxs-lookup"><span data-stu-id="6850d-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="6850d-168">Lectura: En este estado, uno o varios subprocesos han entrado en el bloqueo de acceso de lectura al recurso protegido.</span><span class="sxs-lookup"><span data-stu-id="6850d-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="6850d-169">Un subproceso puede entrar en el bloqueo en modo de lectura mediante el uso de la <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> o <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> métodos, o mediante la degradación del modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="6850d-170">Actualización: En este estado, un subproceso ha entrado en el bloqueo para el acceso de lectura con la opción de actualización para el acceso de escritura (es decir, en modo de actualización), y cero o más subprocesos han entrado en el bloqueo de acceso de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="6850d-171">No más de un subproceso a la vez puede entrar en el bloqueo con la opción de actualización; se bloquean los subprocesos adicionales que intenta entrar en modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="6850d-172">Escritura: En este estado, un subproceso ha entrado en el bloqueo para el acceso de escritura al recurso protegido.</span><span class="sxs-lookup"><span data-stu-id="6850d-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="6850d-173">Ese subproceso tiene posesión exclusiva del bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="6850d-174">Se bloquea a ningún otro subproceso que intenta entrar en el bloqueo por cualquier motivo.</span><span class="sxs-lookup"><span data-stu-id="6850d-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="6850d-175">La tabla siguiente describen las transiciones entre Estados de bloqueo, los bloqueos que no permiten la recursividad, cuando un subproceso `t` toma la acción descrita en la columna izquierda.</span><span class="sxs-lookup"><span data-stu-id="6850d-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="6850d-176">En el momento en toma las medidas, `t` no tiene ningún modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="6850d-177">(El caso especial donde `t` está en modo de actualización se describe en las notas al pie de tabla.) La fila superior describe el estado inicial del bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="6850d-178">Las celdas describen lo que ocurre en el subproceso y mostrar los cambios realizados en el estado de bloqueo entre paréntesis.</span><span class="sxs-lookup"><span data-stu-id="6850d-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="6850d-179">No se ha introducido (N)</span><span class="sxs-lookup"><span data-stu-id="6850d-179">Not entered (N)</span></span>|<span data-ttu-id="6850d-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="6850d-180">Read (R)</span></span>|<span data-ttu-id="6850d-181">Actualización (U)</span><span class="sxs-lookup"><span data-stu-id="6850d-181">Upgrade (U)</span></span>|<span data-ttu-id="6850d-182">Escritura (W)</span><span class="sxs-lookup"><span data-stu-id="6850d-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="6850d-183">`t` entra en modo de lectura</span><span class="sxs-lookup"><span data-stu-id="6850d-183">`t` enters read mode</span></span>|<span data-ttu-id="6850d-184">`t` entra en (R).</span><span class="sxs-lookup"><span data-stu-id="6850d-184">`t` enters (R).</span></span>|<span data-ttu-id="6850d-185">`t` se bloquea si los subprocesos están esperando a modo de escritura; en caso contrario, `t` entra en.</span><span class="sxs-lookup"><span data-stu-id="6850d-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="6850d-186">`t` se bloquea si los subprocesos están esperando a modo de escritura; en caso contrario, `t` entra.<sup> 1</sup></span><span class="sxs-lookup"><span data-stu-id="6850d-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="6850d-187">`t` se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-187">`t` blocks.</span></span>|  
|<span data-ttu-id="6850d-188">`t` entra en modo de actualización</span><span class="sxs-lookup"><span data-stu-id="6850d-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="6850d-189">`t` entra (A).</span><span class="sxs-lookup"><span data-stu-id="6850d-189">`t` enters (U).</span></span>|<span data-ttu-id="6850d-190">`t` se bloquea si los subprocesos están esperando modo de escritura o el modo de actualización; en caso contrario, `t` entra (A).</span><span class="sxs-lookup"><span data-stu-id="6850d-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="6850d-191">`t` se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-191">`t` blocks.</span></span>|<span data-ttu-id="6850d-192">`t` se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-192">`t` blocks.</span></span>|  
|<span data-ttu-id="6850d-193">`t` entra en modo de escritura</span><span class="sxs-lookup"><span data-stu-id="6850d-193">`t` enters write mode</span></span>|<span data-ttu-id="6850d-194">`t` escribe (W).</span><span class="sxs-lookup"><span data-stu-id="6850d-194">`t` enters (W).</span></span>|<span data-ttu-id="6850d-195">`t` se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-195">`t` blocks.</span></span>|<span data-ttu-id="6850d-196">`t` se bloquea. <sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="6850d-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="6850d-197">`t` se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="6850d-198"><sup>1</sup> si `t` inicia alejar en modo de actualización, entra en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="6850d-199">Esta acción nunca se bloquea.</span><span class="sxs-lookup"><span data-stu-id="6850d-199">This action never blocks.</span></span> <span data-ttu-id="6850d-200">No cambia el estado de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-200">The lock state does not change.</span></span> <span data-ttu-id="6850d-201">(El subproceso, a continuación, puede completar una degradación de modo de lectura al salir de modo de actualización.)</span><span class="sxs-lookup"><span data-stu-id="6850d-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="6850d-202"><sup>2</sup> si `t` empieza en modo de actualización, se bloquea si hay subprocesos en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="6850d-203">En caso contrario, actualiza a modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="6850d-204">Los cambios de estado de bloqueo de escritura (W).</span><span class="sxs-lookup"><span data-stu-id="6850d-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="6850d-205">Si `t` bloquea porque hay subprocesos en modo de lectura, entra en modo de escritura tan pronto como el último subproceso sale del modo de lectura, incluso si no hay subprocesos esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="6850d-206">Cuando se produce un cambio de estado porque un subproceso cierra el bloqueo, el subproceso siguiente que debe activarse se selecciona como sigue:</span><span class="sxs-lookup"><span data-stu-id="6850d-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="6850d-207">En primer lugar, un subproceso que está esperando en modo de escritura y ya está en modo de actualización (puede haber a lo sumo un subproceso de este tipo).</span><span class="sxs-lookup"><span data-stu-id="6850d-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="6850d-208">Si no es posible, un subproceso que está esperando a modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="6850d-209">Si no es posible, un subproceso que está esperando a modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="6850d-210">Si no es posible, todos los subprocesos que están esperando a modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="6850d-211">El estado del bloqueo posteriores siempre es de escritura (W) en los primeros dos casos y actualización (A) en el tercer caso, independientemente del estado del bloqueo cuando el subproceso que sale desencadena el cambio de estado.</span><span class="sxs-lookup"><span data-stu-id="6850d-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="6850d-212">En el último caso, el estado del bloqueo es actualización (A) si hay un subproceso en modo de actualización después del cambio de estado y Read (R) en caso contrario, independientemente del estado anterior.</span><span class="sxs-lookup"><span data-stu-id="6850d-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-213">El ejemplo siguiente muestra una memoria caché sincronizada simple que contiene cadenas con claves de enteros.</span><span class="sxs-lookup"><span data-stu-id="6850d-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="6850d-214">Una instancia de <xref:System.Threading.ReaderWriterLockSlim> se utiliza para sincronizar el acceso a la <xref:System.Collections.Generic.Dictionary%602> que actúa como la memoria caché interna.</span><span class="sxs-lookup"><span data-stu-id="6850d-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="6850d-215">El ejemplo incluye métodos sencillos para agregar a la memoria caché, eliminar de la caché y leer desde la memoria caché.</span><span class="sxs-lookup"><span data-stu-id="6850d-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="6850d-216">Para mostrar los tiempos de espera, el ejemplo incluye un método que agrega a la memoria caché solo si puede hacerlo dentro de un tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="6850d-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="6850d-217">Para demostrar el modo de actualización, el ejemplo incluye un método que recupera el valor asociado a una clave y lo compara con un nuevo valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="6850d-218">Si el valor se ha modificado, el método devuelve un estado que indica ningún cambio.</span><span class="sxs-lookup"><span data-stu-id="6850d-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="6850d-219">Si se encuentra ningún valor para la clave, se inserta el par clave/valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-219">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="6850d-220">Si ha cambiado el valor, se actualiza.</span><span class="sxs-lookup"><span data-stu-id="6850d-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="6850d-221">Modo de actualización permite que el subproceso actualizar de acceso de lectura a acceso de escritura según sea necesario, sin el riesgo de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-222">El ejemplo incluye una enumeración anidada que especifica los valores devueltos del método que se muestra en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-223">El ejemplo utiliza el constructor predeterminado para crear el bloqueo, por lo que no se permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="6850d-224">Programar la <xref:System.Threading.ReaderWriterLockSlim> es más sencillo y menos propenso a errores cuando el bloqueo no permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="6850d-225">El siguiente código a continuación, utiliza el `SynchronizedCache` objeto para almacenar un diccionario de nombres verduras.</span><span class="sxs-lookup"><span data-stu-id="6850d-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="6850d-226">Crea tres tareas.</span><span class="sxs-lookup"><span data-stu-id="6850d-226">It creates three tasks.</span></span> <span data-ttu-id="6850d-227">El primero escribe los nombres de verduras almacenados en una matriz a un `SynchronizedCache` instancia.</span><span class="sxs-lookup"><span data-stu-id="6850d-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="6850d-228">La segunda y tercera tarea mostrar los nombres de las verduras, el primero en orden ascendente (de bajo índice de índice más alto), el segundo en orden descendente.</span><span class="sxs-lookup"><span data-stu-id="6850d-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="6850d-229">La tarea final busca la cadena "cucumber" y, cuando lo encuentra, se llama a la <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> método sustituir la cadena "bean verde".</span><span class="sxs-lookup"><span data-stu-id="6850d-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6850d-230">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="6850d-230">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6850d-231">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-232">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ReaderWriterLockSlim" /> con los valores de propiedad predeterminados.</span><span class="sxs-lookup"><span data-stu-id="6850d-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-233">Un <xref:System.Threading.ReaderWriterLockSlim> que se inicializa con este constructor no permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="6850d-234">Es decir, la propiedad <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> devuelve <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6850d-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6850d-235">Para obtener más información acerca de la directiva de recursividad y sus efectos, vea el <xref:System.Threading.LockRecursionPolicy> enumeración y <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-236">El ejemplo siguiente muestra una memoria caché sincronizada simple que contiene cadenas con claves de enteros.</span><span class="sxs-lookup"><span data-stu-id="6850d-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="6850d-237">Una instancia de <xref:System.Threading.ReaderWriterLockSlim> se utiliza para sincronizar el acceso a la <xref:System.Collections.Generic.Dictionary%602> que actúa como la memoria caché interna.</span><span class="sxs-lookup"><span data-stu-id="6850d-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="6850d-238">El constructor sin parámetros se utiliza para crear el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="6850d-239">El ejemplo incluye métodos sencillos para agregar a la memoria caché, eliminar de la caché y leer desde la memoria caché.</span><span class="sxs-lookup"><span data-stu-id="6850d-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="6850d-240">Para mostrar los tiempos de espera, el ejemplo incluye un método que agrega a la memoria caché solo si puede hacerlo dentro de un tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="6850d-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="6850d-241">Para demostrar el modo de actualización, el ejemplo incluye un método que recupera el valor asociado a una clave y lo compara con un nuevo valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="6850d-242">Si el valor se ha modificado, el método devuelve un estado que indica ningún cambio.</span><span class="sxs-lookup"><span data-stu-id="6850d-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="6850d-243">Se encuentra ningún valor para la clave, se inserta el par clave/valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-243">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="6850d-244">Si ha cambiado el valor, se actualiza.</span><span class="sxs-lookup"><span data-stu-id="6850d-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="6850d-245">Modo de actualización permite que el subproceso actualizar de acceso de lectura a acceso de escritura según sea necesario, sin el riesgo de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-246">El ejemplo incluye una enumeración anidada que especifica los valores devueltos del método que se muestra en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-247">El ejemplo utiliza el constructor predeterminado para crear el bloqueo, por lo que no se permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="6850d-248">Programar la <xref:System.Threading.ReaderWriterLockSlim> es más sencillo y menos propenso a errores cuando el bloqueo no permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="6850d-249">El siguiente código a continuación, utiliza el `SynchronizedCache` objeto para almacenar un diccionario de nombres verduras.</span><span class="sxs-lookup"><span data-stu-id="6850d-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="6850d-250">Crea tres tareas.</span><span class="sxs-lookup"><span data-stu-id="6850d-250">It creates three tasks.</span></span> <span data-ttu-id="6850d-251">El primero escribe los nombres de verduras almacenados en una matriz a un `SynchronizedCache` instancia.</span><span class="sxs-lookup"><span data-stu-id="6850d-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="6850d-252">La segunda y tercera tarea mostrar los nombres de las verduras, el primero en orden ascendente (de bajo índice de índice más alto), el segundo en orden descendente.</span><span class="sxs-lookup"><span data-stu-id="6850d-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="6850d-253">La tarea final busca la cadena "cucumber" y, cuando lo encuentra, se llama a la <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> método sustituir la cadena "bean verde".</span><span class="sxs-lookup"><span data-stu-id="6850d-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy"><span data-ttu-id="6850d-254">Uno de los valores de enumeración que especifica la directiva de recursividad de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-254">One of the enumeration values that specifies the lock recursion policy.</span></span></param>
        <summary><span data-ttu-id="6850d-255">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ReaderWriterLockSlim" /> especificando la directiva de recursividad de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-256">La directiva de recursividad determina las restricciones en los subprocesos que entrar en más de una vez el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="6850d-257">Por ejemplo, si se ha creado un bloqueo con <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> y un subproceso ha entrado en modo de lectura, el bloqueo <xref:System.Threading.LockRecursionException> se produce si el subproceso intenta volver a escribir el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="6850d-258">De forma similar, si un subproceso ha entrado en modo de escritura, el bloqueo <xref:System.Threading.LockRecursionException> se produce si el subproceso intenta volver a escribir el bloqueo en cualquier modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-259">Un subproceso en modo de actualización puede actualizar a modo de escritura o degradar modo independientemente de la configuración de directiva de recursividad de bloqueo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="6850d-260">Independientemente de la directiva de recursividad, un subproceso que entró inicialmente en lectura no se permite el modo para actualizar a modo de actualización o en modo de escritura, porque ese modelo genera una gran probabilidad de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-261">Para obtener más información acerca de la directiva de recursividad y sus efectos, vea el <xref:System.Threading.LockRecursionPolicy> enumeración y <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-262">El ejemplo siguiente muestra dos escenarios de excepción, que depende el <xref:System.Threading.LockRecursionPolicy> configuración y otro que no lo hace.</span><span class="sxs-lookup"><span data-stu-id="6850d-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="6850d-263">En el primer escenario, el subproceso entra en modo de lectura y, a continuación, intenta entrar en modo de lectura de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="6850d-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="6850d-264">Si el <xref:System.Threading.ReaderWriterLockSlim> se crea mediante el constructor predeterminado, lo que establece la directiva de recursividad <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="6850d-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="6850d-265">Si <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> se usa para crear el <xref:System.Threading.ReaderWriterLockSlim>, se produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="6850d-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="6850d-266">En el segundo escenario, el subproceso entra en modo de lectura y, a continuación, intenta entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="6850d-267"><xref:System.Threading.LockRecursionException> se produce independientemente de la directiva de recursividad de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="6850d-268">El siguiente código a continuación, utiliza el `SynchronizedCache` objeto para almacenar un diccionario de nombres verduras.</span><span class="sxs-lookup"><span data-stu-id="6850d-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="6850d-269">Crea tres tareas.</span><span class="sxs-lookup"><span data-stu-id="6850d-269">It creates three tasks.</span></span> <span data-ttu-id="6850d-270">El primero escribe los nombres de verduras almacenados en una matriz a un `SynchronizedCache` instancia.</span><span class="sxs-lookup"><span data-stu-id="6850d-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="6850d-271">La segunda y tercera tarea mostrar los nombres de las verduras, el primero en orden ascendente (de bajo índice de índice más alto), el segundo en orden descendente.</span><span class="sxs-lookup"><span data-stu-id="6850d-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="6850d-272">La tarea final busca la cadena "cucumber" y, cuando lo encuentra, se llama a la <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> método sustituir la cadena "bean verde".</span><span class="sxs-lookup"><span data-stu-id="6850d-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-273">Obtiene el número total de subprocesos únicos que han entrado en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-273">Gets the total number of unique threads that have entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="6850d-274">Número de subprocesos únicos que han entrado en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-274">The number of unique threads that have entered the lock in read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-275">Un subproceso se cuenta una sola vez, incluso si el bloqueo permite la recursividad y el subproceso ha entrado en modo de lectura varias veces.</span><span class="sxs-lookup"><span data-stu-id="6850d-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="6850d-276">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-277">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-278">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-279">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> propiedad para generar una entrada de registro de eventos si el número de subprocesos en modo de lectura supera un umbral.</span><span class="sxs-lookup"><span data-stu-id="6850d-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-280">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-281">Llame a <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> cuando haya terminado de usar <xref:System.Threading.ReaderWriterLockSlim>.</span><span class="sxs-lookup"><span data-stu-id="6850d-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="6850d-282">El método <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> deja el <xref:System.Threading.ReaderWriterLockSlim> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="6850d-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="6850d-283">Después de llamar a <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Threading.ReaderWriterLockSlim> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Threading.ReaderWriterLockSlim> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="6850d-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="6850d-284">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="6850d-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-285">Llame siempre a <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> antes de liberar la última referencia a la <xref:System.Threading.ReaderWriterLockSlim> objeto.</span><span class="sxs-lookup"><span data-stu-id="6850d-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="6850d-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> es mayor que cero.</span><span class="sxs-lookup"><span data-stu-id="6850d-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="6850d-287">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-287">-or-</span></span> 
 <span data-ttu-id="6850d-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> es mayor que cero.</span><span class="sxs-lookup"><span data-stu-id="6850d-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="6850d-289">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-289">-or-</span></span> 
 <span data-ttu-id="6850d-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> es mayor que cero.</span><span class="sxs-lookup"><span data-stu-id="6850d-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-291">Intenta entrar en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-291">Tries to enter the lock in read mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-292">Devuelve este método se bloquea hasta que el subproceso que realiza la llamada entra en el bloqueo y, por lo tanto, es posible que nunca.</span><span class="sxs-lookup"><span data-stu-id="6850d-292">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="6850d-293">Use el <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> método se bloquea durante un intervalo especificado y, a continuación, devolver si no ha entrado en el subproceso de llamada de modo de lectura durante ese intervalo.</span><span class="sxs-lookup"><span data-stu-id="6850d-293">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="6850d-294">Varios subprocesos pueden entrar en modo de lectura al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="6850d-294">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="6850d-295">Si uno o varios subprocesos están esperando para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> agotó el tiempo de método se bloquea hasta que esos subprocesos o entró en modo de escritura y, a continuación, sale de ella.</span><span class="sxs-lookup"><span data-stu-id="6850d-295">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-296">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de lectura puede especificar el modo de lectura de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-296">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="6850d-297">Puede ser a lo sumo un subproceso en modo de actualización mientras otros subprocesos están en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-297">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="6850d-298">Si otros subprocesos están esperando para entrar en modo de y no hay ningún subproceso en espera de entrar en modo de escritura, los subprocesos que llaman a la <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> método entrar en modo de lectura inmediatamente y no se bloquean.</span><span class="sxs-lookup"><span data-stu-id="6850d-298">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-299">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> método para entrar en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-299">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="6850d-300">El método que se muestra en el ejemplo recupera el valor asociado a una clave.</span><span class="sxs-lookup"><span data-stu-id="6850d-300">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="6850d-301">Si la clave no se encuentra, la excepción producida por interno <xref:System.Collections.Generic.Dictionary%602> puede finalizar el método.</span><span class="sxs-lookup"><span data-stu-id="6850d-301">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="6850d-302">Un `finally` bloque se usa para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> método, lo que garantiza que el llamador sale del modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-302">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="6850d-303">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-303">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-304">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ha intentado adquirir el bloqueo de lectura cuando ya lo tenía.</span><span class="sxs-lookup"><span data-stu-id="6850d-304">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span></span>  
  
<span data-ttu-id="6850d-305">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-305">-or-</span></span> 
<span data-ttu-id="6850d-306">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ha intentado adquirir el bloqueo de lectura cuando ya tenía el bloqueo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-306">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span></span>  
  
<span data-ttu-id="6850d-307">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-307">-or-</span></span> 
<span data-ttu-id="6850d-308">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-308">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-309">Este límite es tan grande que en las aplicaciones no debe aparecer nunca esta excepción.</span><span class="sxs-lookup"><span data-stu-id="6850d-309">This limit is so large that applications should never encounter this exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-310">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-310">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-311">Intenta entrar en el bloqueo en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-311">Tries to enter the lock in upgradeable mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-312">Devuelve este método se bloquea hasta que el subproceso que realiza la llamada entra en el bloqueo y, por lo tanto, es posible que nunca.</span><span class="sxs-lookup"><span data-stu-id="6850d-312">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="6850d-313">Use el <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> método se bloquea durante un intervalo especificado y, a continuación, devolver si el subproceso de llamada no ha entrado en modo durante ese intervalo.</span><span class="sxs-lookup"><span data-stu-id="6850d-313">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="6850d-314">Use el modo puede actualizarse cuando un subproceso normalmente obtiene acceso al recurso protegido por el <xref:System.Threading.ReaderWriterLockSlim> en modo de lectura, pero es posible que necesite entrar en modo de escritura si se cumplen ciertas condiciones.</span><span class="sxs-lookup"><span data-stu-id="6850d-314">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="6850d-315">Un subproceso en modo de actualización puede cambiar el modo de lectura o actualizar a modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-315">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="6850d-316">Solo un subproceso puede entrar en modo en un momento dado.</span><span class="sxs-lookup"><span data-stu-id="6850d-316">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="6850d-317">Si un subproceso está en modo de actualización y no hay ningún subproceso en espera de entrar en modo de escritura, cualquier número de otros subprocesos puede entrar en modo de lectura, incluso si no hay subprocesos en espera de entrar en modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-317">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-318">Si uno o varios subprocesos están esperando para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> agotó el tiempo de método se bloquea hasta que esos subprocesos o entró en modo de escritura y, a continuación, sale de ella.</span><span class="sxs-lookup"><span data-stu-id="6850d-318">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-319">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de actualización puede entrar en modo de actualización de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-319">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-320">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> método para entrar en el bloqueo en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-320">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="6850d-321">Un `finally` bloque se usa para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> método, lo que garantiza que el llamador sale del modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-321">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-322">El método que se muestra en el ejemplo recupera el valor asociado a una clave y lo compara con un nuevo valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-322">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="6850d-323">Si el valor se ha modificado, el método devuelve un estado que indica ningún cambio.</span><span class="sxs-lookup"><span data-stu-id="6850d-323">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="6850d-324">Se encuentra ningún valor para la clave, se inserta el par clave/valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-324">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="6850d-325">Si ha cambiado el valor, se actualiza.</span><span class="sxs-lookup"><span data-stu-id="6850d-325">If the value has changed, it is updated.</span></span> <span data-ttu-id="6850d-326">Modo de actualización permite que el subproceso actualizar el bloqueo de lectura según sea necesario, sin riesgo de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-326">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-327">El ejemplo utiliza el constructor predeterminado para crear el bloqueo, por lo que no se permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-327">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="6850d-328">Programar la <xref:System.Threading.ReaderWriterLockSlim> es más sencillo y menos propenso a errores cuando el bloqueo no permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-328">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="6850d-329">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-329">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-330">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo en cualquier modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-330">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="6850d-331">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-331">-or-</span></span> 
<span data-ttu-id="6850d-332">El subproceso actual ha entrado en modo de lectura, por lo que, al intentar entrar en modo de actualización, existiría la posibilidad de interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-332">The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-333">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-333">-or-</span></span> 
<span data-ttu-id="6850d-334">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-334">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-335">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-335">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-336">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-336">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-337">Intenta entrar en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-337">Tries to enter the lock in write mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-338">Devuelve este método se bloquea hasta que el subproceso que realiza la llamada entra en el bloqueo y, por lo tanto, es posible que nunca.</span><span class="sxs-lookup"><span data-stu-id="6850d-338">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="6850d-339">Use el <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> método se bloquea durante un intervalo especificado y, a continuación, devolver si el subproceso de llamada no ha entrado en modo de escritura durante ese intervalo.</span><span class="sxs-lookup"><span data-stu-id="6850d-339">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="6850d-340">Si otros subprocesos han entrado en el bloqueo en modo de lectura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> método se bloquea hasta que los subprocesos han salido del modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-340">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="6850d-341">Cuando hay subprocesos en espera de entrar en modo de escritura, subprocesos adicionales que intenta entrar en modo de lectura o bloque de modo de actualización hasta que todos los subprocesos en espera de entrar en modo de escritura tienen agotó el tiempo o entró en modo de escritura y, a continuación, salgan de ella.</span><span class="sxs-lookup"><span data-stu-id="6850d-341">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-342">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de escritura puede escribir recursivamente de modo de escritura, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-342">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-343">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> método para entrar en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-343">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="6850d-344">El método que se muestra en el ejemplo agrega un nuevo par clave-valor a la memoria caché sincronizada.</span><span class="sxs-lookup"><span data-stu-id="6850d-344">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="6850d-345">Si la clave ya está en la memoria caché, la excepción producida por interno <xref:System.Collections.Generic.Dictionary%602> puede finalizar el método.</span><span class="sxs-lookup"><span data-stu-id="6850d-345">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="6850d-346">Un `finally` bloque se usa para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> método, lo que garantiza que el llamador sale del modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-346">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="6850d-347">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-347">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-348">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo en cualquier modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-348">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="6850d-349">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-349">-or-</span></span> 
<span data-ttu-id="6850d-350">El subproceso actual ha entrado en modo de lectura y ya no posee un bloqueo de escritura, por lo que, si se intenta entrar en el bloqueo en modo de escritura, existiría la posibilidad de un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-350">The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-351">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-351">-or-</span></span> 
<span data-ttu-id="6850d-352">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-352">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-353">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-353">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-354">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-354">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-355">Reduce el recuento de recursividad para el modo de lectura y sale del modo de lectura si el recuento resultante es 0 (cero).</span><span class="sxs-lookup"><span data-stu-id="6850d-355">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-356">Este método no es susceptible al orden de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-356">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="6850d-357">Por ejemplo, si un subproceso entra en un bloqueo en modo de actualización y, a continuación, entra en el bloqueo en modo de lectura, no importa el orden en el que el subproceso sale de los dos modos.</span><span class="sxs-lookup"><span data-stu-id="6850d-357">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="6850d-358">Si un bloqueo permite la recursividad, un subproceso puede entrar en el bloqueo en modo de escritura y a continuación, escríbala de forma recursiva en modo de lectura; el orden en que el subproceso sale del modo de lectura y no importa el modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-358">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="6850d-359">Salir del bloqueo puede señalar otros subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="6850d-359">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-360">El ejemplo siguiente muestra cómo usar un `finally` bloque para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> método, lo que garantiza que el llamador sale del modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-360">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="6850d-361">El método que se muestra en el ejemplo recupera el valor asociado a una clave.</span><span class="sxs-lookup"><span data-stu-id="6850d-361">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="6850d-362">Si la clave no se encuentra, la excepción producida por interno <xref:System.Collections.Generic.Dictionary%602> puede finalizar el método.</span><span class="sxs-lookup"><span data-stu-id="6850d-362">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="6850d-363">El <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> método se utiliza para entrar en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-363">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="6850d-364">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-364">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="6850d-365">El subproceso actual no ha entrado en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-365">The current thread has not entered the lock in read mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-366">Reduce el recuento de recursividad para el modo de actualización y sale del modo de actualización si el recuento resultante es 0 (cero).</span><span class="sxs-lookup"><span data-stu-id="6850d-366">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-367">Este método no es susceptible al orden de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-367">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="6850d-368">Por ejemplo, si un subproceso entra en un bloqueo en modo de actualización y, a continuación, entra en el bloqueo en modo de escritura, no importa el orden en el que el subproceso sale de los dos modos.</span><span class="sxs-lookup"><span data-stu-id="6850d-368">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="6850d-369">Si un bloqueo permite la recursividad, un subproceso puede entrar en el bloqueo en modo de escritura y a continuación, escríbala de forma recursiva en modo de actualización; No importa el orden en que el subproceso sale en modo de modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-369">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="6850d-370">Salir del bloqueo puede señalar otros subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="6850d-370">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-371">El ejemplo siguiente muestra cómo usar un `finally` bloque para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> método, lo que garantiza que el llamador sale del modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-371">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-372">El método que se muestra en el ejemplo recupera el valor asociado a una clave y lo compara con un nuevo valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-372">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="6850d-373">Si el valor se ha modificado, el método devuelve un estado que indica ningún cambio.</span><span class="sxs-lookup"><span data-stu-id="6850d-373">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="6850d-374">Se encuentra ningún valor para la clave, se inserta el par clave/valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-374">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="6850d-375">Si ha cambiado el valor, se actualiza.</span><span class="sxs-lookup"><span data-stu-id="6850d-375">If the value has changed, it is updated.</span></span> <span data-ttu-id="6850d-376">Modo de actualización permite que el subproceso actualizar el bloqueo de lectura según sea necesario, sin riesgo de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-376">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-377">El ejemplo utiliza el constructor predeterminado para crear el bloqueo, por lo que no se permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-377">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="6850d-378">Programar la <xref:System.Threading.ReaderWriterLockSlim> es más sencillo y menos propenso a errores cuando el bloqueo no permite la recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-378">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="6850d-379">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-379">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="6850d-380">El subproceso actual no ha entrado en el bloqueo en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-380">The current thread has not entered the lock in upgradeable mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6850d-381">Reduce el recuento de recursividad para el modo de escritura y sale del modo de escritura si el recuento resultante es 0 (cero).</span><span class="sxs-lookup"><span data-stu-id="6850d-381">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-382">Este método no es susceptible al orden de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-382">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="6850d-383">Por ejemplo, si un subproceso entra en un bloqueo en modo de actualización y, a continuación, entra en el bloqueo en modo de escritura, no importa el orden en el que el subproceso sale de los dos modos.</span><span class="sxs-lookup"><span data-stu-id="6850d-383">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="6850d-384">Si un bloqueo permite la recursividad, un subproceso puede entrar en el bloqueo en modo de escritura y a continuación, escríbala de forma recursiva en modo de lectura; el orden en que el subproceso sale del modo de lectura y no importa el modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-384">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="6850d-385">Salir del bloqueo puede señalar otros subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="6850d-385">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-386">El ejemplo siguiente muestra cómo usar un `finally` bloque para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> método, lo que garantiza que el llamador sale del modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-386">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="6850d-387">El método que se muestra en el ejemplo agrega un nuevo par clave-valor a la memoria caché sincronizada.</span><span class="sxs-lookup"><span data-stu-id="6850d-387">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="6850d-388">Si la clave ya está en la memoria caché, la excepción producida por interno <xref:System.Collections.Generic.Dictionary%602> puede finalizar el método.</span><span class="sxs-lookup"><span data-stu-id="6850d-388">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="6850d-389">El <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> método se utiliza para entrar en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-389">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="6850d-390">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-390">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="6850d-391">El subproceso actual no ha entrado en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-391">The current thread has not entered the lock in write mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-392">Obtiene un valor que indica si el subproceso actual ha entrado en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-392">Gets a value that indicates whether the current thread has entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="6850d-393"><see langword="true" /> si el subproceso actual ha entrado en modo de lectura; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-393"><see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-394">Esta propiedad está pensada para uso en las aserciones o para otros propósitos de depuración.</span><span class="sxs-lookup"><span data-stu-id="6850d-394">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="6850d-395">No lo utilice para controlar el flujo de ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="6850d-395">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-396">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> propiedad para generar una aserción si el subproceso actual ha entrado en modo de lectura inesperadamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-396">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-397">Obtiene un valor que indica si el subproceso actual ha entrado en el bloqueo en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-397">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="6850d-398"><see langword="true" /> si el subproceso actual ha entrado en modo de actualización; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-398"><see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-399">Esta propiedad está pensada para uso en las aserciones o para otros propósitos de depuración.</span><span class="sxs-lookup"><span data-stu-id="6850d-399">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="6850d-400">No lo utilice para controlar el flujo de ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="6850d-400">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-401">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> propiedad para generar una aserción si el subproceso actual ha entrado en modo de forma inesperada.</span><span class="sxs-lookup"><span data-stu-id="6850d-401">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-402">Obtiene un valor que indica si el subproceso actual ha entrado en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-402">Gets a value that indicates whether the current thread has entered the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="6850d-403"><see langword="true" /> si el subproceso actual ha entrado en modo de escritura; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-403"><see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-404">Esta propiedad está pensada para uso en las aserciones o para otros propósitos de depuración.</span><span class="sxs-lookup"><span data-stu-id="6850d-404">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="6850d-405">No lo utilice para controlar el flujo de ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="6850d-405">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-406">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> propiedad para generar una aserción si el subproceso actual ha entrado en modo de escritura inesperadamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-406">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-407">Obtiene un valor que indica la directiva de recursividad del objeto <see cref="T:System.Threading.ReaderWriterLockSlim" /> actual.</span><span class="sxs-lookup"><span data-stu-id="6850d-407">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="6850d-408">Uno de los valores de enumeración que especifica la directiva de recursividad de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-408">One of the enumeration values that specifies the lock recursion policy.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-409">La directiva de recursividad determina las restricciones en los subprocesos que entrar en más de una vez el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-409">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="6850d-410">Por ejemplo, si se ha creado un bloqueo con <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> y un subproceso ha entrado en modo de lectura, el bloqueo <xref:System.Threading.LockRecursionException> se produce si el subproceso intenta volver a escribir el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-410">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-411">Un subproceso en modo de actualización puede actualizar a modo de escritura o degradar modo independientemente de la configuración de directiva de recursividad de bloqueo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-411">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="6850d-412">Independientemente de la directiva de recursividad, un subproceso que entró inicialmente en lectura no se permite el modo para actualizar a modo de actualización o en modo de escritura, porque ese modelo genera una gran probabilidad de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="6850d-412">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="6850d-413">Para obtener más información acerca de la directiva de recursividad y sus efectos, vea el <xref:System.Threading.LockRecursionPolicy> enumeración y <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-413">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-414">Obtiene el número de veces que el subproceso actual ha entrado en el bloqueo en modo de lectura, como una indicación de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-414">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="6850d-415">0 (cero) si el subproceso actual no ha entrado en modo de lectura, 1 si el subproceso ha entrado en modo de lectura pero no lo hizo de forma recursiva o *n* si el subproceso ha entrado de forma recursiva el bloqueo *n* - 1 veces.</span><span class="sxs-lookup"><span data-stu-id="6850d-415">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-416">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-416">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-417">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-417">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-418">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-418">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-419">Obtiene el número de veces que el subproceso actual ha entrado en el bloqueo en modo de actualización, como una indicación de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-419">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="6850d-420">0 si el subproceso actual no ha entrado en modo de actualización, 1 si el subproceso ha entrado en modo pero no lo ha hecho de forma recursiva o *n* si el subproceso ha entrado en modo de actualización de forma recursiva *n* - 1 veces.</span><span class="sxs-lookup"><span data-stu-id="6850d-420">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-421">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-421">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-422">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-422">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-423">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-423">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-424">Obtiene el número de veces que el subproceso actual ha entrado en el bloqueo en modo de escritura, como una indicación de recursividad.</span><span class="sxs-lookup"><span data-stu-id="6850d-424">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="6850d-425">0 si el subproceso actual no ha entrado en modo de escritura, 1 si el subproceso ha entrado en modo de escritura pero no especificó el hecho de forma recursiva o *n* si el subproceso ha entrado en modo de escritura de forma recursiva *n* - 1 veces.</span><span class="sxs-lookup"><span data-stu-id="6850d-425">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-426">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-426">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-427">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-427">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-428">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-428">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6850d-429">Intenta entrar en el bloqueo en modo de lectura, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-429">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6850d-430">Número de milisegundos de espera, o -1 (<see cref="F:System.Threading.Timeout.Infinite" />) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-430">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-431">Intenta entrar en el bloqueo en modo de lectura, con un tiempo de espera entero opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-431">Tries to enter the lock in read mode, with an optional integer time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-432"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de lectura, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-432"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-433">Si `millisecondsTimeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-433">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-434">Varios subprocesos pueden entrar en modo de lectura al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="6850d-434">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="6850d-435">Si uno o varios subprocesos están esperando para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> método se bloquea hasta que esos subprocesos tengan bien agotó el tiempo o entró en modo de escritura y, a continuación, sale de él, o hasta que expire el intervalo de tiempo de espera del subproceso de llamada propia.</span><span class="sxs-lookup"><span data-stu-id="6850d-435">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-436">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de lectura puede especificar el modo de lectura de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-436">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="6850d-437">Un subproceso puede estar en modo de actualización mientras otros subprocesos están en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-437">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="6850d-438">Si otros subprocesos están esperando para entrar en modo de y no hay ningún subproceso en espera de entrar en modo de escritura, los subprocesos que llaman a la <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> método entrar en modo de lectura inmediatamente y no se bloquean.</span><span class="sxs-lookup"><span data-stu-id="6850d-438">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-439">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-439">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-440">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-440">-or-</span></span> 
<span data-ttu-id="6850d-441">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-441">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-442">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-442">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-443">El valor de <paramref name="millisecondsTimeout" /> es negativo, pero no es igual que <see cref="F:System.Threading.Timeout.Infinite" /> (-1), que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-443">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-444">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-444">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6850d-445">Intervalo de espera, o -1 milisegundo para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-445">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-446">Intenta entrar en el bloqueo en modo de lectura, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-446">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-447"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de lectura, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-447"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-448">Si `timeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-448">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-449">Varios subprocesos pueden entrar en el bloqueo en modo de lectura al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="6850d-449">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="6850d-450">Si uno o varios subprocesos están en cola para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> método se bloquea hasta que esos subprocesos tengan bien agotó el tiempo o entró en modo de escritura y, a continuación, sale de él, o hasta que expire el intervalo de tiempo de espera del subproceso de llamada propia.</span><span class="sxs-lookup"><span data-stu-id="6850d-450">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-451">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de lectura puede especificar el modo de lectura de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-451">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="6850d-452">Un subproceso puede estar en modo de actualización mientras otros subprocesos están en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-452">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="6850d-453">Si otros subprocesos están esperando para entrar en modo de y no hay ningún subproceso en espera de entrar en modo de escritura, los subprocesos que llaman a la <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> método entrar en modo de lectura inmediatamente y no se bloquean.</span><span class="sxs-lookup"><span data-stu-id="6850d-453">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-454">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-454">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-455">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-455">-or-</span></span> 
<span data-ttu-id="6850d-456">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-456">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-457">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-457">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-458">El valor de <paramref name="timeout" /> es negativo, pero no es igual a -1 milisegundo, que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-458">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="6850d-459">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-459">-or-</span></span> 
<span data-ttu-id="6850d-460">El valor de <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="6850d-460">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-461">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-461">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6850d-462">Intenta entrar en el bloqueo en modo de actualización, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-462">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6850d-463">Número de milisegundos de espera, o -1 (<see cref="F:System.Threading.Timeout.Infinite" />) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-463">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-464">Intenta entrar en el bloqueo en modo de actualización, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-464">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-465"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de actualización, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-465"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-466">Si `millisecondsTimeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-466">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-467">Use el modo puede actualizarse cuando un subproceso normalmente obtiene acceso al recurso protegido por el <xref:System.Threading.ReaderWriterLockSlim> en modo de lectura, pero es posible que necesite entrar en modo de escritura si se cumplen ciertas condiciones.</span><span class="sxs-lookup"><span data-stu-id="6850d-467">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="6850d-468">Un subproceso en modo de actualización puede actualizarse a modo de escritura o degradación a modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-468">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="6850d-469">Solo un subproceso puede entrar en un bloqueo en modo de actualización en un momento dado.</span><span class="sxs-lookup"><span data-stu-id="6850d-469">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="6850d-470">Si un subproceso está en modo de actualización y no hay ningún subproceso en espera de entrar en modo de escritura, cualquier número de otros subprocesos puede entrar en modo de lectura, incluso si no hay subprocesos en espera de entrar en modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-470">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-471">Si uno o varios subprocesos están esperando para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> método se bloquea hasta que esos subprocesos tengan bien agotó el tiempo o entró en modo de escritura y, a continuación, sale de él, o hasta que expire el intervalo de tiempo de espera del subproceso de llamada propia.</span><span class="sxs-lookup"><span data-stu-id="6850d-471">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-472">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de actualización puede entrar en modo de actualización de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-472">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-473">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-473">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-474">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-474">-or-</span></span> 
<span data-ttu-id="6850d-475">El subproceso actual entró inicialmente en el bloqueo en modo de lectura y, por lo tanto, al intentar entrar en modo de actualización, existiría la posibilidad de un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-475">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-476">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-476">-or-</span></span> 
<span data-ttu-id="6850d-477">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-477">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-478">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-478">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-479">El valor de <paramref name="millisecondsTimeout" /> es negativo, pero no es igual que <see cref="F:System.Threading.Timeout.Infinite" /> (-1), que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-479">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-480">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-480">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6850d-481">Intervalo de espera, o -1 milisegundo para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-481">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-482">Intenta entrar en el bloqueo en modo de actualización, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-482">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-483"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de actualización, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-483"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-484">Si `timeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-484">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-485">Use el modo puede actualizarse cuando un subproceso suele tener acceso al recurso protegido por el <xref:System.Threading.ReaderWriterLockSlim> en modo de lectura, pero es posible que necesite entrar en modo de escritura si se cumplen ciertas condiciones.</span><span class="sxs-lookup"><span data-stu-id="6850d-485">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="6850d-486">Un subproceso en modo de actualización puede actualizarse a modo de escritura o degradación a modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-486">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="6850d-487">Solo un subproceso puede entrar en un bloqueo en modo de actualización en un momento dado.</span><span class="sxs-lookup"><span data-stu-id="6850d-487">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="6850d-488">Si un subproceso está en modo de actualización y no hay ningún subproceso en espera de entrar en modo de escritura, cualquier número de otros subprocesos puede entrar en modo de lectura, incluso si no hay subprocesos en espera de entrar en modo.</span><span class="sxs-lookup"><span data-stu-id="6850d-488">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="6850d-489">Si uno o varios subprocesos están esperando para entrar en modo de escritura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> método se bloquea hasta que esos subprocesos tengan bien agotó el tiempo o entró en modo de escritura y, a continuación, sale de él, o hasta que expire el intervalo de tiempo de espera del subproceso de llamada propia.</span><span class="sxs-lookup"><span data-stu-id="6850d-489">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-490">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de actualización puede entrar en modo de actualización de forma recursiva, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-490">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-491">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-491">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-492">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-492">-or-</span></span> 
<span data-ttu-id="6850d-493">El subproceso actual entró inicialmente en el bloqueo en modo de lectura y, por lo tanto, al intentar entrar en modo de actualización, existiría la posibilidad de un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-493">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-494">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-494">-or-</span></span> 
<span data-ttu-id="6850d-495">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-495">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-496">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-496">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-497">El valor de <paramref name="timeout" /> es negativo, pero no es igual a -1 milisegundo, que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-497">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="6850d-498">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-498">-or-</span></span> 
<span data-ttu-id="6850d-499">El valor de <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="6850d-499">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-500">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-500">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6850d-501">Intenta entrar en el bloqueo en modo de escritura, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-501">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="6850d-502">Número de milisegundos de espera, o -1 (<see cref="F:System.Threading.Timeout.Infinite" />) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-502">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-503">Intenta entrar en el bloqueo en modo de escritura, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-503">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-504"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de escritura, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-504"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-505">Si `millisecondsTimeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-505">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-506">Si otros subprocesos han entrado en el bloqueo en modo de lectura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> método se bloquea hasta que esos subprocesos han salido del modo de lectura o hasta que haya transcurrido el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="6850d-506">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="6850d-507">Mientras los subprocesos se bloquean a la espera de entrar en modo de escritura, subprocesos adicionales que intenta entrar en modo de lectura o en modo de actualización se bloquearán hasta que todos los subprocesos en espera de entrar en modo de escritura tengan cualquiera agotó el tiempo o entró en modo de escritura y, a continuación, sale de ella.</span><span class="sxs-lookup"><span data-stu-id="6850d-507">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-508">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de escritura puede escribir recursivamente de modo de escritura, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-508">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-509">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> método para entrar en el bloqueo en modo de escritura, con un tiempo de espera. El método que se muestra en el ejemplo agrega un nuevo par clave-valor a la memoria caché sincronizada.</span><span class="sxs-lookup"><span data-stu-id="6850d-509">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="6850d-510">Si transcurre el intervalo de tiempo de espera especificado antes de que el subproceso entra en el bloqueo, el método devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="6850d-510">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="6850d-511">El método devuelve `true` si se agrega el par clave/valor.</span><span class="sxs-lookup"><span data-stu-id="6850d-511">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="6850d-512">Si la clave ya está en la memoria caché, la excepción producida por interno <xref:System.Collections.Generic.Dictionary%602> puede finalizar el método.</span><span class="sxs-lookup"><span data-stu-id="6850d-512">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="6850d-513">Un `finally` bloque se usa para ejecutar el <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> método, lo que garantiza que el llamador sale el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-513">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="6850d-514">Este código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Threading.ReaderWriterLockSlim> clase.</span><span class="sxs-lookup"><span data-stu-id="6850d-514">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-515">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-515">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-516">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-516">-or-</span></span> 
<span data-ttu-id="6850d-517">El subproceso actual entró inicialmente en el bloqueo en modo de lectura y, por lo tanto, al intentar entrar en modo de escritura, existiría la posibilidad de un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-517">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-518">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-518">-or-</span></span> 
<span data-ttu-id="6850d-519">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-519">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-520">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-520">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-521">El valor de <paramref name="millisecondsTimeout" /> es negativo, pero no es igual que <see cref="F:System.Threading.Timeout.Infinite" /> (-1), que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-521">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-522">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-522">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6850d-523">Intervalo de espera, o -1 milisegundo para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="6850d-523">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="6850d-524">Intenta entrar en el bloqueo en modo de escritura, con tiempo de espera opcional.</span><span class="sxs-lookup"><span data-stu-id="6850d-524">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="6850d-525"><see langword="true" /> si el subproceso que realiza la llamada entró en modo de escritura, de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-525"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-526">Si `timeout` es 0 (cero), este método comprueba el estado de bloqueo y devuelve `false` inmediatamente si el estado deseado no está disponible.</span><span class="sxs-lookup"><span data-stu-id="6850d-526">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="6850d-527">Si otros subprocesos han entrado en el bloqueo en modo de lectura, un subproceso que llama el <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> método se bloquea hasta que esos subprocesos han salido del modo de lectura o hasta que haya transcurrido el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="6850d-527">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="6850d-528">Mientras los subprocesos se bloquean a la espera de entrar en modo de escritura, subprocesos adicionales que intenta entrar en modo de lectura o en modo de actualización se bloquearán hasta que todos los subprocesos en espera de entrar en modo de escritura tengan cualquiera agotó el tiempo o entró en modo de escritura y, a continuación, sale de ella.</span><span class="sxs-lookup"><span data-stu-id="6850d-528">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6850d-529">Si un bloqueo permite la recursividad, un subproceso que ha entrado en el bloqueo en modo de escritura puede escribir recursivamente de modo de escritura, incluso si otros subprocesos están esperando para entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-529">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="6850d-530">La propiedad <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> es <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> y el subproceso actual ya ha entrado en el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-530">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="6850d-531">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-531">-or-</span></span> 
<span data-ttu-id="6850d-532">El subproceso actual entró inicialmente en el bloqueo en modo de lectura y, por lo tanto, al intentar entrar en modo de escritura, existiría la posibilidad de un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="6850d-532">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="6850d-533">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-533">-or-</span></span> 
<span data-ttu-id="6850d-534">El número de recursividad superaría la capacidad del contador.</span><span class="sxs-lookup"><span data-stu-id="6850d-534">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="6850d-535">El límite es tan amplio que las aplicaciones nunca deben alcanzarlo.</span><span class="sxs-lookup"><span data-stu-id="6850d-535">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6850d-536">El valor de <paramref name="timeout" /> es negativo, pero no es igual a -1 milisegundo, que es el único valor negativo permitido.</span><span class="sxs-lookup"><span data-stu-id="6850d-536">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="6850d-537">O bien</span><span class="sxs-lookup"><span data-stu-id="6850d-537">-or-</span></span> 
<span data-ttu-id="6850d-538">El valor de <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="6850d-538">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="6850d-539">Se eliminó el objeto <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="6850d-539">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-540">Obtiene el número total de subprocesos que están a la espera de entrar en el bloqueo en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-540">Gets the total number of threads that are waiting to enter the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="6850d-541">Número total de subprocesos que están a la espera de entrar en modo de lectura.</span><span class="sxs-lookup"><span data-stu-id="6850d-541">The total number of threads that are waiting to enter read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-542">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-542">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-543">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-543">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-544">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-544">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-545">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> propiedad para generar una entrada de registro de eventos si el número de subprocesos que están bloqueados, a la espera de entrar en modo de lectura, supera un umbral.</span><span class="sxs-lookup"><span data-stu-id="6850d-545">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-546">Obtiene el número total de subprocesos que están a la espera de entrar en el bloqueo en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-546">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="6850d-547">Número total de subprocesos que están a la espera de entrar en modo de actualización.</span><span class="sxs-lookup"><span data-stu-id="6850d-547">The total number of threads that are waiting to enter upgradeable mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-548">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-548">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-549">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-549">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-550">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-550">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-551">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> propiedad para generar una entrada de registro de eventos si el número de subprocesos que se bloquean, espera entrar en modo supera un umbral.</span><span class="sxs-lookup"><span data-stu-id="6850d-551">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6850d-552">Obtiene el número total de subprocesos que están a la espera de entrar en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-552">Gets the total number of threads that are waiting to enter the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="6850d-553">Número total de subprocesos que están a la espera de entrar en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="6850d-553">The total number of threads that are waiting to enter write mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6850d-554">Utilice esta propiedad únicamente para la depuración, generación de perfiles y con fines de registro y no para controlar el comportamiento de un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="6850d-554">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="6850d-555">Pueden cambiar los resultados en cuanto se hayan calculado.</span><span class="sxs-lookup"><span data-stu-id="6850d-555">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="6850d-556">Por lo tanto, no es seguro tomar decisiones basadas en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="6850d-556">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6850d-557">El ejemplo siguiente muestra cómo usar el <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> propiedad para generar una entrada de registro de eventos si el número de subprocesos que están bloqueados, a la espera de entrar en modo de escritura supera un umbral.</span><span class="sxs-lookup"><span data-stu-id="6850d-557">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>