<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9968c671067a22cf9e81da2cfb7a0510bf86e40" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58682787" /></Metadata><TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c423a-101">Proporciona una primitiva de bloqueo de exclusión mutua donde un subproceso que intenta adquirir el bloqueo espera en un bucle repetidamente comprobando hasta que haya un bloqueo disponible.</span><span class="sxs-lookup"><span data-stu-id="c423a-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-102">Para obtener un ejemplo de cómo usar un bloqueo por subproceso, vea [Cómo: Utilizar SpinLock para la sincronización de bajo nivel](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="c423a-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="c423a-103">Bloqueos de giro pueden usarse para los bloqueos de nivel de hoja donde la asignación de objetos implícita mediante el uso de un <xref:System.Threading.Monitor>, tamaño o debido a la presión de la colección de elementos no utilizados, es demasiado costoso.</span><span class="sxs-lookup"><span data-stu-id="c423a-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="c423a-104">Un bloqueo por subproceso puede ser útil para evitar el bloqueo; Sin embargo, si espera una cantidad significativa de bloqueo, probablemente no debería usar bloqueos de giro debido al giro excesivo.</span><span class="sxs-lookup"><span data-stu-id="c423a-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="c423a-105">Giro puede ser beneficioso cuando los bloqueos son específica y grande de número (por ejemplo, un bloqueo por nodo en una lista vinculada) y también cuando tiempos de espera de bloqueo están siempre muy cortos.</span><span class="sxs-lookup"><span data-stu-id="c423a-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="c423a-106">En general, mientras mantiene un bloqueo por subproceso, se debería evitar cualquiera de estas acciones:</span><span class="sxs-lookup"><span data-stu-id="c423a-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="c423a-107">bloqueo,</span><span class="sxs-lookup"><span data-stu-id="c423a-107">blocking,</span></span>  
  
-   <span data-ttu-id="c423a-108">llamar a algo que sí puede bloquear,</span><span class="sxs-lookup"><span data-stu-id="c423a-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="c423a-109">que contiene más de un bloqueo de giro a la vez,</span><span class="sxs-lookup"><span data-stu-id="c423a-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="c423a-110">realizando llamadas (interfaz y virtuales), enviadas dinámicamente</span><span class="sxs-lookup"><span data-stu-id="c423a-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="c423a-111">realizando llamadas en cualquier código que no posee uno, enviadas estáticamente o</span><span class="sxs-lookup"><span data-stu-id="c423a-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="c423a-112">asignación de memoria.</span><span class="sxs-lookup"><span data-stu-id="c423a-112">allocating memory.</span></span>  
  
 <span data-ttu-id="c423a-113"><xref:System.Threading.SpinLock> solo debe usarse una vez que se ha determinado que al hacerlo así mejorará el rendimiento de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="c423a-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="c423a-114">También es importante tener en cuenta que <xref:System.Threading.SpinLock> es un tipo de valor, por motivos de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="c423a-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="c423a-115">Por este motivo, debe ser muy cuidado de no copiar accidentalmente un <xref:System.Threading.SpinLock> de instancia, tal como las dos instancias (original y la copia), a continuación, sería completamente independientes entre sí, que es probable que daría lugar a un comportamiento erróneo de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="c423a-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="c423a-116">Si un <xref:System.Threading.SpinLock> alrededor, se debe pasar la instancia, se debe pasar por referencia en lugar de por valor.</span><span class="sxs-lookup"><span data-stu-id="c423a-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="c423a-117">No almacene <xref:System.Threading.SpinLock> instancias en campos de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="c423a-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c423a-118">El ejemplo siguiente muestra cómo usar un <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="c423a-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c423a-119">Todos los miembros de <see cref="T:System.Threading.SpinLock" /> son seguros para subprocesos y se pueden usar desde varios subprocesos simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="c423a-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-120">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-120">SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-121">Filtrar Usar SpinWait y SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-121">How to: Use SpinWait and SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-122">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-122">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking"><span data-ttu-id="c423a-123">Indica si se han de capturar y utilizar identificadores de subprocesos con fines de depuración.</span><span class="sxs-lookup"><span data-stu-id="c423a-123">Whether to capture and use thread IDs for debugging purposes.</span></span></param>
        <summary><span data-ttu-id="c423a-124">Inicializa una nueva instancia de la estructura <see cref="T:System.Threading.SpinLock" /> con la opción de realizar el seguimiento de los identificadores de subprocesos para mejorar la depuración.</span><span class="sxs-lookup"><span data-stu-id="c423a-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-125">El constructor predeterminado para <xref:System.Threading.SpinLock> pistas de la propiedad de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="c423a-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c423a-126">El ejemplo siguiente muestra cómo se puede usar un bloqueo por bucle.</span><span class="sxs-lookup"><span data-stu-id="c423a-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-127">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-127">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-128">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-128">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-129">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-129">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="c423a-130">Es true si se adquiere el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-130">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="c423a-131"><paramref name="lockTaken" /> se debe inicializar en false antes de llamar a este método.</span><span class="sxs-lookup"><span data-stu-id="c423a-131"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="c423a-132">Adquiere el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <paramref name="lockTaken" /> de manera confiable para determinar si se adquirió el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-133"><xref:System.Threading.SpinLock> es un bloqueo no reentrante, lo que significa que si un subproceso mantiene el bloqueo, no se permite volver a escribir el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="c423a-134">Si está habilitada el seguimiento de la propiedad de subproceso (si está habilitado está disponible a través de <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), se producirá una excepción cuando un subproceso intenta volver a entrar en un bloqueo que ya contiene.</span><span class="sxs-lookup"><span data-stu-id="c423a-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="c423a-135">Sin embargo, si se deshabilita el seguimiento de propiedad de subprocesos, al intentar entrar en un bloqueo ya retenido dará como resultado un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="c423a-136">Si se llama a <xref:System.Threading.SpinLock.Exit%2A> sin haber llamado primero <xref:System.Threading.SpinLock.Enter%2A> el estado interno de la <xref:System.Threading.SpinLock> puede resultar dañado.</span><span class="sxs-lookup"><span data-stu-id="c423a-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c423a-137">El argumento <paramref name="lockTaken" /> se debe inicializar en false antes de llamar a Enter.</span><span class="sxs-lookup"><span data-stu-id="c423a-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="c423a-138">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-139">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-139">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-140">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-140">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-141">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-141">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c423a-142">Libera el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-142">Releases the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c423a-143">Libera el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-143">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-144">La sobrecarga predeterminada del <xref:System.Threading.SpinLock.Exit%2A> proporciona el mismo comportamiento que si se llamara <xref:System.Threading.SpinLock.Exit%2A> usar true como argumento.</span><span class="sxs-lookup"><span data-stu-id="c423a-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="c423a-145">Si se llama a <xref:System.Threading.SpinLock.Exit%2A> sin haber llamado primero <xref:System.Threading.SpinLock.Enter%2A> el estado interno de la <xref:System.Threading.SpinLock> puede resultar dañado.</span><span class="sxs-lookup"><span data-stu-id="c423a-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="c423a-146">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual no es el propietario de este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-147">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-147">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-148">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-148">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-149">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-149">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier"><span data-ttu-id="c423a-150">Valor booleano que indica si una barrera de memoria debe emitirse para publicar inmediatamente la operación de salida a otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="c423a-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span></span></param>
        <summary><span data-ttu-id="c423a-151">Libera el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-151">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-152">Una llamada a <xref:System.Threading.SpinLock.Exit%2A> con el `useMemoryBarrier` argumento establecido en true, mejorará la imparcialidad del bloqueo a costa de algo de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="c423a-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="c423a-153">El valor predeterminado <xref:System.Threading.SpinLock.Exit%2A> sobrecarga se comporta como si se especifica true para `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="c423a-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="c423a-154">Si se llama a <xref:System.Threading.SpinLock.Exit%2A> sin haber llamado primero <xref:System.Threading.SpinLock.Enter%2A> el estado interno de la <xref:System.Threading.SpinLock> puede resultar dañado.</span><span class="sxs-lookup"><span data-stu-id="c423a-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="c423a-155">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual no es el propietario de este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-156">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-156">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-157">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-157">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-158">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-158">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c423a-159">Obtiene un valor que indica si un subproceso mantiene actualmente el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-159">Gets whether the lock is currently held by any thread.</span></span></summary>
        <value><span data-ttu-id="c423a-160">Es true si cualquier subproceso mantiene actualmente el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-160">true if the lock is currently held by any thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-161">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-161">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-162">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-162">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-163">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-163">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c423a-164">Obtiene un valor que indica si el subproceso actual mantiene actualmente el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-164">Gets whether the lock is held by the current thread.</span></span></summary>
        <value><span data-ttu-id="c423a-165">Es true si el subproceso actual mantiene el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-165">true if the lock is held by the current thread; otherwise false.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-166">Si el bloqueo se inicializó para realizar un seguimiento de los subprocesos del propietario, esto devolverá si se adquirió el bloqueo por el subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="c423a-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="c423a-167">No es válido para usar esta propiedad cuando se inicializó el bloqueo para no realizar el seguimiento de propiedad de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="c423a-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c423a-168">El seguimiento de propiedad de subprocesos está deshabilitado.</span><span class="sxs-lookup"><span data-stu-id="c423a-168">Thread ownership tracking is disabled.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-169">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-169">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-170">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-170">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-171">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-171">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c423a-172">Obtiene un valor que indica si el seguimiento de propiedad de subprocesos está habilitado para esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c423a-172">Gets whether thread ownership tracking is enabled for this instance.</span></span></summary>
        <value><span data-ttu-id="c423a-173">Es true si se ha habilitado el seguimiento de propiedad de subprocesos para esta instancia; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-174">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-174">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-175">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-175">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-176">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-176">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c423a-177">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <paramref name="lockTaken" /> de manera confiable para determinar si se adquirió el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-178">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-178">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-179">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-179">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-180">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-180">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="c423a-181">Es true si se adquiere el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-181">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="c423a-182"><paramref name="lockTaken" /> se debe inicializar en false antes de llamar a este método.</span><span class="sxs-lookup"><span data-stu-id="c423a-182"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="c423a-183">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <paramref name="lockTaken" /> de manera confiable para determinar si se adquirió el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-184">A diferencia de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter no bloqueará en espera para adquirir el bloqueo esté disponible.</span><span class="sxs-lookup"><span data-stu-id="c423a-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="c423a-185">Si el bloqueo no está disponible cuando se llama a TryEnter, se devolverá inmediatamente sin más giro.</span><span class="sxs-lookup"><span data-stu-id="c423a-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c423a-186">El argumento <paramref name="lockTaken" /> se debe inicializar en false antes de llamar a TryEnter.</span><span class="sxs-lookup"><span data-stu-id="c423a-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="c423a-187">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-188">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-188">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-189">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-189">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-190">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-190">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="c423a-191">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="c423a-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="c423a-192">Es true si se adquiere el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-192">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="c423a-193"><paramref name="lockTaken" /> se debe inicializar en false antes de llamar a este método.</span><span class="sxs-lookup"><span data-stu-id="c423a-193"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="c423a-194">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <paramref name="lockTaken" /> de manera confiable para determinar si se adquirió el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-195">A diferencia de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter no bloqueará indefinidamente en espera para que adquirir el bloqueo esté disponible.</span><span class="sxs-lookup"><span data-stu-id="c423a-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="c423a-196">Bloqueará hasta que el bloqueo esté disponible o hasta que el `millisecondsTimeout` ha expirado.</span><span class="sxs-lookup"><span data-stu-id="c423a-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c423a-197"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="c423a-197"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c423a-198">El argumento <paramref name="lockTaken" /> se debe inicializar en false antes de llamar a TryEnter.</span><span class="sxs-lookup"><span data-stu-id="c423a-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="c423a-199">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-200">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-200">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-201">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-201">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-202">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-202">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c423a-203">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="c423a-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="c423a-204">Es true si se adquiere el bloqueo; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="c423a-204">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="c423a-205"><paramref name="lockTaken" /> se debe inicializar en false antes de llamar a este método.</span><span class="sxs-lookup"><span data-stu-id="c423a-205"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="c423a-206">Intenta adquirir el bloqueo de manera confiable de modo que, incluso si se produce una excepción en la llamada al método, se pueda examinar <paramref name="lockTaken" /> de manera confiable para determinar si se adquirió el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c423a-207">A diferencia de <xref:System.Threading.SpinLock.Enter%2A>, TryEnter no bloqueará indefinidamente en espera para que adquirir el bloqueo esté disponible.</span><span class="sxs-lookup"><span data-stu-id="c423a-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="c423a-208">Bloqueará hasta que el bloqueo esté disponible o hasta que el `timeout` ha expirado.</span><span class="sxs-lookup"><span data-stu-id="c423a-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c423a-209"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundo, que representa un tiempo de espera infinito, o el tiempo de espera es mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</span><span class="sxs-lookup"><span data-stu-id="c423a-209"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c423a-210">El argumento <paramref name="lockTaken" /> se debe inicializar en false antes de llamar a TryEnter.</span><span class="sxs-lookup"><span data-stu-id="c423a-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="c423a-211">El seguimiento de propiedad de subprocesos está habilitado, y el subproceso actual ya ha adquirido este bloqueo.</span><span class="sxs-lookup"><span data-stu-id="c423a-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="c423a-212">SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-212">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="c423a-213">Cómo: Utilizar SpinLock para la sincronización de bajo nivel</span><span class="sxs-lookup"><span data-stu-id="c423a-213">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="c423a-214">Cómo: Habilitar el modo de seguimiento de subproceso en el bloqueo SpinLock</span><span class="sxs-lookup"><span data-stu-id="c423a-214">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>