<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e927ca35a51948e93b5e4fbf3c866d7ffcf0d1ab" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58730390" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="26a68-101">Representa un evento de sincronización de subprocesos que cuando se señala, se restablece automáticamente después de liberar un único subproceso en espera.</span><span class="sxs-lookup"><span data-stu-id="26a68-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="26a68-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="26a68-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26a68-103">Usa `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, y <xref:System.Threading.EventWaitHandle> para la interacción de los subprocesos (o señalización de subproceso).</span><span class="sxs-lookup"><span data-stu-id="26a68-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="26a68-104">Para obtener más información, consulte el [subprocesos interacción o señalización](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sección de la [información general de las primitivas de sincronización](~/docs/standard/threading/overview-of-synchronization-primitives.md) artículo.</span><span class="sxs-lookup"><span data-stu-id="26a68-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="26a68-105">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="26a68-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="26a68-106">Cuando haya terminado de utilizar el tipo, debe deshacerse de él directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="26a68-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="26a68-107">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="26a68-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="26a68-108">Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="26a68-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="26a68-109">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="26a68-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="26a68-110">Un subproceso espera una señal mediante una llamada a [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span><span class="sxs-lookup"><span data-stu-id="26a68-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="26a68-111">Si el `AutoResetEvent` está en estado no señalado, el subproceso se bloquea hasta que [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) se llama.</span><span class="sxs-lookup"><span data-stu-id="26a68-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="26a68-112">Una llamada a `Set` señales `AutoResetEvent` para liberar un subproceso en espera.</span><span class="sxs-lookup"><span data-stu-id="26a68-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="26a68-113">`AutoResetEvent` permanece señalado hasta que se libera un único subproceso en espera y, a continuación, vuelve automáticamente al estado no señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="26a68-114">Si no hay ningún subproceso en espera, el estado permanece señalado indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="26a68-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="26a68-115">Si un subproceso llama <xref:System.Threading.WaitHandle.WaitOne%2A> mientras el <xref:System.Threading.AutoResetEvent> está en el estado señalado, no bloquea el subproceso.</span><span class="sxs-lookup"><span data-stu-id="26a68-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="26a68-116">El <xref:System.Threading.AutoResetEvent> libera el subproceso inmediatamente y vuelve al estado no señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="26a68-117">No hay ninguna garantía de que todas las llamadas a la <xref:System.Threading.EventWaitHandle.Set%2A> método liberará un subproceso.</span><span class="sxs-lookup"><span data-stu-id="26a68-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="26a68-118">Si dos llamadas están demasiado cerca, para que la segunda llamada se produce antes de que se ha liberado un subproceso, se libera un solo subproceso.</span><span class="sxs-lookup"><span data-stu-id="26a68-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="26a68-119">Es como si no se produjera la segunda llamada.</span><span class="sxs-lookup"><span data-stu-id="26a68-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="26a68-120">Además, si <xref:System.Threading.EventWaitHandle.Set%2A> se llama cuando no hay ningún subproceso en espera y el <xref:System.Threading.AutoResetEvent> ya está señalizado, la llamada no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="26a68-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="26a68-121">Puede controlar el estado inicial de un `AutoResetEvent` pasando un valor booleano al constructor: `true` si señala el estado inicial y `false` en caso contrario.</span><span class="sxs-lookup"><span data-stu-id="26a68-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="26a68-122">`AutoResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="26a68-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="26a68-123">A partir de .NET Framework versión 2.0, <xref:System.Threading.AutoResetEvent> se deriva de la nueva <xref:System.Threading.EventWaitHandle> clase.</span><span class="sxs-lookup"><span data-stu-id="26a68-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="26a68-124">Un <xref:System.Threading.AutoResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="26a68-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26a68-125">A diferencia de la <xref:System.Threading.AutoResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.</span><span class="sxs-lookup"><span data-stu-id="26a68-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26a68-126">El ejemplo siguiente muestra cómo usar <xref:System.Threading.AutoResetEvent> para liberar un subproceso a la vez, mediante una llamada a la <xref:System.Threading.EventWaitHandle.Set%2A> método (en la clase base) cada vez el usuario presiona el **ENTRAR** clave.</span><span class="sxs-lookup"><span data-stu-id="26a68-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="26a68-127">El ejemplo inicia tres subprocesos, lo que esperan un <xref:System.Threading.AutoResetEvent> que se creó en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="26a68-128">El primer subproceso se libera inmediatamente, porque el <xref:System.Threading.AutoResetEvent> ya está en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="26a68-129">Esto restablece la <xref:System.Threading.AutoResetEvent> al estado no señalado, por lo que bloquean los subprocesos subsiguientes.</span><span class="sxs-lookup"><span data-stu-id="26a68-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="26a68-130">Los subprocesos bloqueados no se liberan hasta que el usuario libera uno en un momento presionando el **ENTRAR** clave.</span><span class="sxs-lookup"><span data-stu-id="26a68-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="26a68-131">Después de que los subprocesos se liberan desde la primera <xref:System.Threading.AutoResetEvent>, esperan en otro <xref:System.Threading.AutoResetEvent> que se creó en el estado no señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="26a68-132">Bloquean los tres subprocesos, por lo que el <xref:System.Threading.EventWaitHandle.Set%2A> método debe llamarse tres veces para liberar todos ellos.</span><span class="sxs-lookup"><span data-stu-id="26a68-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="26a68-133">Esta clase es segura para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="26a68-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="26a68-134">Subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="26a68-134">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="26a68-135">Información general sobre las primitivas de sincronización</span><span class="sxs-lookup"><span data-stu-id="26a68-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="26a68-136"><see langword="true" /> para establecer el estado inicial en señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="26a68-137">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.AutoResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</span><span class="sxs-lookup"><span data-stu-id="26a68-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26a68-138">En el ejemplo siguiente se usa un <xref:System.Threading.AutoResetEvent> para sincronizar las actividades de dos subprocesos.</span><span class="sxs-lookup"><span data-stu-id="26a68-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="26a68-139">El primer subproceso, que es el subproceso de la aplicación, ejecuta `Main`.</span><span class="sxs-lookup"><span data-stu-id="26a68-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="26a68-140">Escribe valores en el recurso protegido, que es un `static` (`Shared` en Visual Basic) campo denominado `number`.</span><span class="sxs-lookup"><span data-stu-id="26a68-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="26a68-141">El segundo subproceso ejecuta estático `ThreadProc` método, que lee los valores escritos por `Main`.</span><span class="sxs-lookup"><span data-stu-id="26a68-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="26a68-142">El `ThreadProc` método espera a que el <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="26a68-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="26a68-143">Cuando `Main` llamadas la <xref:System.Threading.EventWaitHandle.Set%2A> método en el <xref:System.Threading.AutoResetEvent>, el `ThreadProc` método lee un valor.</span><span class="sxs-lookup"><span data-stu-id="26a68-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="26a68-144">El <xref:System.Threading.AutoResetEvent> lo restablece inmediatamente, por lo que el `ThreadProc` método espera de nuevo.</span><span class="sxs-lookup"><span data-stu-id="26a68-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="26a68-145">La lógica del programa garantiza que el `ThreadProc` método no leerá nunca el mismo valor dos veces.</span><span class="sxs-lookup"><span data-stu-id="26a68-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="26a68-146">No garantiza que el `ThreadProc` método leerá cada valor escrito por `Main`.</span><span class="sxs-lookup"><span data-stu-id="26a68-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="26a68-147">Dicha garantía requeriría un segundo <xref:System.Threading.AutoResetEvent> bloqueo.</span><span class="sxs-lookup"><span data-stu-id="26a68-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="26a68-148">Después de cada operación de escritura, `Main` produce mediante una llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método, para dar al segundo subproceso una oportunidad de ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="26a68-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="26a68-149">En caso contrario, en un equipo monoprocesador `Main` escribiría muchos valores entre las dos operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="26a68-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="26a68-150">Subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="26a68-150">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="26a68-151">Información general sobre las primitivas de sincronización</span><span class="sxs-lookup"><span data-stu-id="26a68-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26a68-152">Establece el estado del evento en no señalado, por lo que se bloquean los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="26a68-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="26a68-153"><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="26a68-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="26a68-154">Establece el estado del evento en señalado, lo que permite que uno o varios subprocesos en espera continúen.</span><span class="sxs-lookup"><span data-stu-id="26a68-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="26a68-155"><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="26a68-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="26a68-156">El método Set libera un único subproceso.</span><span class="sxs-lookup"><span data-stu-id="26a68-156">The Set method releases a single thread.</span></span> <span data-ttu-id="26a68-157">Si no hay ningún subproceso en espera, el identificador de espera permanece señalado hasta que un subproceso intenta esperar en él, o hasta que se llama a su método Reset.</span><span class="sxs-lookup"><span data-stu-id="26a68-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="26a68-158">No hay ninguna garantía de que todas las llamadas al método Set liberará un subproceso.</span><span class="sxs-lookup"><span data-stu-id="26a68-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="26a68-159">Si dos llamadas están demasiado cerca, para que la segunda llamada se produce antes de que se ha liberado un subproceso, se libera un solo subproceso - como si no se produjera la segunda llamada.</span><span class="sxs-lookup"><span data-stu-id="26a68-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="26a68-160">Además, si se llama al método Set cuando no hay ningún subproceso en espera y el <xref:System.Threading.AutoResetEvent> ya está señalizado, la llamada no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="26a68-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>