<Type Name="ThreadPoolBoundHandle" FullName="System.Threading.ThreadPoolBoundHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ca34b884e3643ec469a588354244e74c043c10ca" /><Meta Name="ms.sourcegitcommit" Value="3efce15f3841385ee3ba24bd71ff0c0cf9a47815" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/03/2019" /><Meta Name="ms.locfileid" Value="58874182" /></Metadata><TypeSignature Language="C#" Value="public sealed class ThreadPoolBoundHandle : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ThreadPoolBoundHandle extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPoolBoundHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadPoolBoundHandle&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPoolBoundHandle sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type ThreadPoolBoundHandle = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Overlapped</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netstandard-2.0">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="76855-101">Representa un identificador de E/S que se enlaza al grupo de subprocesos de sistema y permite que los componentes de bajo nivel reciban notificaciones para operaciones de E/S asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="76855-101">Represents an I/O handle that is bound to the system thread pool and enables low-level components to receive notifications for asynchronous I/O operations.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AllocateNativeOverlapped">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="76855-102">Devuelve un puntero no administrado a una estructura <see cref="T:System.Threading.NativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-102">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AllocateNativeOverlapped">
      <MemberSignature Language="C#" Value="public System.Threading.NativeOverlapped* AllocateNativeOverlapped (System.Threading.PreAllocatedOverlapped preAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.NativeOverlapped* AllocateNativeOverlapped(class System.Threading.PreAllocatedOverlapped preAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::NativeOverlapped* AllocateNativeOverlapped(System::Threading::PreAllocatedOverlapped ^ preAllocated);" />
      <MemberSignature Language="F#" Value="member this.AllocateNativeOverlapped : System.Threading.PreAllocatedOverlapped -&gt; nativeptr&lt;System.Threading.NativeOverlapped&gt;" Usage="threadPoolBoundHandle.AllocateNativeOverlapped preAllocated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.NativeOverlapped*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preAllocated" Type="System.Threading.PreAllocatedOverlapped" />
      </Parameters>
      <Docs>
        <param name="preAllocated"><span data-ttu-id="76855-103">Objeto desde el que se va a crear el puntero <see cref="T:System.Threading.NativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-103">An object from which to create the <see cref="T:System.Threading.NativeOverlapped" /> pointer.</span></span></param>
        <summary><span data-ttu-id="76855-104">Devuelve un puntero no administrado a una estructura <see cref="T:System.Threading.NativeOverlapped" /> con el estado de devolución de llamada y los búferes asociados con el objeto <see cref="T:System.Threading.PreAllocatedOverlapped" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="76855-104">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure using the callback state and buffers associated with the specified <see cref="T:System.Threading.PreAllocatedOverlapped" /> object.</span></span></summary>
        <returns><span data-ttu-id="76855-105">Puntero no administrado a una estructura <see cref="T:System.Threading.NativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-105">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76855-106">El puntero no administrado que devuelve este método puede pasarse al sistema operativo en las operaciones de E/S superpuestas.</span><span class="sxs-lookup"><span data-stu-id="76855-106">The unmanaged pointer returned by this method can be passed to the operating system in overlapped I/O operations.</span></span> <span data-ttu-id="76855-107">El <xref:System.Threading.NativeOverlapped> estructura es fija en la memoria física hasta que el <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="76855-107">The  <xref:System.Threading.NativeOverlapped> structure is fixed in physical memory until the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="preAllocated" /> <span data-ttu-id="76855-108">es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-108">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="preAllocated" /> <span data-ttu-id="76855-109">está actualmente en uso para otra operación de E/S.</span><span class="sxs-lookup"><span data-stu-id="76855-109">is currently in use for another I/O operation.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="76855-110">Se llamó a este método después de eliminar <see cref="T:System.Threading.ThreadPoolBoundHandle" />.</span><span class="sxs-lookup"><span data-stu-id="76855-110">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> was disposed.</span></span>  
  
<span data-ttu-id="76855-111">O bien</span><span class="sxs-lookup"><span data-stu-id="76855-111">-or-</span></span> 
<span data-ttu-id="76855-112">Se llamó a este método después de eliminar <paramref name="preAllocated" />.</span><span class="sxs-lookup"><span data-stu-id="76855-112">This method was called after <paramref name="preAllocated" /> was disposed.</span></span></exception>
        <altmember cref="T:System.Threading.PreAllocatedOverlapped" />
      </Docs>
    </Member>
    <Member MemberName="AllocateNativeOverlapped">
      <MemberSignature Language="C#" Value="public System.Threading.NativeOverlapped* AllocateNativeOverlapped (System.Threading.IOCompletionCallback callback, object state, object pinData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.NativeOverlapped* AllocateNativeOverlapped(class System.Threading.IOCompletionCallback callback, object state, object pinData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::NativeOverlapped* AllocateNativeOverlapped(System::Threading::IOCompletionCallback ^ callback, System::Object ^ state, System::Object ^ pinData);" />
      <MemberSignature Language="F#" Value="member this.AllocateNativeOverlapped : System.Threading.IOCompletionCallback * obj * obj -&gt; nativeptr&lt;System.Threading.NativeOverlapped&gt;" Usage="threadPoolBoundHandle.AllocateNativeOverlapped (callback, state, pinData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.NativeOverlapped*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.IOCompletionCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="pinData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="76855-113">Delegado que representa el método de devolución de llamada que se invoca cuando se completa la operación de E/S asincrónica.</span><span class="sxs-lookup"><span data-stu-id="76855-113">A delegate that represents the callback method to invoke when the asynchronous I/O operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="76855-114">Objeto proporcionado por el usuario que distingue esta instancia de <see cref="T:System.Threading.NativeOverlapped" /> de otras instancias de <see cref="T:System.Threading.NativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-114">A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" /> instance from other <see cref="T:System.Threading.NativeOverlapped" /> instances.</span></span></param>
        <param name="pinData"><span data-ttu-id="76855-115">Objeto o una matriz de objetos que representan el búfer de entrada o salida para la operación, o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-115">An object or array of objects that represent the input or output buffer for the operation, or <see langword="null" />.</span></span> <span data-ttu-id="76855-116">Cada objeto representa un búfer, como una matriz de bytes.</span><span class="sxs-lookup"><span data-stu-id="76855-116">Each object represents a buffer, such an array of bytes.</span></span></param>
        <summary><span data-ttu-id="76855-117">Devuelve un puntero no administrado a una estructura <see cref="T:System.Threading.NativeOverlapped" />, especificando un delegado que se invoca una vez completada la operación de E/S asincrónica, un objeto proporcionado por el usuario que proporciona contexto y los objetos administrados que actúan como búferes.</span><span class="sxs-lookup"><span data-stu-id="76855-117">Returns an unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure, specifying a delegate that is invoked when the asynchronous I/O operation is complete, a user-provided object that supplies context, and managed objects that serve as buffers.</span></span></summary>
        <returns><span data-ttu-id="76855-118">Puntero no administrado a una estructura <see cref="T:System.Threading.NativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-118">An unmanaged pointer to a <see cref="T:System.Threading.NativeOverlapped" /> structure.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> <span data-ttu-id="76855-119">es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-119">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="76855-120">Se llamó a este método después de haber eliminado el objeto <see cref="T:System.Threading.ThreadPoolBoundHandle" />.</span><span class="sxs-lookup"><span data-stu-id="76855-120">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> object was disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static System.Threading.ThreadPoolBoundHandle BindHandle (System.Runtime.InteropServices.SafeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.ThreadPoolBoundHandle BindHandle(class System.Runtime.InteropServices.SafeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (handle As SafeHandle) As ThreadPoolBoundHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ThreadPoolBoundHandle ^ BindHandle(System::Runtime::InteropServices::SafeHandle ^ handle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; System.Threading.ThreadPoolBoundHandle" Usage="System.Threading.ThreadPoolBoundHandle.BindHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPoolBoundHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="76855-121">Objeto que contiene el identificador del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="76855-121">An object that holds the operating system handle.</span></span> <span data-ttu-id="76855-122">El identificador debe haberse abierto para la E/S superpuesta en el código no administrado.</span><span class="sxs-lookup"><span data-stu-id="76855-122">The handle must have been opened for overlapped I/O in unmanaged code.</span></span></param>
        <summary><span data-ttu-id="76855-123">Devuelve <see cref="T:System.Threading.ThreadPoolBoundHandle" /> para el identificador especificado, que está enlazado al grupo de subprocesos del sistema.</span><span class="sxs-lookup"><span data-stu-id="76855-123">Returns a <see cref="T:System.Threading.ThreadPoolBoundHandle" /> for the specified handle, which is bound to the system thread pool.</span></span></summary>
        <returns><span data-ttu-id="76855-124"><see cref="T:System.Threading.ThreadPoolBoundHandle" /> para <paramref name="handle" />, que está enlazado al grupo de subprocesos del sistema.</span><span class="sxs-lookup"><span data-stu-id="76855-124">A <see cref="T:System.Threading.ThreadPoolBoundHandle" /> for <paramref name="handle" />, which is bound to the system thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76855-125">Este método debe llamarse una vez por cada controlador.</span><span class="sxs-lookup"><span data-stu-id="76855-125">This method should be called once per handle.</span></span>  
  
 <span data-ttu-id="76855-126">El <xref:System.Threading.ThreadPoolBoundHandle> objeto no tomar posesión de `handle`; sigue siendo la responsabilidad del llamador para llamar a <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="76855-126">The <xref:System.Threading.ThreadPoolBoundHandle> object does not take ownership of `handle`; it remains the responsibility of the caller to call <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" /> <span data-ttu-id="76855-127">es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-127">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><paramref name="handle" /> <span data-ttu-id="76855-128">se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="76855-128">has been disposed.</span></span>  
  
<span data-ttu-id="76855-129">O bien</span><span class="sxs-lookup"><span data-stu-id="76855-129">-or-</span></span> 
 <paramref name="handle" /> <span data-ttu-id="76855-130">no hace referencia a un identificador válido de E/S.</span><span class="sxs-lookup"><span data-stu-id="76855-130">does not refer to a valid I/O handle.</span></span>  
  
<span data-ttu-id="76855-131">O bien</span><span class="sxs-lookup"><span data-stu-id="76855-131">-or-</span></span> 
 <paramref name="handle" /> <span data-ttu-id="76855-132">hace referencia a un identificador que no se ha abierto para la E/S superpuesta.</span><span class="sxs-lookup"><span data-stu-id="76855-132">refers to a handle that has not been opened for overlapped I/O.</span></span>  
  
<span data-ttu-id="76855-133">O bien</span><span class="sxs-lookup"><span data-stu-id="76855-133">-or-</span></span> 
 <paramref name="handle" /> <span data-ttu-id="76855-134">hace referencia a un identificador que ya se ha enlazado.</span><span class="sxs-lookup"><span data-stu-id="76855-134">refers to a handle that has already been bound.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="threadPoolBoundHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="76855-135">Libera todos los recursos no administrados que usa la instancia de <see cref="T:System.Threading.ThreadPoolBoundHandle" />.</span><span class="sxs-lookup"><span data-stu-id="76855-135">Releases all unmanaged resources used by the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNativeOverlapped">
      <MemberSignature Language="C#" Value="public void FreeNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FreeNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FreeNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="member this.FreeNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; unit" Usage="threadPoolBoundHandle.FreeNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped"><span data-ttu-id="76855-136">Puntero no administrado a la estructura <see cref="T:System.Threading.NativeOverlapped" /> que se va a liberar.</span><span class="sxs-lookup"><span data-stu-id="76855-136">An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure to be freed.</span></span></param>
        <summary><span data-ttu-id="76855-137">Libera la memoria asociada con una estructura <see cref="T:System.Threading.NativeOverlapped" /> asignada por el método <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-137">Frees the memory associated with a <see cref="T:System.Threading.NativeOverlapped" /> structure allocated by the <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="76855-138">Debe llamar a la <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> método exactamente una vez en cada <xref:System.Threading.NativeOverlapped> puntero no administrado que se asigna por medio del <xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A> método.</span><span class="sxs-lookup"><span data-stu-id="76855-138">You must call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method exactly once on every <xref:System.Threading.NativeOverlapped> unmanaged pointer allocated by using the <xref:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped%2A> method.</span></span> <span data-ttu-id="76855-139">Si no se llama el <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> método, se producirán una pérdida de memoria.</span><span class="sxs-lookup"><span data-stu-id="76855-139">If you do not call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method, you will leak memory.</span></span> <span data-ttu-id="76855-140">Si se llama a la <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> más de una vez en el mismo método <xref:System.Threading.NativeOverlapped> puntero no administrado, se dañará la memoria.</span><span class="sxs-lookup"><span data-stu-id="76855-140">If you call the <xref:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped%2A> method more than once on the same <xref:System.Threading.NativeOverlapped> unmanaged pointer, memory will be corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="overlapped" /> <span data-ttu-id="76855-141">es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-141">is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="76855-142">Se llamó a este método después de haber eliminado el objeto <see cref="T:System.Threading.ThreadPoolBoundHandle" />.</span><span class="sxs-lookup"><span data-stu-id="76855-142">This method was called after the <see cref="T:System.Threading.ThreadPoolBoundHandle" /> object was disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNativeOverlappedState">
      <MemberSignature Language="C#" Value="public static object GetNativeOverlappedState (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetNativeOverlappedState(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetNativeOverlappedState(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member GetNativeOverlappedState : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; obj" Usage="System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped"><span data-ttu-id="76855-143">Puntero no administrado a la estructura <see cref="T:System.Threading.NativeOverlapped" /> desde la que se va a devolver el objeto proporcionado por el usuario asociado.</span><span class="sxs-lookup"><span data-stu-id="76855-143">An unmanaged pointer to the <see cref="T:System.Threading.NativeOverlapped" /> structure from which to return the associated user-provided object.</span></span></param>
        <summary><span data-ttu-id="76855-144">Devuelve el objeto proporcionado por el usuario que se especificó cuando la instancia de <see cref="T:System.Threading.NativeOverlapped" /> se asignó mediante una llamada al método <see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="76855-144">Returns the user-provided object that was specified when the <see cref="T:System.Threading.NativeOverlapped" /> instance was allocated by calling the <see cref="M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="76855-145">Objeto proporcionado por el usuario que distingue esta instancia de <see cref="T:System.Threading.NativeOverlapped" /> de otras instancias de <see cref="T:System.Threading.NativeOverlapped" />, o bien <see langword="null" /> si no se ha especificado cuando la instancia se asignó mediante una llamada al método <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" />.</span><span class="sxs-lookup"><span data-stu-id="76855-145">A user-provided object that distinguishes this <see cref="T:System.Threading.NativeOverlapped" /> instance from other <see cref="T:System.Threading.NativeOverlapped" /> instances, or <see langword="null" /> if one was not specified when the instance was allocated by calling the <see cref="Overload:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped" /> method.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="overlapped" /> <span data-ttu-id="76855-146">es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="76855-146">is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.SafeHandle Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.SafeHandle Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadPoolBoundHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As SafeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::SafeHandle ^ Handle { System::Runtime::InteropServices::SafeHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : System.Runtime.InteropServices.SafeHandle" Usage="System.Threading.ThreadPoolBoundHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Overlapped</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="76855-147">Obtiene el identificador de sistema operativo enlazado.</span><span class="sxs-lookup"><span data-stu-id="76855-147">Gets the bound operating system handle.</span></span></summary>
        <value><span data-ttu-id="76855-148">Objeto que contiene el identificador de sistema de operativo enlazado.</span><span class="sxs-lookup"><span data-stu-id="76855-148">An object that holds the bound operating system handle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>