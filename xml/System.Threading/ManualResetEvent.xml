<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50280627a764fdaf9fec13f62e5e70616ce14337" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58712663" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="05dc0-101">Representa un evento de sincronización de subprocesos que, cuando se señale, se debe restablecer manualmente.</span><span class="sxs-lookup"><span data-stu-id="05dc0-101">Represents a thread synchronization event that, when signaled, must be reset manually.</span></span> <span data-ttu-id="05dc0-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="05dc0-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="05dc0-103">Usa `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, y <xref:System.Threading.EventWaitHandle> para la interacción de los subprocesos (o señalización de subproceso).</span><span class="sxs-lookup"><span data-stu-id="05dc0-103">You use `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="05dc0-104">Para obtener más información, consulte el [subprocesos interacción o señalización](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sección de la [información general de las primitivas de sincronización](~/docs/standard/threading/overview-of-synchronization-primitives.md) artículo.</span><span class="sxs-lookup"><span data-stu-id="05dc0-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  

 <span data-ttu-id="05dc0-105">Cuando un subproceso comienza una actividad que debe completar antes que otras puedan continuar subprocesos, llama a [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) poner `ManualResetEvent` en el estado no señalado.</span><span class="sxs-lookup"><span data-stu-id="05dc0-105">When a thread begins an activity that must complete before other threads proceed, it calls [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="05dc0-106">Este subproceso puede considerarse como controlar el `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="05dc0-106">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="05dc0-107">Subprocesos que llaman a [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloque, en espera de la señal.</span><span class="sxs-lookup"><span data-stu-id="05dc0-107">Threads that call [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) block, awaiting the signal.</span></span> <span data-ttu-id="05dc0-108">Cuando el subproceso de control completa la actividad, llama a [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) para indicar que los subprocesos en espera pueden continuar.</span><span class="sxs-lookup"><span data-stu-id="05dc0-108">When the controlling thread completes the activity, it calls [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="05dc0-109">Se liberan todos los subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="05dc0-109">All waiting threads are released.</span></span>  

 <span data-ttu-id="05dc0-110">Una vez que se ha señalado, `ManualResetEvent` permanece señalado hasta que se restablezca manualmente mediante una llamada a la <xref:System.Threading.EventWaitHandle.Reset> método.</span><span class="sxs-lookup"><span data-stu-id="05dc0-110">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset by calling the <xref:System.Threading.EventWaitHandle.Reset> method.</span></span> <span data-ttu-id="05dc0-111">Es decir, las llamadas a <xref:System.Threading.WaitHandle.WaitOne%2A> devolver inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="05dc0-111">That is, calls to <xref:System.Threading.WaitHandle.WaitOne%2A> return immediately.</span></span>  

 <span data-ttu-id="05dc0-112">Puede controlar el estado inicial de un `ManualResetEvent` pasando un valor booleano al constructor: `true` si se señala el estado inicial, y `false` en caso contrario.</span><span class="sxs-lookup"><span data-stu-id="05dc0-112">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled, and `false` otherwise.</span></span>  
 
 <span data-ttu-id="05dc0-113">`ManualResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="05dc0-113">`ManualResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="05dc0-114">A partir de .NET Framework versión 2.0, <xref:System.Threading.ManualResetEvent> deriva la <xref:System.Threading.EventWaitHandle> clase.</span><span class="sxs-lookup"><span data-stu-id="05dc0-114">Beginning with the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="05dc0-115">Un <xref:System.Threading.ManualResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="05dc0-115">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="05dc0-116">A diferencia de la <xref:System.Threading.ManualResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.</span><span class="sxs-lookup"><span data-stu-id="05dc0-116">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  

 <span data-ttu-id="05dc0-117">A partir de .NET Framework versión 4.0, el <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> clase es una alternativa ligera a <xref:System.Threading.ManualResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="05dc0-117">Beginning with the .NET Framework version 4.0, the <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> class is a lightweight alternative to <xref:System.Threading.ManualResetEvent>.</span></span>    
   
   
  
## Examples  
 <span data-ttu-id="05dc0-118">En el ejemplo siguiente se muestra cómo <xref:System.Threading.ManualResetEvent> funciona.</span><span class="sxs-lookup"><span data-stu-id="05dc0-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="05dc0-119">El ejemplo se inicia con un <xref:System.Threading.ManualResetEvent> en el estado no señalizado (es decir, `false` se pasa al constructor).</span><span class="sxs-lookup"><span data-stu-id="05dc0-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="05dc0-120">El ejemplo crea tres subprocesos, cada uno de los bloques de la <xref:System.Threading.ManualResetEvent> mediante una llamada a su <xref:System.Threading.WaitHandle.WaitOne%2A> método.</span><span class="sxs-lookup"><span data-stu-id="05dc0-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="05dc0-121">Cuando el usuario presiona el **ENTRAR** clave, el ejemplo llama a la <xref:System.Threading.EventWaitHandle.Set%2A> método, lo que libera todos los subprocesos de tres.</span><span class="sxs-lookup"><span data-stu-id="05dc0-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="05dc0-122">Compare esto con el comportamiento de la <xref:System.Threading.AutoResetEvent> (clase), lo que libera uno de los subprocesos a la vez, restablecer automáticamente después de cada versión.</span><span class="sxs-lookup"><span data-stu-id="05dc0-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="05dc0-123">Al presionar el **ENTRAR** clave nuevo muestra que el <xref:System.Threading.ManualResetEvent> permanece en el estado señalado hasta que su <xref:System.Threading.EventWaitHandle.Reset%2A> se llama al método: El ejemplo inicia dos subprocesos más.</span><span class="sxs-lookup"><span data-stu-id="05dc0-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="05dc0-124">Estos subprocesos no se bloquean cuando llama a la <xref:System.Threading.WaitHandle.WaitOne%2A> método, sino que se ejecuten hasta su finalización.</span><span class="sxs-lookup"><span data-stu-id="05dc0-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="05dc0-125">Al presionar el **ENTRAR** clave que provoca el ejemplo para llamar a la <xref:System.Threading.EventWaitHandle.Reset%2A> método e iniciar otro subproceso, que se bloquea cuando llama a <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="05dc0-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="05dc0-126">Al presionar el **ENTRAR** clave uno llama a la última vez <xref:System.Threading.EventWaitHandle.Set%2A> liberar el último subproceso y el programa finaliza.</span><span class="sxs-lookup"><span data-stu-id="05dc0-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="05dc0-127">Esta clase es segura para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="05dc0-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="05dc0-128">Subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="05dc0-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="05dc0-129">Información general sobre las primitivas de sincronización</span><span class="sxs-lookup"><span data-stu-id="05dc0-129">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="05dc0-130"><see langword="true" /> para establecer el estado inicial de señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</span><span class="sxs-lookup"><span data-stu-id="05dc0-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="05dc0-131">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ManualResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</span><span class="sxs-lookup"><span data-stu-id="05dc0-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="05dc0-132">Si el estado inicial de un <xref:System.Threading.ManualResetEvent> se señaliza (es decir, si se crea pasando `true` para `initialState`), subprocesos que esperan en la <xref:System.Threading.ManualResetEvent> no se bloquean.</span><span class="sxs-lookup"><span data-stu-id="05dc0-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="05dc0-133">Si el estado inicial es no señalado, los subprocesos se bloquean hasta que el <xref:System.Threading.EventWaitHandle.Set%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="05dc0-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="05dc0-134">Subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="05dc0-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="05dc0-135">Información general sobre las primitivas de sincronización</span><span class="sxs-lookup"><span data-stu-id="05dc0-135">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05dc0-136">Establece el estado del evento en no señalado, por lo que se bloquean los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="05dc0-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="05dc0-137"><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="05dc0-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="05dc0-138">Establece el estado del evento en señalado, lo que permite que uno o varios subprocesos en espera continúen.</span><span class="sxs-lookup"><span data-stu-id="05dc0-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="05dc0-139"><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="05dc0-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="05dc0-140">Una llamada al método Set deja el identificador de espera en un estado señalado hasta que el <xref:System.Threading.ManualResetEvent.Reset> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="05dc0-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>