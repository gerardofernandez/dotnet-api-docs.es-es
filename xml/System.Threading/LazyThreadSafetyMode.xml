<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46646687" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="cecdd-101">Especifica cómo una instancia <see cref="T:System.Lazy`1" /> sincroniza el acceso entre varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cecdd-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cecdd-102">Utilice esta enumeración para especificar el `mode` parámetro de <xref:System.Lazy%601> constructores.</span><span class="sxs-lookup"><span data-stu-id="cecdd-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="cecdd-103">Los efectos de todos los constructores en sincronización de subprocesos se pueden describir en términos de esta enumeración, tengan o no `mode` parámetros.</span><span class="sxs-lookup"><span data-stu-id="cecdd-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="cecdd-104">Un <xref:System.Lazy%601> instancia se inicializa mediante un método de inicialización especificado por el usuario o mediante el constructor predeterminado para `T`.</span><span class="sxs-lookup"><span data-stu-id="cecdd-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="cecdd-105">El método de inicialización especificado por el `valueFactory` parámetro de un <xref:System.Lazy%601> constructor.</span><span class="sxs-lookup"><span data-stu-id="cecdd-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="cecdd-106">El método devuelve una instancia de `T`, que es el tipo que se crea una instancia por la instancia de forma diferida <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="cecdd-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="cecdd-107">Si no tiene un constructor un `valueFactory` parámetro, el constructor predeterminado para `T` se usa para inicializar el <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cecdd-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="cecdd-108">En cualquier caso, la inicialización se produce la primera vez que llama el <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cecdd-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="cecdd-109">Además de especificar la seguridad para subprocesos de un <xref:System.Lazy%601> instancia, esta enumeración afecta a la excepción de almacenamiento en caché.</span><span class="sxs-lookup"><span data-stu-id="cecdd-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="cecdd-110">Cuando las excepciones se almacenan en caché para un <xref:System.Lazy%601> instancia, recibirá solo una oportunidad de inicializar la instancia.</span><span class="sxs-lookup"><span data-stu-id="cecdd-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="cecdd-111">Si se produce una excepción la primera vez que se llama a la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad que excepción se almacena en caché y vuelve a iniciar en todas las llamadas posteriores a la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cecdd-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cecdd-112">La ventaja de almacenamiento en caché de excepciones es que los dos subprocesos siempre obtención el mismo resultado, incluso cuando se producen errores.</span><span class="sxs-lookup"><span data-stu-id="cecdd-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="cecdd-113">Cuando se especifica el modo PublicationOnly, nunca se almacenan en caché de excepciones.</span><span class="sxs-lookup"><span data-stu-id="cecdd-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="cecdd-114">Cuando se especifica ninguno o ExecutionAndPublication, almacenamiento en caché depende de si se especifica un método de inicialización o permitir que el constructor predeterminado para `T` para usarse.</span><span class="sxs-lookup"><span data-stu-id="cecdd-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="cecdd-115">Al especificar un método de inicialización, se permite el almacenamiento en caché de excepciones para estos dos modos.</span><span class="sxs-lookup"><span data-stu-id="cecdd-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="cecdd-116">El método de inicialización puede ser muy simple.</span><span class="sxs-lookup"><span data-stu-id="cecdd-116">The initialization method can be very simple.</span></span> <span data-ttu-id="cecdd-117">Por ejemplo, podría llamar al constructor predeterminado para `T`: `new Lazy<Contents>(() => new Contents(), mode)` en C#, o `New Lazy(Of Contents)(Function() New Contents())` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="cecdd-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="cecdd-118">Si utiliza un constructor que no especifica un método de inicialización, las excepciones producidas por el constructor predeterminado para `T` no se almacenan en caché.</span><span class="sxs-lookup"><span data-stu-id="cecdd-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="cecdd-119">La siguiente tabla resume el comportamiento de almacenamiento en caché de excepciones.</span><span class="sxs-lookup"><span data-stu-id="cecdd-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="cecdd-120">Modo</span><span class="sxs-lookup"><span data-stu-id="cecdd-120">Mode</span></span>|<span data-ttu-id="cecdd-121">Mediante el método de inicialización</span><span class="sxs-lookup"><span data-stu-id="cecdd-121">Using initialization method</span></span>|<span data-ttu-id="cecdd-122">Utilizando el constructor predeterminado para `T`</span><span class="sxs-lookup"><span data-stu-id="cecdd-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="cecdd-123">None</span><span class="sxs-lookup"><span data-stu-id="cecdd-123">None</span></span>|<span data-ttu-id="cecdd-124">En caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-124">Cached</span></span>|<span data-ttu-id="cecdd-125">No almacenar en caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-125">Not cached</span></span>|  
|<span data-ttu-id="cecdd-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="cecdd-126">PublicationOnly</span></span>|<span data-ttu-id="cecdd-127">No almacenar en caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-127">Not cached</span></span>|<span data-ttu-id="cecdd-128">No almacenar en caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-128">Not cached</span></span>|  
|<span data-ttu-id="cecdd-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="cecdd-129">ExecutionAndPublication</span></span>|<span data-ttu-id="cecdd-130">En caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-130">Cached</span></span>|<span data-ttu-id="cecdd-131">No almacenar en caché</span><span class="sxs-lookup"><span data-stu-id="cecdd-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md"><span data-ttu-id="cecdd-132">Inicialización diferida</span><span class="sxs-lookup"><span data-stu-id="cecdd-132">Lazy Initialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="cecdd-133">Los bloqueos se usan para garantizar que solo un subproceso pueda inicializar una instancia <see cref="T:System.Lazy`1" /> de manera segura para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cecdd-133">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span></span> <span data-ttu-id="cecdd-134">Si el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización) usa los bloqueos internamente, pueden producirse interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="cecdd-134">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span></span> <span data-ttu-id="cecdd-135">Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y si ese método de inicialización inicia una excepción (o no puede controlar una excepción) la primera vez que se llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se vuelve a iniciar en las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-135">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="cecdd-136">Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica un método de inicialización, las excepciones que inicie el constructor predeterminado para <paramref name="T" /> no se almacenarán en caché.</span><span class="sxs-lookup"><span data-stu-id="cecdd-136">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="cecdd-137">En ese caso, una llamada posterior a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-137">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="cecdd-138">Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se inicia una <see cref="T:System.InvalidOperationException" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-138">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="cecdd-139">La instancia <see cref="T:System.Lazy`1" /> no es segura para subprocesos; si se accede a la instancia desde varios subprocesos, su comportamiento está sin definir.</span><span class="sxs-lookup"><span data-stu-id="cecdd-139">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span></span> <span data-ttu-id="cecdd-140">Use este modo solo si es indispensable un rendimiento alto y si se garantiza que la instancia <see cref="T:System.Lazy`1" /> nunca se inicializará desde más de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="cecdd-140">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span></span> <span data-ttu-id="cecdd-141">Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y si ese método de inicialización inicia una excepción (o no puede controlar una excepción) la primera vez que se llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se vuelve a iniciar en las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-141">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span></span> <span data-ttu-id="cecdd-142">Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica un método de inicialización, las excepciones que inicie el constructor predeterminado para <paramref name="T" /> no se almacenarán en caché.</span><span class="sxs-lookup"><span data-stu-id="cecdd-142">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span></span> <span data-ttu-id="cecdd-143">En ese caso, una llamada posterior a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-143">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="cecdd-144">Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se inicia una <see cref="T:System.InvalidOperationException" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-144">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="cecdd-145">Si varios subprocesos intentan inicializar una instancia <see cref="T:System.Lazy`1" /> simultáneamente, se permite a todos los subprocesos ejecutar el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización).</span><span class="sxs-lookup"><span data-stu-id="cecdd-145">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span></span> <span data-ttu-id="cecdd-146">El primer subproceso en completar la inicialización establece el valor de la instancia <see cref="T:System.Lazy`1" />.</span><span class="sxs-lookup"><span data-stu-id="cecdd-146">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span></span> <span data-ttu-id="cecdd-147">Dicho valor se devuelve a todos los demás subprocesos que estaban ejecutando simultáneamente el método de inicialización, a menos que el método de inicialización inicie excepciones en esos subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cecdd-147">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span></span> <span data-ttu-id="cecdd-148">Todas las instancias de <paramref name="T" /> creadas por los subprocesos competidores se descartan.</span><span class="sxs-lookup"><span data-stu-id="cecdd-148">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span></span> <span data-ttu-id="cecdd-149">Si el método de inicialización inicia una excepción en cualquier subproceso, la excepción se propaga fuera de la propiedad <see cref="P:System.Lazy`1.Value" /> en ese subproceso.</span><span class="sxs-lookup"><span data-stu-id="cecdd-149">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span></span> <span data-ttu-id="cecdd-150">La excepción no se almacena en caché.</span><span class="sxs-lookup"><span data-stu-id="cecdd-150">The exception is not cached.</span></span> <span data-ttu-id="cecdd-151">El valor de la propiedad <see cref="P:System.Lazy`1.IsValueCreated" /> permanece <see langword="false" /> y las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />, ya sean del subproceso donde se inició la excepción o de otros subprocesos, harán que el método de inicialización se ejecute de nuevo.</span><span class="sxs-lookup"><span data-stu-id="cecdd-151">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span></span> <span data-ttu-id="cecdd-152">Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, no se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="cecdd-152">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>