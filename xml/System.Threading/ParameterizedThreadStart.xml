<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48762357" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="f1457-101">Objeto que contiene datos para el procedimiento de subproceso.</span><span class="sxs-lookup"><span data-stu-id="f1457-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="f1457-102">Representa el método que se ejecuta en <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="f1457-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1457-103">Cuando se crea un subproceso administrado, el método que se ejecuta en el subproceso está representado por:</span><span class="sxs-lookup"><span data-stu-id="f1457-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="f1457-104">Un <xref:System.Threading.ThreadStart> delegado que se pasa a la <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span><span class="sxs-lookup"><span data-stu-id="f1457-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="f1457-105">Cualquier método que no tiene parámetros y devuelve `void` en C# o es una `Sub` procedimiento en Visual Basic puede representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="f1457-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="f1457-106">Un <xref:System.Threading.ParameterizedThreadStart> delegado que se pasa a la <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span><span class="sxs-lookup"><span data-stu-id="f1457-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="f1457-107">Cualquier método que tiene un único parámetro de tipo <xref:System.Object> y que devuelve void en C# o es un procedimiento Sub en Visual Basic puede representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="f1457-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="f1457-108">El subproceso no comienza a ejecutarse hasta que el <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="f1457-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="f1457-109">El <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> delegado se invoca en el subproceso y comienza la ejecución en la primera línea del método representado por el delegado.</span><span class="sxs-lookup"><span data-stu-id="f1457-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="f1457-110">En el caso de los <xref:System.Threading.ParameterizedThreadStart> delegado, el objeto que se pasa a la <xref:System.Threading.Thread.Start%28System.Object%29> método se pasa al delegado.</span><span class="sxs-lookup"><span data-stu-id="f1457-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f1457-111">Los usuarios de Visual Basic y C# pueden omitir el <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> constructor de delegado al crear un subproceso.</span><span class="sxs-lookup"><span data-stu-id="f1457-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="f1457-112">En Visual Basic, utilice el `AddressOf` operador al pasar el método para el <xref:System.Threading.Thread.%23ctor%2A> constructor; por ejemplo, `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="f1457-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="f1457-113">En C#, simplemente especifique el nombre del procedimiento de subproceso.</span><span class="sxs-lookup"><span data-stu-id="f1457-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="f1457-114">El compilador selecciona el constructor de delegado correcto.</span><span class="sxs-lookup"><span data-stu-id="f1457-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f1457-115">Cuando creas un <xref:System.Threading.ParameterizedThreadStart> delegado para un método de instancia en C++, el primer parámetro del constructor es la variable de instancia.</span><span class="sxs-lookup"><span data-stu-id="f1457-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="f1457-116">Un método estático, el primer parámetro del constructor es cero.</span><span class="sxs-lookup"><span data-stu-id="f1457-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="f1457-117">Para un método estático, el constructor delegado solo requiere un parámetro: la dirección del método de devolución de llamada, calificado con el nombre de clase.</span><span class="sxs-lookup"><span data-stu-id="f1457-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="f1457-118">El <xref:System.Threading.ParameterizedThreadStart> delegar y <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> sobrecarga del método facilitan la tarea pasar datos a un procedimiento de subproceso, pero esta técnica no tiene seguridad de tipos porque cualquier objeto puede pasarse a <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f1457-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f1457-119">Es una manera más sólida para pasar datos a un procedimiento de subproceso poner el procedimiento de subproceso y los campos de datos en un objeto de trabajo.</span><span class="sxs-lookup"><span data-stu-id="f1457-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="f1457-120">Para obtener más información, consulte [crear subprocesos y pasar datos en tiempo de inicio](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="f1457-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="f1457-121">El <xref:System.Threading.ParameterizedThreadStart> delegado es compatible con un solo parámetro.</span><span class="sxs-lookup"><span data-stu-id="f1457-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="f1457-122">Puede pasar varios elementos de datos a la <xref:System.Threading.ParameterizedThreadStart> mediante la realización de ese parámetro uno de los siguientes:</span><span class="sxs-lookup"><span data-stu-id="f1457-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="f1457-123">Matriz.</span><span class="sxs-lookup"><span data-stu-id="f1457-123">An array.</span></span>  
  
-   <span data-ttu-id="f1457-124">Un tipo de colección, si todos los elementos de datos son del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="f1457-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="f1457-125">Escriba una tupla, como <xref:System.Tuple%602> o <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="f1457-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1457-126">El siguiente ejemplo de código utiliza un <xref:System.Threading.ParameterizedThreadStart> delegado para ejecutar un método estático y un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="f1457-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="f1457-127">La primera <xref:System.Threading.ParameterizedThreadStart> delegado representado por estático `DoWork` método y el segundo es representado por la instancia `DoMoreWork` método.</span><span class="sxs-lookup"><span data-stu-id="f1457-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="f1457-128">Coincide con ambos métodos el <xref:System.Threading.ParameterizedThreadStart> firma de delegado; es decir, tienen un único parámetro de tipo <xref:System.Object> y no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="f1457-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f1457-129">Inferir los compiladores de Visual Basic y C# la <xref:System.Threading.ParameterizedThreadStart> delegar de las firmas de los `DoWork` y `DoMoreWork` métodos y la llamada al constructor correcto.</span><span class="sxs-lookup"><span data-stu-id="f1457-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="f1457-130">Por lo tanto, no hay ninguna llamada de constructor explícito en el código.</span><span class="sxs-lookup"><span data-stu-id="f1457-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="f1457-131">Crear subprocesos</span><span class="sxs-lookup"><span data-stu-id="f1457-131">Creating Threads</span></span></related>
  </Docs>
</Type>