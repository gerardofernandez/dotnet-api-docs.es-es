<Type Name="WaitHandle" FullName="System.Threading.WaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="046aa46d0a3da304f9348792a16e1353c5fa4596" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56403036" /></Metadata><TypeSignature Language="C#" Value="public abstract class WaitHandle : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit WaitHandle extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WaitHandle&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WaitHandle abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type WaitHandle = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="53a31-101">Encapsula los objetos específicos del sistema operativo que esperan obtener un acceso exclusivo a los recursos compartidos.</span><span class="sxs-lookup"><span data-stu-id="53a31-101">Encapsulates operating system-specific objects that wait for exclusive access to shared resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-102">La <xref:System.Threading.WaitHandle> clase encapsula un identificador de la sincronización del sistema operativo nativo y se utiliza para representar todos los objetos de sincronización en el tiempo de ejecución que permiten varias operaciones de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-102">The <xref:System.Threading.WaitHandle> class encapsulates a native operating system synchronization handle and is used to represent all synchronization objects in the runtime that allow multiple wait operations.</span></span> <span data-ttu-id="53a31-103">Para obtener una comparación de identificadores de espera con otros objetos de sincronización, consulte [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-103">For a comparison of wait handles with other synchronization objects, see [Overview of Synchronization Primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md).</span></span>  
  
 <span data-ttu-id="53a31-104">El <xref:System.Threading.WaitHandle> propia clase es abstracta.</span><span class="sxs-lookup"><span data-stu-id="53a31-104">The <xref:System.Threading.WaitHandle> class itself is abstract.</span></span> <span data-ttu-id="53a31-105">Las clases derivadas de <xref:System.Threading.WaitHandle> definen un mecanismo de señalización para indicar que están tomando o liberando el acceso a un recurso compartido, pero usan el heredado <xref:System.Threading.WaitHandle> métodos para bloquear mientras se espera para el acceso a recursos comparten.</span><span class="sxs-lookup"><span data-stu-id="53a31-105">Classes derived from <xref:System.Threading.WaitHandle> define a signaling mechanism to indicate taking or releasing access to a shared resource, but they use the inherited <xref:System.Threading.WaitHandle> methods to block while waiting for access to shared resources.</span></span> <span data-ttu-id="53a31-106">Las clases derivadas de <xref:System.Threading.WaitHandle> incluyen:</span><span class="sxs-lookup"><span data-stu-id="53a31-106">The classes derived from <xref:System.Threading.WaitHandle> include:</span></span>  
  
-   <span data-ttu-id="53a31-107">La clase <xref:System.Threading.Mutex>.</span><span class="sxs-lookup"><span data-stu-id="53a31-107">The <xref:System.Threading.Mutex> class.</span></span> <span data-ttu-id="53a31-108">Consulte [exclusiones mutuas](~/docs/standard/threading/mutexes.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-108">See [Mutexes](~/docs/standard/threading/mutexes.md).</span></span>  
  
-   <span data-ttu-id="53a31-109">El <xref:System.Threading.EventWaitHandle> clase y sus clases derivadas, <xref:System.Threading.AutoResetEvent> y <xref:System.Threading.ManualResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="53a31-109">The <xref:System.Threading.EventWaitHandle> class and its derived classes, <xref:System.Threading.AutoResetEvent> and <xref:System.Threading.ManualResetEvent>.</span></span>  
  
-   <span data-ttu-id="53a31-110">La clase <xref:System.Threading.Semaphore>.</span><span class="sxs-lookup"><span data-stu-id="53a31-110">The <xref:System.Threading.Semaphore> class.</span></span> <span data-ttu-id="53a31-111">Consulte [Semaphore y SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-111">See [Semaphore and SemaphoreSlim](~/docs/standard/threading/semaphore-and-semaphoreslim.md).</span></span>  
  
 <span data-ttu-id="53a31-112">Los subprocesos pueden bloquear en un identificador de espera individuales llamando al método de instancia <xref:System.Threading.WaitHandle.WaitOne%2A>, que es heredado por las clases derivadas de <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="53a31-112">Threads can block on an individual wait handle by calling the instance method <xref:System.Threading.WaitHandle.WaitOne%2A>, which is inherited by classes derived from <xref:System.Threading.WaitHandle>.</span></span>  
  
 <span data-ttu-id="53a31-113">Las clases derivadas de <xref:System.Threading.WaitHandle> difieren en su afinidad de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="53a31-113">The derived classes of <xref:System.Threading.WaitHandle> differ in their thread affinity.</span></span> <span data-ttu-id="53a31-114">Identificadores de espera de evento (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, y <xref:System.Threading.ManualResetEvent>) y los semáforos no tienen afinidad de subprocesos; en cualquier subproceso puede señalar un semáforo o un identificador de espera de evento.</span><span class="sxs-lookup"><span data-stu-id="53a31-114">Event wait handles (<xref:System.Threading.EventWaitHandle>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.ManualResetEvent>) and semaphores do not have thread affinity; any thread can signal an event wait handle or semaphore.</span></span> <span data-ttu-id="53a31-115">Las exclusiones mutuas, por otro lado, tienen afinidad de subprocesos; debe liberar el subproceso que posee una exclusión mutua, y se produce una excepción si un subproceso llama a la <xref:System.Threading.Mutex.ReleaseMutex%2A> método en una exclusión mutua que no le pertenece.</span><span class="sxs-lookup"><span data-stu-id="53a31-115">Mutexes, on the other hand, do have thread affinity; the thread that owns a mutex must release it, and an exception is thrown if a thread calls the <xref:System.Threading.Mutex.ReleaseMutex%2A> method on a mutex that it does not own.</span></span>  
  
 <span data-ttu-id="53a31-116">Dado que el <xref:System.Threading.WaitHandle> clase se deriva de <xref:System.MarshalByRefObject>, estas clases se pueden utilizar para sincronizar las actividades de subprocesos entre los límites del dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-116">Because the <xref:System.Threading.WaitHandle> class derives from <xref:System.MarshalByRefObject>, these classes can be used to synchronize the activities of threads across application domain boundaries.</span></span>  
  
 <span data-ttu-id="53a31-117">Además de sus clases derivadas, la <xref:System.Threading.WaitHandle> clase tiene un número de métodos estáticos que bloquea un subproceso hasta que uno o más objetos de sincronización reciban una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-117">In addition to its derived classes, the <xref:System.Threading.WaitHandle> class has a number of static methods that block a thread until one or more synchronization objects receive a signal.</span></span> <span data-ttu-id="53a31-118">Se incluyen los siguientes:</span><span class="sxs-lookup"><span data-stu-id="53a31-118">These include:</span></span>  
  
-   <span data-ttu-id="53a31-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, que permite que un subproceso indicar un identificador de espera y espere inmediatamente a otro.</span><span class="sxs-lookup"><span data-stu-id="53a31-119"><xref:System.Threading.WaitHandle.SignalAndWait%2A>, which allows a thread to signal one wait handle and immediately wait on another.</span></span>  
  
-   <span data-ttu-id="53a31-120"><xref:System.Threading.WaitHandle.WaitAll%2A>, que permite que un subproceso esperar hasta que todos los identificadores de espera en una matriz reciban una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-120"><xref:System.Threading.WaitHandle.WaitAll%2A>, which allows a thread to wait until all the wait handles in an array receive a signal.</span></span>  
  
-   <span data-ttu-id="53a31-121"><xref:System.Threading.WaitHandle.WaitAny%2A>, que permite que un subproceso esperar hasta que se haya señalado cualquiera de un conjunto de identificadores de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="53a31-121"><xref:System.Threading.WaitHandle.WaitAny%2A>, which allows a thread to wait until any one of a specified set of wait handles has been signaled.</span></span>  
  
 <span data-ttu-id="53a31-122">Las sobrecargas de estos métodos proporcionan los intervalos de tiempo de espera para abandonar la espera y la oportunidad de salir de un contexto de sincronización antes de entrar en la espera, lo que permite utilizar el contexto de sincronización de otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="53a31-122">The overloads of these methods provide timeout intervals for abandoning the wait, and the opportunity to exit a synchronization context before entering the wait, allowing other threads to use the synchronization context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="53a31-123">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-123">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="53a31-124">Cuando haya terminado de utilizar el tipo o un tipo derivado de ella, debe eliminar de él directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-124">When you have finished using the type or a type derived from it, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="53a31-125">Para deshacerse del tipo directamente, llame a su <xref:System.Threading.WaitHandle.Close%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="53a31-125">To dispose of the type directly, call its <xref:System.Threading.WaitHandle.Close%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="53a31-126">Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="53a31-126">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="53a31-127">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-127">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="53a31-128"><xref:System.Threading.WaitHandle> implementa el <xref:System.IDisposable.Dispose%2A> patrón.</span><span class="sxs-lookup"><span data-stu-id="53a31-128"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="53a31-129">Consulte [implementar un Dispose método](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-129">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="53a31-130">Al derivar de <xref:System.Threading.WaitHandle>, utilice el <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propiedad para almacenar el identificador del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-130">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native operating system handle.</span></span> <span data-ttu-id="53a31-131">No es necesario invalidar protegido <xref:System.Threading.WaitHandle.Dispose%2A> método a menos que utilice recursos no administrados adicionales.</span><span class="sxs-lookup"><span data-stu-id="53a31-131">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-132">El siguiente ejemplo de código muestra cómo dos subprocesos pueden realizan tareas en segundo plano mientras el método Main de subproceso espera a que las tareas se completen con estático <xref:System.Threading.WaitHandle.WaitAny%2A> y <xref:System.Threading.WaitHandle.WaitAll%2A> métodos de la <xref:System.Threading.WaitHandle> clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-132">The following code example shows how two threads can do background tasks while the Main thread waits for the tasks to complete using the static <xref:System.Threading.WaitHandle.WaitAny%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> methods of the <xref:System.Threading.WaitHandle> class.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="53a31-133">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="53a31-133">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="53a31-134">Subprocesos</span><span class="sxs-lookup"><span data-stu-id="53a31-134">Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md"><span data-ttu-id="53a31-135">Objetos y características de subprocesos</span><span class="sxs-lookup"><span data-stu-id="53a31-135">Threading Objects and Features</span></span></related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md"><span data-ttu-id="53a31-136">Mutexes</span><span class="sxs-lookup"><span data-stu-id="53a31-136">Mutexes</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/cd94fc34-ac15-427f-b723-a1240a4fab7d"><span data-ttu-id="53a31-137">EventWaitHandle, AutoResetEvent y ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="53a31-137">EventWaitHandle, AutoResetEvent, and ManualResetEvent</span></span></related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md"><span data-ttu-id="53a31-138">Semáforos</span><span class="sxs-lookup"><span data-stu-id="53a31-138">Semaphores</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WaitHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-139">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-139">Initializes a new instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="waitHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-140">Libera todos los recursos mantenidos por el objeto <see cref="T:System.Threading.WaitHandle" /> actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-140">Releases all resources held by the current <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-141">Este método es una implementación pública de la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método para el <xref:System.Threading.WaitHandle> clase y sus clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-141">This method is the public implementation of the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method for the <xref:System.Threading.WaitHandle> class and its derived classes.</span></span> <span data-ttu-id="53a31-142">Proporciona una implementación estándar que llama a la `Dispose(Boolean)` sobrecarga con un `true` argumento y, a continuación, llama a la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-142">It provides a standard implementation that calls the `Dispose(Boolean)` overload with a `true` argument and then calls the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="53a31-143">Llame a este método para liberar todos los recursos mantenidos por una instancia de `WaitHandle` o una clase derivada.</span><span class="sxs-lookup"><span data-stu-id="53a31-143">Call this method to release all resources held by an instance of `WaitHandle` or a derived class.</span></span>  
  
 <span data-ttu-id="53a31-144">Una vez que se llama a este método, las referencias a la instancia actual de provocan un comportamiento indefinido.</span><span class="sxs-lookup"><span data-stu-id="53a31-144">Once this method is called, references to the current instance cause undefined behavior.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-145">Llame siempre a <xref:System.Threading.WaitHandle.Close%2A> o <xref:System.Threading.WaitHandle.Dispose> antes de liberar la última referencia a la <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="53a31-145">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="53a31-146">En caso contrario, no se liberarán los recursos que está usando.</span><span class="sxs-lookup"><span data-stu-id="53a31-146">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="53a31-147">Se debe reemplazar el <see langword="Dispose(Boolean)" /> método para liberar los recursos asignados en las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-147">You should override the <see langword="Dispose(Boolean)" /> method to release resources allocated in derived classes.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="53a31-148">Implementar un método Dispose</span><span class="sxs-lookup"><span data-stu-id="53a31-148">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53a31-149">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-149">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="waitHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-150">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-150">Releases all resources used by the current instance of the <see cref="T:System.Threading.WaitHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-151">Este método es equivalente a la <xref:System.Threading.WaitHandle.Close%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-151">This method is equivalent to the <xref:System.Threading.WaitHandle.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-152">Llame siempre a <xref:System.Threading.WaitHandle.Close%2A> o <xref:System.Threading.WaitHandle.Dispose> antes de liberar la última referencia a la <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="53a31-152">Always call <xref:System.Threading.WaitHandle.Close%2A> or <xref:System.Threading.WaitHandle.Dispose> before you release your last reference to the <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="53a31-153">En caso contrario, no se liberarán los recursos que está usando.</span><span class="sxs-lookup"><span data-stu-id="53a31-153">Otherwise, the resources it is using will not be freed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="53a31-154">Limpiar recursos no administrados</span><span class="sxs-lookup"><span data-stu-id="53a31-154">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool explicitDisposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool explicitDisposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (explicitDisposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool explicitDisposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="waitHandle.Dispose explicitDisposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="explicitDisposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="explicitDisposing"><span data-ttu-id="53a31-155">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="53a31-155"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="53a31-156">Cuando se reemplaza en una clase derivada, libera los recursos no administrados que usa <see cref="T:System.Threading.WaitHandle" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="53a31-156">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-157">Este método es invocado por el <xref:System.Threading.WaitHandle.Close%2A> y <xref:System.Threading.WaitHandle.Dispose> métodos con el `explicitDisposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="53a31-157">This method is called by the <xref:System.Threading.WaitHandle.Close%2A> and the <xref:System.Threading.WaitHandle.Dispose> methods with the `explicitDisposing` parameter set to `true`.</span></span>  <span data-ttu-id="53a31-158">Cuando el `explicitDisposing` parámetro es `true`, este método libera todos los recursos mantenidos por los objetos administrados que <xref:System.Threading.WaitHandle> las referencias a objetos.</span><span class="sxs-lookup"><span data-stu-id="53a31-158">When the `explicitDisposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.WaitHandle> object references.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="53a31-159">Se debe reemplazar el <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> método para liberar los recursos asignados en las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-159">You should override the <see cref="M:System.Threading.WaitHandle.Dispose(System.Boolean)" /> method to release resources allocated in derived classes.</span></span>  
  
<span data-ttu-id="53a31-160">El <see cref="M:System.Threading.WaitHandle.Close" /> o <see cref="M:System.Threading.WaitHandle.Dispose" /> método puede llamarse varias veces por otros objetos.</span><span class="sxs-lookup"><span data-stu-id="53a31-160">The <see cref="M:System.Threading.WaitHandle.Close" /> or <see cref="M:System.Threading.WaitHandle.Dispose" /> method can be called multiple times by other objects.</span></span> <span data-ttu-id="53a31-161">Al reemplazar este método, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" /> o <see langword="Close" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-161">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" /> or <see langword="Close" />.</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="53a31-162">Implementar un método Dispose</span><span class="sxs-lookup"><span data-stu-id="53a31-162">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~WaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!WaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="waitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-163">Libera los recursos mantenidos por la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-163">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <span data-ttu-id="53a31-164">Este miembro se quitó de la versión 2.0 de .NET Framework y versiones posteriores.</span><span class="sxs-lookup"><span data-stu-id="53a31-164">This member has been removed from the .NET Framework version 2.0 and subsequent versions.</span></span> <span data-ttu-id="53a31-165">En este tema se aplica solo a las versiones incluidas en "Información de versión" más adelante en este tema.</span><span class="sxs-lookup"><span data-stu-id="53a31-165">This topic applies only to the versions listed in "Version Information" later in this topic.</span></span>


<span data-ttu-id="53a31-166">Código de la aplicación no llama a este método; se invoca automáticamente durante la recolección de elementos no utilizados, a menos que se ha deshabilitado la finalización por el recolector de elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="53a31-166">Application code does not call this method; it is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled.</span></span> <span data-ttu-id="53a31-167">Para obtener más información, vea <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> y <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="53a31-167">For more information, see <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> and <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="53a31-168">Este método invalida <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="53a31-168">This method overrides <xref:System.Object.Finalize>.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint with get, set" Usage="System.Threading.WaitHandle.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0">
          <AttributeName>System.Obsolete("Use the SafeWaitHandle property instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53a31-169">Obtiene o establece el identificador del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-169">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="53a31-170"><see langword="IntPtr" /> que representa el identificador del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-170">An <see langword="IntPtr" /> representing the native operating system handle.</span></span> <span data-ttu-id="53a31-171">El valor predeterminado es el valor del campo <see cref="F:System.Threading.WaitHandle.InvalidHandle" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-171">The default is the value of the <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> field.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-172">Asignación de un nuevo valor para el <xref:System.Threading.WaitHandle.Handle%2A> propiedad no cierra el identificador anterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-172">Assigning a new value to the <xref:System.Threading.WaitHandle.Handle%2A> property does not close the previous handle.</span></span> <span data-ttu-id="53a31-173">Esto puede dar lugar a un identificador con pérdidas.</span><span class="sxs-lookup"><span data-stu-id="53a31-173">This can result in a leaked handle.</span></span>  
  
 <span data-ttu-id="53a31-174">No utilice esta propiedad en .NET Framework versión 2.0 o posterior; Utilice el <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propiedad en su lugar.</span><span class="sxs-lookup"><span data-stu-id="53a31-174">Do not use this property in the .NET Framework version 2.0 or later; use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property instead.</span></span> <span data-ttu-id="53a31-175">Establecer esta propiedad en un identificador válido también establece la <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propiedad, pero si se establece en <xref:System.Threading.WaitHandle.InvalidHandle> puede dar lugar a un identificador con pérdidas.</span><span class="sxs-lookup"><span data-stu-id="53a31-175">Setting this property to a valid handle also sets the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, but setting it to <xref:System.Threading.WaitHandle.InvalidHandle> can result in a leaked handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="53a31-176">Requiere plena confianza para el llamador inmediato establecer el valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="53a31-176">Requires full trust for the immediate caller to set the property value.</span></span> <span data-ttu-id="53a31-177">Este miembro no se puede establecer código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="53a31-177">This member cannot be set by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="53a31-178">Tipos derivados deben tener <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> para establecer el valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="53a31-178">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to set the property value.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="InvalidHandle">
      <MemberSignature Language="C#" Value="protected static readonly IntPtr InvalidHandle;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly native int InvalidHandle" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.InvalidHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly InvalidHandle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly IntPtr InvalidHandle;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidHandle : nativeint" Usage="System.Threading.WaitHandle.InvalidHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53a31-179">Representa un identificador del sistema operativo nativo no válido.</span><span class="sxs-lookup"><span data-stu-id="53a31-179">Represents an invalid native operating system handle.</span></span> <span data-ttu-id="53a31-180">Este campo es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="53a31-180">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-181">Se utiliza internamente para inicializar el <xref:System.Threading.WaitHandle.Handle%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="53a31-181">Used internally to initialize the <xref:System.Threading.WaitHandle.Handle%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="53a31-182">Puede usar este valor para determinar si el <see cref="P:System.Threading.WaitHandle.Handle" /> propiedad contiene un identificador válido del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-182">You can use this value to determine whether the <see cref="P:System.Threading.WaitHandle.Handle" /> property contains a valid native operating system handle.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SafeWaitHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public Property SafeWaitHandle As SafeWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeWaitHandle ^ SafeWaitHandle { Microsoft::Win32::SafeHandles::SafeWaitHandle ^ get(); void set(Microsoft::Win32::SafeHandles::SafeWaitHandle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeWaitHandle with get, set" Usage="System.Threading.WaitHandle.SafeWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="53a31-183">Obtiene o establece el identificador del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-183">Gets or sets the native operating system handle.</span></span></summary>
        <value><span data-ttu-id="53a31-184"><see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> que representa el identificador del sistema operativo nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-184">A <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> representing the native operating system handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-185">Al asignar un nuevo valor para el <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propiedad, el identificador anterior se cerrarán cuando anterior <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> objeto se recopila.</span><span class="sxs-lookup"><span data-stu-id="53a31-185">When you assign a new value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property, the previous handle will be closed when the previous <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> object is collected.</span></span> <span data-ttu-id="53a31-186">No cierre el identificador manualmente, ya que esto da como resultado un <xref:System.ObjectDisposedException> cuando el <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> intenta cerrar el identificador.</span><span class="sxs-lookup"><span data-stu-id="53a31-186">Do not manually close the handle, because this results in an <xref:System.ObjectDisposedException> when the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> attempts to close the handle.</span></span>  
  
 <span data-ttu-id="53a31-187"><xref:System.Threading.WaitHandle> implementa el <xref:System.IDisposable.Dispose%2A> patrón.</span><span class="sxs-lookup"><span data-stu-id="53a31-187"><xref:System.Threading.WaitHandle> implements the <xref:System.IDisposable.Dispose%2A> pattern.</span></span> <span data-ttu-id="53a31-188">Consulte [implementar un Dispose método](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-188">See [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose .md).</span></span> <span data-ttu-id="53a31-189">Al derivar de <xref:System.Threading.WaitHandle>, utilice el <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> propiedad para almacenar el identificador del sistema operativo de identificador nativo.</span><span class="sxs-lookup"><span data-stu-id="53a31-189">When you derive from <xref:System.Threading.WaitHandle>, use the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A> property to store your native handle operating system handle.</span></span> <span data-ttu-id="53a31-190">No es necesario invalidar protegido <xref:System.Threading.WaitHandle.Dispose%2A> método a menos que utilice recursos no administrados adicionales.</span><span class="sxs-lookup"><span data-stu-id="53a31-190">You do not need to override the protected <xref:System.Threading.WaitHandle.Dispose%2A> method unless you use additional unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="53a31-191">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="53a31-191">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="53a31-192">Este miembro no se puede usar código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="53a31-192">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="53a31-193">Tipos derivados deben tener <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> para llamar a este miembro.</span><span class="sxs-lookup"><span data-stu-id="53a31-193">Derived types must have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> to call this member.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignalAndWait">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53a31-194">Señala un <see cref="T:System.Threading.WaitHandle" /> y espera en otro.</span><span class="sxs-lookup"><span data-stu-id="53a31-194">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="53a31-195"><see cref="T:System.Threading.WaitHandle" /> que se va a señalar.</span><span class="sxs-lookup"><span data-stu-id="53a31-195">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="53a31-196"><see cref="T:System.Threading.WaitHandle" /> en donde se va a esperar.</span><span class="sxs-lookup"><span data-stu-id="53a31-196">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <summary><span data-ttu-id="53a31-197">Señala un <see cref="T:System.Threading.WaitHandle" /> y espera en otro.</span><span class="sxs-lookup"><span data-stu-id="53a31-197">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another.</span></span></summary>
        <returns><span data-ttu-id="53a31-198"><see langword="true" /> si la señal y la espera finalizan correctamente; si la espera no finaliza, el método no devuelve ningún resultado.</span><span class="sxs-lookup"><span data-stu-id="53a31-198"><see langword="true" /> if both the signal and the wait complete successfully; if the wait does not complete, the method does not return.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-199">Esta operación no se garantiza para ser atómicas.</span><span class="sxs-lookup"><span data-stu-id="53a31-199">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="53a31-200">Después de las señales del subproceso actual `toSignal` pero antes de que espera en `toWaitOn`, podría señalar a un subproceso que se está ejecutando en otro procesador `toWaitOn` o esperar en él.</span><span class="sxs-lookup"><span data-stu-id="53a31-200">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-201">El siguiente ejemplo de código utiliza el <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> sobrecarga del método para permitir que el subproceso principal indicar un subproceso bloqueado y, a continuación, espere a que el subproceso finalice una tarea.</span><span class="sxs-lookup"><span data-stu-id="53a31-201">The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.</span></span>  
  
 <span data-ttu-id="53a31-202">En el ejemplo se inician cinco subprocesos, le permite bloquear un <xref:System.Threading.EventWaitHandle> creado con el <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> marca y las versiones un subproceso cada vez el usuario presiona la tecla ENTRAR.</span><span class="sxs-lookup"><span data-stu-id="53a31-202">The example starts five threads, allows them to block on an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType> flag, and then releases one thread each time the user presses the ENTER key.</span></span> <span data-ttu-id="53a31-203">En el ejemplo, a continuación, pone en cola otros cinco subprocesos y liberan todos ellos utilizando una <xref:System.Threading.EventWaitHandle> creado con el <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="53a31-203">The example then queues another five threads and releases them all using an <xref:System.Threading.EventWaitHandle> created with the <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType> flag.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/CS/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.SignalAndWait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-204"><paramref name="toSignal" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-204"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-205">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-205">-or-</span></span> 
 <span data-ttu-id="53a31-206"><paramref name="toWaitOn" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-206"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-207">Se llamó al método en un subproceso con <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-207">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="53a31-208">No se admite este método en Windows 98 ni en Windows Millennium.</span><span class="sxs-lookup"><span data-stu-id="53a31-208">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-209"><paramref name="toSignal" /> es un semáforo y su contador ya está completo.</span><span class="sxs-lookup"><span data-stu-id="53a31-209"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-210">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-210">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-211">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-211">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="53a31-212"><see cref="T:System.Threading.WaitHandle" /> que se va a señalar.</span><span class="sxs-lookup"><span data-stu-id="53a31-212">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="53a31-213"><see cref="T:System.Threading.WaitHandle" /> en donde se va a esperar.</span><span class="sxs-lookup"><span data-stu-id="53a31-213">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-214">Entero que representa el intervalo que se va a esperar.</span><span class="sxs-lookup"><span data-stu-id="53a31-214">An integer that represents the interval to wait.</span></span> <span data-ttu-id="53a31-215">Si el valor es <see cref="F:System.Threading.Timeout.Infinite" />, esto es, -1, la espera es infinita.</span><span class="sxs-lookup"><span data-stu-id="53a31-215">If the value is <see cref="F:System.Threading.Timeout.Infinite" />, that is, -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-216"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-216"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-217">Señala un <see cref="T:System.Threading.WaitHandle" /> y espera en otro, para lo que determina un intervalo de tiempo de espera como entero con signo de 32 bits y especifica si se sale del dominio de sincronización para el contexto antes de entrar en la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-217">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying a time-out interval as a 32-bit signed integer and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-218">Es <see langword="true" /> si la señal y la espera finalizan correctamente, o <see langword="false" /> si la señal finaliza pero el tiempo de la espera se agota.</span><span class="sxs-lookup"><span data-stu-id="53a31-218"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-219">Esta operación no se garantiza para ser atómicas.</span><span class="sxs-lookup"><span data-stu-id="53a31-219">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="53a31-220">Después de las señales del subproceso actual `toSignal` pero antes de que espera en `toWaitOn`, podría señalar a un subproceso que se está ejecutando en otro procesador `toWaitOn` o esperar en él.</span><span class="sxs-lookup"><span data-stu-id="53a31-220">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="53a31-221">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-221">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-222">Comprueba el estado de la `toWaitOn` y se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-222">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-223">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-223">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-224">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-224">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-225">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-225">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-226">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-226">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-227">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-227">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="53a31-228">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.SignalAndWait%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-228">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-229">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-229">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-230">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-230">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-231">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.SignalAndWait%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-231">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-232">Cuando el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-232">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-233"><paramref name="toSignal" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-233"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-234">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-234">-or-</span></span> 
 <span data-ttu-id="53a31-235"><paramref name="toWaitOn" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-235"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-236">Se llama al método en un subproceso con <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-236">The method is called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="53a31-237">No se admite este método en Windows 98 ni en Windows Millennium.</span><span class="sxs-lookup"><span data-stu-id="53a31-237">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-238">No se puede señalar a <see cref="T:System.Threading.WaitHandle" /> porque se superaría su recuento máximo.</span><span class="sxs-lookup"><span data-stu-id="53a31-238">The <see cref="T:System.Threading.WaitHandle" /> cannot be signaled because it would exceed its maximum count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-239"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-239"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-240">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-240">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-241">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-241">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SignalAndWait">
      <MemberSignature Language="C#" Value="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SignalAndWait(class System.Threading.WaitHandle toSignal, class System.Threading.WaitHandle toWaitOn, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SignalAndWait (toSignal As WaitHandle, toWaitOn As WaitHandle, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SignalAndWait(System::Threading::WaitHandle ^ toSignal, System::Threading::WaitHandle ^ toWaitOn, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member SignalAndWait : System.Threading.WaitHandle * System.Threading.WaitHandle * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.SignalAndWait (toSignal, toWaitOn, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSignal" Type="System.Threading.WaitHandle" />
        <Parameter Name="toWaitOn" Type="System.Threading.WaitHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="toSignal"><span data-ttu-id="53a31-242"><see cref="T:System.Threading.WaitHandle" /> que se va a señalar.</span><span class="sxs-lookup"><span data-stu-id="53a31-242">The <see cref="T:System.Threading.WaitHandle" /> to signal.</span></span></param>
        <param name="toWaitOn"><span data-ttu-id="53a31-243"><see cref="T:System.Threading.WaitHandle" /> en donde se va a esperar.</span><span class="sxs-lookup"><span data-stu-id="53a31-243">The <see cref="T:System.Threading.WaitHandle" /> to wait on.</span></span></param>
        <param name="timeout"><span data-ttu-id="53a31-244"><see cref="T:System.TimeSpan" /> que representa el intervalo que se va a esperar.</span><span class="sxs-lookup"><span data-stu-id="53a31-244">A <see cref="T:System.TimeSpan" /> that represents the interval to wait.</span></span> <span data-ttu-id="53a31-245">Si el valor es -1, la espera es infinita.</span><span class="sxs-lookup"><span data-stu-id="53a31-245">If the value is -1, the wait is infinite.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-246"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-246"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-247">Señala un <see cref="T:System.Threading.WaitHandle" /> y espera en otro, para lo que determina el intervalo de tiempo de espera como <see cref="T:System.TimeSpan" /> y especifica si se sale del dominio de sincronización para el contexto antes de entrar en la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-247">Signals one <see cref="T:System.Threading.WaitHandle" /> and waits on another, specifying the time-out interval as a <see cref="T:System.TimeSpan" /> and specifying whether to exit the synchronization domain for the context before entering the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-248">Es <see langword="true" /> si la señal y la espera finalizan correctamente, o <see langword="false" /> si la señal finaliza pero el tiempo de la espera se agota.</span><span class="sxs-lookup"><span data-stu-id="53a31-248"><see langword="true" /> if both the signal and the wait completed successfully, or <see langword="false" /> if the signal completed but the wait timed out.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-249">Esta operación no se garantiza para ser atómicas.</span><span class="sxs-lookup"><span data-stu-id="53a31-249">This operation is not guaranteed to be atomic.</span></span> <span data-ttu-id="53a31-250">Después de las señales del subproceso actual `toSignal` pero antes de que espera en `toWaitOn`, podría señalar a un subproceso que se está ejecutando en otro procesador `toWaitOn` o esperar en él.</span><span class="sxs-lookup"><span data-stu-id="53a31-250">After the current thread signals `toSignal` but before it waits on `toWaitOn`, a thread that is running on another processor might signal `toWaitOn` or wait on it.</span></span>  
  
 <span data-ttu-id="53a31-251">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-251">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="53a31-252">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-252">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-253">Comprueba el estado de la `toWaitOn` y se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-253">It tests the state of the `toWaitOn` and returns immediately.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-254">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-254">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-255">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-255">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-256">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-256">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-257">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-257">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-258">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-258">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method.</span></span> <span data-ttu-id="53a31-259">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.SignalAndWait%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-259">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-260">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-260">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-261">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-261">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-262">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.SignalAndWait%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-262">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-263">Cuando el <xref:System.Threading.WaitHandle.SignalAndWait%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-263">When the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-264"><paramref name="toSignal" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-264"><paramref name="toSignal" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-265">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-265">-or-</span></span> 
 <span data-ttu-id="53a31-266"><paramref name="toWaitOn" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-266"><paramref name="toWaitOn" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-267">Se llamó al método en un subproceso con <see cref="T:System.STAThreadAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-267">The method was called on a thread that has <see cref="T:System.STAThreadAttribute" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="53a31-268">No se admite este método en Windows 98 ni en Windows Millennium.</span><span class="sxs-lookup"><span data-stu-id="53a31-268">This method is not supported on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-269"><paramref name="toSignal" /> es un semáforo y su contador ya está completo.</span><span class="sxs-lookup"><span data-stu-id="53a31-269"><paramref name="toSignal" /> is a semaphore, and it already has a full count.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-270"><paramref name="timeout" /> se evalúa como un número negativo de milisegundos distinto de -1.</span><span class="sxs-lookup"><span data-stu-id="53a31-270"><paramref name="timeout" /> evaluates to a negative number of milliseconds other than -1.</span></span>  
  
<span data-ttu-id="53a31-271">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-271">-or-</span></span> 
 <span data-ttu-id="53a31-272"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-272"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-273">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-273">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-274">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-274">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-275">Libera todos los recursos que usa <see cref="T:System.Threading.WaitHandle" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-275">Releases all resources used by the <see cref="T:System.Threading.WaitHandle" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="53a31-276">Una llamada a `Dispose` permite a los recursos utilizados por el <xref:System.Threading.WaitHandle> que reasignarse para otros fines.</span><span class="sxs-lookup"><span data-stu-id="53a31-276">Calling `Dispose` allows the resources used by the <xref:System.Threading.WaitHandle> to be reallocated for other purposes.</span></span> <span data-ttu-id="53a31-277">Para obtener más información acerca de `Dispose`, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="53a31-277">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53a31-278">Espera a que todos los elementos de la matriz especificada reciban una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-278">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-279">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-279">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="53a31-280">Esta matriz no puede contener varias referencias al mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="53a31-280">This array cannot contain multiple references to the same object.</span></span></param>
        <summary><span data-ttu-id="53a31-281">Espera a que todos los elementos de la matriz especificada reciban una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-281">Waits for all the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="53a31-282"><see langword="true" /> cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, el método nunca devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="53a31-282"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise the method never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-283"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-283"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-284">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAll%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-284">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-285">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-285">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-286">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-286">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-287">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-287">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-288">El <xref:System.Threading.WaitHandle.WaitAll%2A> método devuelve cuando se señalizan todos los identificadores.</span><span class="sxs-lookup"><span data-stu-id="53a31-288">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when all the handles are signaled.</span></span> <span data-ttu-id="53a31-289">En algunas implementaciones, si se pasan más de 64 identificadores, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-289">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="53a31-290">Si la matriz contiene duplicados, se produce un error en la llamada con un <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="53a31-290">If the array contains duplicates, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-291">El <xref:System.Threading.WaitHandle.WaitAll%2A> método no se admite en subprocesos que tienen <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-291">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="53a31-292">Llamar a esta sobrecarga del método es equivalente a llamar a la <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> sobrecarga del método y especificar -1 (o <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) para `millisecondsTimeout` y `true` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-292">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-293">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para crear y escribir en un grupo de archivos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-293">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="53a31-294">Cada operación de escritura se pone en cola como un elemento de trabajo y las señales cuando haya finalizado.</span><span class="sxs-lookup"><span data-stu-id="53a31-294">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="53a31-295">El subproceso principal espera a que todos los elementos señalar y, a continuación, se cierra.</span><span class="sxs-lookup"><span data-stu-id="53a31-295">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-296">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-296">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span> <span data-ttu-id="53a31-297">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-297">-or-</span></span> 
<span data-ttu-id="53a31-298">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-298">One or more of the objects in the <paramref name="waitHandles" /> array are <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-299">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-299">-or-</span></span> 
 <span data-ttu-id="53a31-300"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-300"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="53a31-301">En <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET para aplicaciones de la Tienda Windows</see> o la <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-301">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="53a31-302">La matriz <paramref name="waitHandles" /> contiene elementos que son duplicados.</span><span class="sxs-lookup"><span data-stu-id="53a31-302">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-303">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-303">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="53a31-304">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-304">-or-</span></span> 
<span data-ttu-id="53a31-305">El atributo <see cref="T:System.STAThreadAttribute" /> se aplica al procedimiento de subproceso para el subproceso actual, y <paramref name="waitHandles" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="53a31-305">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-306"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-306"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-307">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-307">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-308">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-308">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-309">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-309">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-310">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-310">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="53a31-311">Esta matriz no puede contener varias referencias al mismo objeto (duplicados).</span><span class="sxs-lookup"><span data-stu-id="53a31-311">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-312">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-312">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-313">Espera a que todos los elementos de la matriz especificada reciban una señal mediante un valor <see cref="T:System.Int32" /> para especificar el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="53a31-313">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="53a31-314"><see langword="true" /> cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-314"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-315">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-315">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-316">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-316">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-317">El <xref:System.Threading.WaitHandle.WaitAll%2A> método devuelve cuando finaliza la espera, lo que significa que cuando están señalados todos los identificadores o cuando se produce el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-317">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="53a31-318">En algunas implementaciones, si se pasan más de 64 identificadores, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-318">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="53a31-319">Si hay duplicados en la matriz, no se puede llamar con un <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="53a31-319">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-320">El <xref:System.Threading.WaitHandle.WaitAll%2A> método no se admite en subprocesos que tienen <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-320">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="53a31-321">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-321">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-322">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-322">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-323">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-323">-or-</span></span> 
<span data-ttu-id="53a31-324">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-324">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-325">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-325">-or-</span></span> 
 <span data-ttu-id="53a31-326"><paramref name="waitHandles" /> es una matriz sin elementos.</span><span class="sxs-lookup"><span data-stu-id="53a31-326"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="53a31-327">En <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET para aplicaciones de la Tienda Windows</see> o la <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-327">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="53a31-328">La matriz <paramref name="waitHandles" /> contiene elementos que son duplicados.</span><span class="sxs-lookup"><span data-stu-id="53a31-328">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-329">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-329">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="53a31-330">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-330">-or-</span></span> 
<span data-ttu-id="53a31-331">El atributo <see cref="T:System.STAThreadAttribute" /> se aplica al procedimiento de subproceso para el subproceso actual, y <paramref name="waitHandles" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="53a31-331">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-332"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-332"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-333">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-333">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-334">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-334">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-335">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-335">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-336">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-336">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="53a31-337">Esta matriz no puede contener varias referencias al mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="53a31-337">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="53a31-338"><see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-338">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-339">Espera a que todos los elementos de la matriz especificada reciban una señal, usando un valor <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="53a31-339">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="53a31-340"><see langword="true" /> cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-340"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-341">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-341">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-342">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-342">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-343">El <xref:System.Threading.WaitHandle.WaitAll%2A> método devuelve cuando finaliza la espera, lo que significa que todos los identificadores están señalados o se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-343">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="53a31-344">En algunas implementaciones, si se pasan más de 64 identificadores, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-344">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="53a31-345">Si la matriz contiene duplicados, se producirá un error en la llamada.</span><span class="sxs-lookup"><span data-stu-id="53a31-345">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-346">El <xref:System.Threading.WaitHandle.WaitAll%2A> método no se admite en subprocesos que tienen <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-346">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="53a31-347">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-347">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="53a31-348">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-348">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAll%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-349">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-349">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-350">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-350">-or-</span></span> 
<span data-ttu-id="53a31-351">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-351">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-352">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-352">-or-</span></span> 
 <span data-ttu-id="53a31-353"><paramref name="waitHandles" /> es una matriz sin elementos.</span><span class="sxs-lookup"><span data-stu-id="53a31-353"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="53a31-354">En <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET para aplicaciones de la Tienda Windows</see> o la <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-354">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.ArgumentException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="53a31-355">La matriz <paramref name="waitHandles" /> contiene elementos que son duplicados.</span><span class="sxs-lookup"><span data-stu-id="53a31-355">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-356">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-356">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="53a31-357">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-357">-or-</span></span> 
<span data-ttu-id="53a31-358">El atributo <see cref="T:System.STAThreadAttribute" /> se aplica al procedimiento de subproceso para el subproceso actual, y <paramref name="waitHandles" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="53a31-358">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-359"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-359"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-360">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-360">-or-</span></span> 
 <span data-ttu-id="53a31-361"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-361"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-362">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-362">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-363">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-363">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-364">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-364">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * int * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-365">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-365">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="53a31-366">Esta matriz no puede contener varias referencias al mismo objeto (duplicados).</span><span class="sxs-lookup"><span data-stu-id="53a31-366">This array cannot contain multiple references to the same object (duplicates).</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-367">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-367">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-368"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-368"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-369">Espera a que todos los elementos de la matriz especificada reciban una señal; usa un valor <see cref="T:System.Int32" /> para determinar el intervalo de tiempo y especifica si se va a salir del dominio de sincronización antes de finalizar la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-369">Waits for all the elements in the specified array to receive a signal, using an <see cref="T:System.Int32" /> value to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-370"><see langword="true" /> cuando todos los elementos de <paramref name="waitHandles" /> reciben una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-370"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-371">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-371">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-372">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-372">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-373"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-373"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-374">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAll%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-374">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-375">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-375">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-376">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-376">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-377">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-377">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-378">El <xref:System.Threading.WaitHandle.WaitAll%2A> método devuelve cuando finaliza la espera, lo que significa que cuando están señalados todos los identificadores o cuando se produce el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-378">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either when all the handles are signaled or when time-out occurs.</span></span> <span data-ttu-id="53a31-379">En algunas implementaciones, si se pasan más de 64 identificadores, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-379">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="53a31-380">Si hay duplicados en la matriz, no se puede llamar con un <xref:System.DuplicateWaitObjectException>.</span><span class="sxs-lookup"><span data-stu-id="53a31-380">If there are duplicates in the array, the call fails with a <xref:System.DuplicateWaitObjectException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-381">El <xref:System.Threading.WaitHandle.WaitAll%2A> método no se admite en subprocesos que tienen <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-381">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-382">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-382">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-383">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitAll%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-383">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-384">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-384">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-385">Incluso si se están ejecutando un método en una clase que no se deriva <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-385">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-386">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-386">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="53a31-387">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitAll%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-387">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-388">Esto puede ser útil cuando la clase de contexto enlazado tiene el <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="53a31-388">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute.</span></span> <span data-ttu-id="53a31-389">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-389">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-390">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitAll%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-390">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-391">Cuando el <xref:System.Threading.WaitHandle.WaitAll%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-391">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-392">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para crear y escribir en un grupo de archivos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-392">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="53a31-393">Cada operación de escritura se pone en cola como un elemento de trabajo y las señales cuando haya finalizado.</span><span class="sxs-lookup"><span data-stu-id="53a31-393">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="53a31-394">El subproceso principal espera a que todos los elementos señalar y, a continuación, se cierra.</span><span class="sxs-lookup"><span data-stu-id="53a31-394">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-395">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-395">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-396">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-396">-or-</span></span> 
<span data-ttu-id="53a31-397">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-397">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-398">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-398">-or-</span></span> 
 <span data-ttu-id="53a31-399"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-399"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="53a31-400">La matriz <paramref name="waitHandles" /> contiene elementos que son duplicados.</span><span class="sxs-lookup"><span data-stu-id="53a31-400">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-401">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-401">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="53a31-402">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-402">-or-</span></span> 
<span data-ttu-id="53a31-403">El atributo <see cref="T:System.STAThreadAttribute" /> se aplica al procedimiento de subproceso para el subproceso actual, y <paramref name="waitHandles" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="53a31-403">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-404"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-404"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-405"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-405"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-406">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-406">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-407">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-407">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-408">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-408">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; bool" Usage="System.Threading.WaitHandle.WaitAll (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-409">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-409">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span> <span data-ttu-id="53a31-410">Esta matriz no puede contener varias referencias al mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="53a31-410">This array cannot contain multiple references to the same object.</span></span></param>
        <param name="timeout"><span data-ttu-id="53a31-411"><see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-411">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds, to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-412"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-412"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-413">Espera a que todos los elementos de la matriz especificada reciban una señal; usa un valor <see cref="T:System.TimeSpan" /> para determinar el intervalo de tiempo y especifica si se va a salir del dominio de sincronización antes de finalizar la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-413">Waits for all the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> value to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-414">Es <see langword="true" /> cuando todos los elementos de <paramref name="waitHandles" /> han recibido una señal; en caso contrario es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-414"><see langword="true" /> when every element in <paramref name="waitHandles" /> has received a signal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-415">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-415">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-416">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-416">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-417"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-417"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-418">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAll%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-418">In previous versions, the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-419">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-419">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-420">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-420">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-421">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-421">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-422">El <xref:System.Threading.WaitHandle.WaitAll%2A> método devuelve cuando finaliza la espera, lo que significa que todos los identificadores están señalados o se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-422">The <xref:System.Threading.WaitHandle.WaitAll%2A> method returns when the wait terminates, which means either all the handles are signaled or a time-out occurs.</span></span> <span data-ttu-id="53a31-423">En algunas implementaciones, si se pasan más de 64 identificadores, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-423">On some implementations, if more than 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span> <span data-ttu-id="53a31-424">Si la matriz contiene duplicados, se producirá un error en la llamada.</span><span class="sxs-lookup"><span data-stu-id="53a31-424">If the array contains duplicates, the call will fail.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-425">El <xref:System.Threading.WaitHandle.WaitAll%2A> método no se admite en subprocesos que tienen <xref:System.STAThreadAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-425">The <xref:System.Threading.WaitHandle.WaitAll%2A> method is not supported on threads that have <xref:System.STAThreadAttribute>.</span></span>  
  
 <span data-ttu-id="53a31-426">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-426">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-427">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-427">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-428">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitAll%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-428">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAll%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-429">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-429">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-430">Incluso si se están ejecutando un método en una clase que no se deriva <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-430">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-431">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-431">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAll%2A> method.</span></span> <span data-ttu-id="53a31-432">Devuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitAll%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-432">It returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAll%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-433">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-433">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-434">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-434">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-435">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitAll%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-435">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAll%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-436">Cuando el <xref:System.Threading.WaitHandle.WaitAll%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-436">When the <xref:System.Threading.WaitHandle.WaitAll%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-437">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para crear y escribir en un grupo de archivos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-437">The following code example shows how to use the thread pool to asynchronously create and write to a group of files.</span></span> <span data-ttu-id="53a31-438">Cada operación de escritura se pone en cola como un elemento de trabajo y las señales cuando haya finalizado.</span><span class="sxs-lookup"><span data-stu-id="53a31-438">Each write operation is queued as a work item and signals when it is finished.</span></span> <span data-ttu-id="53a31-439">El subproceso principal espera a que todos los elementos señalar y, a continuación, se cierra.</span><span class="sxs-lookup"><span data-stu-id="53a31-439">The main thread waits for all the items to signal and then exits.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAll3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAll3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-440">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-440">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-441">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-441">-or-</span></span> 
<span data-ttu-id="53a31-442">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-442">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-443">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-443">-or-</span></span> 
 <span data-ttu-id="53a31-444"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-444"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.DuplicateWaitObjectException"><span data-ttu-id="53a31-445">La matriz <paramref name="waitHandles" /> contiene elementos que son duplicados.</span><span class="sxs-lookup"><span data-stu-id="53a31-445">The <paramref name="waitHandles" /> array contains elements that are duplicates.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-446">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-446">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span>  
  
<span data-ttu-id="53a31-447">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-447">-or-</span></span> 
<span data-ttu-id="53a31-448">El atributo <see cref="T:System.STAThreadAttribute" /> se aplica al procedimiento de subproceso para el subproceso actual, y <paramref name="waitHandles" /> contiene más de un elemento.</span><span class="sxs-lookup"><span data-stu-id="53a31-448">The <see cref="T:System.STAThreadAttribute" /> attribute is applied to the thread procedure for the current thread, and <paramref name="waitHandles" /> contains more than one element.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-449"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-449"><paramref name="waitHandles" /> is an array with no elements and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-450"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-450"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-451">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-451">-or-</span></span> 
 <span data-ttu-id="53a31-452"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-452"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-453">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-453">The wait terminated because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-454">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-454">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-455">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-455">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53a31-456">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-456">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] -&gt; int" Usage="System.Threading.WaitHandle.WaitAny waitHandles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-457">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-457">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <summary><span data-ttu-id="53a31-458">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-458">Waits for any of the elements in the specified array to receive a signal.</span></span></summary>
        <returns><span data-ttu-id="53a31-459">Índice de la matriz del objeto que satisfizo la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-459">The array index of the object that satisfied the wait.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-460"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-460"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-461">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAny%2A> devuelve del método `true` si la espera finaliza porque se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-461">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="53a31-462">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-462">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-463">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-463">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-464">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-464">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-465">El <xref:System.Threading.WaitHandle.WaitAny%2A> método produce una <xref:System.Threading.AbandonedMutexException> solo cuando finaliza la espera debido a una exclusión mutua abandonada.</span><span class="sxs-lookup"><span data-stu-id="53a31-465">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="53a31-466">Si `waitHandles` contiene una exclusión mutua liberada con un número de índice inferior de la exclusión mutua abandonada, el <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa con normalidad y no se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="53a31-466">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-467">En las versiones de .NET Framework anteriores a la versión 2.0, si un subproceso se cierra o anula sin liberar explícitamente un <xref:System.Threading.Mutex>y que `Mutex` está en el índice 0 (cero) en un `WaitAny` matriz en otro subproceso, el índice devuelto por `WaitAny` es 128 en lugar de 0.</span><span class="sxs-lookup"><span data-stu-id="53a31-467">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="53a31-468">Este método devuelve cuando se señala a cualquiera de ellos.</span><span class="sxs-lookup"><span data-stu-id="53a31-468">This method returns when any handle is signaled.</span></span> <span data-ttu-id="53a31-469">Si más de un objeto se señaliza durante la llamada, el valor devuelto es el índice de matriz del objeto señalado con el menor valor de índice de todos los objetos señalados.</span><span class="sxs-lookup"><span data-stu-id="53a31-469">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="53a31-470">En algunas implementaciones, si más de 64 identificadores se pasan, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-470">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="53a31-471">Llamar a esta sobrecarga del método es equivalente a llamar a la <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> sobrecarga del método y especificar -1 (o <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) para `millisecondsTimeout` y `true` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-471">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> method overload and specifying -1 (or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>) for `millisecondsTimeout` and `true` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-472">El ejemplo de código siguiente se muestra cómo llamar el <xref:System.Threading.WaitHandle.WaitAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-472">The following code example demonstrates calling the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span>  
  
 [!code-cpp[WaitHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/WaitHandle/cpp/WaitHandle.cpp#1)]
 [!code-csharp[WaitHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/WaitHandle/CS/WaitHandle.cs#1)]
 [!code-vb[WaitHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/WaitHandle/VB/WaitHandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-473">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-473">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-474">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-474">-or-</span></span> 
<span data-ttu-id="53a31-475">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-475">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-476">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-476">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-477"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-477"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-478">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-478">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-479">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-479">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53a31-480"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-480"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-481">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-481">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-482">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-482">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-483">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-483">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-484">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal, utilizando un entero de 32 bits con signo para especificar el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="53a31-484">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="53a31-485">Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="millisecondsTimeout" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-485">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-486">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-486">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-487">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-487">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-488">El <xref:System.Threading.WaitHandle.WaitAny%2A> método produce una <xref:System.Threading.AbandonedMutexException> solo cuando finaliza la espera debido a una exclusión mutua abandonada.</span><span class="sxs-lookup"><span data-stu-id="53a31-488">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="53a31-489">Si `waitHandles` contiene una exclusión mutua liberada con un número de índice inferior de la exclusión mutua abandonada, el <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa con normalidad y no se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="53a31-489">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="53a31-490">Este método devuelve cuando finaliza la espera, o cuando se señala a cualquiera de los controladores cuando se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-490">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="53a31-491">Si más de un objeto se señaliza durante la llamada, el valor devuelto es el índice de matriz del objeto señalado con el menor valor de índice de todos los objetos señalados.</span><span class="sxs-lookup"><span data-stu-id="53a31-491">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="53a31-492">En algunas implementaciones, si más de 64 identificadores se pasan, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-492">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="53a31-493">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-493">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-494">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-494">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-495">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-495">-or-</span></span> 
<span data-ttu-id="53a31-496">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-496">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-497">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-497">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-498"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-498"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-499">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-499">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-500">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-500">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53a31-501"><paramref name="waitHandles" /> es una matriz sin elementos.</span><span class="sxs-lookup"><span data-stu-id="53a31-501"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-502">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-502">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-503">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-503">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="53a31-504">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-504">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-505">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal, usando un <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="53a31-505">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="53a31-506">Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-506">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-507">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-507">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-508">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-508">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-509">El <xref:System.Threading.WaitHandle.WaitAny%2A> método produce una <xref:System.Threading.AbandonedMutexException> solo cuando finaliza la espera debido a una exclusión mutua abandonada.</span><span class="sxs-lookup"><span data-stu-id="53a31-509">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="53a31-510">Si `waitHandles` contiene una exclusión mutua liberada con un número de índice inferior de la exclusión mutua abandonada, el <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa con normalidad y no se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="53a31-510">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
 <span data-ttu-id="53a31-511">Este método devuelve cuando finaliza la espera, o cuando se señala a cualquiera de los controladores cuando se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-511">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="53a31-512">Si más de un objeto se señaliza durante la llamada, el valor devuelto es el índice de matriz del objeto señalado con el menor valor de índice de todos los objetos señalados.</span><span class="sxs-lookup"><span data-stu-id="53a31-512">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="53a31-513">En algunas implementaciones, si más de 64 identificadores se pasan, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-513">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="53a31-514">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-514">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="53a31-515">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-515">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitAny%28System.Threading.WaitHandle%5B%5D%2CSystem.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-516">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-516">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-517">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-517">-or-</span></span> 
<span data-ttu-id="53a31-518">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-518">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-519">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-519">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-520"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-520"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-521">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-521">-or-</span></span> 
 <span data-ttu-id="53a31-522"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-522"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-523">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-523">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-524">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-524">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53a31-525"><paramref name="waitHandles" /> es una matriz sin elementos.</span><span class="sxs-lookup"><span data-stu-id="53a31-525"><paramref name="waitHandles" /> is an array with no elements.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-526">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-526">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), millisecondsTimeout As Integer, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * int * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-527">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-527">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-528">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-528">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-529"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-529"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-530">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal; utiliza un entero de 32 bits con signo para determinar el intervalo de tiempo y especifica si se va a salir del dominio de sincronización antes de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-530">Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-531">Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="millisecondsTimeout" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-531">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="millisecondsTimeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-532">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-532">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-533">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-533">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-534"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-534"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-535">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAny%2A> devuelve del método `true` si la espera finaliza porque se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-535">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="53a31-536">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-536">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-537">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-537">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-538">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-538">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-539">El <xref:System.Threading.WaitHandle.WaitAny%2A> método produce una <xref:System.Threading.AbandonedMutexException> solo cuando finaliza la espera debido a una exclusión mutua abandonada.</span><span class="sxs-lookup"><span data-stu-id="53a31-539">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="53a31-540">Si `waitHandles` contiene una exclusión mutua liberada con un número de índice inferior de la exclusión mutua abandonada, el <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa con normalidad y no se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="53a31-540">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-541">En las versiones de .NET Framework anteriores a la versión 2.0, si un subproceso se cierra o anula sin liberar explícitamente un <xref:System.Threading.Mutex>y que `Mutex` está en el índice 0 (cero) en un `WaitAny` matriz en otro subproceso, el índice devuelto por `WaitAny` es 128 en lugar de 0.</span><span class="sxs-lookup"><span data-stu-id="53a31-541">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="53a31-542">Este método devuelve cuando finaliza la espera, o cuando se señala a cualquiera de los controladores cuando se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-542">This method returns when the wait terminates, either when any of the handles are signaled or when a timeout occurs.</span></span> <span data-ttu-id="53a31-543">Si más de un objeto se señaliza durante la llamada, el valor devuelto es el índice de matriz del objeto señalado con el menor valor de índice de todos los objetos señalados.</span><span class="sxs-lookup"><span data-stu-id="53a31-543">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="53a31-544">En algunas implementaciones, si más de 64 identificadores se pasan, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-544">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-545">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-545">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-546">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitAny%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-546">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-547">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-547">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-548">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-548">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-549">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-549">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="53a31-550">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-550">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-551">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-551">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-552">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-552">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-553">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitAny%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-553">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-554">Cuando el <xref:System.Threading.WaitHandle.WaitAny%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-554">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-555">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para buscar un archivo en varios discos simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-555">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="53a31-556">Por motivos de espacio, se busca sólo el directorio raíz de cada disco.</span><span class="sxs-lookup"><span data-stu-id="53a31-556">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-557">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-557">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-558">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-558">-or-</span></span> 
<span data-ttu-id="53a31-559">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-559">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-560">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-560">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-561"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-561"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-562"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-562"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-563">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-563">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-564">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-564">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53a31-565"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-565"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-566">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-566">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (waitHandles As WaitHandle(), timeout As TimeSpan, exitContext As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::WaitHandle ^&gt; ^ waitHandles, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.WaitHandle[] * TimeSpan * bool -&gt; int" Usage="System.Threading.WaitHandle.WaitAny (waitHandles, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitHandles" Type="System.Threading.WaitHandle[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitHandles"><span data-ttu-id="53a31-567">Matriz <see langword="WaitHandle" /> que contiene los objetos por los que la instancia actual esperará.</span><span class="sxs-lookup"><span data-stu-id="53a31-567">A <see langword="WaitHandle" /> array containing the objects for which the current instance will wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="53a31-568">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-568">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-569"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-569"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-570">Espera a que cualquiera de los elementos de la matriz especificada reciba una señal; usa un <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo y especifica si se va a salir del dominio de sincronización antes de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-570">Waits for any of the elements in the specified array to receive a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-571">Índice de matriz del objeto que satisfizo la espera o <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> si ningún objeto satisfizo la espera y transcurrió un intervalo de tiempo equivalente a <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-571">The array index of the object that satisfied the wait, or <see cref="F:System.Threading.WaitHandle.WaitTimeout" /> if no object satisfied the wait and a time interval equivalent to <paramref name="timeout" /> has passed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-572">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-572">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-573">Comprueba el estado de los identificadores de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-573">It tests the state of the wait handles and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-574"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-574"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-575">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitAny%2A> devuelve del método `true` si la espera finaliza porque se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-575">In previous versions, the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns `true` if the wait completes because a mutex is abandoned.</span></span> <span data-ttu-id="53a31-576">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-576">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-577">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-577">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-578">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-578">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-579">El <xref:System.Threading.WaitHandle.WaitAny%2A> método produce una <xref:System.Threading.AbandonedMutexException> solo cuando finaliza la espera debido a una exclusión mutua abandonada.</span><span class="sxs-lookup"><span data-stu-id="53a31-579">The <xref:System.Threading.WaitHandle.WaitAny%2A> method throws an <xref:System.Threading.AbandonedMutexException> only when the wait completes because of an abandoned mutex.</span></span> <span data-ttu-id="53a31-580">Si `waitHandles` contiene una exclusión mutua liberada con un número de índice inferior de la exclusión mutua abandonada, el <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa con normalidad y no se produce la excepción.</span><span class="sxs-lookup"><span data-stu-id="53a31-580">If `waitHandles` contains a released mutex with a lower index number than the abandoned mutex, the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes normally and the exception is not thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53a31-581">En las versiones de .NET Framework anteriores a la versión 2.0, si un subproceso se cierra o anula sin liberar explícitamente un <xref:System.Threading.Mutex>y que `Mutex` está en el índice 0 (cero) en un `WaitAny` matriz en otro subproceso, el índice devuelto por `WaitAny` es 128 en lugar de 0.</span><span class="sxs-lookup"><span data-stu-id="53a31-581">In versions of the .NET Framework earlier than version 2.0, if a thread exits or aborts without explicitly releasing a <xref:System.Threading.Mutex>, and that `Mutex` is at index 0 (zero) in a `WaitAny` array on another thread, the index returned by `WaitAny` is 128 instead of 0.</span></span>  
  
 <span data-ttu-id="53a31-582">Este método devuelve cuando finaliza la espera, o cuando se señala a cualquiera de los controladores cuando se produce un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-582">This method returns when the wait terminates, either when any of the handles are signaled or when a time-out occurs.</span></span> <span data-ttu-id="53a31-583">Si más de un objeto se señaliza durante la llamada, el valor devuelto es el índice de matriz del objeto señalado con el menor valor de índice de todos los objetos señalados.</span><span class="sxs-lookup"><span data-stu-id="53a31-583">If more than one object becomes signaled during the call, the return value is the array index of the signaled object with the smallest index value of all the signaled objects.</span></span> <span data-ttu-id="53a31-584">En algunas implementaciones, si más de 64 identificadores se pasan, un <xref:System.NotSupportedException> se produce.</span><span class="sxs-lookup"><span data-stu-id="53a31-584">On some implementations, if more that 64 handles are passed, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="53a31-585">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-585">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-586">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-586">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-587">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitAny%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-587">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitAny%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-588">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-588">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-589">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-589">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-590">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-590">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitAny%2A> method.</span></span> <span data-ttu-id="53a31-591">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitAny%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-591">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitAny%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-592">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-592">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-593">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-593">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-594">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitAny%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-594">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitAny%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-595">Cuando el <xref:System.Threading.WaitHandle.WaitAny%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-595">When the <xref:System.Threading.WaitHandle.WaitAny%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-596">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para buscar un archivo en varios discos simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-596">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="53a31-597">Por motivos de espacio, se busca sólo el directorio raíz de cada disco.</span><span class="sxs-lookup"><span data-stu-id="53a31-597">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="53a31-598">El parámetro <paramref name="waitHandles" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-598">The <paramref name="waitHandles" /> parameter is <see langword="null" />.</span></span>  
  
<span data-ttu-id="53a31-599">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-599">-or-</span></span> 
<span data-ttu-id="53a31-600">Uno o varios objetos de la matriz <paramref name="waitHandles" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-600">One or more of the objects in the <paramref name="waitHandles" /> array is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="53a31-601">El número de objetos de <paramref name="waitHandles" /> es mayor de lo que permite el sistema.</span><span class="sxs-lookup"><span data-stu-id="53a31-601">The number of objects in <paramref name="waitHandles" /> is greater than the system permits.</span></span></exception>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="53a31-602"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="53a31-602"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 1.0 or 1.1.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-603"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-603"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-604">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-604">-or-</span></span> 
 <span data-ttu-id="53a31-605"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-605"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-606">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-606">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-607">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-607">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="53a31-608"><paramref name="waitHandles" /> es una matriz sin elementos y la versión de .NET Framework es 2.0 o posterior.</span><span class="sxs-lookup"><span data-stu-id="53a31-608"><paramref name="waitHandles" /> is an array with no elements, and the .NET Framework version is 2.0 or later.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-609">La matriz <paramref name="waitHandles" /> contiene un proxy transparente para un <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-609">The <paramref name="waitHandles" /> array contains a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitOne">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="53a31-610">Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-610">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne();" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : unit -&gt; bool&#xA;override this.WaitOne : unit -&gt; bool" Usage="waitHandle.WaitOne " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="53a31-611">Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-611">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal.</span></span></summary>
        <returns><span data-ttu-id="53a31-612">Es <see langword="true" /> si la instancia actual recibe una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-612"><see langword="true" /> if the current instance receives a signal.</span></span> <span data-ttu-id="53a31-613">Si nunca se señala a la instancia actual, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> nunca devuelve nada.</span><span class="sxs-lookup"><span data-stu-id="53a31-613">If the current instance is never signaled, <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> never returns.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-614"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-614"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-615">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitOne%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-615">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-616">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-616">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-617">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-617">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-618">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-618">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-619">El llamador de este método se bloquea indefinidamente hasta que la instancia actual recibe una señal.</span><span class="sxs-lookup"><span data-stu-id="53a31-619">The caller of this method blocks indefinitely until the current instance receives a signal.</span></span> <span data-ttu-id="53a31-620">Utilice este método para bloquear hasta que un <xref:System.Threading.WaitHandle> recibe una señal de otro subproceso, como se genera cuando se completa una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-620">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="53a31-621">Para obtener más información, consulte el <xref:System.IAsyncResult> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-621">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="53a31-622">Llamar a esta sobrecarga del método es equivalente a llamar a la <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> sobrecarga del método y especificar -1 o <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> para el primer parámetro y `false` para el segundo parámetro.</span><span class="sxs-lookup"><span data-stu-id="53a31-622">Calling this method overload is equivalent to calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload and specifying -1 or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the first parameter and `false` for the second parameter.</span></span>  
  
 <span data-ttu-id="53a31-623">Invalide este método para personalizar el comportamiento de las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-623">Override this method to customize the behavior of derived classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-624">El ejemplo de código siguiente muestra cómo usar un identificador de espera para impedir que un proceso de terminación mientras espera a que termine de ejecutarse un subproceso en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="53a31-624">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CPP/source1.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/CS/source1.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne1/VB/source1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="53a31-625">Ya se ha eliminado la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-625">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-626">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-626">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-627">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-627">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-628">La instancia actual es un proxy transparente para un objeto <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-628">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int -&gt; bool&#xA;override this.WaitOne : int -&gt; bool" Usage="waitHandle.WaitOne millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-629">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-629">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-630">Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal, usando un entero de 32 bits con signo para especificar el intervalo de tiempo en milisegundos.</span><span class="sxs-lookup"><span data-stu-id="53a31-630">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</span></span></summary>
        <returns><span data-ttu-id="53a31-631"><see langword="true" /> si la instancia actual recibe una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-631"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-632">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-632">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-633">Comprueba el estado del identificador de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-633">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-634">Se produce el llamador de este método se bloquea hasta que la instancia actual recibe una señal o un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-634">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="53a31-635">Utilice este método para bloquear hasta que un <xref:System.Threading.WaitHandle> recibe una señal de otro subproceso, como se genera cuando se completa una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-635">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="53a31-636">Para obtener más información, consulte el <xref:System.IAsyncResult> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-636">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="53a31-637">Invalide este método para personalizar el comportamiento de las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-637">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="53a31-638">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-638">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-639">El ejemplo de código siguiente muestra cómo usar un identificador de espera para impedir que un proceso de terminación mientras espera a que termine de ejecutarse un subproceso en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="53a31-639">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="53a31-640">Ya se ha eliminado la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-640">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-641"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-641"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-642">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-642">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-643">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-643">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-644">La instancia actual es un proxy transparente para un objeto <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-644">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan -&gt; bool&#xA;override this.WaitOne : TimeSpan -&gt; bool" Usage="waitHandle.WaitOne timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="53a31-645">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-645">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="53a31-646">Bloquea el subproceso actual hasta que la instancia actual recibe una señal, usando <see cref="T:System.TimeSpan" /> para especificar el intervalo de tiempo.</span><span class="sxs-lookup"><span data-stu-id="53a31-646">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval.</span></span></summary>
        <returns><span data-ttu-id="53a31-647"><see langword="true" /> si la instancia actual recibe una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-647"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-648">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-648">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-649">Comprueba el estado del identificador de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-649">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-650">Se produce el llamador de este método se bloquea hasta que la instancia actual recibe una señal o un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-650">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="53a31-651">Utilice este método para bloquear hasta que un <xref:System.Threading.WaitHandle> recibe una señal de otro subproceso, como se genera cuando se completa una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-651">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="53a31-652">Para obtener más información, consulte el <xref:System.IAsyncResult> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-652">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="53a31-653">Invalide este método para personalizar el comportamiento de las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-653">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="53a31-654">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-654">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="53a31-655">Llamar a esta sobrecarga del método es igual que llamar a la <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> sobrecarga y especificando `false` para `exitContext`.</span><span class="sxs-lookup"><span data-stu-id="53a31-655">Calling this method overload is the same as calling the <xref:System.Threading.WaitHandle.WaitOne%28System.TimeSpan%2CSystem.Boolean%29> overload and specifying `false` for `exitContext`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="53a31-656">Ya se ha eliminado la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-656">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-657"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-657"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-658">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-658">-or-</span></span> 
 <span data-ttu-id="53a31-659"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-659"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-660">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-660">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-661">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-661">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-662">La instancia actual es un proxy transparente para un objeto <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-662">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : int * bool -&gt; bool&#xA;override this.WaitOne : int * bool -&gt; bool" Usage="waitHandle.WaitOne (millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="53a31-663">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-663">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-664"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-664"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-665">Bloquea el subproceso actual hasta que el objeto <see cref="T:System.Threading.WaitHandle" /> actual recibe una señal, usa un entero de 32 bits con signo para determinar el intervalo de tiempo y especifica si hay que salir del dominio de sincronización antes de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-665">Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle" /> receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-666"><see langword="true" /> si la instancia actual recibe una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-666"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-667">Si `millisecondsTimeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-667">If `millisecondsTimeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-668">Comprueba el estado del identificador de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-668">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-669"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-669"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-670">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitOne%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-670">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-671">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-671">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-672">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-672">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-673">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-673">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-674">Se produce el llamador de este método se bloquea hasta que la instancia actual recibe una señal o un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-674">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="53a31-675">Utilice este método para bloquear hasta que un <xref:System.Threading.WaitHandle> recibe una señal de otro subproceso, como se genera cuando se completa una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-675">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="53a31-676">Para obtener más información, consulte el <xref:System.IAsyncResult> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-676">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="53a31-677">Invalide este método para personalizar el comportamiento de las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-677">Override this method to customize the behavior of derived classes.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-678">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-678">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-679">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitOne%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-679">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-680">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-680">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-681">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-681">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-682">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitOne%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-682">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="53a31-683">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitOne%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-683">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-684">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-684">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-685">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-685">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-686">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitOne%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-686">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-687">Cuando el <xref:System.Threading.WaitHandle.WaitOne%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-687">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-688">El ejemplo siguiente se muestra cómo el <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> sobrecarga del método se comporta cuando se llama dentro de un dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-688">The following example shows how the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%2CSystem.Boolean%29> method overload behaves when it is called within a synchronization domain.</span></span> <span data-ttu-id="53a31-689">En primer lugar, espera a que un subproceso con `exitContext` establecido en `false` y se bloquea hasta que expira el tiempo de espera de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-689">First, a thread waits with `exitContext` set to `false` and blocks until the wait timeout expires.</span></span> <span data-ttu-id="53a31-690">Un segundo subproceso se ejecuta después de que el primer subproceso finaliza y espera a que con `exitContext` establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="53a31-690">A second thread executes after the first thread terminates and waits with `exitContext` set to `true`.</span></span> <span data-ttu-id="53a31-691">La llamada para indicar el identificador de espera para este segundo subproceso no está bloqueada y finaliza el subproceso antes de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-691">The call to signal the wait handle for this second thread is not blocked, and the thread completes before the wait timeout.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/cs/source.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.waithandle.waitone4/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="53a31-692">Ya se ha eliminado la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-692">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-693"><paramref name="millisecondsTimeout" /> es un número negativo distinto de-1, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-693"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-694">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-694">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-695">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-695">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-696">La instancia actual es un proxy transparente para un objeto <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-696">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitOne">
      <MemberSignature Language="C#" Value="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitOne (timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool WaitOne(TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="abstract member WaitOne : TimeSpan * bool -&gt; bool&#xA;override this.WaitOne : TimeSpan * bool -&gt; bool" Usage="waitHandle.WaitOne (timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="53a31-697">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-697">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="exitContext"><span data-ttu-id="53a31-698"><see langword="true" /> para salir del dominio de sincronización del contexto antes de la espera (en caso de encontrarse en un contexto sincronizado) y volver a adquirirlo más tarde; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-698"><see langword="true" /> to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="53a31-699">Bloquea el subproceso actual hasta que la instancia actual recibe una señal; usa <see cref="T:System.TimeSpan" /> para determinar el intervalo de tiempo y especifica si hay que abandonar el dominio de sincronización antes de la espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-699">Blocks the current thread until the current instance receives a signal, using a <see cref="T:System.TimeSpan" /> to specify the time interval and specifying whether to exit the synchronization domain before the wait.</span></span></summary>
        <returns><span data-ttu-id="53a31-700"><see langword="true" /> si la instancia actual recibe una señal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-700"><see langword="true" /> if the current instance receives a signal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-701">Si `timeout` es cero, el método no se bloquea.</span><span class="sxs-lookup"><span data-stu-id="53a31-701">If `timeout` is zero, the method does not block.</span></span> <span data-ttu-id="53a31-702">Comprueba el estado del identificador de espera y vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-702">It tests the state of the wait handle and returns immediately.</span></span>  
  
 <span data-ttu-id="53a31-703"><xref:System.Threading.AbandonedMutexException> Novedades de la versión 2.0 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="53a31-703"><xref:System.Threading.AbandonedMutexException> is new in the .NET Framework version 2.0.</span></span> <span data-ttu-id="53a31-704">En versiones anteriores, el <xref:System.Threading.WaitHandle.WaitOne%2A> devuelve del método `true` cuando se abandona una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-704">In previous versions, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true` when a mutex is abandoned.</span></span> <span data-ttu-id="53a31-705">A menudo, una exclusión mutua abandonada indica un error grave de codificación.</span><span class="sxs-lookup"><span data-stu-id="53a31-705">An abandoned mutex often indicates a serious coding error.</span></span> <span data-ttu-id="53a31-706">En el caso de una exclusión mutua todo el sistema, podría indicar que una aplicación ha finalizado abruptamente (por ejemplo, mediante el Administrador de tareas de Windows).</span><span class="sxs-lookup"><span data-stu-id="53a31-706">In the case of a system-wide mutex, it might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span> <span data-ttu-id="53a31-707">La excepción contiene información útil para la depuración.</span><span class="sxs-lookup"><span data-stu-id="53a31-707">The exception contains information useful for debugging.</span></span>  
  
 <span data-ttu-id="53a31-708">Se produce el llamador de este método se bloquea hasta que la instancia actual recibe una señal o un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-708">The caller of this method blocks until the current instance receives a signal or a time-out occurs.</span></span> <span data-ttu-id="53a31-709">Utilice este método para bloquear hasta que un <xref:System.Threading.WaitHandle> recibe una señal de otro subproceso, como se genera cuando se completa una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="53a31-709">Use this method to block until a <xref:System.Threading.WaitHandle> receives a signal from another thread, such as is generated when an asynchronous operation completes.</span></span> <span data-ttu-id="53a31-710">Para obtener más información, consulte el <xref:System.IAsyncResult> interfaz.</span><span class="sxs-lookup"><span data-stu-id="53a31-710">For more information, see the <xref:System.IAsyncResult> interface.</span></span>  
  
 <span data-ttu-id="53a31-711">Invalide este método para personalizar el comportamiento de las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="53a31-711">Override this method to customize the behavior of derived classes.</span></span>  
  
 <span data-ttu-id="53a31-712">El valor máximo de `timeout` es <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="53a31-712">The maximum value for `timeout` is <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="53a31-713">Notas sobre la salida del contexto</span><span class="sxs-lookup"><span data-stu-id="53a31-713">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="53a31-714">El `exitContext` parámetro no tiene ningún efecto a menos que el <xref:System.Threading.WaitHandle.WaitOne%2A> método se llama desde dentro de un contexto administrado no predeterminado.</span><span class="sxs-lookup"><span data-stu-id="53a31-714">The `exitContext` parameter has no effect unless the <xref:System.Threading.WaitHandle.WaitOne%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="53a31-715">Esto puede ocurrir si el subproceso está dentro de una llamada a una instancia de una clase derivada de <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="53a31-715">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="53a31-716">Incluso si se están ejecutando un método en una clase que no se deriva de <xref:System.ContextBoundObject>, como <xref:System.String>, puede estar en un contexto no predeterminado si un <xref:System.ContextBoundObject> en la pila en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-716">Even if you are currently executing a method on a class that does not derive from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="53a31-717">Cuando el código se ejecuta en un contexto no predeterminado, especificar `true` para `exitContext` hace que el subproceso salga del contexto administrado no predeterminado (es decir, para realizar la transición al contexto predeterminado) antes de ejecutar el <xref:System.Threading.WaitHandle.WaitOne%2A> método.</span><span class="sxs-lookup"><span data-stu-id="53a31-717">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="53a31-718">El subproceso vuelve al contexto original no predeterminado después de llamar a la <xref:System.Threading.WaitHandle.WaitOne%2A> método se completa.</span><span class="sxs-lookup"><span data-stu-id="53a31-718">The thread returns to the original nondefault context after the call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method completes.</span></span>  
  
 <span data-ttu-id="53a31-719">Esto puede ser útil cuando la clase de contexto enlazado tiene <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span><span class="sxs-lookup"><span data-stu-id="53a31-719">This can be useful when the context-bound class has <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute>.</span></span> <span data-ttu-id="53a31-720">En ese caso, todas las llamadas a miembros de la clase se sincronizan automáticamente y el dominio de sincronización es todo el cuerpo de código para la clase.</span><span class="sxs-lookup"><span data-stu-id="53a31-720">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="53a31-721">Si llama código en la pila de llamadas de un miembro de la <xref:System.Threading.WaitHandle.WaitOne%2A> método y especifica `true` para `exitContext`, el subproceso sale del dominio de sincronización, lo que permite un subproceso que esté bloqueado en una llamada a cualquier miembro del objeto para continuar.</span><span class="sxs-lookup"><span data-stu-id="53a31-721">If code in the call stack of a member calls the <xref:System.Threading.WaitHandle.WaitOne%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="53a31-722">Cuando el <xref:System.Threading.WaitHandle.WaitOne%2A> método finaliza, el subproceso que realizó la llamada debe esperar para volver a escribir el dominio de sincronización.</span><span class="sxs-lookup"><span data-stu-id="53a31-722">When the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-723">El ejemplo de código siguiente muestra cómo usar un identificador de espera para impedir que un proceso de terminación mientras espera a que termine de ejecutarse un subproceso en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="53a31-723">The following code example shows how to use a wait handle to keep a process from terminating while it waits for a background thread to finish executing.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CPP/source3.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/CS/source3.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitOne3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitOne3/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="53a31-724">Ya se ha eliminado la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="53a31-724">The current instance has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="53a31-725"><paramref name="timeout" /> es un número negativo distinto de -1 milisegundos, que representa un tiempo de espera infinito.</span><span class="sxs-lookup"><span data-stu-id="53a31-725"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="53a31-726">O bien</span><span class="sxs-lookup"><span data-stu-id="53a31-726">-or-</span></span> 
 <span data-ttu-id="53a31-727"><paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="53a31-727"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.AbandonedMutexException"><span data-ttu-id="53a31-728">La espera finalizó porque un subproceso se cierra sin liberar una exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="53a31-728">The wait completed because a thread exited without releasing a mutex.</span></span> <span data-ttu-id="53a31-729">Esta excepción no se produce en Windows 98 o en Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="53a31-729">This exception is not thrown on Windows 98 or Windows Millennium Edition.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="53a31-730">La instancia actual es un proxy transparente para un objeto <see cref="T:System.Threading.WaitHandle" /> en otro dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="53a31-730">The current instance is a transparent proxy for a <see cref="T:System.Threading.WaitHandle" /> in another application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitTimeout">
      <MemberSignature Language="C#" Value="public const int WaitTimeout = 258;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 WaitTimeout = (258)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.WaitHandle.WaitTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Const WaitTimeout As Integer  = 258" />
      <MemberSignature Language="C++ CLI" Value="public: int WaitTimeout = 258;" />
      <MemberSignature Language="F#" Value="val mutable WaitTimeout : int" Usage="System.Threading.WaitHandle.WaitTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>258</MemberValue>
      <Docs>
        <summary><span data-ttu-id="53a31-731">Indica que una operación <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> ha superado el tiempo de espera antes de que se señalara un identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="53a31-731">Indicates that a <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> operation timed out before any of the wait handles were signaled.</span></span> <span data-ttu-id="53a31-732">Este campo es constante.</span><span class="sxs-lookup"><span data-stu-id="53a31-732">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53a31-733">Este campo es uno de los valores devueltos posibles de `WaitAny`.</span><span class="sxs-lookup"><span data-stu-id="53a31-733">This field is one of the possible return values of `WaitAny`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53a31-734">El ejemplo de código siguiente muestra cómo usar el grupo de subprocesos para buscar un archivo en varios discos simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="53a31-734">The following code example demonstrates how to use the thread pool to simultaneously search for a file on multiple disks.</span></span> <span data-ttu-id="53a31-735">Por motivos de espacio, se busca sólo el directorio raíz de cada disco.</span><span class="sxs-lookup"><span data-stu-id="53a31-735">For space considerations, only the root directory of each disk is searched.</span></span>  
  
 [!code-cpp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/CS/source2.cs#1)]
 [!code-vb[System.Threading.WaitHandle.WaitAny2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.WaitHandle.WaitAny2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>