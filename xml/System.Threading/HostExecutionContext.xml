<Type Name="HostExecutionContext" FullName="System.Threading.HostExecutionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a0739fbadfba09e1c7676289857bc5bd025672d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58730047" /></Metadata><TypeSignature Language="C#" Value="public class HostExecutionContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HostExecutionContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.HostExecutionContext" />
  <TypeSignature Language="VB.NET" Value="Public Class HostExecutionContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostExecutionContext : IDisposable" />
  <TypeSignature Language="F#" Value="type HostExecutionContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="f0a52-101">Encapsula y difunde el contexto de ejecuci贸n del host en todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="f0a52-101">Encapsulates and propagates the host execution context across threads.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-102">El <xref:System.Threading.HostExecutionContext> forma parte de una mayor <xref:System.Threading.ExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="f0a52-102">The <xref:System.Threading.HostExecutionContext> is part of a larger <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="f0a52-103">El contexto del host se migra, o fluye, con el contexto de ejecuci贸n.</span><span class="sxs-lookup"><span data-stu-id="f0a52-103">The host context migrates, or flows, with the execution context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0a52-104">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.HostExecutionContext" />.</span><span class="sxs-lookup"><span data-stu-id="f0a52-104">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a52-105">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.HostExecutionContext" />.</span><span class="sxs-lookup"><span data-stu-id="f0a52-105">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-106">El constructor predeterminado crea un contexto de ejecuci贸n del host cuyo <xref:System.Threading.HostExecutionContext.State%2A> es el valor de propiedad `null`.</span><span class="sxs-lookup"><span data-stu-id="f0a52-106">The default constructor creates a host execution context whose <xref:System.Threading.HostExecutionContext.State%2A> property value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostExecutionContext (object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostExecutionContext(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.HostExecutionContext : obj -&gt; System.Threading.HostExecutionContext" Usage="new System.Threading.HostExecutionContext state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="f0a52-107">Objeto que representa el estado del contexto de ejecuci贸n del host.</span><span class="sxs-lookup"><span data-stu-id="f0a52-107">An object representing the host execution context state.</span></span></param>
        <summary><span data-ttu-id="f0a52-108">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.HostExecutionContext" /> utilizando el estado especificado.</span><span class="sxs-lookup"><span data-stu-id="f0a52-108">Initializes a new instance of the <see cref="T:System.Threading.HostExecutionContext" /> class using the specified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-109">El <xref:System.Threading.HostExecutionContext> se incluye con el <xref:System.Threading.ExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="f0a52-109">The <xref:System.Threading.HostExecutionContext> is included with the <xref:System.Threading.ExecutionContext>.</span></span> <span data-ttu-id="f0a52-110">El `state` representa un identificador seguro que contiene el `IUnknown` puntero para el host.</span><span class="sxs-lookup"><span data-stu-id="f0a52-110">The `state` represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public virtual System.Threading.HostExecutionContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.HostExecutionContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.CreateCopy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCopy () As HostExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::HostExecutionContext ^ CreateCopy();" />
      <MemberSignature Language="F#" Value="abstract member CreateCopy : unit -&gt; System.Threading.HostExecutionContext&#xA;override this.CreateCopy : unit -&gt; System.Threading.HostExecutionContext" Usage="hostExecutionContext.CreateCopy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.HostExecutionContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a52-111">Crea una copia del contexto de ejecuci贸n del host actual.</span><span class="sxs-lookup"><span data-stu-id="f0a52-111">Creates a copy of the current host execution context.</span></span></summary>
        <returns><span data-ttu-id="f0a52-112">Objeto <see cref="T:System.Threading.HostExecutionContext" /> que representa el contexto del host del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="f0a52-112">A <see cref="T:System.Threading.HostExecutionContext" /> object representing the host context for the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-113">La copia se puede usar como par谩metro para un <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> llamada al m茅todo.</span><span class="sxs-lookup"><span data-stu-id="f0a52-113">The copy can be used as the parameter to a <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f0a52-114">Libera los recursos que usa la instancia actual de la clase <see cref="T:System.Threading.HostExecutionContext" />.</span><span class="sxs-lookup"><span data-stu-id="f0a52-114">Releases resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="hostExecutionContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0a52-115">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.HostExecutionContext" />.</span><span class="sxs-lookup"><span data-stu-id="f0a52-115">Releases all resources used by the current instance of the <see cref="T:System.Threading.HostExecutionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-116">Llame a `Dispose` cuando haya terminado de usar <xref:System.Threading.HostExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="f0a52-116">Call `Dispose` when you are finished using the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="f0a52-117">El m茅todo `Dispose` deja el <xref:System.Threading.HostExecutionContext> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="f0a52-117">The `Dispose` method leaves the <xref:System.Threading.HostExecutionContext> in an unusable state.</span></span> <span data-ttu-id="f0a52-118">Despu茅s de llamar a `Dispose`, debe liberar todas las referencias a la <xref:System.Threading.HostExecutionContext> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Threading.HostExecutionContext> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="f0a52-118">After calling `Dispose`, you must release all references to the <xref:System.Threading.HostExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.HostExecutionContext> was occupying.</span></span>  
  
 <span data-ttu-id="f0a52-119">Para obtener m谩s informaci贸n, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un m茅todo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="f0a52-119">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f0a52-120">Realice siempre una llamada a `Dispose` antes de liberar la 煤ltima referencia al objeto <xref:System.Threading.HostExecutionContext>.</span><span class="sxs-lookup"><span data-stu-id="f0a52-120">Always call `Dispose` before you release your last reference to the <xref:System.Threading.HostExecutionContext>.</span></span> <span data-ttu-id="f0a52-121">En caso contrario, los recursos que est谩 usando no se liberar谩n hasta que el recolector de elementos no utilizados llame al m茅todo <xref:System.Threading.HostExecutionContext> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="f0a52-121">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.HostExecutionContext> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="f0a52-122">Limpiar recursos no administrados</span><span class="sxs-lookup"><span data-stu-id="f0a52-122">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.HostExecutionContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="hostExecutionContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f0a52-123">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar 煤nicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="f0a52-123"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f0a52-124">Cuando se reemplaza en una clase derivada, libera los recursos no administrados que usa <see cref="T:System.Threading.WaitHandle" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="f0a52-124">When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle" />, and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-125">Este m茅todo es invocado por el <xref:System.Threading.HostExecutionContext.Dispose> sobrecarga del m茅todo y el finalizador.</span><span class="sxs-lookup"><span data-stu-id="f0a52-125">This method is called by the <xref:System.Threading.HostExecutionContext.Dispose> method overload and the finalizer.</span></span> <span data-ttu-id="f0a52-126"><xref:System.Threading.HostExecutionContext.Dispose> invoca este m茅todo protegido con el `disposing` par谩metro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="f0a52-126"><xref:System.Threading.HostExecutionContext.Dispose> invokes this protected method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="f0a52-127">El finalizador invoca este m茅todo con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="f0a52-127">The finalizer invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="f0a52-128">Cuando el par谩metro `disposing` es `true`, este m茅todo libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.Threading.HostExecutionContext> hace referencia.</span><span class="sxs-lookup"><span data-stu-id="f0a52-128">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Threading.HostExecutionContext> references.</span></span> <span data-ttu-id="f0a52-129">Este m茅todo invoca al m茅todo `Dispose` de cada uno de los objetos a los que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="f0a52-129">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 <span data-ttu-id="f0a52-130">Este m茅todo puede llamarse varias veces por otros objetos.</span><span class="sxs-lookup"><span data-stu-id="f0a52-130">This method can be called multiple times by other objects.</span></span> <span data-ttu-id="f0a52-131">Al reemplazar este m茅todo, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior.</span><span class="sxs-lookup"><span data-stu-id="f0a52-131">When overriding this method, be careful not to reference objects that have been previously disposed in an earlier call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected internal object State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Threading.HostExecutionContext.State" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ State { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.State : obj with get, set" Usage="System.Threading.HostExecutionContext.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0a52-132">Obtiene o establece el estado del contexto de ejecuci贸n del host.</span><span class="sxs-lookup"><span data-stu-id="f0a52-132">Gets or sets the state of the host execution context.</span></span></summary>
        <value><span data-ttu-id="f0a52-133">Objeto que representa el estado del contexto de ejecuci贸n del host.</span><span class="sxs-lookup"><span data-stu-id="f0a52-133">An object representing the host execution context state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0a52-134">El <xref:System.Threading.HostExecutionContext.State%2A> valor de propiedad representa un identificador seguro que contiene el `IUnknown` puntero para el host.</span><span class="sxs-lookup"><span data-stu-id="f0a52-134">The <xref:System.Threading.HostExecutionContext.State%2A> property value represents a safe handle containing the `IUnknown` pointer for the host.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>