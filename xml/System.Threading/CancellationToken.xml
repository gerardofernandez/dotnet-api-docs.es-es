<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae895847a53ec18e5d0fe22ae6c844d3db840024" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58734523" /></Metadata><TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <TypeSignature Language="F#" Value="type CancellationToken = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7c28a-101">Propaga la notificación de que las operaciones deberían cancelarse.</span><span class="sxs-lookup"><span data-stu-id="7c28a-101">Propagates notification that operations should be canceled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-102">Un <xref:System.Threading.CancellationToken> permite la cancelación cooperativa entre subprocesos, elementos de trabajo de grupo de subprocesos, o <xref:System.Threading.Tasks.Task> objetos.</span><span class="sxs-lookup"><span data-stu-id="7c28a-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="7c28a-103">Crear un token de cancelación creando un <xref:System.Threading.CancellationTokenSource> recupera el objeto que administra los tokens de cancelación de su <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="7c28a-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7c28a-104">A continuación, que se pase el token de cancelación a cualquier número de subprocesos, tareas u operaciones que deben recibir una notificación de cancelación.</span><span class="sxs-lookup"><span data-stu-id="7c28a-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="7c28a-105">El token no se puede usar para iniciar la cancelación.</span><span class="sxs-lookup"><span data-stu-id="7c28a-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="7c28a-106">Cuando el objeto propietario llama <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propiedad de todas las copias del token de cancelación se establece en `true`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="7c28a-107">Los objetos que reciben la notificación pueden responder de manera adecuada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="7c28a-108">Para obtener más información y ejemplos de código vea [cancelación en subprocesos administrados](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="7c28a-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c28a-109">El ejemplo siguiente utiliza un generador de números aleatorios para emular una aplicación de recopilación de datos que lee los 10 valores enteros de once instruments diferentes.</span><span class="sxs-lookup"><span data-stu-id="7c28a-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="7c28a-110">Un valor de cero indica que ha fallado la medida para un instrumento, en cuyo caso se debe cancelar la operación y no Media general se deben calcular.</span><span class="sxs-lookup"><span data-stu-id="7c28a-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="7c28a-111">Para controlar la cancelación posibles de la operación, el ejemplo crea un <xref:System.Threading.CancellationTokenSource> objeto que genera un token de cancelación que se pasa a un <xref:System.Threading.Tasks.TaskFactory> objeto.</span><span class="sxs-lookup"><span data-stu-id="7c28a-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="7c28a-112">La <xref:System.Threading.Tasks.TaskFactory> objeto a su vez pasa el token de cancelación a cada una de las tareas responsable de recopilar lecturas para un método determinado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="7c28a-113">El <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método se llama para asegurarse de que se calcula la media solo después de que haya recopilado correctamente todas las lecturas.</span><span class="sxs-lookup"><span data-stu-id="7c28a-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="7c28a-114">Si una tarea tiene no porque se ha cancelado, la llamada a la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> método produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="7c28a-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7c28a-115">Todos los miembros públicos y protegidos de <see cref="T:System.Threading.CancellationToken" /> son seguros para subprocesos y se pueden usar simultáneamente desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="7c28a-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-116">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-116">Cancellation</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-117">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-117">Task Cancellation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberSignature Language="F#" Value="new System.Threading.CancellationToken : bool -&gt; System.Threading.CancellationToken" Usage="new System.Threading.CancellationToken canceled" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled"><span data-ttu-id="7c28a-118">El estado cancelado para el token.</span><span class="sxs-lookup"><span data-stu-id="7c28a-118">The canceled state for the token.</span></span></param>
        <summary><span data-ttu-id="7c28a-119">Inicializa el <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-119">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-120">Los tokens creados con este constructor permanecerán en el estado cancelado, especificado por el `canceled` parámetro.</span><span class="sxs-lookup"><span data-stu-id="7c28a-120">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="7c28a-121">Si `canceled` es `false`, ambos <xref:System.Threading.CancellationToken.CanBeCanceled%2A> y <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> será `false`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-121">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="7c28a-122">Si `canceled` es `true`, ambos <xref:System.Threading.CancellationToken.CanBeCanceled%2A> y <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> será `true`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-122">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-123">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-123">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-124">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-124">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeCanceled : bool" Usage="System.Threading.CancellationToken.CanBeCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c28a-125">Obtiene si este token es capaz de existir en el estado cancelado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-125">Gets whether this token is capable of being in the canceled state.</span></span></summary>
        <value><span data-ttu-id="7c28a-126"><see langword="true" /> si este token puede estar en estado cancelado; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-126"><see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-127">Si <xref:System.Threading.CancellationToken.CanBeCanceled%2A> devuelve `false`, se garantiza que el token nunca pasará a un estado cancelado, lo que significa que <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> nunca devolverá `true`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-127">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="7c28a-128">Devuelve un token de cancelación que no se puede cancelar estático <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="7c28a-128">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="7c28a-129">También puede usar esta propiedad para determinar si puede ser un token de cancelación cancela antes de examinar el valor de la <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propiedad para determinar si se ha cancelado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-129">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-130">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-130">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-131">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-131">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7c28a-132">Determina si la instancia de <see cref="T:System.Threading.CancellationToken" /> actual es igual que el token especificado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-132">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7c28a-133">Se trata del otro objeto que se comparará con esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-133">The other object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="7c28a-134">Determina si la instancia de <see cref="T:System.Threading.CancellationToken" /> actual es igual que la instancia de <see cref="T:System.Object" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-134">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="7c28a-135"><see langword="true" /> si <paramref name="other" /> es <see cref="T:System.Threading.CancellationToken" /> y si las dos instancias son iguales; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-135"><see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7c28a-136">Vea la sección Comentarios para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="7c28a-136">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="7c28a-137">Dos tokens de cancelación son iguales si cualquiera de las siguientes condiciones es verdadera:</span><span class="sxs-lookup"><span data-stu-id="7c28a-137">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="7c28a-138">Están asociados con el mismo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-138">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="7c28a-139">Ambos se construyeron público <xref:System.Threading.CancellationToken> constructores y sus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-139">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="7c28a-140">El valor de ambos tokens de cancelación es <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-140">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-141">Se eliminó un <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-141">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-142">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-142">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-143">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-143">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Threading.CancellationToken -&gt; bool" Usage="cancellationToken.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7c28a-144">Se trata del otro elemento <see cref="T:System.Threading.CancellationToken" /> que se comparará con esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-144">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="7c28a-145">Determina si la instancia de <see cref="T:System.Threading.CancellationToken" /> actual es igual que el token especificado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-145">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span></span></summary>
        <returns><span data-ttu-id="7c28a-146"><see langword="true" /> si las instancias son iguales; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-146"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7c28a-147">Vea la sección Comentarios para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="7c28a-147">See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="7c28a-148">Dos tokens de cancelación son iguales si cualquiera de las siguientes condiciones es verdadera:</span><span class="sxs-lookup"><span data-stu-id="7c28a-148">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="7c28a-149">Están asociados con el mismo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-149">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="7c28a-150">Ambos se construyeron público <xref:System.Threading.CancellationToken> constructores y sus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-150">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="7c28a-151">El valor de ambos tokens de cancelación es <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-151">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-152">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-152">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-153">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-153">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cancellationToken.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7c28a-154">Sirve como función hash de un objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-154">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <returns><span data-ttu-id="7c28a-155">Código hash de la instancia de <see cref="T:System.Threading.CancellationToken" /> actual.</span><span class="sxs-lookup"><span data-stu-id="7c28a-155">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCancellationRequested : bool" Usage="System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c28a-156">Obtiene si se ha solicitado la cancelación para este token.</span><span class="sxs-lookup"><span data-stu-id="7c28a-156">Gets whether cancellation has been requested for this token.</span></span></summary>
        <value><span data-ttu-id="7c28a-157"><see langword="true" /> si se solicitó la cancelación de este token; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-157"><see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-158">Esta propiedad indica si se ha solicitado la cancelación para este token, ya sea a través del token que se construye inicialmente en un estado cancelado o llamando a <xref:System.Threading.CancellationTokenSource.Cancel%2A> en el token asociado a la <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-158">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="7c28a-159">Si esta propiedad es `true`, solo garantiza que se ha solicitado la cancelación.</span><span class="sxs-lookup"><span data-stu-id="7c28a-159">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="7c28a-160">No se garantiza que cada controlador registrado ha terminado de ejecutar, ni que las solicitudes de cancelación han acabado de propagarse a todos los controladores registrados.</span><span class="sxs-lookup"><span data-stu-id="7c28a-160">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="7c28a-161">Una sincronización adicional puede ser necesaria, especialmente en situaciones donde se cancelan los objetos relacionados al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-161">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7c28a-162">El siguiente es un ejemplo sencillo que se ejecuta un proceso de servidor hasta que el <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propiedad devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-162">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="7c28a-163">El ejemplo crea un <xref:System.Threading.CancellationTokenSource> objeto, que controla el acceso al token de cancelación.</span><span class="sxs-lookup"><span data-stu-id="7c28a-163">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="7c28a-164">A continuación, define dos procedimientos de subproceso.</span><span class="sxs-lookup"><span data-stu-id="7c28a-164">It then defines two thread procedures.</span></span> <span data-ttu-id="7c28a-165">El primero se define como una expresión lambda que agrupa el teclado y, cuando se presiona la tecla "C", se llama a <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> para establecer el token de cancelación al estado cancelado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-165">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="7c28a-166">El segundo es un método con parámetros, `ServerClass.StaticMethod`, que ejecuta un bucle hasta que el <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-166">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="7c28a-167">El subproceso principal, a continuación, inicia los dos subprocesos y bloques hasta que el subproceso que se ejecuta el `ServerClass.StaticMethod` finaliza el método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-167">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-168">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-168">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-169">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-169">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Threading.CancellationToken" Usage="System.Threading.CancellationToken.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c28a-170">Devuelve un valor <see cref="T:System.Threading.CancellationToken" /> vacío.</span><span class="sxs-lookup"><span data-stu-id="7c28a-170">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span></span></summary>
        <value><span data-ttu-id="7c28a-171">Token de cancelación vacío.</span><span class="sxs-lookup"><span data-stu-id="7c28a-171">An empty cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-172">El token de cancelación devuelve esta propiedad no se puede cancelar; es decir, su <xref:System.Threading.CancellationToken.CanBeCanceled%2A> propiedad es `false`.</span><span class="sxs-lookup"><span data-stu-id="7c28a-172">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="7c28a-173">También puede usar C# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) instrucción para crear un token de cancelación vacío.</span><span class="sxs-lookup"><span data-stu-id="7c28a-173">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="7c28a-174">Dos tokens de cancelación vacío siempre son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-174">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-175">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-175">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-176">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-176">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7c28a-177">Primera instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-177">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="7c28a-178">Segunda instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-178">The second instance.</span></span></param>
        <summary><span data-ttu-id="7c28a-179">Determina si dos instancias de <see cref="T:System.Threading.CancellationToken" /> son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-179">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span></span></summary>
        <returns><span data-ttu-id="7c28a-180"><see langword="true" /> si las instancias son iguales; de lo contrario, <see langword="false" />. Para más información, vea la sección Comentarios.</span><span class="sxs-lookup"><span data-stu-id="7c28a-180"><see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="7c28a-181">Dos tokens de cancelación son iguales si cualquiera de las siguientes condiciones es verdadera:</span><span class="sxs-lookup"><span data-stu-id="7c28a-181">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="7c28a-182">Están asociados con el mismo <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-182">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="7c28a-183">Ambos se construyeron público <xref:System.Threading.CancellationToken> constructores y sus <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valores son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-183">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="7c28a-184">El valor de ambos tokens de cancelación es <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7c28a-184">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-185">Se eliminó un <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-185">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-186">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-186">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-187">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-187">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Threading.CancellationToken * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.CancellationToken.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="7c28a-188">Primera instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-188">The first instance.</span></span></param>
        <param name="right"><span data-ttu-id="7c28a-189">Segunda instancia.</span><span class="sxs-lookup"><span data-stu-id="7c28a-189">The second instance.</span></span></param>
        <summary><span data-ttu-id="7c28a-190">Determina si dos instancias de <see cref="T:System.Threading.CancellationToken" /> no son iguales.</span><span class="sxs-lookup"><span data-stu-id="7c28a-190">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span></span></summary>
        <returns><span data-ttu-id="7c28a-191"><see langword="true" /> si las instancias no son iguales; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-191"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="7c28a-192">Para la definición de igualdad, consulte el <xref:System.Threading.CancellationToken.Equals%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-192">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-193">Se eliminó un <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-193">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-194">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-194">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-195">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-195">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7c28a-196">Registra un delegado que se invocará cuando se cancele este objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-196">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-197">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-197">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-198">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-198">Task Cancellation</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Register : Action -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="7c28a-199">Delegado que se va a ejecutar cuando se cancele <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <summary><span data-ttu-id="7c28a-200">Registra un delegado que se invocará cuando se cancele este objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-200">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="7c28a-201">Instancia de <see cref="T:System.Threading.CancellationTokenRegistration" /> que se puede usar para anular el registro de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-201">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-202">Si este token ya está en el estado cancelado, se ejecutará el delegado de forma inmediata y sincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="7c28a-202">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="7c28a-203">Cualquier excepción que genera el delegado se propagará fuera de esta llamada al método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-203">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="7c28a-204">Actual <xref:System.Threading.ExecutionContext> se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-204">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="7c28a-205">Actual <xref:System.Threading.SynchronizationContext> no se captura.</span><span class="sxs-lookup"><span data-stu-id="7c28a-205">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-206">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-206">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7c28a-207"><paramref name="callback" /> es null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-207"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-208">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-208">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-209">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-209">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="7c28a-210">Cómo: Registrar devoluciones de llamadas de solicitudes de cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-210">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="7c28a-211">Delegado que se va a ejecutar cuando se cancele <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-211">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="7c28a-212">Un valor que indica si se va a capturar el <see cref="T:System.Threading.SynchronizationContext" /> actual y si se va a usar al invocar <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-212">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="7c28a-213">Registra un delegado que se invocará cuando se cancele este objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-213">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="7c28a-214">Instancia de <see cref="T:System.Threading.CancellationTokenRegistration" /> que se puede usar para anular el registro de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-214">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-215">Si este token ya está en el estado cancelado, se ejecutará el delegado de forma inmediata y sincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="7c28a-215">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="7c28a-216">Cualquier excepción que genera el delegado se propagará fuera de esta llamada al método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-216">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="7c28a-217">Actual <xref:System.Threading.ExecutionContext> se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-217">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="7c28a-218">Si `useSynchronizationContext` es `true`, actual <xref:System.Threading.SynchronizationContext>, si uno existe, también se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-218">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="7c28a-219">En caso contrario, <xref:System.Threading.SynchronizationContext> no se captura.</span><span class="sxs-lookup"><span data-stu-id="7c28a-219">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-220">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-220">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7c28a-221"><paramref name="callback" /> es null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-221"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-222">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-222">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-223">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-223">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="7c28a-224">Cómo: Registrar devoluciones de llamadas de solicitudes de cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-224">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="7c28a-225">Delegado que se va a ejecutar cuando se cancele <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-225">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="7c28a-226">El estado que se va a pasar a <paramref name="callback" /> cuando se invoque al delegado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-226">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="7c28a-227">Puede ser null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-227">This may be null.</span></span></param>
        <summary><span data-ttu-id="7c28a-228">Registra un delegado que se invocará cuando se cancele este objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-228">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="7c28a-229">Instancia de <see cref="T:System.Threading.CancellationTokenRegistration" /> que se puede usar para anular el registro de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-229">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-230">Si este token ya está en el estado cancelado, se ejecutará el delegado de forma inmediata y sincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="7c28a-230">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="7c28a-231">Cualquier excepción que genera el delegado se propagará fuera de esta llamada al método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-231">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="7c28a-232">Actual <xref:System.Threading.ExecutionContext> se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-232">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="7c28a-233">Actual <xref:System.Threading.SynchronizationContext> no se captura.</span><span class="sxs-lookup"><span data-stu-id="7c28a-233">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-234">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-234">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7c28a-235"><paramref name="callback" /> es null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-235"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-236">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-236">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-237">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-237">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="7c28a-238">Cómo: Registrar devoluciones de llamadas de solicitudes de cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-238">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberSignature Language="F#" Value="member this.Register : Action&lt;obj&gt; * obj * bool -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.Register (callback, state, useSynchronizationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="7c28a-239">Delegado que se va a ejecutar cuando se cancele <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-239">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></param>
        <param name="state"><span data-ttu-id="7c28a-240">El estado que se va a pasar a <paramref name="callback" /> cuando se invoque al delegado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-240">The state to pass to the <paramref name="callback" /> when the delegate is invoked.</span></span> <span data-ttu-id="7c28a-241">Puede ser null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-241">This may be null.</span></span></param>
        <param name="useSynchronizationContext"><span data-ttu-id="7c28a-242">Un valor booleano que indica si se va a capturar el <see cref="T:System.Threading.SynchronizationContext" /> actual y si se va a usar al invocar <paramref name="callback" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-242">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <paramref name="callback" />.</span></span></param>
        <summary><span data-ttu-id="7c28a-243">Registra un delegado que se invocará cuando se cancele este objeto <see cref="T:System.Threading.CancellationToken" />.</span><span class="sxs-lookup"><span data-stu-id="7c28a-243">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span></span></summary>
        <returns><span data-ttu-id="7c28a-244">Instancia de <see cref="T:System.Threading.CancellationTokenRegistration" /> que se puede usar para anular el registro de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="7c28a-244">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-245">Si este token ya está en el estado cancelado, se ejecutará el delegado de forma inmediata y sincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="7c28a-245">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="7c28a-246">Cualquier excepción que genera el delegado se propagará fuera de esta llamada al método.</span><span class="sxs-lookup"><span data-stu-id="7c28a-246">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="7c28a-247">Actual <xref:System.Threading.ExecutionContext> se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-247">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="7c28a-248">Si `useSynchronizationContext` es `true`, actual <xref:System.Threading.SynchronizationContext>, si uno existe, también se captura junto con el delegado y se utilizará al ejecutarlo.</span><span class="sxs-lookup"><span data-stu-id="7c28a-248">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="7c28a-249">En caso contrario, <xref:System.Threading.SynchronizationContext> no se captura.</span><span class="sxs-lookup"><span data-stu-id="7c28a-249">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-250">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-250">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7c28a-251"><paramref name="callback" /> es null.</span><span class="sxs-lookup"><span data-stu-id="7c28a-251"><paramref name="callback" /> is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-252">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-252">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-253">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-253">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/8838dd75-18ed-4b8b-b322-cd4531faac64"><span data-ttu-id="7c28a-254">Cómo: Registrar devoluciones de llamadas de solicitudes de cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-254">How to: Register Callbacks for Cancellation Requests</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberSignature Language="F#" Value="member this.ThrowIfCancellationRequested : unit -&gt; unit" Usage="cancellationToken.ThrowIfCancellationRequested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7c28a-255">Produce <see cref="T:System.OperationCanceledException" /> si este token ha tenido una solicitud de cancelación.</span><span class="sxs-lookup"><span data-stu-id="7c28a-255">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-256">Este método proporciona la funcionalidad equivalente para:</span><span class="sxs-lookup"><span data-stu-id="7c28a-256">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="7c28a-257">C#</span><span class="sxs-lookup"><span data-stu-id="7c28a-257">C#</span></span>  
  
```csharp  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="7c28a-258">Se solicitó la cancelación del token.</span><span class="sxs-lookup"><span data-stu-id="7c28a-258">The token has had cancellation requested.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-259">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-259">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-260">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-260">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-261">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-261">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md"><span data-ttu-id="7c28a-262">Cómo: Cancelar una tarea y sus elementos secundarios</span><span class="sxs-lookup"><span data-stu-id="7c28a-262">How to: Cancel a Task and Its Children</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegister">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration UnsafeRegister (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration UnsafeRegister(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnsafeRegister (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration UnsafeRegister(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.UnsafeRegister : Action&lt;obj&gt; * obj -&gt; System.Threading.CancellationTokenRegistration" Usage="cancellationToken.UnsafeRegister (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitHandle : System.Threading.WaitHandle" Usage="System.Threading.CancellationToken.WaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c28a-263">Obtiene un <see cref="T:System.Threading.WaitHandle" /> que se señala cuando el token se cancela.</span><span class="sxs-lookup"><span data-stu-id="7c28a-263">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></summary>
        <value><span data-ttu-id="7c28a-264"><see cref="T:System.Threading.WaitHandle" /> que se señala cuando el token se cancela.</span><span class="sxs-lookup"><span data-stu-id="7c28a-264">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c28a-265">Acceso a esta propiedad provoca un <xref:System.Threading.WaitHandle> creación de instancias.</span><span class="sxs-lookup"><span data-stu-id="7c28a-265">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="7c28a-266">Es preferible utilizar solo esta propiedad cuando sea necesario y, a continuación, eliminar el asociado <xref:System.Threading.CancellationTokenSource> instancia a la primera oportunidad (eliminando el origen se eliminará el controlador asignado).</span><span class="sxs-lookup"><span data-stu-id="7c28a-266">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="7c28a-267">El identificador no debe cerrado o desechado directamente.</span><span class="sxs-lookup"><span data-stu-id="7c28a-267">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7c28a-268">Se eliminó el <see cref="T:System.Threading.CancellationTokenSource" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="7c28a-268">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="7c28a-269">Cancelación</span><span class="sxs-lookup"><span data-stu-id="7c28a-269">Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="7c28a-270">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="7c28a-270">Task Cancellation</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/6e2aa49b-fc84-4bcf-962b-17db98b7edcb"><span data-ttu-id="7c28a-271">Cómo: Realizar escuchas de solicitudes de cancelación cuando tienen controladores de espera</span><span class="sxs-lookup"><span data-stu-id="7c28a-271">How to: Listen for Cancellation Requests That Have Wait Handles</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>