<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="277c43eb88a67a34c9bfcd8ab649d418c83e3121" /><Meta Name="ms.sourcegitcommit" Value="cbcba80f998e27b87425ad54726bdb684fb3a932" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="09/04/2018" /><Meta Name="ms.locfileid" Value="43616088" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="13f07-101">Proporciona una transacción interna de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="13f07-101">Provides a Message Queuing internal transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-102">Para enviar o recibir un mensaje como parte de una transacción, puede utilizar el <xref:System.Messaging.MessageQueueTransaction> clase para crear una transacción y pasarla a una sobrecarga de la <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> método o la <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> método que toma un `transaction` parámetro.</span><span class="sxs-lookup"><span data-stu-id="13f07-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="13f07-103">Mensajes enviados como parte de una transacción deben enviarse a colas transaccionales.</span><span class="sxs-lookup"><span data-stu-id="13f07-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="13f07-104">Mensajes recibidos de las colas transaccionales deben recibirse utilizando una transacción especificada.</span><span class="sxs-lookup"><span data-stu-id="13f07-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="13f07-105">Además el <xref:System.Messaging.MessageQueue.Receive%2A> método, puede recibir mensajes con un identificador especificado o un identificador de correlación especificado.</span><span class="sxs-lookup"><span data-stu-id="13f07-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="13f07-106">Consulte la <xref:System.Messaging.MessageQueue.ReceiveById%2A> y <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> métodos para obtener más información acerca de cómo recibir mensajes de forma selectiva de las colas transaccionales.</span><span class="sxs-lookup"><span data-stu-id="13f07-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="13f07-107">Mensajes enviados a las colas transaccionales se eliminan si se confirma la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="13f07-108">Del mismo modo, los mensajes recibidos de las colas transaccionales se devuelven a la cola si se deshace la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="13f07-109">Si crea una instancia de un <xref:System.Messaging.MessageQueueTransaction> y pasarla a una sobrecarga aplicable de la <xref:System.Messaging.MessageQueue.Send%2A> método o <xref:System.Messaging.MessageQueue.Receive%2A> método para enviar un mensaje a una cola no transaccional o recibir un mensaje de una cola no transaccional, el método produce una excepción indica "Uso incorrecto de la transacción."</span><span class="sxs-lookup"><span data-stu-id="13f07-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="13f07-110"><xref:System.Messaging.MessageQueueTransaction> Tenga en cuenta el apartamento de subprocesos por lo que si el estado del apartamento es `STA`, no se puede utilizar la transacción en varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="13f07-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="13f07-111">Visual Basic establece el estado del subproceso principal para `STA`, por lo que se debe aplicar el <xref:System.MTAThreadAttribute> en el `Main` subrutina.</span><span class="sxs-lookup"><span data-stu-id="13f07-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="13f07-112">De lo contrario, al enviar un mensaje transaccional mediante otro subproceso se producirá una excepción <xref:System.Messaging.MessageQueueException>.</span><span class="sxs-lookup"><span data-stu-id="13f07-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="13f07-113">Aplica el <xref:System.MTAThreadAttribute> utilizando el siguiente fragmento.</span><span class="sxs-lookup"><span data-stu-id="13f07-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="13f07-114">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="13f07-114">This type is thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-115">Inicializa una nueva instancia de la clase <see cref="T:System.Messaging.MessageQueueTransaction" />.</span><span class="sxs-lookup"><span data-stu-id="13f07-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-116">Este constructor establece la <xref:System.Messaging.MessageQueueTransaction.Status%2A> propiedad `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="13f07-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-117">Deshace la transacción interna pendiente.</span><span class="sxs-lookup"><span data-stu-id="13f07-117">Rolls back the pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marca el final fallido de un proceso iniciado con una llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="13f07-119">Normalmente, uno realiza una llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> en un `Try...Catch` bloque de control de excepciones, colocar una llamada a <xref:System.Messaging.MessageQueueTransaction.Commit%2A> en la `Try` cláusula y una llamada a <xref:System.Messaging.MessageQueueTransaction.Abort%2A> en la `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="13f07-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="13f07-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> deshace toda la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="13f07-121">Esto incluye todos los mensajes enviados o recibidos después de la llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13f07-122">La transacción interna que intenta deshacer no se ha iniciado.</span><span class="sxs-lookup"><span data-stu-id="13f07-122">The internal transaction you are attempting to roll back has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="13f07-123">Se ha producido un error interno de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="13f07-123">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-124">Inicia una nueva transacción interna de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="13f07-124">Begins a new Message Queuing internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marca el inicio del proceso que confirmará o deshará, según el éxito de la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="13f07-126">Si se produce una excepción durante el procesamiento, se deshace toda la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="13f07-127">Esto incluye todos los mensajes enviados o recibidos después de la llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="13f07-128">Normalmente, uno realiza una llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> en un `Try...Catch` bloque de control de excepciones, colocar una llamada a <xref:System.Messaging.MessageQueueTransaction.Commit%2A> en la `Try` cláusula y una llamada a <xref:System.Messaging.MessageQueueTransaction.Abort%2A> en la `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="13f07-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13f07-129">Ya se inició la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-129">The transaction has already been started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="13f07-130">Se ha producido un error interno de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="13f07-130">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-131">Confirma una transacción interna pendiente.</span><span class="sxs-lookup"><span data-stu-id="13f07-131">Commits a pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marca el final correcto de un proceso iniciado con una llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="13f07-133">Si se produce una excepción entre la llamada a la <xref:System.Messaging.MessageQueueTransaction.Begin%2A> y la llamada a <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, se deshace toda la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="13f07-134">Esto incluye todos los mensajes enviados o recibidos después de la llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="13f07-135">Normalmente, uno realiza una llamada a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> en un `Try...Catch` bloque de control de excepciones, colocar una llamada a <xref:System.Messaging.MessageQueueTransaction.Commit%2A> en la `Try` cláusula y una llamada a <xref:System.Messaging.MessageQueueTransaction.Abort%2A> en la `Catch` cláusula.</span><span class="sxs-lookup"><span data-stu-id="13f07-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="13f07-136">La transacción que intenta confirmar no se ha iniciado.</span><span class="sxs-lookup"><span data-stu-id="13f07-136">The transaction you are trying to commit has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="13f07-137">Se ha producido un error interno de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="13f07-137">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="13f07-138">Libera los recursos que usa <see cref="T:System.Messaging.MessageQueueTransaction" />.</span><span class="sxs-lookup"><span data-stu-id="13f07-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-139">Libera todos los recursos que usa <see cref="T:System.Messaging.MessageQueueTransaction" />.</span><span class="sxs-lookup"><span data-stu-id="13f07-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-140">Una llamada a <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> permite a los recursos utilizados por el <xref:System.Messaging.MessageQueueTransaction> que reasignarse para otros fines.</span><span class="sxs-lookup"><span data-stu-id="13f07-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="13f07-141">Para obtener más información acerca de `Dispose`, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="13f07-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="13f07-142">Las transacciones internas pendientes se deshacen <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="13f07-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="13f07-143">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="13f07-143"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="13f07-144">Libera los recursos no administrados que usa <see cref="T:System.Messaging.MessageQueueTransaction" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="13f07-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-145">Este método se llama por el público <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> método y el <xref:System.Object.Finalize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="13f07-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="13f07-146">`Dispose` invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="13f07-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="13f07-147"><xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="13f07-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="13f07-148">Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.Messaging.MessageQueueTransaction> hace referencia.</span><span class="sxs-lookup"><span data-stu-id="13f07-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="13f07-149">Este método invoca al método `Dispose` de cada uno de los objetos a los que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="13f07-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="13f07-150"><para>
            <see langword="Dispose" /> puede llamarse varias veces por otros objetos. Al invalidar <see langword="Dispose(Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose" />, consulte [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Para obtener más información acerca de <see langword="Dispose" /> y <see langword="Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [reemplazar el método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></span><span class="sxs-lookup"><span data-stu-id="13f07-150"><para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f07-151">Libera los recursos mantenidos por la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="13f07-151">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-152">Este método invalida <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="13f07-152">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13f07-153">Código de la aplicación no debe llamar a este método; un objeto <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> método se invoca automáticamente durante la recolección de elementos no utilizados, a menos que se ha deshabilitado la finalización por el recolector de elementos no utilizados mediante una llamada a la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="13f07-153">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="13f07-154">Para obtener más información, consulte [métodos de finalización y destructores](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md), y [reemplazar el método Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="13f07-154">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13f07-155">Obtiene el estado de la transacción.</span><span class="sxs-lookup"><span data-stu-id="13f07-155">Gets the status of the transaction.</span></span></summary>
        <value><span data-ttu-id="13f07-156">Uno de los valores de <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> que indica si la transacción se ha confirmado, anulado, inicializado o está pendiente.</span><span class="sxs-lookup"><span data-stu-id="13f07-156">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="13f07-157">Cuando una instancia de la <xref:System.Messaging.MessageQueueTransaction> se ha creado la clase, el <xref:System.Messaging.MessageQueueTransaction.Status%2A> se establece en el constructor `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="13f07-157">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="13f07-158">Después de llamar a <xref:System.Messaging.MessageQueueTransaction.Begin%2A> , pero antes de una llamada a <xref:System.Messaging.MessageQueueTransaction.Commit%2A> o <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, el <xref:System.Messaging.MessageQueueTransaction.Status%2A> es `Pending`.</span><span class="sxs-lookup"><span data-stu-id="13f07-158">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>