<Type Name="ReservationCollection" FullName="System.IO.Log.ReservationCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3af3e1a742555f90bf2bf9a58d5acc17efc5ab90" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51307965" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReservationCollection : System.Collections.Generic.ICollection&lt;long&gt;, System.Collections.Generic.IEnumerable&lt;long&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReservationCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;int64&gt;, class System.Collections.Generic.IEnumerable`1&lt;int64&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.ReservationCollection" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReservationCollection&#xA;Implements ICollection(Of Long), IEnumerable(Of Long)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReservationCollection abstract : System::Collections::Generic::ICollection&lt;long&gt;, System::Collections::Generic::IEnumerable&lt;long&gt;" />
  <TypeSignature Language="F#" Value="type ReservationCollection = class&#xA;    interface ICollection&lt;int64&gt;&#xA;    interface seq&lt;int64&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1b97d-101">Administra la colección de reservas de espacio realizadas en una secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-101">Manages the collection of space reservations made in a record sequence.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b97d-102">Esta clase representa un conjunto de áreas de reserva que se realizan en una secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-102">This class represents a set of reservation areas that are made in a record sequence.</span></span> <span data-ttu-id="1b97d-103">Al agregar elementos a la colección, se asignan nuevas reservas.</span><span class="sxs-lookup"><span data-stu-id="1b97d-103">Adding items to the collection allocates new reservations.</span></span> <span data-ttu-id="1b97d-104">Al quitar los elementos de la colección, se liberan esas reservas.</span><span class="sxs-lookup"><span data-stu-id="1b97d-104">Removing items from the collection frees those reservations.</span></span>  
  
 <span data-ttu-id="1b97d-105">Una aplicación reserva espacio en el registro cuando tiene datos que se escribirán en el registro en el futuro, pero no puede escribir en él de manera inmediata.</span><span class="sxs-lookup"><span data-stu-id="1b97d-105">An application reserves space in the log when it has data that is to be written to the log in the future, but cannot write it immediately.</span></span> <span data-ttu-id="1b97d-106">Las reservas garantizan que los datos se podrán escribir en el registro cuando estén disponibles para su escritura.</span><span class="sxs-lookup"><span data-stu-id="1b97d-106">Reservations provide a guarantee that the data can be written to the log when the data is available to be written.</span></span> <span data-ttu-id="1b97d-107">Al utilizar registros, las aplicaciones reservan a menudo una o más entradas de registro en un área de ordenamiento.</span><span class="sxs-lookup"><span data-stu-id="1b97d-107">When using logs, applications often reserve one or more log records in a marshalling area.</span></span> <span data-ttu-id="1b97d-108">Debe reservar los registros antes de anexarlos.</span><span class="sxs-lookup"><span data-stu-id="1b97d-108">You must reserve records prior to appending them.</span></span>  
  
 <span data-ttu-id="1b97d-109">Las reservas se pueden utilizar para garantizar que se puede completar una operación antes de que se confirmen los datos; de lo contrario, se deshacen los cambios.</span><span class="sxs-lookup"><span data-stu-id="1b97d-109">Reservations can be used to guarantee that an operation can be completed before the data is committed; otherwise, the changes are rolled back.</span></span> <span data-ttu-id="1b97d-110">También se puede utilizar para grabar una "acción de deshacer" en el registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-110">It can also be used to record an "undo action" in the log.</span></span> <span data-ttu-id="1b97d-111">Durante una operación de reversión, un administrador de recursos transaccional (RM) debe poder recuperar su estado si se interrumpe el RM durante la operación de reversión.</span><span class="sxs-lookup"><span data-stu-id="1b97d-111">During a rollback operation, a transactional resource manager (RM) must be able to recover its state if the RM is interrupted during the rollback operation.</span></span> <span data-ttu-id="1b97d-112">Mediante el uso de un área de reserva, un RM puede reservar espacio en un registro antes de utilizarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-112">By using a reservation area, an RM can reserve space in a log before it is used.</span></span>  
  
 <span data-ttu-id="1b97d-113">El método <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> puede reservar espacio o anexar datos, o ambos, en función de los parámetros que se especifiquen al realizar la llamada.</span><span class="sxs-lookup"><span data-stu-id="1b97d-113">The <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method can either reserve space or append data, or both, depending on the parameters that are specified when making the call.</span></span> <span data-ttu-id="1b97d-114">A medida que el trabajo progresa en una transacción, una aplicación puede anexar la información de deshacer y reservar espacio para los registros de compensación.</span><span class="sxs-lookup"><span data-stu-id="1b97d-114">As work progresses in a transaction, an application can append the undo information and reserve space for compensation records.</span></span> <span data-ttu-id="1b97d-115">Durante una operación de reversión, los registros de compensación que se crean indican lo que se ha deshecho en el disco.</span><span class="sxs-lookup"><span data-stu-id="1b97d-115">During a rollback operation, compensation records that are created indicate what has been undone on the disk.</span></span> <span data-ttu-id="1b97d-116">Los registros se anexan utilizando espacio que se ha reservado previamente.</span><span class="sxs-lookup"><span data-stu-id="1b97d-116">The records are appended using space that has been previously reserved.</span></span> <span data-ttu-id="1b97d-117">Esto garantiza que un RM no se quedará sin espacio de registro, lo que es una condición grave, mientras realiza una operación de reversión.</span><span class="sxs-lookup"><span data-stu-id="1b97d-117">This guarantees that an RM does not run out of log space, which is a fatal condition, while performing a rollback operation.</span></span> <span data-ttu-id="1b97d-118">Si un registro se rellena durante una transacción, una aplicación puede deshacer una transacción sin ningún riesgo sin dañar los datos durables.</span><span class="sxs-lookup"><span data-stu-id="1b97d-118">If a log fills up during a transaction, an application can safely roll back a transaction without corrupting durable data.</span></span>  
  
 <span data-ttu-id="1b97d-119">CLFS es un sistema de registro conforme con ARIES, diseñado para el registro de escritura previa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-119">CLFS is an ARIES-compliant logging system, meant for write-ahead logging.</span></span> <span data-ttu-id="1b97d-120">En el registro de escritura previa, una aplicación escribe un registro de deshacer antes de realizar la operación, reservando la cantidad de espacio que se necesita en el registro para escribir un registro de compensación, que se puede utilizar durante la reversión.</span><span class="sxs-lookup"><span data-stu-id="1b97d-120">In write-ahead logging, an application writes an undo record before it performs the operation, reserving the amount of space it takes in the log to write a compensating record, which may be used during rollback.</span></span> <span data-ttu-id="1b97d-121">Más adelante, se utiliza el espacio reservado cuando se escribe realmente el registro de compensación.</span><span class="sxs-lookup"><span data-stu-id="1b97d-121">Later, the reserved space is used when the compensation record is actually written.</span></span>  
  
 <span data-ttu-id="1b97d-122">Las aplicaciones pueden reservar o tener acceso a un gran espacio en cualquier momento dado (son operaciones mutuamente excluyentes).</span><span class="sxs-lookup"><span data-stu-id="1b97d-122">Applications can either reserve or access long space at any given time (they are mutually exclusive operations).</span></span> <span data-ttu-id="1b97d-123">Una vez escrito en el registro un registro de confirmación, una aplicación puede liberar las reservas para los registros de compensación.</span><span class="sxs-lookup"><span data-stu-id="1b97d-123">After a commit record is written to the log, an application can free up the reservations for the compensation records.</span></span> <span data-ttu-id="1b97d-124">Esta acción se puede hacer llamando al método <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> o <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>.</span><span class="sxs-lookup"><span data-stu-id="1b97d-124">This action can be done by calling either the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> or <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.</span></span> <span data-ttu-id="1b97d-125">Llamar al método <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> garantiza que la operación sea atómica, mientras que llamar al método <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> no lo hace.</span><span class="sxs-lookup"><span data-stu-id="1b97d-125">Calling the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method guarantees that the operation is atomic, while calling the <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> method does not.</span></span>  
  
 <span data-ttu-id="1b97d-126">Al liberar registros, debe liberar los mismos registros que reservó conjuntamente en una llamada anterior al método <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>.</span><span class="sxs-lookup"><span data-stu-id="1b97d-126">When you free records, you must free the same records that you reserved together in a previous call to the <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1b97d-127">Su implementación de <xref:System.IO.Log.IRecordSequence> debe implementar los métodos <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> y <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> para realizar la asignación y desasignación de la reserva real.</span><span class="sxs-lookup"><span data-stu-id="1b97d-127">Your implementation of <xref:System.IO.Log.IRecordSequence> must implement the <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> and <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> methods to perform the actual reservation allocation and deallocation.</span></span> <span data-ttu-id="1b97d-128">Además, su implementación también debe llamar a <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> cuando se escribe un registro en un espacio reservado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-128">In addition, your implementation must also call <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A> when a record is written into a reserved space.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1b97d-129">Las reservas se pueden realizar de dos maneras como se muestra en los ejemplos siguientes.</span><span class="sxs-lookup"><span data-stu-id="1b97d-129">Reservations can be performed in two ways as shown in the following examples.</span></span> <span data-ttu-id="1b97d-130">Puede adoptar los ejercicios de los ejemplos para el procesamiento robusto.</span><span class="sxs-lookup"><span data-stu-id="1b97d-130">You can adopt the practices in the samples for robust processing.</span></span> <span data-ttu-id="1b97d-131">Observe que esta tarea sólo se puede realizar al utilizar la clase <xref:System.IO.Log.LogRecordSequence> basada en CLFS.</span><span class="sxs-lookup"><span data-stu-id="1b97d-131">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
//Using the ReserveAndAppend Method  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
long[] lengthOfUndoRecords = new long[] { 1000 };  
recordSequence.ReserveAndAppend(recordData,  
                                                     userSqn,  
                                                     previousSqn,  
                                                     RecordSequenceAppendOptions.None,  
                                                     reservations,  
                                                     lengthOfUndoRecords);  
recordSequence.Append(undoRecordData,    // If necessary …  
                                    userSqn,  
                                    previousSqn,  
                                    RecordSequenceAppendOptions.ForceFlush,  
                                    reservations);  
  
// Using the Manual Approach  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReservationCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b97d-132">Inicializa una nueva instancia de la clase <see cref="T:System.IO.Log.ReservationCollection" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-132">Initializes a new instance of the <see cref="T:System.IO.Log.ReservationCollection" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Add(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(long size);" />
      <MemberSignature Language="F#" Value="abstract member Add : int64 -&gt; unit&#xA;override this.Add : int64 -&gt; unit" Usage="reservationCollection.Add size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-133">Tamaño, en bytes, de la reserva solicitada.</span><span class="sxs-lookup"><span data-stu-id="1b97d-133">The size of the requested reservation, in bytes.</span></span></param>
        <summary><span data-ttu-id="1b97d-134">Asigna una reserva y la agrega a la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-134">Allocates a reservation and adds it to the collection.</span></span> <span data-ttu-id="1b97d-135">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-135">This method cannot be inherited.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1b97d-136">El siguiente ejemplo muestra cómo realizar una reserva manualmente.</span><span class="sxs-lookup"><span data-stu-id="1b97d-136">The following example shows how to manually make a reservation.</span></span> <span data-ttu-id="1b97d-137">Observe que esta tarea sólo se puede realizar al utilizar la clase <xref:System.IO.Log.LogRecordSequence> basada en CLFS.</span><span class="sxs-lookup"><span data-stu-id="1b97d-137">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1b97d-138"><paramref name="archiveTail" /> no está entre la base y últimos números de secuencia de esta secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-138"><paramref name="archiveTail" /> is not between the base and last sequence numbers of this sequence.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b97d-139"><paramref name="size" /> no es válido o supera el tamaño de reserva máximo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-139"><paramref name="size" /> is invalid or exceeds maximum reservation size.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1b97d-140">Se produce un error de E/S al crear la captura del archivo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-140">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-141">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-141">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-142">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-142">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-143">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-143">Access for the specified log store is denied by the operating system.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1b97d-144">La secuencia del registro está completa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-144">The record sequence is full.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="reservationCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b97d-145">Libera todas las reservas de la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-145">Releases all of the reservations in the collection.</span></span> <span data-ttu-id="1b97d-146">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-146">This method cannot be inherited.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b97d-147"><paramref name="size" /> no es válido o supera el tamaño de reserva máximo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-147"><paramref name="size" /> is invalid or exceeds maximum reservation size.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1b97d-148">Se produce un error de E/S al crear la captura del archivo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-148">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-149">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-149">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-150">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-150">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1b97d-151">La secuencia del registro está completa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-151">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-152">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-152">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Contains(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (size As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(long size);" />
      <MemberSignature Language="F#" Value="abstract member Contains : int64 -&gt; bool&#xA;override this.Contains : int64 -&gt; bool" Usage="reservationCollection.Contains size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-153">El tamaño que se va a ubicar en la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-153">The size to locate in the collection.</span></span></param>
        <summary><span data-ttu-id="1b97d-154">Determina si se ha realizado una reserva del tamaño especificado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-154">Determines whether a reservation of the specified size has been made.</span></span> <span data-ttu-id="1b97d-155">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-155">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1b97d-156"><see langword="true" /> si, al menos, se ha realizado una reserva del tamaño especificado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-156"><see langword="true" /> if at least one reservation of the specified size has been made; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-157">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-157">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-158">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-158">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-159">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-159">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (long[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int64[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Long(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;long&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : int64[] * int -&gt; unit&#xA;override this.CopyTo : int64[] * int -&gt; unit" Usage="reservationCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Int64[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="1b97d-160">La matriz que es el destino de la copia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-160">The array that is the destination of the copy.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="1b97d-161">Índice de base cero de la matriz donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-161">The zero-based index in the array at which copying begins.</span></span></param>
        <summary><span data-ttu-id="1b97d-162">Copia la colección completa en una matriz unidimensional, comenzando por el índice especificado de la matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="1b97d-162">Copies the entire collection to a one-dimensional array, starting at the specified index of the target array.</span></span> <span data-ttu-id="1b97d-163">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-163">This method cannot be inherited.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1b97d-164">El valor de <paramref name="array" /> o <paramref name="arrayIndex" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-164"><paramref name="array" /> or <paramref name="arrayIndex" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1b97d-165"><paramref name="arrayIndex" /> es menor que cero, o mayor o igual que la longitud de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-165"><paramref name="arrayIndex" /> is less than zero, or greater than or equal to the length of <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b97d-166">No hay espacio suficiente en la matriz especificada para copiar los datos.</span><span class="sxs-lookup"><span data-stu-id="1b97d-166">There is not enough space in the specified array to copy the data.</span></span>  
  
<span data-ttu-id="1b97d-167">O bien</span><span class="sxs-lookup"><span data-stu-id="1b97d-167">-or-</span></span> 
 <span data-ttu-id="1b97d-168"><paramref name="array" /> no es una matriz unidimensional, que es el único tipo admitido para la acción solicitada.</span><span class="sxs-lookup"><span data-stu-id="1b97d-168"><paramref name="array" /> is not a single dimensional array, which is the only type supported for the requested action.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-169">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-169">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-170">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-170">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-171">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-171">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.ReservationCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1b97d-172">Obtiene el número de reservas de la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-172">Gets the number of reservations in the collection.</span></span></summary>
        <value><span data-ttu-id="1b97d-173">El número de reservas de la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-173">The number of reservations in the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReservationCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="reservationCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b97d-174">Permite que el objeto <see cref="T:System.IO.Log.ReservationCollection" /> libere recursos antes de ser destruido por el recolector de elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="1b97d-174">Allows the <see cref="T:System.IO.Log.ReservationCollection" /> to free resources before it is destroyed by the garbage collector.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeReservation">
      <MemberSignature Language="C#" Value="protected abstract void FreeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.FreeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FreeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FreeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member FreeReservation : int64 -&gt; unit" Usage="reservationCollection.FreeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-175">El tamaño de la reserva que se va a liberar.</span><span class="sxs-lookup"><span data-stu-id="1b97d-175">The size of the reservation to release.</span></span></param>
        <summary><span data-ttu-id="1b97d-176">Cuando se invalida en una clase derivada, libera una reserva del tamaño especificado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-176">When overridden in a derived class, releases a reservation of the specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1b97d-177">Al heredar de <see cref="T:System.IO.Log.ReservationCollection" />, debe implementar este método para liberar espacio realmente en la secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-177">When you inherit from <see cref="T:System.IO.Log.ReservationCollection" />, you must implement this method to actually release space in the record sequence.</span></span> <span data-ttu-id="1b97d-178">No debería llamar a <see cref="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" /> cuando este método esté completado; esa lógica se administra para usted.</span><span class="sxs-lookup"><span data-stu-id="1b97d-178">You should not call <see cref="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" /> when this method is complete; that logic is handled for you.</span></span>  
  
<span data-ttu-id="1b97d-179">Al liberar registros, debe liberar los mismos registros que reservó conjuntamente en una llamada anterior al método <see cref="Overload:System.IO.Log.IRecordSequence.ReserveAndAppend" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-179">When you free records, you must free the same records that you reserved together in a previous call to the <see cref="Overload:System.IO.Log.IRecordSequence.ReserveAndAppend" /> method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetBestMatchingReservation">
      <MemberSignature Language="C#" Value="protected long GetBestMatchingReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int64 GetBestMatchingReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetBestMatchingReservation (size As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; long GetBestMatchingReservation(long size);" />
      <MemberSignature Language="F#" Value="member this.GetBestMatchingReservation : int64 -&gt; int64" Usage="reservationCollection.GetBestMatchingReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-180">El tamaño de la reserva que se debe ajustar.</span><span class="sxs-lookup"><span data-stu-id="1b97d-180">The size of the reservation that must be fit.</span></span></param>
        <summary><span data-ttu-id="1b97d-181">Cuando se invalida en una clase derivada, obtiene la mejor reserva correspondiente para un tamaño determinado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-181">When overridden in a derived class, gets the best matching reservation for a given size.</span></span></summary>
        <returns><span data-ttu-id="1b97d-182">Una reserva de la colección que es mayor que o igual al tamaño especificado, o -1 si no existe reserva alguna de este tipo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-182">A reservation from the collection that is greater than or equal to the specified size, or -1 if no such reservation exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b97d-183">Normalmente se llama a este método al anexar un registro del espacio reservado a una secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-183">This method is typically called when appending a record from reserved space to a record sequence.</span></span> <span data-ttu-id="1b97d-184">Al regresar, se ha eliminado de la colección una reserva del tamaño devuelto.</span><span class="sxs-lookup"><span data-stu-id="1b97d-184">When it returns, a reservation of the returned size has been removed from the collection.</span></span> <span data-ttu-id="1b97d-185">Si, por alguna razón, no se tiene acceso al espacio reservado realmente, se debería llamar al método <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> para asegurar que <xref:System.IO.Log.ReservationCollection> representa con precisión la cantidad de espacio reservado en la secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-185">If, for some reason, the reserved space is not actually accessed, the <xref:System.IO.Log.ReservationCollection.ReservationMade%2A> method should be called to ensure that the <xref:System.IO.Log.ReservationCollection> accurately represents the amount of reserved space in the record sequence.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;long&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;int64&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;long&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;" Usage="reservationCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b97d-186">Devuelve un enumerador que puede recorrer en iteración a través de <see cref="T:System.IO.Log.ReservationCollection" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-186">Returns an enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span> <span data-ttu-id="1b97d-187">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-187">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1b97d-188">Un enumerador que puede recorrer en iteración a través de la <see cref="T:System.IO.Log.ReservationCollection" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-188">An enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1b97d-189">La operación no es válida por una de estas razones:</span><span class="sxs-lookup"><span data-stu-id="1b97d-189">The operation is invalid for one of the following reasons:</span></span> 
<span data-ttu-id="1b97d-190">-   La enumeración ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-190">-   The enumeration has ended.</span></span>  
  
<span data-ttu-id="1b97d-191">-   Se ha modificado la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-191">-   The collection has been modified.</span></span>  
  
<span data-ttu-id="1b97d-192">-   La enumeración no se ha iniciado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-192">-   The enumeration has not been started.</span></span> <span data-ttu-id="1b97d-193">Se debe realizar una llamada a <see cref="M:System.Collections.IEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-193">A call to <see cref="M:System.Collections.IEnumerator.MoveNext" /> must be made.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-194">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-194">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-195">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-195">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-196">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-196">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1b97d-197">Obtiene un valor que indica si la colección es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="1b97d-197">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="1b97d-198">Esta propiedad devuelve siempre <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-198">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b97d-199">Una <xref:System.IO.Log.ReservationCollection> nunca es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="1b97d-199">A <xref:System.IO.Log.ReservationCollection> is never read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeReservation">
      <MemberSignature Language="C#" Value="protected abstract void MakeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MakeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.MakeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub MakeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void MakeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member MakeReservation : int64 -&gt; unit" Usage="reservationCollection.MakeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-200">El tamaño de la reserva que se va a asignar.</span><span class="sxs-lookup"><span data-stu-id="1b97d-200">The size of the reservation to allocate.</span></span></param>
        <summary><span data-ttu-id="1b97d-201">Cuando se invalida en una clase derivada, asigna una reserva del tamaño especificado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-201">When overridden in a derived class, allocates a reservation of the specified size.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1b97d-202">Al heredar de <see cref="T:System.IO.Log.ReservationCollection" />, debe implementar este método para reservar espacio realmente en la secuencia de registro.</span><span class="sxs-lookup"><span data-stu-id="1b97d-202">When you inherit from <see cref="T:System.IO.Log.ReservationCollection" />, you must implement this method to actually reserve space in the record sequence.</span></span> <span data-ttu-id="1b97d-203">No debería llamar a <see cref="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" /> cuando este método esté completado; esa lógica se administra para usted.</span><span class="sxs-lookup"><span data-stu-id="1b97d-203">You should not call <see cref="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" /> when this method is complete; that logic is handled for you.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (long item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(int64 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Remove(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(long item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : int64 -&gt; bool&#xA;override this.Remove : int64 -&gt; bool" Usage="reservationCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="1b97d-204">El tamaño de la reserva que se va a liberar.</span><span class="sxs-lookup"><span data-stu-id="1b97d-204">The size of the reservation to release.</span></span></param>
        <summary><span data-ttu-id="1b97d-205">Libera una reserva del tamaño especificado, si se ha realizado una.</span><span class="sxs-lookup"><span data-stu-id="1b97d-205">Releases a reservation of the specified size, if one has been made.</span></span> <span data-ttu-id="1b97d-206">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-206">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1b97d-207"><see langword="true" /> si encontró y eliminó una reserva del tamaño especificado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-207"><see langword="true" /> if a reservation of the specified size was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1b97d-208">El siguiente ejemplo muestra cómo realizar una reserva manualmente.</span><span class="sxs-lookup"><span data-stu-id="1b97d-208">The following example shows how to manually make a reservation.</span></span> <span data-ttu-id="1b97d-209">Observe que esta tarea sólo se puede realizar al utilizar la clase <xref:System.IO.Log.LogRecordSequence> basada en CLFS.</span><span class="sxs-lookup"><span data-stu-id="1b97d-209">Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.</span></span>  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1b97d-210">No se puede encontrar en la colección de reservas especificada ninguna reserva lo suficientemente grande como para ajustar el registro proporcionado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-210">No reservation large enough to fit the provided record can be found in the specified reservation collection.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1b97d-211">Se produce un error de E/S al crear la captura del archivo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-211">An I/O error occurs when creating the archive snapshot.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-212">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-212">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-213">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-213">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.IO.Log.SequenceFullException"><span data-ttu-id="1b97d-214">La secuencia del registro está completa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-214">The record sequence is full.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-215">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-215">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReservationFreed">
      <MemberSignature Language="C#" Value="protected void ReservationFreed (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationFreed(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationFreed (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationFreed(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationFreed : int64 -&gt; unit" Usage="reservationCollection.ReservationFreed size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-216">El tamaño de la reserva que se ha liberado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-216">The size of the reservation that has been released.</span></span></param>
        <summary><span data-ttu-id="1b97d-217">Cuando se invalida en una clase derivada, indica que se ha liberado una reserva.</span><span class="sxs-lookup"><span data-stu-id="1b97d-217">When overridden in a derived class, indicates that a reservation has been released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b97d-218">Al heredar de <xref:System.IO.Log.ReservationCollection>, debe llamar a este método cuando se libere una reserva por un motivo que no sea el eliminarla de la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-218">When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is released for a reason other than removing it from the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReservationMade">
      <MemberSignature Language="C#" Value="protected void ReservationMade (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationMade(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationMade (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationMade(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationMade : int64 -&gt; unit" Usage="reservationCollection.ReservationMade size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="1b97d-219">El tamaño de la reserva que se ha realizado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-219">The size of the reservation that has been made.</span></span></param>
        <summary><span data-ttu-id="1b97d-220">Cuando se invalida en una clase derivada, indica que se ha realizado una reserva.</span><span class="sxs-lookup"><span data-stu-id="1b97d-220">When overridden in a derived class, indicates that a reservation has been made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1b97d-221">Al heredar de <xref:System.IO.Log.ReservationCollection>, debe llamar a este método cuando se realice una reserva fuera de una llamada a <xref:System.IO.Log.ReservationCollection.Add%2A>.</span><span class="sxs-lookup"><span data-stu-id="1b97d-221">When you inherit from <xref:System.IO.Log.ReservationCollection>, you must call this method when a reservation is made outside of a call to <xref:System.IO.Log.ReservationCollection.Add%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1b97d-222">Devuelve un enumerador que puede recorrer en iteración a través de <see cref="T:System.IO.Log.ReservationCollection" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-222">Returns an enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span> <span data-ttu-id="1b97d-223">Este método no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="1b97d-223">This method cannot be inherited.</span></span></summary>
        <returns><span data-ttu-id="1b97d-224">Un enumerador que puede recorrer en iteración a través de la <see cref="T:System.IO.Log.ReservationCollection" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-224">An enumerator that can iterate through the <see cref="T:System.IO.Log.ReservationCollection" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1b97d-225">La operación no es válida por una de estas razones:</span><span class="sxs-lookup"><span data-stu-id="1b97d-225">The operation is invalid for one of the following reasons:</span></span> 
<span data-ttu-id="1b97d-226">-   La enumeración ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-226">-   The enumeration has ended.</span></span>  
  
<span data-ttu-id="1b97d-227">-   Se ha modificado la colección.</span><span class="sxs-lookup"><span data-stu-id="1b97d-227">-   The collection has been modified.</span></span>  
  
<span data-ttu-id="1b97d-228">-   La enumeración no se ha iniciado.</span><span class="sxs-lookup"><span data-stu-id="1b97d-228">-   The enumeration has not been started.</span></span> <span data-ttu-id="1b97d-229">Se debe realizar una llamada a <see cref="M:System.Collections.IEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="1b97d-229">A call to <see cref="M:System.Collections.IEnumerator.MoveNext" /> must be made.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="1b97d-230">Se llamó al método una vez eliminada la secuencia.</span><span class="sxs-lookup"><span data-stu-id="1b97d-230">The method was called after the sequence has been disposed of.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="1b97d-231">No hay bastante memoria para continuar la ejecución del programa.</span><span class="sxs-lookup"><span data-stu-id="1b97d-231">There is not enough memory to continue the execution of the program.</span></span></exception>
        <exception cref="T:System.UnauthorizedAccessException"><span data-ttu-id="1b97d-232">El acceso al almacén del registro especificado ha sido denegado por el sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="1b97d-232">Access for the specified log store is denied by the operating system.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>