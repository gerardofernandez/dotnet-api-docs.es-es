<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9765a35a73e33a7e4affa6bc4de891155e6dac2a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950154" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e5ac4-101">El módulo <see langword="Conversion" /> contiene los procedimientos utilizados para realizar diversas operaciones de conversión.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que conversión a números decimales en otras bases, escriba números en cadenas, cadenas en números y datos de uno a otro.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-103">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-104">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="e5ac4-105">Palabras clave de Visual Basic</span><span class="sxs-lookup"><span data-stu-id="e5ac4-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="e5ac4-106">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</span><span class="sxs-lookup"><span data-stu-id="e5ac4-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e5ac4-107">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="e5ac4-108">Tipo al que se va a convertir el objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="e5ac4-109">Convierte un objeto al tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-110">Objeto cuyo tipo en tiempo de ejecución es el tipo de destino solicitado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-111">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el `TargetType` parámetro.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="e5ac4-112">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="e5ac4-113">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="e5ac4-114">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="e5ac4-115">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="e5ac4-116">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-117">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="e5ac4-118">Trabajar con objetos dinámicos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="e5ac4-119">Tutorial: Crear y utilizar objetos dinámicos (C# y Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="e5ac4-120">Tipo al que se va a convertir el objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="e5ac4-121">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="e5ac4-122">Convierte un objeto al tipo genérico especificado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-123">Objeto con tipos estáticos como el tipo genérico solicitado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-124">El `CTypeDynamic` método convierte el objeto pasado como el `Expression` parámetro al tipo especificado por el tipo del parámetro genérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="e5ac4-125">Si el objeto es un objeto dinámico, el `CTypeDynamic` método aplica a las conversiones dinámicas disponibles.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="e5ac4-126">El `CTypeDynamic` método aplica a las conversiones dinámicas de acuerdo con la semántica de conversión definida por el propio objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="e5ac4-127">Si un objeto dinámico se hereda de <xref:System.Dynamic.DynamicObject>, el `CTypeDynamic` método primero intenta realizar la conversión mediante una conversión estática definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="e5ac4-128">Si se produce un error en la conversión definida por el usuario, estática, el `CTypeDynamic` método intenta realizar la conversión mediante conversiones dinámicas.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="e5ac4-129">Si implementa un objeto dinámico <xref:System.Dynamic.IDynamicMetaObjectProvider>, el `CTypeDynamic` método da prioridad a las conversiones dinámicas a través de las conversiones estáticas definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-130">En el ejemplo siguiente se usa el `CTypeDynamic` método para convertir un objeto dinámico en una cadena mediante la conversión definida por el objeto dinámico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="e5ac4-131">Trabajar con objetos dinámicos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="e5ac4-132">Tutorial: Crear y utilizar objetos dinámicos (C# y Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-133">Devuelve el mensaje de error que corresponde a un número de error determinado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e5ac4-134">Devuelve el mensaje de error que corresponde a un número de error determinado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-135">Mensaje de error correspondiente al error en tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-136">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="e5ac4-137">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="e5ac4-138">Si no se ha producido ningún error de tiempo de ejecución, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="e5ac4-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="e5ac4-139">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-140">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-141"><paramref name="ErrorNumber" /> está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="e5ac4-142">Opcional.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-142">Optional.</span></span> <span data-ttu-id="e5ac4-143">Cualquier número de error válido.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="e5ac4-144">Devuelve el mensaje de error que corresponde a un número de error determinado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-145">Mensaje de error que corresponde a un número de error determinado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-146">El `ErrorToString` función examina los valores de propiedad de la `Err` objeto para identificar el error de tiempo de ejecución más reciente.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="e5ac4-147">El valor devuelto de la `ErrorToString` función corresponde a la `Description` propiedad de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="e5ac4-148">Si `ErrorNumber` es un número de error válido pero no está definido, `ErrorToString` devuelve la cadena `"Application-defined or object-defined error."` si `ErrorNumber` no es válido, se produce un error.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="e5ac4-149">Si `ErrorNumber` se omite, el mensaje correspondiente a la más reciente se devuelve el error de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="e5ac4-150">Si no se ha producido ningún error de tiempo de ejecución o `ErrorNumber` es 0, `ErrorToString` devuelve una cadena de longitud cero ("").</span><span class="sxs-lookup"><span data-stu-id="e5ac4-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="e5ac4-151">En la versión 6.0 y versiones anterior de Visual Basic, esta funcionalidad se proporciona mediante el `Error` función.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-152">El siguiente código utiliza el `ErrorToString` función para mostrar mensajes de error que corresponden a los números de error especificado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-153"><paramref name="ErrorNumber" /> está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-154">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-155">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-155">Required.</span></span> <span data-ttu-id="e5ac4-156">Número de tipo <see langword="Decimal" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-157">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-158">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-159">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-160">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-161">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-162">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="e5ac4-163">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-164">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-165">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-166">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-167">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-168">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-169">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-170">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-171">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-172">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-173">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-175">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-176">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-177">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-178">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-179">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-179">Required.</span></span> <span data-ttu-id="e5ac4-180">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-181">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-182">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-183">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-184">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-185">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-186">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="e5ac4-187">A partir de Visual Basic 15,8, el rendimiento de `Double`-a-se optimiza la conversión de entero si se pasa el valor devuelto por la `Fix` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el `Double`valor devuelto por `Fix` se convierte implícitamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) establecido en `Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="e5ac4-188">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-189">El ejemplo siguiente muestra una conversión de ese tipo optimizada:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="e5ac4-190">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-191">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-192">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-193">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-194">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-195">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-196">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-197">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-198">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-199">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-200">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-202">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-203">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-204">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-205">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-206">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-206">Required.</span></span> <span data-ttu-id="e5ac4-207">Número de tipo <see langword="Short" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-208">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-209">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-210">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-211">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-212">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-213">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-214">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-215">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-216">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-217">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-218">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-219">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-220">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-221">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-222">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-223">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-224">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-226">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-227">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-228">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-229">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-230">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-230">Required.</span></span> <span data-ttu-id="e5ac4-231">Número de tipo <see langword="Integer" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-232">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-233">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-234">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-235">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-236">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-237">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-238">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-239">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-240">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-241">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-242">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-243">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-244">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-245">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-246">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-247">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-248">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-250">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-251">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-252">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-253">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-254">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-254">Required.</span></span> <span data-ttu-id="e5ac4-255">Número de tipo <see langword="Long" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-256">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-257">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-258">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-259">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-260">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-261">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-262">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-263">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-264">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-265">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-266">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-267">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-268">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-269">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-270">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-271">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-272">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-274">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-275">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-276">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-277">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-278">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-278">Required.</span></span> <span data-ttu-id="e5ac4-279">Número de tipo <see langword="Object" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="e5ac4-280">Si <paramref name="Number" /> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="e5ac4-281">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-282">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-283">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-284">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-285">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-286">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="e5ac4-287">A partir de Visual Basic 15,8, si la `Number` argumento es un objeto cuyo tipo en tiempo de ejecución es `Double` o `Single`, se optimiza el rendimiento de la conversión de flotante a punto a entero si se pasa el valor devuelto por la `Fix` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el valor devuelto por `Fix` se convierte automáticamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) se establece en desactivado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="e5ac4-288">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-289">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="e5ac4-290">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-291">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-292">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-293">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-294">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-295">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-296">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-297">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-298">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-299">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-300">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-302">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-303">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-304">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-305">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-306">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-306">Required.</span></span> <span data-ttu-id="e5ac4-307">Número de tipo <see langword="Single" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-308">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-309">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-310">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-311">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-312">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-313">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="e5ac4-314">A partir de Visual Basic 15,8, el rendimiento de `Single`-a-se optimiza la conversión de entero si se pasa el valor devuelto por la `Fix` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el `Single`valor devuelto por `Fix` se convierte automáticamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) se establece en desactivado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="e5ac4-315">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-316">El ejemplo siguiente muestra una conversión de ese tipo optimizada:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="e5ac4-317">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-318">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-319">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-320">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-321">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-322">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-323">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-324">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-325">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-326">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-327">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-329">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-330">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-331">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-332">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-333">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-334">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-334">Required.</span></span> <span data-ttu-id="e5ac4-335">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-336">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-337">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-338">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-339">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-339">If `Number` is</span></span>|<span data-ttu-id="e5ac4-340">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-341">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-341">Empty</span></span>|<span data-ttu-id="e5ac4-342">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-342">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-343">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-343">Any numeric value</span></span>|<span data-ttu-id="e5ac4-344">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-345">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-346">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-347">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-348">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-349"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-351">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-352">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-352">Required.</span></span> <span data-ttu-id="e5ac4-353">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-354">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-355">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-356">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-357">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-357">If `Number` is</span></span>|<span data-ttu-id="e5ac4-358">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-359">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-359">Empty</span></span>|<span data-ttu-id="e5ac4-360">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-360">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-361">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-361">Any numeric value</span></span>|<span data-ttu-id="e5ac4-362">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-363">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-364">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-365">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-366">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-367"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-369">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-370">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-370">Required.</span></span> <span data-ttu-id="e5ac4-371">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-372">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-373">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-374">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-375">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-375">If `Number` is</span></span>|<span data-ttu-id="e5ac4-376">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-377">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-377">Empty</span></span>|<span data-ttu-id="e5ac4-378">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-378">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-379">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-379">Any numeric value</span></span>|<span data-ttu-id="e5ac4-380">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-381">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-382">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-383">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-384">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-385"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-387">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-388">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-388">Required.</span></span> <span data-ttu-id="e5ac4-389">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-390">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-391">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-392">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-393">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-393">If `Number` is</span></span>|<span data-ttu-id="e5ac4-394">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-395">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-395">Empty</span></span>|<span data-ttu-id="e5ac4-396">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-396">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-397">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-397">Any numeric value</span></span>|<span data-ttu-id="e5ac4-398">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-399">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-400">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-401">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-402">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-403"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-405">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-406">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-406">Required.</span></span> <span data-ttu-id="e5ac4-407">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-408">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-409">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-410">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-411">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-411">If `Number` is</span></span>|<span data-ttu-id="e5ac4-412">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-413">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-413">Empty</span></span>|<span data-ttu-id="e5ac4-414">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-414">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-415">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-415">Any numeric value</span></span>|<span data-ttu-id="e5ac4-416">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-417">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-418">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-419">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-420">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-421"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-423">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-424">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-424">Required.</span></span> <span data-ttu-id="e5ac4-425">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-426">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-427">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-428">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-429">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-429">If `Number` is</span></span>|<span data-ttu-id="e5ac4-430">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-431">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-431">Empty</span></span>|<span data-ttu-id="e5ac4-432">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-432">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-433">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-433">Any numeric value</span></span>|<span data-ttu-id="e5ac4-434">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-435">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-436">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-437">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-438">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-439"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-441">Procedimiento Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-442">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-442">Required.</span></span> <span data-ttu-id="e5ac4-443">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-444">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-445">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-446">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-447">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-447">If `Number` is</span></span>|<span data-ttu-id="e5ac4-448">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-449">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-449">Empty</span></span>|<span data-ttu-id="e5ac4-450">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-450">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-451">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-451">Any numeric value</span></span>|<span data-ttu-id="e5ac4-452">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-453">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-454">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-455">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-456">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-457"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-459">Procedimiento Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-460">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-460">Required.</span></span> <span data-ttu-id="e5ac4-461">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-462">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-463">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-464">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-465">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-465">If `Number` is</span></span>|<span data-ttu-id="e5ac4-466">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-467">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-467">Empty</span></span>|<span data-ttu-id="e5ac4-468">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-468">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-469">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-469">Any numeric value</span></span>|<span data-ttu-id="e5ac4-470">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-471">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-472">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-473">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-474">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-475"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-477">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-478">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-478">Required.</span></span> <span data-ttu-id="e5ac4-479">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-480">Devuelve una cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-481">Cadena que representa el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-482">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-483">Si `Number` es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-483">If `Number` is</span></span>|<span data-ttu-id="e5ac4-484">HEX devuelve</span><span class="sxs-lookup"><span data-stu-id="e5ac4-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-485">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-485">Empty</span></span>|<span data-ttu-id="e5ac4-486">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-486">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-487">Cualquier valor numérico</span><span class="sxs-lookup"><span data-stu-id="e5ac4-487">Any numeric value</span></span>|<span data-ttu-id="e5ac4-488">Hasta dieciséis caracteres hexadecimales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-489">Puede representar números hexadecimales directamente anteponiendo números en el intervalo correcto con `&H`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="e5ac4-490">Por ejemplo, `&H10` representa 16 decimal en notación hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-491">Este ejemplo se usa el `Hex` función para devolver el valor hexadecimal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-492">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-493"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="e5ac4-495">Filtrar Convertir cadenas hexadecimales en números</span><span class="sxs-lookup"><span data-stu-id="e5ac4-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-496">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-497">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-497">Required.</span></span> <span data-ttu-id="e5ac4-498">Número de tipo <see langword="Decimal" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-499">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-500">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-501">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-502">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-503">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-504">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="e5ac4-505">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-506">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-507">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-508">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-509">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-510">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-511">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-512">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-513">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-514">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-515">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-517">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-518">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-519">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-520">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-521">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-521">Required.</span></span> <span data-ttu-id="e5ac4-522">Número de tipo <see langword="Double" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-523">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-524">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-525">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-526">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-527">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-528">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="e5ac4-529">A partir de Visual Basic 15,8, se optimiza el rendimiento de la conversión de doble al entero si se pasa el valor devuelto por la `Int` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el valor de tipo Double devuelto por `Int` se convierte automáticamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) se establece en desactivado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="e5ac4-530">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-531">El ejemplo siguiente muestra una conversión de ese tipo optimizada:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="e5ac4-532">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-533">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-534">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-535">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-536">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-537">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-538">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-539">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-540">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-541">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-542">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-544">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-545">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-546">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-547">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-548">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-548">Required.</span></span> <span data-ttu-id="e5ac4-549">Número de tipo <see langword="Short" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-550">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-551">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-552">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-553">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-554">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-555">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-556">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-557">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-558">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-559">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-560">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-561">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-562">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-563">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-564">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-565">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-566">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-568">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-569">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-570">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-571">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-572">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-572">Required.</span></span> <span data-ttu-id="e5ac4-573">Número de tipo <see langword="Integer" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-574">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-575">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-576">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-577">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-578">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-579">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-580">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-581">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-582">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-583">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-584">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-585">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-586">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-587">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-588">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-589">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-590">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-592">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-593">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-594">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-595">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-596">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-596">Required.</span></span> <span data-ttu-id="e5ac4-597">Número de tipo <see langword="Long" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-598">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-599">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-600">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-601">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-602">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-603">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-604">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-605">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-606">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-607">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-608">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-609">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-610">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-611">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-612">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-613">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-614">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-616">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-617">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-618">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-619">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-620">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-620">Required.</span></span> <span data-ttu-id="e5ac4-621">Número de tipo <see langword="Object" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="e5ac4-622">Si <paramref name="Number" /> contiene <see langword="Nothing" />, se devuelve <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="e5ac4-623">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-624">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-625">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-626">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-627">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-628">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="e5ac4-629">A partir de Visual Basic 15,8, si la `Number` argumento es un objeto cuyo tipo en tiempo de ejecución es `Double` o `Single`, se optimiza el rendimiento de la conversión de flotante a punto a entero si se pasa el valor devuelto por la `Int` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el valor devuelto por `Int` se convierte automáticamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) se establece en desactivado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="e5ac4-630">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-631">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="e5ac4-632">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-633">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-634">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-635">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-636">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-637">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-638">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-639">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-640">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-641">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-642">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-644">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-645">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-646">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-647">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-648">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-648">Required.</span></span> <span data-ttu-id="e5ac4-649">Número de tipo <see langword="Single" /> o cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-650">Devuelve la parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-651">Parte entera de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-652">Tanto el `Int` y `Fix` funciones quitan la parte fraccionaria de `Number` y devolver el valor entero resultante.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="e5ac4-653">La diferencia entre `Int` y `Fix` funciones es que, si `Number` es negativo, `Int` devuelve el primer entero negativo menor o igual a `Number`, mientras que `Fix` devuelve el primer entero negativo mayor o igual que `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="e5ac4-654">Por ejemplo, `Int` convierte -8,4 en -9, y `Fix` convierte -8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="e5ac4-655">`Fix(number)` es equivalente a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="e5ac4-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="e5ac4-656">A partir de Visual Basic 15,8, el rendimiento de `Single`-a-se optimiza la conversión de entero si se pasa el valor devuelto por la `Int` método a cualquiera de los [funciones de conversión de enteros](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o si el `Single`valor devuelto por `Int` se convierte automáticamente en un entero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) se establece en desactivado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="e5ac4-657">Esta optimización permite que el código se ejecute más rápido, hasta el doble de rápido para código que realiza un gran número de conversiones a tipos enteros.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="e5ac4-658">El ejemplo siguiente muestra una conversión de ese tipo optimizada:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="e5ac4-659">Este ejemplo se muestra cómo el `Int` y `Fix` funciones devuelven la parte entera de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="e5ac4-660">En el caso de un argumento de número negativo, el `Int` función devuelve el primer entero negativo menor o igual al número; el `Fix` función devuelve el primer entero negativo mayor o igual que el número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="e5ac4-661">El ejemplo siguiente requiere que especifique `Option Strict Off` porque las conversiones implícitas de tipo `Double` escriba `Integer` no se permiten en `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="e5ac4-662">Puede usar el `CInt` función para convertir otros tipos de datos explícitamente al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="e5ac4-663">Sin embargo, `CInt` redondea al entero más cercano en lugar de truncar la parte fraccionaria de números.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="e5ac4-664">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="e5ac4-665">Puede usar el `CInt` función del resultado de una llamada a `Fix` o `Int` para realizar la conversión explícita al entero sin redondear.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="e5ac4-666">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="e5ac4-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="e5ac4-667">Para obtener más información sobre `CInt`, consulte [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-668">No se ha especificado Number.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-669">Number no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e5ac4-671">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="e5ac4-672">Resumen de funciones matemáticas</span><span class="sxs-lookup"><span data-stu-id="e5ac4-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="e5ac4-673">Funciones matemáticas (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-674">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-675">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-676">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-676">Required.</span></span> <span data-ttu-id="e5ac4-677">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-678">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-679">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-680">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-681">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-681">If Number is</span></span>|<span data-ttu-id="e5ac4-682">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-683">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-683">Empty</span></span>|<span data-ttu-id="e5ac4-684">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-684">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-685">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-685">Any other number</span></span>|<span data-ttu-id="e5ac4-686">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-687">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-688">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-689">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-690">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-691"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-692">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-694">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-694">Required.</span></span> <span data-ttu-id="e5ac4-695">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-696">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-697">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-698">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-699">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-699">If Number is</span></span>|<span data-ttu-id="e5ac4-700">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-701">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-701">Empty</span></span>|<span data-ttu-id="e5ac4-702">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-702">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-703">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-703">Any other number</span></span>|<span data-ttu-id="e5ac4-704">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-705">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-706">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-707">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-708">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-709"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-710">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-712">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-712">Required.</span></span> <span data-ttu-id="e5ac4-713">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-714">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-715">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-716">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-717">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-717">If Number is</span></span>|<span data-ttu-id="e5ac4-718">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-719">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-719">Empty</span></span>|<span data-ttu-id="e5ac4-720">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-720">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-721">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-721">Any other number</span></span>|<span data-ttu-id="e5ac4-722">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-723">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-724">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-725">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-726">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-727"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-728">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-730">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-730">Required.</span></span> <span data-ttu-id="e5ac4-731">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-732">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-733">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-734">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-735">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-735">If Number is</span></span>|<span data-ttu-id="e5ac4-736">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-737">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-737">Empty</span></span>|<span data-ttu-id="e5ac4-738">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-738">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-739">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-739">Any other number</span></span>|<span data-ttu-id="e5ac4-740">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-741">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-742">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-743">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-744">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-745"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-746">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-748">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-748">Required.</span></span> <span data-ttu-id="e5ac4-749">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-750">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-751">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-752">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-753">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-753">If Number is</span></span>|<span data-ttu-id="e5ac4-754">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-755">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-755">Empty</span></span>|<span data-ttu-id="e5ac4-756">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-756">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-757">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-757">Any other number</span></span>|<span data-ttu-id="e5ac4-758">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-759">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-760">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-761">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-762">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-763"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-764">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-766">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-766">Required.</span></span> <span data-ttu-id="e5ac4-767">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-768">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-769">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-770">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-771">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-771">If Number is</span></span>|<span data-ttu-id="e5ac4-772">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-773">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-773">Empty</span></span>|<span data-ttu-id="e5ac4-774">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-774">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-775">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-775">Any other number</span></span>|<span data-ttu-id="e5ac4-776">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-777">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-778">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-779">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-780">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-781"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-782">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-784">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-784">Required.</span></span> <span data-ttu-id="e5ac4-785">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-786">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-787">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-788">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-789">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-789">If Number is</span></span>|<span data-ttu-id="e5ac4-790">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-791">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-791">Empty</span></span>|<span data-ttu-id="e5ac4-792">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-792">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-793">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-793">Any other number</span></span>|<span data-ttu-id="e5ac4-794">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-795">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-796">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-797">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-798">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-799"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-800">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-802">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-802">Required.</span></span> <span data-ttu-id="e5ac4-803">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-804">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-805">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-806">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-807">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-807">If Number is</span></span>|<span data-ttu-id="e5ac4-808">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-809">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-809">Empty</span></span>|<span data-ttu-id="e5ac4-810">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-810">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-811">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-811">Any other number</span></span>|<span data-ttu-id="e5ac4-812">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-813">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-814">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-815">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-816">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-817"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-818">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-820">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-820">Required.</span></span> <span data-ttu-id="e5ac4-821">Cualquier expresión numérica o expresión de tipo <see langword="String" /> válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-822">Devuelve una cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-823">Cadena que representa el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-824">Si `Number` ya no es un número entero, se redondea al número entero más cercano antes de que se va a evaluar.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="e5ac4-825">Si el número es</span><span class="sxs-lookup"><span data-stu-id="e5ac4-825">If Number is</span></span>|<span data-ttu-id="e5ac4-826">Valor octal</span><span class="sxs-lookup"><span data-stu-id="e5ac4-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="e5ac4-827">Empty</span><span class="sxs-lookup"><span data-stu-id="e5ac4-827">Empty</span></span>|<span data-ttu-id="e5ac4-828">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="e5ac4-828">Zero (0)</span></span>|  
|<span data-ttu-id="e5ac4-829">Cualquier otro número</span><span class="sxs-lookup"><span data-stu-id="e5ac4-829">Any other number</span></span>|<span data-ttu-id="e5ac4-830">Hasta 22 caracteres octales</span><span class="sxs-lookup"><span data-stu-id="e5ac4-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="e5ac4-831">Puede representar números octales directamente anteponiendo números en el intervalo correcto con `&O`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="e5ac4-832">Por ejemplo, `&O10` es la notación octal para 8 decimal.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-833">Este ejemplo se usa el `Oct` función para devolver el valor octal de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-834">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-835"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-836">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="e5ac4-838">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-838">Required.</span></span> <span data-ttu-id="e5ac4-839"><see langword="Object" /> que contiene cualquier expresión numérica válida.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="e5ac4-840">Devuelve una representación de tipo <see langword="String" /> de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-841">Representación de <see langword="String" /> de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-842">Cuando los números se convierten en cadenas, un espacio inicial siempre se reserva para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="e5ac4-843">Si `Number` es positivo, la cadena devuelta contiene un espacio inicial y el signo más es implícito.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="e5ac4-844">Un número negativo incluirá el signo menos (-) y ningún espacio inicial.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="e5ac4-845">Use el `Format` función para convertir valores numéricos que desee con formato como fechas, horas o moneda u otros formatos definidos por el usuario.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="e5ac4-846">A diferencia de la `Str` función, el `Format` función no incluye un espacio inicial para el inicio de sesión de `Number`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-847">El `Str` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5ac4-848">Si se utilizan separadores decimales diferentes (por ejemplo, en aplicaciones internacionales), utilice el `CStr` o `Format` funciones para convertir un número en una cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="e5ac4-849">Para obtener la representación de cadena de un número en una referencia cultural determinada, use el número `ToString(IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="e5ac4-850">Por ejemplo, usar <xref:System.Double.ToString%2A> al convertir un valor de tipo `Double` en una cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-851">Este ejemplo se usa el `Str` función devuelva un `String` representación de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="e5ac4-852">Cuando un número positivo se convierte en una cadena, un espacio inicial siempre está reservado para su inicio de sesión.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e5ac4-853">No se especificó <paramref name="Number" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="e5ac4-854"><paramref name="Number" /> no es un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="e5ac4-855">Resumen de conversión</span><span class="sxs-lookup"><span data-stu-id="e5ac4-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e5ac4-857">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e5ac4-858">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-858">Required.</span></span> <span data-ttu-id="e5ac4-859">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="e5ac4-860">Si <paramref name="Expression" /> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="e5ac4-861">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-862">Números incluidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-863">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5ac4-864">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5ac4-865">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5ac4-866">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="e5ac4-867">La siguiente llamada devuelve el valor 1615198.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="e5ac4-868">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-869">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5ac4-870">Cuando se utilizan separadores decimales diferentes, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5ac4-871">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5ac4-872">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="e5ac4-873">Un <xref:System.InvalidCastException> que podría producirse una excepción en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5ac4-874">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="e5ac4-875">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo podrían ser el compilador detectará si no estuviera contenida en una cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-876">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5ac4-877">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e5ac4-878"><paramref name="InputStr" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-879"><paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e5ac4-881">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-881">Required.</span></span> <span data-ttu-id="e5ac4-882">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="e5ac4-883">Si <paramref name="Expression" /> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="e5ac4-884">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-885">Números incluidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-886">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5ac4-887">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5ac4-888">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5ac4-889">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="e5ac4-890">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="e5ac4-891">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-892">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5ac4-893">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5ac4-894">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5ac4-895">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-896">Un <xref:System.InvalidCastException> que podría producirse una excepción en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5ac4-897">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="e5ac4-898">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-899">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5ac4-900">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e5ac4-901"><paramref name="InputStr" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-902"><paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="e5ac4-904">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-904">Required.</span></span> <span data-ttu-id="e5ac4-905">Cualquier expresión <see langword="String" /> válida, variable <see langword="Object" /> o valor <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="e5ac4-906">Si <paramref name="Expression" /> es de tipo <see langword="Object" />, su valor debe ser convertible a <see langword="String" /> o se produce un error <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="e5ac4-907">Devuelve los números contenidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="e5ac4-908">Números incluidos en una cadena como un valor numérico del tipo apropiado.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e5ac4-909">El `Val` función deja de leer la cadena en el primer carácter que no se reconoce como parte de un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="e5ac4-910">Símbolos y caracteres que a menudo se consideran parte de los valores numéricos, como signos de dólar y comas, no se reconocen.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="e5ac4-911">Sin embargo, la función reconoce los prefijos de base `&O` (para octal) y `&H` (de hexadecimal).</span><span class="sxs-lookup"><span data-stu-id="e5ac4-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="e5ac4-912">Caracteres de avance de línea, tabulaciones y espacios en blanco se quitan del argumento.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="e5ac4-913">La siguiente llamada devuelve el valor 1234123.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="e5ac4-914">La siguiente llamada devuelve el valor decimal -1.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-915">El `Val` función reconoce solo el período (`.`) como separador decimal válido.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="e5ac4-916">Cuando se utilizan otros separadores decimales, como en aplicaciones internacionales, utilice `CDbl` o `CInt` en su lugar para convertir una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="e5ac4-917">Para convertir la representación de cadena de un número en una referencia cultural determinada a un valor numérico, use el tipo numérico `Parse(String, IFormatProvider)` método.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="e5ac4-918">Por ejemplo, usar <xref:System.Double.Parse%2A?displayProperty=nameWithType> al convertir una cadena en un `Double`.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e5ac4-919">Un <xref:System.InvalidCastException> excepción podría producirse en respuesta a determinados formatos de número poco habituales.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="e5ac4-920">Por ejemplo, el código siguiente genera esta excepción.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="e5ac4-921">El conflicto entre el número con formato como un `Double` y `Integer` y `Long` caracteres de tipo se hubiese capturados por el compilador si el conflicto no se incluían en cadenas.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="e5ac4-922">En el ejemplo siguiente se usa el `Val` función para devolver los números contenidos en cada cadena.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="e5ac4-923">`Val` detiene la conversión en el primer carácter que no se puede interpretar como un dígito numérico, modificador numérico, puntuación numérica o espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e5ac4-924"><paramref name="InputStr" /> es demasiado grande.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e5ac4-925"><paramref name="Expression" /> es una expresión de tipo <see langword="Object" /> que no es convertible a <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="e5ac4-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="e5ac4-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="e5ac4-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>