<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f280df7fce7d3af1d90454f62e8521d1bb390eb" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53524258" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="24595-101">El módulo <see langword="Information" /> contiene los procedimientos que se utilizan para devolver o comprobar información.</span><span class="sxs-lookup"><span data-stu-id="24595-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-102">Este módulo admite las palabras clave del lenguaje Visual Basic y miembros de la biblioteca de tiempo de ejecución que proporcionan información de error, validan los datos, determinan los límites de matriz y recuperar información de color y tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="24595-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-103">En el ejemplo siguiente se usa el `VbTypeName` función para devolver nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="24595-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="24595-104">Resumen de información e interacción</span><span class="sxs-lookup"><span data-stu-id="24595-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="24595-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="24595-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="24595-106">Resumen de constantes y declaraciones</span><span class="sxs-lookup"><span data-stu-id="24595-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="24595-107">Palabras clave de Visual Basic</span><span class="sxs-lookup"><span data-stu-id="24595-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="24595-108">Miembros de la biblioteca de tiempo de ejecución de Visual Basic</span><span class="sxs-lookup"><span data-stu-id="24595-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24595-109">Devuelve un entero que indica el número de línea de la última instrucción ejecutada</span><span class="sxs-lookup"><span data-stu-id="24595-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="24595-110">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="24595-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="24595-111">Devuelve un entero que indica el número de línea de la última instrucción ejecutada</span><span class="sxs-lookup"><span data-stu-id="24595-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="24595-112">Sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="24595-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-113">Visual Basic encuentra sin números de línea, devuelve 0.</span><span class="sxs-lookup"><span data-stu-id="24595-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-114">Este ejemplo se usa el `Erl` propiedad para indicar el número de línea.</span><span class="sxs-lookup"><span data-stu-id="24595-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="24595-115">Contiene información sobre los errores en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="24595-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="24595-116">Contiene información sobre los errores en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="24595-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-117">Las propiedades de la `Err` objeto se establecen mediante el generador de un error - Visual Basic, un objeto o el programador.</span><span class="sxs-lookup"><span data-stu-id="24595-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="24595-118">Cuando se produce un error de tiempo de ejecución, las propiedades de la `Err` se rellenan con información que identifica el error de objeto y que puede usar para controlar el error.</span><span class="sxs-lookup"><span data-stu-id="24595-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="24595-119">Para generar un error en tiempo de ejecución en el código, utilice el `Raise` método.</span><span class="sxs-lookup"><span data-stu-id="24595-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="24595-120">El `Err` propiedades del objeto se restablecen a cero o cadenas de longitud cero ("") después de un `Exit Sub`, `Exit Function`, `Exit Property`, o `Resume Next` instrucción dentro de una rutina de control de errores.</span><span class="sxs-lookup"><span data-stu-id="24595-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="24595-121">Uso de cualquier forma de la `Resume` instrucción fuera de una rutina de control de errores no se restablecerá el `Err` propiedades del objeto.</span><span class="sxs-lookup"><span data-stu-id="24595-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="24595-122">Puede usar el `Clear` método para restablecer explícitamente `Err`.</span><span class="sxs-lookup"><span data-stu-id="24595-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="24595-123">Use la `Raise` método en lugar de `Error` instrucción para generar errores en tiempo de ejecución para errores del sistema y módulos de clase.</span><span class="sxs-lookup"><span data-stu-id="24595-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="24595-124">La decisión sobre si se debe usar el `Raise` método en otro código depende de la riqueza de la información que desea devolver.</span><span class="sxs-lookup"><span data-stu-id="24595-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="24595-125">El `Err` es un objeto intrínseco con ámbito global.</span><span class="sxs-lookup"><span data-stu-id="24595-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="24595-126">Por lo tanto, no es necesario crear una instancia de ella en el código.</span><span class="sxs-lookup"><span data-stu-id="24595-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-127">En este ejemplo utiliza las propiedades de la `Err` objeto en la construcción de un cuadro de diálogo de mensaje de error.</span><span class="sxs-lookup"><span data-stu-id="24595-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="24595-128">Tenga en cuenta que si usa el `Clear` método primero, cuando se genera un error de Visual Basic con el `Raise` método, los valores predeterminados de Visual Basic se convierten en las propiedades de la `Err` objeto.</span><span class="sxs-lookup"><span data-stu-id="24595-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="24595-129">Error (Instrucción)</span><span class="sxs-lookup"><span data-stu-id="24595-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="24595-130">Instrucción On Error (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="24595-131">Exit (Instrucción, Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="24595-132">Resume (Instrucción)</span><span class="sxs-lookup"><span data-stu-id="24595-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="24595-133">Mensajes de error (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="24595-134">Instrucción Try...Catch...Finally (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="24595-135">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-135">Required.</span></span> <span data-ttu-id="24595-136">Variable de <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="24595-137">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="24595-138">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una variable apunta a una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-139">`IsArray` Devuelve `True` si la variable apunta a una matriz; en caso contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="24595-140">`IsArray` es especialmente útil con objetos que pueden contener matrices.</span><span class="sxs-lookup"><span data-stu-id="24595-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-141">Este ejemplo se usa el `IsArray` función para comprobar si varias variables hacen referencia a una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="24595-142">Matrices en Visual Basic</span><span class="sxs-lookup"><span data-stu-id="24595-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-143">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-143">Required.</span></span> <span data-ttu-id="24595-144">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-145">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</span><span class="sxs-lookup"><span data-stu-id="24595-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="24595-146">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión representa un valor de <see langword="Date" /> válido.</span><span class="sxs-lookup"><span data-stu-id="24595-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-147">`IsDate` Devuelve `True` si `Expression` reviste la <xref:System.DateTime> datos escriba o se puede convertir a él; en caso contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="24595-148">El <xref:System.DateTime> tipo de datos contiene un valor de fecha y un valor de hora.</span><span class="sxs-lookup"><span data-stu-id="24595-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="24595-149">`IsDate` Devuelve `True` si `Expression` representa una fecha válida, una hora válida, o una fecha válida y la hora.</span><span class="sxs-lookup"><span data-stu-id="24595-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-150">En el ejemplo siguiente se usa el `IsDate` función para determinar si varias variables representan válido <xref:System.DateTime> valores.</span><span class="sxs-lookup"><span data-stu-id="24595-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="24595-151">En el ejemplo anterior, `IsDate` devuelve `True` para las primeras cuatro llamadas y `False` de la última llamada.</span><span class="sxs-lookup"><span data-stu-id="24595-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-152">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-152">Required.</span></span> <span data-ttu-id="24595-153">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-154">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="24595-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="24595-155">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como clase <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="24595-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-156">`IsDBNull` Devuelve `True` si el tipo de datos de `Expression` se evalúa como el <xref:System.DBNull> tipo; en caso contrario, `IsDBNull` devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="24595-157">El <xref:System.DBNull?displayProperty=nameWithType> valor indica que el `Object` representa datos que faltan o que no existentes.</span><span class="sxs-lookup"><span data-stu-id="24595-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="24595-158">`DBNull` no es igual a `Nothing`, lo que indica que una variable no se ha inicializado todavía.</span><span class="sxs-lookup"><span data-stu-id="24595-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="24595-159">`DBNull` es el mismo como una cadena de longitud cero (`""`), que a veces se conoce como una cadena nula.</span><span class="sxs-lookup"><span data-stu-id="24595-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-160">Este ejemplo se usa el `IsDBNull` función para determinar si una variable se evalúa como `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="24595-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-161">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-161">Required.</span></span> <span data-ttu-id="24595-162">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-163">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</span><span class="sxs-lookup"><span data-stu-id="24595-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="24595-164">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión es un tipo de excepción.</span><span class="sxs-lookup"><span data-stu-id="24595-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-165">`IsError` Devuelve `True` si la expresión representa un `Object` variable que se deriva el <xref:System.Exception> clase en el <xref:System> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="24595-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="24595-166">Una excepción que se deriva de <xref:System.Exception?displayProperty=nameWithType> puede capturarse con el `Try...Catch...Finally` instrucciones.</span><span class="sxs-lookup"><span data-stu-id="24595-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-167">En el ejemplo siguiente se usa el `IsError` función para comprobar si una expresión representa una excepción del sistema.</span><span class="sxs-lookup"><span data-stu-id="24595-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-168">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-168">Required.</span></span> <span data-ttu-id="24595-169">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-170">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</span><span class="sxs-lookup"><span data-stu-id="24595-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="24595-171">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión no tiene ningún objeto asignado.</span><span class="sxs-lookup"><span data-stu-id="24595-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-172">`IsNothing` Devuelve `True` si la expresión representa una variable de objeto que tiene actualmente ningún objeto asignado a él; de lo contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="24595-173">`IsNothing` está diseñado para trabajar con tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="24595-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="24595-174">Un tipo de valor no puede contener un valor de y vuelve a su valor predeterminado si asigna `Nothing` a él.</span><span class="sxs-lookup"><span data-stu-id="24595-174">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="24595-175">Si proporciona un tipo de valor en `Expression`, `IsNothing` siempre devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-176">En el ejemplo siguiente se usa el `IsNothing` función para determinar si una variable de objeto se asocia con una instancia de objeto.</span><span class="sxs-lookup"><span data-stu-id="24595-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="24595-177">Tipos de valor y tipos de referencia</span><span class="sxs-lookup"><span data-stu-id="24595-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-178">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-178">Required.</span></span> <span data-ttu-id="24595-179">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-180">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</span><span class="sxs-lookup"><span data-stu-id="24595-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="24595-181">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión puede evaluarse como un número.</span><span class="sxs-lookup"><span data-stu-id="24595-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-182">`IsNumeric` Devuelve `True` si el tipo de datos de `Expression` es `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, o `UShort`.</span><span class="sxs-lookup"><span data-stu-id="24595-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="24595-183">También devuelve `True` si `Expression` es un `Char`, `String`, o `Object` que se puede convertir correctamente en un número.</span><span class="sxs-lookup"><span data-stu-id="24595-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="24595-184">`Expression` puede contener caracteres no numéricos.</span><span class="sxs-lookup"><span data-stu-id="24595-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="24595-185">`IsNumeric` Devuelve `True` si `Expression` es una cadena que contiene un número octal o hexadecimal válido.</span><span class="sxs-lookup"><span data-stu-id="24595-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="24595-186">`IsNumeric` También devuelve `True` si `Expression` contiene una expresión numérica válida que comience por un + o - caracteres o contiene comas.</span><span class="sxs-lookup"><span data-stu-id="24595-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="24595-187">`IsNumeric` Devuelve `False` si `Expression` es del tipo de datos `Date`.</span><span class="sxs-lookup"><span data-stu-id="24595-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="24595-188">Devuelve `False` si `Expression` es un `Char`, `String`, o `Object` que no se puede convertir correctamente en un número.</span><span class="sxs-lookup"><span data-stu-id="24595-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-189">En el ejemplo siguiente se usa el `IsNumeric` función para determinar si el contenido de una variable se puede evaluar como un número.</span><span class="sxs-lookup"><span data-stu-id="24595-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="24595-190">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-190">Required.</span></span> <span data-ttu-id="24595-191">Expresión <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="24595-192">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="24595-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="24595-193">Devuelve un valor de tipo <see langword="Boolean" /> que indica si una expresión se evalúa como un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="24595-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-194">`IsReference` Devuelve `True` si `Expression` representa un tipo de referencia, como una instancia de clase, un `String` tipo o una matriz de cualquier tipo; de lo contrario, devuelve `False`.</span><span class="sxs-lookup"><span data-stu-id="24595-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="24595-195">Un tipo de referencia contiene un puntero a los datos almacenados en otro lugar en la memoria.</span><span class="sxs-lookup"><span data-stu-id="24595-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="24595-196">Un tipo de valor contiene sus propios datos.</span><span class="sxs-lookup"><span data-stu-id="24595-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-197">Este ejemplo se usa el `IsReference` función para comprobar si varias variables hacen referencia a tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="24595-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="24595-198">En el ejemplo anterior, las tres primeras las llamadas a `IsReference` devolver `True`.</span><span class="sxs-lookup"><span data-stu-id="24595-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="24595-199">Devuelve la última llamada `False`, porque `Integer` es un tipo de valor, no un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="24595-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="24595-200">Tipos de valor y tipos de referencia</span><span class="sxs-lookup"><span data-stu-id="24595-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="24595-201">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-201">Required.</span></span> <span data-ttu-id="24595-202">Matriz de cualquier tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="24595-202">Array of any data type.</span></span> <span data-ttu-id="24595-203">Matriz en la que se desea buscar el subíndice más bajo posible de una dimensión.</span><span class="sxs-lookup"><span data-stu-id="24595-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="24595-204">Opcional.</span><span class="sxs-lookup"><span data-stu-id="24595-204">Optional.</span></span> <span data-ttu-id="24595-205"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="24595-205"><see langword="Integer" />.</span></span> <span data-ttu-id="24595-206">Dimensión para la que se va a devolver el subíndice más bajo posible.</span><span class="sxs-lookup"><span data-stu-id="24595-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="24595-207">Utilice 1 para la primera dimensión, 2 para la segunda, etc.</span><span class="sxs-lookup"><span data-stu-id="24595-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="24595-208">Si se omite <paramref name="Rank" />, se supone que el valor es 1.</span><span class="sxs-lookup"><span data-stu-id="24595-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="24595-209">Devuelve el subíndice más bajo que está disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="24595-210"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="24595-210"><see langword="Integer" />.</span></span> <span data-ttu-id="24595-211">Valor más bajo que el subíndice de la dimensión especificada puede contener.</span><span class="sxs-lookup"><span data-stu-id="24595-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="24595-212"><see langword="LBound" /> siempre devuelve 0 si se ha inicializado <paramref name="Array" />, incluso si no tiene elementos; por ejemplo, si es una cadena de longitud cero.</span><span class="sxs-lookup"><span data-stu-id="24595-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="24595-213">Si <paramref name="Array" /> es <see langword="Nothing" />, <see langword="LBound" /> genera una excepción <see cref="T:System.ArgumentNullException" />.</span><span class="sxs-lookup"><span data-stu-id="24595-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-214">Puesto que los subíndices de matriz empiezan en 0, el menor índice disponible para cada dimensión es siempre 0.</span><span class="sxs-lookup"><span data-stu-id="24595-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="24595-215">Para una matriz con las siguientes dimensiones, `LBound` devuelve los valores en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="24595-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="24595-216">Llamada a LBound</span><span class="sxs-lookup"><span data-stu-id="24595-216">Call to LBound</span></span>|<span data-ttu-id="24595-217">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="24595-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="24595-218">0</span><span class="sxs-lookup"><span data-stu-id="24595-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="24595-219">0</span><span class="sxs-lookup"><span data-stu-id="24595-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="24595-220">0</span><span class="sxs-lookup"><span data-stu-id="24595-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="24595-221">En el ejemplo siguiente se usa el `LBound` función para determinar el menor subíndice disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="24595-222">El valor de <paramref name="Array" /> es <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="24595-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="24595-223"><paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="24595-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="24595-224">Instrucción Dim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="24595-225">Instrucción ReDim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="24595-226">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-226">Required.</span></span> <span data-ttu-id="24595-227">Número entero del 0 al 15.</span><span class="sxs-lookup"><span data-stu-id="24595-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="24595-228">Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</span><span class="sxs-lookup"><span data-stu-id="24595-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="24595-229">Devuelve un valor de tipo <see langword="Integer" /> que representa el código de color RGB correspondiente al número de color especificado.</span><span class="sxs-lookup"><span data-stu-id="24595-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-230">A partir del byte menos significativo, el valor devuelto especifica los valores de rojos, verde y azules que se usa para establecer el color apropiado en el sistema RGB utilizado por el lenguaje Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="24595-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="24595-231">El `Color` argumento tiene estos valores.</span><span class="sxs-lookup"><span data-stu-id="24595-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="24595-232">Número</span><span class="sxs-lookup"><span data-stu-id="24595-232">Number</span></span>|<span data-ttu-id="24595-233">Color</span><span class="sxs-lookup"><span data-stu-id="24595-233">Color</span></span>|<span data-ttu-id="24595-234">número</span><span class="sxs-lookup"><span data-stu-id="24595-234">Number</span></span>|<span data-ttu-id="24595-235">Color</span><span class="sxs-lookup"><span data-stu-id="24595-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="24595-236">0</span><span class="sxs-lookup"><span data-stu-id="24595-236">0</span></span>|<span data-ttu-id="24595-237">Negro</span><span class="sxs-lookup"><span data-stu-id="24595-237">Black</span></span>|<span data-ttu-id="24595-238">8</span><span class="sxs-lookup"><span data-stu-id="24595-238">8</span></span>|<span data-ttu-id="24595-239">Gris</span><span class="sxs-lookup"><span data-stu-id="24595-239">Gray</span></span>|  
|<span data-ttu-id="24595-240">1</span><span class="sxs-lookup"><span data-stu-id="24595-240">1</span></span>|<span data-ttu-id="24595-241">Azul</span><span class="sxs-lookup"><span data-stu-id="24595-241">Blue</span></span>|<span data-ttu-id="24595-242">9</span><span class="sxs-lookup"><span data-stu-id="24595-242">9</span></span>|<span data-ttu-id="24595-243">Azul claro</span><span class="sxs-lookup"><span data-stu-id="24595-243">Light blue</span></span>|  
|<span data-ttu-id="24595-244">2</span><span class="sxs-lookup"><span data-stu-id="24595-244">2</span></span>|<span data-ttu-id="24595-245">Verde</span><span class="sxs-lookup"><span data-stu-id="24595-245">Green</span></span>|<span data-ttu-id="24595-246">10</span><span class="sxs-lookup"><span data-stu-id="24595-246">10</span></span>|<span data-ttu-id="24595-247">Verde claro</span><span class="sxs-lookup"><span data-stu-id="24595-247">Light green</span></span>|  
|<span data-ttu-id="24595-248">3</span><span class="sxs-lookup"><span data-stu-id="24595-248">3</span></span>|<span data-ttu-id="24595-249">Aguamarina</span><span class="sxs-lookup"><span data-stu-id="24595-249">Cyan</span></span>|<span data-ttu-id="24595-250">11</span><span class="sxs-lookup"><span data-stu-id="24595-250">11</span></span>|<span data-ttu-id="24595-251">Cian claro</span><span class="sxs-lookup"><span data-stu-id="24595-251">Light cyan</span></span>|  
|<span data-ttu-id="24595-252">4</span><span class="sxs-lookup"><span data-stu-id="24595-252">4</span></span>|<span data-ttu-id="24595-253">Rojo</span><span class="sxs-lookup"><span data-stu-id="24595-253">Red</span></span>|<span data-ttu-id="24595-254">12</span><span class="sxs-lookup"><span data-stu-id="24595-254">12</span></span>|<span data-ttu-id="24595-255">Rojo claro</span><span class="sxs-lookup"><span data-stu-id="24595-255">Light red</span></span>|  
|<span data-ttu-id="24595-256">5</span><span class="sxs-lookup"><span data-stu-id="24595-256">5</span></span>|<span data-ttu-id="24595-257">Magenta</span><span class="sxs-lookup"><span data-stu-id="24595-257">Magenta</span></span>|<span data-ttu-id="24595-258">13</span><span class="sxs-lookup"><span data-stu-id="24595-258">13</span></span>|<span data-ttu-id="24595-259">Magenta claro</span><span class="sxs-lookup"><span data-stu-id="24595-259">Light magenta</span></span>|  
|<span data-ttu-id="24595-260">6</span><span class="sxs-lookup"><span data-stu-id="24595-260">6</span></span>|<span data-ttu-id="24595-261">Amarillo</span><span class="sxs-lookup"><span data-stu-id="24595-261">Yellow</span></span>|<span data-ttu-id="24595-262">14</span><span class="sxs-lookup"><span data-stu-id="24595-262">14</span></span>|<span data-ttu-id="24595-263">Amarillo claro</span><span class="sxs-lookup"><span data-stu-id="24595-263">Light yellow</span></span>|  
|<span data-ttu-id="24595-264">7</span><span class="sxs-lookup"><span data-stu-id="24595-264">7</span></span>|<span data-ttu-id="24595-265">Blanco</span><span class="sxs-lookup"><span data-stu-id="24595-265">White</span></span>|<span data-ttu-id="24595-266">15</span><span class="sxs-lookup"><span data-stu-id="24595-266">15</span></span>|<span data-ttu-id="24595-267">Blanco brillante</span><span class="sxs-lookup"><span data-stu-id="24595-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="24595-268">Este ejemplo se usa el `QBColor` función puede cambiar el color indicado por `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="24595-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="24595-269">`QBColor` acepta valores enteros entre 0 y 15.</span><span class="sxs-lookup"><span data-stu-id="24595-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="24595-270"><paramref name="Color" /> está fuera del intervalo del 0 al 15, ambos inclusive.</span><span class="sxs-lookup"><span data-stu-id="24595-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="24595-271">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-271">Required.</span></span> <span data-ttu-id="24595-272">Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente rojo del color.</span><span class="sxs-lookup"><span data-stu-id="24595-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="24595-273">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-273">Required.</span></span> <span data-ttu-id="24595-274">Valor <see langword="Integer" /> comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente verde del color.</span><span class="sxs-lookup"><span data-stu-id="24595-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="24595-275">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-275">Required.</span></span> <span data-ttu-id="24595-276">Valor <see langword="Integer" /> en el intervalo comprendido entre 0 y 255, ambos inclusive, que representa la intensidad del componente azul del color.</span><span class="sxs-lookup"><span data-stu-id="24595-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="24595-277">Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</span><span class="sxs-lookup"><span data-stu-id="24595-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="24595-278">Devuelve un valor de tipo <see langword="Integer" /> que representa un valor de color RGB de un conjunto de componentes de color rojo, verde y azul.</span><span class="sxs-lookup"><span data-stu-id="24595-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-279">Métodos de aplicación y las propiedades que aceptan una especificación de color esperan que el valor de color de la especificación para ser un número que representa una RGB.</span><span class="sxs-lookup"><span data-stu-id="24595-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="24595-280">Un valor de color RGB especifica la intensidad relativa de rojo, verde y azul para hacer que un color específico que se mostrará.</span><span class="sxs-lookup"><span data-stu-id="24595-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="24595-281">Si el valor de cualquier argumento `RGB` es mayor que 255, 255 se utiliza.</span><span class="sxs-lookup"><span data-stu-id="24595-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="24595-282">En la tabla siguiente se enumera algunos colores estándares y los valores de rojos, verde y azules que incluyen.</span><span class="sxs-lookup"><span data-stu-id="24595-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="24595-283">Color</span><span class="sxs-lookup"><span data-stu-id="24595-283">Color</span></span>|<span data-ttu-id="24595-284">Valor de color rojo</span><span class="sxs-lookup"><span data-stu-id="24595-284">Red value</span></span>|<span data-ttu-id="24595-285">Valor de color verde</span><span class="sxs-lookup"><span data-stu-id="24595-285">Green value</span></span>|<span data-ttu-id="24595-286">Valor de color azul</span><span class="sxs-lookup"><span data-stu-id="24595-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="24595-287">Negro</span><span class="sxs-lookup"><span data-stu-id="24595-287">Black</span></span>|<span data-ttu-id="24595-288">0</span><span class="sxs-lookup"><span data-stu-id="24595-288">0</span></span>|<span data-ttu-id="24595-289">0</span><span class="sxs-lookup"><span data-stu-id="24595-289">0</span></span>|<span data-ttu-id="24595-290">0</span><span class="sxs-lookup"><span data-stu-id="24595-290">0</span></span>|  
|<span data-ttu-id="24595-291">Azul</span><span class="sxs-lookup"><span data-stu-id="24595-291">Blue</span></span>|<span data-ttu-id="24595-292">0</span><span class="sxs-lookup"><span data-stu-id="24595-292">0</span></span>|<span data-ttu-id="24595-293">0</span><span class="sxs-lookup"><span data-stu-id="24595-293">0</span></span>|<span data-ttu-id="24595-294">255</span><span class="sxs-lookup"><span data-stu-id="24595-294">255</span></span>|  
|<span data-ttu-id="24595-295">Verde</span><span class="sxs-lookup"><span data-stu-id="24595-295">Green</span></span>|<span data-ttu-id="24595-296">0</span><span class="sxs-lookup"><span data-stu-id="24595-296">0</span></span>|<span data-ttu-id="24595-297">255</span><span class="sxs-lookup"><span data-stu-id="24595-297">255</span></span>|<span data-ttu-id="24595-298">0</span><span class="sxs-lookup"><span data-stu-id="24595-298">0</span></span>|  
|<span data-ttu-id="24595-299">Aguamarina</span><span class="sxs-lookup"><span data-stu-id="24595-299">Cyan</span></span>|<span data-ttu-id="24595-300">0</span><span class="sxs-lookup"><span data-stu-id="24595-300">0</span></span>|<span data-ttu-id="24595-301">255</span><span class="sxs-lookup"><span data-stu-id="24595-301">255</span></span>|<span data-ttu-id="24595-302">255</span><span class="sxs-lookup"><span data-stu-id="24595-302">255</span></span>|  
|<span data-ttu-id="24595-303">Rojo</span><span class="sxs-lookup"><span data-stu-id="24595-303">Red</span></span>|<span data-ttu-id="24595-304">255</span><span class="sxs-lookup"><span data-stu-id="24595-304">255</span></span>|<span data-ttu-id="24595-305">0</span><span class="sxs-lookup"><span data-stu-id="24595-305">0</span></span>|<span data-ttu-id="24595-306">0</span><span class="sxs-lookup"><span data-stu-id="24595-306">0</span></span>|  
|<span data-ttu-id="24595-307">Magenta</span><span class="sxs-lookup"><span data-stu-id="24595-307">Magenta</span></span>|<span data-ttu-id="24595-308">255</span><span class="sxs-lookup"><span data-stu-id="24595-308">255</span></span>|<span data-ttu-id="24595-309">0</span><span class="sxs-lookup"><span data-stu-id="24595-309">0</span></span>|<span data-ttu-id="24595-310">255</span><span class="sxs-lookup"><span data-stu-id="24595-310">255</span></span>|  
|<span data-ttu-id="24595-311">Amarillo</span><span class="sxs-lookup"><span data-stu-id="24595-311">Yellow</span></span>|<span data-ttu-id="24595-312">255</span><span class="sxs-lookup"><span data-stu-id="24595-312">255</span></span>|<span data-ttu-id="24595-313">255</span><span class="sxs-lookup"><span data-stu-id="24595-313">255</span></span>|<span data-ttu-id="24595-314">0</span><span class="sxs-lookup"><span data-stu-id="24595-314">0</span></span>|  
|<span data-ttu-id="24595-315">Blanco</span><span class="sxs-lookup"><span data-stu-id="24595-315">White</span></span>|<span data-ttu-id="24595-316">255</span><span class="sxs-lookup"><span data-stu-id="24595-316">255</span></span>|<span data-ttu-id="24595-317">255</span><span class="sxs-lookup"><span data-stu-id="24595-317">255</span></span>|<span data-ttu-id="24595-318">255</span><span class="sxs-lookup"><span data-stu-id="24595-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="24595-319">Este ejemplo se muestra cómo el `RGB` función se utiliza para devolver un número entero que representa un `RGB` valor de color.</span><span class="sxs-lookup"><span data-stu-id="24595-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="24595-320"><paramref name="Green" />, <paramref name="Blue" />, <paramref name="Red" /> está fuera del intervalo del 0 al 255, ambos inclusive.</span><span class="sxs-lookup"><span data-stu-id="24595-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="24595-321">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-321">Required.</span></span> <span data-ttu-id="24595-322">Variable de <see langword="String" /> que contiene un nombre de tipo de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="24595-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="24595-323">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="24595-324">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos del sistema de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-325">`SystemTypeName` Devuelve el nombre de tipo de common language runtime (CLR) completo correspondiente al nombre de tipo Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="24595-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="24595-326">Por ejemplo, si `VbName` contiene "Date", `SystemTypeName` devuelve "System.DateTime".</span><span class="sxs-lookup"><span data-stu-id="24595-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="24595-327">Si `SystemTypeName` no reconoce el valor de `VbName`, devuelve `Nothing` (no la cadena "Nothing").</span><span class="sxs-lookup"><span data-stu-id="24595-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-328">En el ejemplo siguiente se usa el `SystemTypeName` función para devolver nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="24595-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="24595-329">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="24595-330">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-330">Required.</span></span> <span data-ttu-id="24595-331">Variable de <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="24595-332">Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</span><span class="sxs-lookup"><span data-stu-id="24595-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="24595-333">Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="24595-334">Devuelve un valor de tipo <see langword="String" /> que contiene información del tipo de datos de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-335">La tabla siguiente muestra la `String` valores devueltos por `TypeName` para el contenido de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="24595-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="24595-336">`VarName` Contenido</span><span class="sxs-lookup"><span data-stu-id="24595-336">`VarName` contents</span></span>|<span data-ttu-id="24595-337">Cadena devuelta</span><span class="sxs-lookup"><span data-stu-id="24595-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="24595-338">16 bits `True` o `False` tipo de valor</span><span class="sxs-lookup"><span data-stu-id="24595-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="24595-339">"Boolean"</span><span class="sxs-lookup"><span data-stu-id="24595-339">"Boolean"</span></span>|  
|<span data-ttu-id="24595-340">tipo de valor binario de 8 bits</span><span class="sxs-lookup"><span data-stu-id="24595-340">8-bit binary value type</span></span>|<span data-ttu-id="24595-341">"Byte"</span><span class="sxs-lookup"><span data-stu-id="24595-341">"Byte"</span></span>|  
|<span data-ttu-id="24595-342">tipo de valor de carácter de 16 bits</span><span class="sxs-lookup"><span data-stu-id="24595-342">16-bit character value type</span></span>|<span data-ttu-id="24595-343">"Char"</span><span class="sxs-lookup"><span data-stu-id="24595-343">"Char"</span></span>|  
|<span data-ttu-id="24595-344">tipo de valor de hora y fecha de 64 bits</span><span class="sxs-lookup"><span data-stu-id="24595-344">64-bit date and time value type</span></span>|<span data-ttu-id="24595-345">"Fecha"</span><span class="sxs-lookup"><span data-stu-id="24595-345">"Date"</span></span>|  
|<span data-ttu-id="24595-346">Tipo de referencia que indica los datos que faltan o que no existentes</span><span class="sxs-lookup"><span data-stu-id="24595-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="24595-347">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="24595-347">"DBNull"</span></span>|  
|<span data-ttu-id="24595-348">tipo de valor numérico de punto flotante de 128 bits</span><span class="sxs-lookup"><span data-stu-id="24595-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="24595-349">"Decimal"</span><span class="sxs-lookup"><span data-stu-id="24595-349">"Decimal"</span></span>|  
|<span data-ttu-id="24595-350">tipo de valor numérico de punto flotante de 64 bits</span><span class="sxs-lookup"><span data-stu-id="24595-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="24595-351">"Double"</span><span class="sxs-lookup"><span data-stu-id="24595-351">"Double"</span></span>|  
|<span data-ttu-id="24595-352">tipo de valor entero de 32 bits</span><span class="sxs-lookup"><span data-stu-id="24595-352">32-bit integer value type</span></span>|<span data-ttu-id="24595-353">"Integer"</span><span class="sxs-lookup"><span data-stu-id="24595-353">"Integer"</span></span>|  
|<span data-ttu-id="24595-354">Tipo de referencia que apunta a un objeto no especializado</span><span class="sxs-lookup"><span data-stu-id="24595-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="24595-355">"Object"</span><span class="sxs-lookup"><span data-stu-id="24595-355">"Object"</span></span>|  
|<span data-ttu-id="24595-356">Tipo de referencia que apunta a un objeto especializado creado a partir de la clase *objectclass*</span><span class="sxs-lookup"><span data-stu-id="24595-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="24595-357">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="24595-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="24595-358">tipo de valor entero de 64 bits</span><span class="sxs-lookup"><span data-stu-id="24595-358">64-bit integer value type</span></span>|<span data-ttu-id="24595-359">"Long"</span><span class="sxs-lookup"><span data-stu-id="24595-359">"Long"</span></span>|  
|<span data-ttu-id="24595-360">Tipo de referencia con ningún objeto asignado actualmente</span><span class="sxs-lookup"><span data-stu-id="24595-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="24595-361">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="24595-361">"Nothing"</span></span>|  
|<span data-ttu-id="24595-362">tipo de valor entero de 8 bits con signo</span><span class="sxs-lookup"><span data-stu-id="24595-362">8-bit signed integer value type</span></span>|<span data-ttu-id="24595-363">"SByte"</span><span class="sxs-lookup"><span data-stu-id="24595-363">"SByte"</span></span>|  
|<span data-ttu-id="24595-364">tipo de valor entero de 16 bits</span><span class="sxs-lookup"><span data-stu-id="24595-364">16-bit integer value type</span></span>|<span data-ttu-id="24595-365">"Short"</span><span class="sxs-lookup"><span data-stu-id="24595-365">"Short"</span></span>|  
|<span data-ttu-id="24595-366">tipo de valor numérico de punto flotante de 32 bits</span><span class="sxs-lookup"><span data-stu-id="24595-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="24595-367">"Único"</span><span class="sxs-lookup"><span data-stu-id="24595-367">"Single"</span></span>|  
|<span data-ttu-id="24595-368">Tipo de referencia que apunta a una cadena de caracteres de 16 bits</span><span class="sxs-lookup"><span data-stu-id="24595-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="24595-369">"String"</span><span class="sxs-lookup"><span data-stu-id="24595-369">"String"</span></span>|  
|<span data-ttu-id="24595-370">tipo de valor entero sin signo de 32 bits</span><span class="sxs-lookup"><span data-stu-id="24595-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="24595-371">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="24595-371">"UInteger"</span></span>|  
|<span data-ttu-id="24595-372">tipo de valor entero sin signo de 64 bits</span><span class="sxs-lookup"><span data-stu-id="24595-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="24595-373">"ULong"</span><span class="sxs-lookup"><span data-stu-id="24595-373">"ULong"</span></span>|  
|<span data-ttu-id="24595-374">tipo de valor entero de 16 bits sin signo</span><span class="sxs-lookup"><span data-stu-id="24595-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="24595-375">"UShort"</span><span class="sxs-lookup"><span data-stu-id="24595-375">"UShort"</span></span>|  
  
 <span data-ttu-id="24595-376">Si `VarName` es una matriz, la cadena devuelta puede ser cualquiera de las cadenas en la tabla anterior con paréntesis vacíos.</span><span class="sxs-lookup"><span data-stu-id="24595-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="24595-377">Por ejemplo, si `VarName` señala a una matriz de enteros, `TypeName` devuelve "Integer()".</span><span class="sxs-lookup"><span data-stu-id="24595-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="24595-378">Cuando `TypeName` devuelve el nombre de un tipo de referencia como una clase, devuelve solo el propio nombre, no el nombre completo.</span><span class="sxs-lookup"><span data-stu-id="24595-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="24595-379">Por ejemplo, si `VarName` apunta a un objeto de clase <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` devuelve "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="24595-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="24595-380">Tenga en cuenta que si la variable se declara como un tipo de clase determinado, pero no tiene un objeto asignado a él, `TypeName` devuelve "Nothing".</span><span class="sxs-lookup"><span data-stu-id="24595-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-381">En el ejemplo siguiente se usa el `TypeName` función para devolver información de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="24595-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="24595-382">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="24595-383">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-383">Required.</span></span> <span data-ttu-id="24595-384">Matriz de cualquier tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="24595-384">Array of any data type.</span></span> <span data-ttu-id="24595-385">Matriz en la que se desea buscar el subíndice más alto posible de una dimensión.</span><span class="sxs-lookup"><span data-stu-id="24595-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="24595-386">Opcional.</span><span class="sxs-lookup"><span data-stu-id="24595-386">Optional.</span></span> <span data-ttu-id="24595-387"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="24595-387"><see langword="Integer" />.</span></span> <span data-ttu-id="24595-388">Dimensión para la que se va a devolver el subíndice más alto posible.</span><span class="sxs-lookup"><span data-stu-id="24595-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="24595-389">Utilice 1 para la primera dimensión, 2 para la segunda, etc.</span><span class="sxs-lookup"><span data-stu-id="24595-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="24595-390">Si se omite <paramref name="Rank" />, se supone que el valor es 1.</span><span class="sxs-lookup"><span data-stu-id="24595-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="24595-391">Devuelve el subíndice más alto que está disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="24595-392"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="24595-392"><see langword="Integer" />.</span></span> <span data-ttu-id="24595-393">Valor más alto que el subíndice de la dimensión especificada puede contener.</span><span class="sxs-lookup"><span data-stu-id="24595-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="24595-394">Si <paramref name="Array" /> tiene solo un elemento, <see langword="UBound" /> devuelve 0.</span><span class="sxs-lookup"><span data-stu-id="24595-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="24595-395">Si <paramref name="Array" /> no tiene elementos, por ejemplo si es una cadena de longitud cero, <see langword="UBound" /> devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="24595-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-396">Puesto que los subíndices de matriz empiezan en 0, la longitud de una dimensión es mayor en uno que el mayor subíndice disponible para esa dimensión.</span><span class="sxs-lookup"><span data-stu-id="24595-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="24595-397">Para una matriz con las siguientes dimensiones, `UBound` devuelve los valores en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="24595-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="24595-398">Llamada a UBound</span><span class="sxs-lookup"><span data-stu-id="24595-398">Call to UBound</span></span>|<span data-ttu-id="24595-399">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="24595-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="24595-400">100</span><span class="sxs-lookup"><span data-stu-id="24595-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="24595-401">5</span><span class="sxs-lookup"><span data-stu-id="24595-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="24595-402">4</span><span class="sxs-lookup"><span data-stu-id="24595-402">4</span></span>|  
  
 <span data-ttu-id="24595-403">Puede usar `UBound` para determinar el total de número de elementos en una matriz, pero debe ajustar el valor que devuelve a la cuenta el hecho de que el subíndice empieza en 0.</span><span class="sxs-lookup"><span data-stu-id="24595-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="24595-404">En el ejemplo siguiente se calcula el tamaño total de la matriz `a` en el ejemplo anterior:</span><span class="sxs-lookup"><span data-stu-id="24595-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="24595-405">Calcula el valor para `total` es 3030, que es 101 \* 6 \* 5.</span><span class="sxs-lookup"><span data-stu-id="24595-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-406">En el ejemplo siguiente se usa el `UBound` función para determinar el mayor subíndice disponible para la dimensión indicada de una matriz.</span><span class="sxs-lookup"><span data-stu-id="24595-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="24595-407">El valor de <paramref name="Array" /> es <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="24595-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="24595-408"><paramref name="Rank" /> es menor que 1 o <paramref name="Rank" /> es mayor que el rango de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="24595-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="24595-409">Instrucción Dim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="24595-410">Instrucción ReDim (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="24595-411">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-411">Required.</span></span> <span data-ttu-id="24595-412">Variable de <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="24595-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="24595-413">Si <see langword="Option Strict" /> es <see langword="Off" />, se puede pasar una variable de cualquier tipo de datos, excepto una estructura.</span><span class="sxs-lookup"><span data-stu-id="24595-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="24595-414">Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="24595-415">Devuelve un valor de tipo <see langword="Integer" /> que contiene la clasificación del tipo de datos de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-416">El valor entero devuelto por `VarType` es un miembro de la <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="24595-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="24595-417">La siguiente tabla muestra los valores devueltos por `VarType` para casos especiales de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="24595-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="24595-418">Tipo de datos representado por `VarName`</span><span class="sxs-lookup"><span data-stu-id="24595-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="24595-419">Valor devuelto por `VarType`</span><span class="sxs-lookup"><span data-stu-id="24595-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="24595-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="24595-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="24595-421">Enumeración</span><span class="sxs-lookup"><span data-stu-id="24595-421">Enumeration</span></span>|<span data-ttu-id="24595-422">Tipo de datos subyacente (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, o `ULong`)</span><span class="sxs-lookup"><span data-stu-id="24595-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="24595-423">Matriz</span><span class="sxs-lookup"><span data-stu-id="24595-423">Array</span></span>|<span data-ttu-id="24595-424">OR bit a bit de tipo de elemento de matriz y `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="24595-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="24595-425">Matriz de matrices</span><span class="sxs-lookup"><span data-stu-id="24595-425">Array of arrays</span></span>|<span data-ttu-id="24595-426">Operación OR bit a bit de `VariantType.Object` y `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="24595-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="24595-427">Estructura (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="24595-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="24595-428">Desconocido</span><span class="sxs-lookup"><span data-stu-id="24595-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="24595-429">En el ejemplo siguiente se usa el `VarType` función para devolver información de clasificación del tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="24595-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="24595-430">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="24595-431">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="24595-431">Required.</span></span> <span data-ttu-id="24595-432">Variable de tipo <see langword="String" /> que contiene un nombre de tipo utilizado por Common Language Runtime.</span><span class="sxs-lookup"><span data-stu-id="24595-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="24595-433">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="24595-434">Devuelve un valor de tipo <see langword="String" /> que contiene el nombre del tipo de datos de Visual Basic de una variable.</span><span class="sxs-lookup"><span data-stu-id="24595-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24595-435">`VbTypeName` Devuelve el nombre de tipo Visual Basic correspondiente al nombre de tipo de common language runtime.</span><span class="sxs-lookup"><span data-stu-id="24595-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="24595-436">Por ejemplo, si `UrtName` contiene "Int32" o "System.Int32", `VbTypeName` devuelve "Integer".</span><span class="sxs-lookup"><span data-stu-id="24595-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="24595-437">Si `VbTypeName` no reconoce el valor de `UrtName`, devuelve `Nothing` (no la cadena "Nothing").</span><span class="sxs-lookup"><span data-stu-id="24595-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="24595-438">El nombre de tipo en `UrtName` puede obtenerse desde diversos orígenes, por ejemplo el <xref:System.Reflection.MemberInfo.Name%2A> propiedad en el <xref:System.Reflection.MemberInfo> matriz de los <xref:System.Type> clase.</span><span class="sxs-lookup"><span data-stu-id="24595-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="24595-439">En el ejemplo siguiente se usa el `VbTypeName` función para devolver nombres de tipo de datos de varias variables.</span><span class="sxs-lookup"><span data-stu-id="24595-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="24595-440">Resumen de tipos de datos (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="24595-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>