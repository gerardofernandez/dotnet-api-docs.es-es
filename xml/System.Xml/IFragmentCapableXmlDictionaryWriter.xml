<Type Name="IFragmentCapableXmlDictionaryWriter" FullName="System.Xml.IFragmentCapableXmlDictionaryWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6eeae5f0aa75198bc92ed3a5d109c67e97912714" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58705859" /></Metadata><TypeSignature Language="C#" Value="public interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFragmentCapableXmlDictionaryWriter" />
  <TypeSignature Language="F#" Value="type IFragmentCapableXmlDictionaryWriter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eb9ae-101">Contiene propiedades y métodos que cuando son implementados por un <see cref="T:System.Xml.XmlDictionaryWriter" />, permiten el procesamiento de fragmentos XML.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-101">Contains properties and methods that when implemented by a <see cref="T:System.Xml.XmlDictionaryWriter" />, allows processing of XML fragments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9ae-102">Esta clase define las propiedades y métodos relacionados con la capacidad de <xref:System.Xml.XmlDictionaryWriter> para redirigir parte de su resultado (un 'fragmento') a una secuencia diferente que la secuencia con la que se creó y para insertar directamente este tipo de fragmento capturado por redirección a la secuencia principal del mismo sistema de escritura en un punto posterior.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-102">This class defines the properties and methods related to the capability of an <xref:System.Xml.XmlDictionaryWriter> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanFragment">
      <MemberSignature Language="C#" Value="public bool CanFragment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFragment" />
      <MemberSignature Language="DocId" Value="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFragment { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFragment : bool" Usage="System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb9ae-103">Obtiene un valor que indica si este <see cref="T:System.Xml.XmlDictionaryWriter" /> puede procesar fragmentos XML.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-103">Gets a value that indicates whether this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments.</span></span></summary>
        <value><span data-ttu-id="eb9ae-104"><see langword="true" /> si <see cref="T:System.Xml.XmlDictionaryWriter" /> puede procesar fragmentos XML; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-104"><see langword="true" /> if this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9ae-105">Devuelve `true` si el sistema de escritura que implementa esta interfaz puede generar y Aceptar fragmentos XML.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-105">Returns `true` if the writer that implements this interface can generate and accept XML fragments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndFragment">
      <MemberSignature Language="C#" Value="public void EndFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndFragment ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndFragment();" />
      <MemberSignature Language="F#" Value="abstract member EndFragment : unit -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.EndFragment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb9ae-106">Finaliza el procesamiento de un fragmento XML.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-106">Ends the processing of an XML fragment.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9ae-107">Detiene la redirección de resultados a la secuencia proporcionada por la llamada `StartFragment` correspondiente.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-107">Stops redirecting output to the stream supplied by the matching `StartFragment` call.</span></span> <span data-ttu-id="eb9ae-108">Después de esta llamada, el resultado de la escritura XML va a la secuencia utilizada originalmente por el sistema de escritura antes de la llamada `StartFragment`.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-108">After this call, the XML writing output goes to the stream originally used by the writer before the `StartFragment` call.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartFragment">
      <MemberSignature Language="C#" Value="public void StartFragment (System.IO.Stream stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartFragment(class System.IO.Stream stream, bool generateSelfContainedTextFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartFragment(System::IO::Stream ^ stream, bool generateSelfContainedTextFragment);" />
      <MemberSignature Language="F#" Value="abstract member StartFragment : System.IO.Stream * bool -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.StartFragment (stream, generateSelfContainedTextFragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="generateSelfContainedTextFragment" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="eb9ae-109">Secuencia en la que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-109">The stream to write to.</span></span></param>
        <param name="generateSelfContainedTextFragment"><span data-ttu-id="eb9ae-110">Si es <see langword="true" />, se declara de nuevo cualquier espacio de nombres declarado fuera del fragmento si se utiliza dentro de él; si <see langword="false" /> no se declaran los espacios de nombres de nuevo.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-110">If <see langword="true" />, any namespaces declared outside the fragment is declared again if used inside of it; if <see langword="false" /> the namespaces are not declared again.</span></span></param>
        <summary><span data-ttu-id="eb9ae-111">Inicia el procesamiento de un fragmento XML.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-111">Starts the processing of an XML fragment.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9ae-112">Temporalmente inicia la redirección de la escritura del resultado XML a la secuencia proporcionada hasta que se llame `EndFragment`.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-112">Temporarily starts redirecting the writing of the XML output to the supplied stream until `EndFragment` is called.</span></span> <span data-ttu-id="eb9ae-113">Si `generateSelfContainedTextFragment` es `true`, a continuación el resultado redirigido XML es siempre texto XML y es autónomo por lo que se refiere a su contexto de espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-113">If `generateSelfContainedTextFragment` is `true`, then the redirected XML output is always text XML and is self-contained in terms of its namespace context.</span></span> <span data-ttu-id="eb9ae-114">Las llamadas `StartFragment`() no pueden estar anidadas.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-114">`StartFragment`() calls cannot be nested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteFragment">
      <MemberSignature Language="C#" Value="public void WriteFragment (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFragment(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteFragment (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteFragment(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteFragment : byte[] * int * int -&gt; unit" Usage="iFragmentCapableXmlDictionaryWriter.WriteFragment (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="eb9ae-115">Búfer en el que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-115">The buffer to write to.</span></span></param>
        <param name="offset"><span data-ttu-id="eb9ae-116">La posición inicial desde la que escribir <paramref name="buffer" />.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-116">The starting position from which to write in <paramref name="buffer" />.</span></span></param>
        <param name="count"><span data-ttu-id="eb9ae-117">El número de bytes que se escribirán en el <paramref name="buffer" />.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-117">The number of bytes to be written to the <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="eb9ae-118">Escribe un fragmento XML en la secuencia subyacente del sistema de escritura.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-118">Writes an XML fragment to the underlying stream of the writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb9ae-119">Escribe un fragmento capturado entre `StartFragment` y `EndFragment` y vuelve a llamar a la secuencia principal del XmlDictionaryWriter.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-119">Writes a fragment captured between `StartFragment` and `EndFragment` and calls back into the XmlDictionaryWriter's main stream.</span></span> <span data-ttu-id="eb9ae-120">El fragmento escrito es bytes `count` que se inician en `offset` del índice del `buffer`proporcionado.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-120">The fragment written is `count` bytes starting at the index `offset` from the supplied `buffer`.</span></span> <span data-ttu-id="eb9ae-121">El comportamiento es indefinido si el fragmento proporcionado no se capturó utilizando esta instancia del sistema de escritura.</span><span class="sxs-lookup"><span data-stu-id="eb9ae-121">The behavior is undefined if the supplied fragment was not captured using this writer instance.</span></span>  
  
   
  
## Examples  
  
```csharp  
MemoryStream stream = new MemoryStream();  
MemoryStream fragmentStream = new MemoryStream();  
XmlDictionaryWriter writer = XmlDictionaryWriter.CreateTextWriter(stream);  
IXmlFragmentCapableXmlDictionaryWriter fragmentWriter = writer as IXmlFragmentCapableXmlDictionaryWriter;  
if (fragmentWriter == null || !fragmentWriter.CanFragment)  
{  
Console.WriteLine("This writer doesn't support fragments");  
return;  
}  
writer.WriteStartElement("Root");  
fragmentWriter.StartFragment(fragmentStream, false);  
writer.WriteStartElement("Body");  
writer.WriteString("This is my body");  
writer.WriteEndElement();  
fragmentWriter.EndFragment();  
writer.WriteStartElement("CharsInTheBody");  
writer.WriteValue(fragmentStream.Length);  
writer.WriteEndElement();  
fragmentWriter.WriteFragment(fragmentStream.GetBuffer(), 0, (int)fragmentStream.Length);  
writer.WriteEndElement(); // Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>