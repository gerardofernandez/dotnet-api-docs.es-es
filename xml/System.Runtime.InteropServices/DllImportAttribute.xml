<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de7a53beeda19e530806d2978aadf945a5d39e91" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52247557" /></Metadata><TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="746b8-101">Indica que una biblioteca de vínculos dinámicos (DLL) no administrada expone el método con atributos como un punto de entrada estático.</span><span class="sxs-lookup"><span data-stu-id="746b8-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-102">Este atributo se puede aplicar a métodos.</span><span class="sxs-lookup"><span data-stu-id="746b8-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="746b8-103">El <xref:System.Runtime.InteropServices.DllImportAttribute> atributo proporciona la información necesaria para llamar a una función exportada desde una DLL no administrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="746b8-104">Como requisito mínimo, debe proporcionar el nombre del archivo DLL que contiene el punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="746b8-105">Aplique este atributo directamente en C# y las definiciones de método de C++; Sin embargo, el compilador de Visual Basic emite este atributo cuando se usa el `Declare` instrucción.</span><span class="sxs-lookup"><span data-stu-id="746b8-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="746b8-106">Para obtener definiciones de método complejo que incluyen <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, o <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campos, aplique este atributo directamente a las definiciones de método de Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="746b8-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="746b8-107">**Tenga en cuenta** JScript no admite este atributo.</span><span class="sxs-lookup"><span data-stu-id="746b8-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="746b8-108">Puede usar C# o clases contenedoras de Visual Basic para tener acceso a los métodos de API no administrados desde programas de JScript.</span><span class="sxs-lookup"><span data-stu-id="746b8-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="746b8-109">Para obtener más información sobre el uso de la plataforma de invocación de servicio para las funciones de acceso de DLL no administradas, vea [consumir funciones de DLL no administradas](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span><span class="sxs-lookup"><span data-stu-id="746b8-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="746b8-110">El <xref:System.Runtime.InteropServices.DllImportAttribute> no admite la serialización de tipos genéricos.</span><span class="sxs-lookup"><span data-stu-id="746b8-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-111">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Runtime.InteropServices.DllImportAttribute> atributo importar Win32 `MessageBox` función.</span><span class="sxs-lookup"><span data-stu-id="746b8-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="746b8-112">El ejemplo de código, a continuación, llama al método importado.</span><span class="sxs-lookup"><span data-stu-id="746b8-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName"><span data-ttu-id="746b8-113">Nombre del archivo DLL que contiene el método no administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-113">The name of the DLL that contains the unmanaged method.</span></span> <span data-ttu-id="746b8-114">Puede incluir un nombre para mostrar del ensamblado, si el archivo DLL está incluido en un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="746b8-114">This can include an assembly display name, if the DLL is included in an assembly.</span></span></param>
        <summary><span data-ttu-id="746b8-115">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> con el nombre del archivo DLL que contiene el método que se va a importar.</span><span class="sxs-lookup"><span data-stu-id="746b8-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-116">Si un archivo DLL no administrado se incluye en un ensamblado, por ejemplo, mediante el vinculador o el `/linkresource` opción del compilador, puede especificar el nombre para mostrar del ensamblado como parte de `dllName`.</span><span class="sxs-lookup"><span data-stu-id="746b8-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="746b8-117">Por ejemplo, si una DLL no administrada denominada `unmanaged.dll` se incluye en un ensamblado administrado denominado `MyAssembly`, el atributo puede especificarse como se muestra en el código siguiente.</span><span class="sxs-lookup"><span data-stu-id="746b8-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="746b8-118">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Runtime.InteropServices.DllImportAttribute> atributo importar Win32 `MessageBox` función.</span><span class="sxs-lookup"><span data-stu-id="746b8-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="746b8-119">El ejemplo de código, a continuación, llama al método importado.</span><span class="sxs-lookup"><span data-stu-id="746b8-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-120">Habilita o deshabilita el comportamiento de asignación de ajuste perfecto al convertir caracteres Unicode en caracteres ANSI.</span><span class="sxs-lookup"><span data-stu-id="746b8-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-121">Si `true`, con ajuste perfecto comportamiento de asignación está habilitada; en caso contrario, con ajuste perfecto asignación está deshabilitada.</span><span class="sxs-lookup"><span data-stu-id="746b8-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="746b8-122">El <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> campo es `true` de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="746b8-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="746b8-123">Los valores de este campo reemplazan los valores en cualquier nivel para el <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> atributo.</span><span class="sxs-lookup"><span data-stu-id="746b8-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="746b8-124">Common language runtime se convierte en caracteres ANSI que cualquier administrado caracteres Unicode que pasa a un método no administrado que se ejecute en Windows 98 o Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="746b8-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="746b8-125">Asignación con ajuste perfecto permite que el serializador de interoperabilidad proporcionar un carácter de cierre coincidentes cuando no existe ninguna coincidencia exacta.</span><span class="sxs-lookup"><span data-stu-id="746b8-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="746b8-126">Por ejemplo, el contador de referencias convierte el carácter Unicode de copyright para 'c' para métodos no administrados que aceptan caracteres ANSI.</span><span class="sxs-lookup"><span data-stu-id="746b8-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="746b8-127">Algunos caracteres no tienen una representación con ajuste perfecto; estos caracteres se denominan no se puede asignar.</span><span class="sxs-lookup"><span data-stu-id="746b8-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="746b8-128">No se puede asignar caracteres normalmente se convierten en el valor predeterminado '?' Carácter ANSI.</span><span class="sxs-lookup"><span data-stu-id="746b8-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="746b8-129">Algunos caracteres Unicode se convierten en caracteres peligrosos, como la barra diagonal inversa '\\' carácter, que puede cambiar inadvertidamente una ruta de acceso.</span><span class="sxs-lookup"><span data-stu-id="746b8-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="746b8-130">Estableciendo el <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campo `true`, puede indicar la presencia de un carácter no se puede asignar al llamador iniciando una excepción.</span><span class="sxs-lookup"><span data-stu-id="746b8-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="746b8-131">No se puede cambiar los valores predeterminados proporcionados por el <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> y <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campos cuando se pasa una matriz administrada cuyos elementos son caracteres ANSI o punteros LPSTR a una matriz segura no administrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="746b8-132">Asignación con ajuste perfecto siempre está habilitada y se produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="746b8-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="746b8-133">Tenga en cuenta que esta combinación puede poner en peligro su modelo de seguridad.</span><span class="sxs-lookup"><span data-stu-id="746b8-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-134">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute>, en lugar de la `Declare` instrucción, para definir una función DLL en código administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="746b8-135">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="746b8-136">El ejemplo siguiente muestra cómo aplicar el más estricto definiciones de método de invocación de seguridad de la asignación de caracteres a una plataforma especificando el juego de caracteres ANSI, deshabilitando el comportamiento de asignación con ajuste perfecto y producir una excepción en los caracteres Unicode sin asignar.</span><span class="sxs-lookup"><span data-stu-id="746b8-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="746b8-137">Serialización de interoperabilidad</span><span class="sxs-lookup"><span data-stu-id="746b8-137">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-138">Indica la convención de llamada de un punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-138">Indicates the calling convention of an entry point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-139">Establezca este campo en uno de los <xref:System.Runtime.InteropServices.CallingConvention> miembros de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="746b8-139">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="746b8-140">El valor predeterminado para el <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> campo es <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, que a su vez de forma predeterminada <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convención.</span><span class="sxs-lookup"><span data-stu-id="746b8-140">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="746b8-141">Para obtener más información, vea la convención de llamada en MSDN library.</span><span class="sxs-lookup"><span data-stu-id="746b8-141">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-142">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute>, en lugar de la `Declare` instrucción, para definir una función DLL en código administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-142">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="746b8-143">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-143">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="746b8-144">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="746b8-144">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-145">Indica la forma de calcular las referencias de los parámetros de cadena al método, y controla los daños en los nombres.</span><span class="sxs-lookup"><span data-stu-id="746b8-145">Indicates how to marshal string parameters to the method and controls name mangling.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-146">Utilice este campo con un miembro de la <xref:System.Runtime.InteropServices.CharSet> enumeración para especificar el comportamiento de serialización de parámetros de cadena y para especificar qué nombre de punto de entrada para invocar (el nombre exacto especificado o un nombre termina con "A" o "W").</span><span class="sxs-lookup"><span data-stu-id="746b8-146">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="746b8-147">El miembro de enumeración predeterminado para C# y Visual Basic es `CharSet.Ansi` y es el miembro de enumeración predeterminado para C++ `CharSet.None`, que es equivalente a `CharSet.Ansi`.</span><span class="sxs-lookup"><span data-stu-id="746b8-147">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="746b8-148">En Visual Basic, usa el `Declare` instrucción para especificar el `CharSet` campo.</span><span class="sxs-lookup"><span data-stu-id="746b8-148">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="746b8-149">El <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> campo influye en el comportamiento de la `CharSet` campo determinar qué nombre de punto de entrada va a invocar.</span><span class="sxs-lookup"><span data-stu-id="746b8-149">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="746b8-150">Para obtener una descripción detallada y ejemplos de la serialización de cadenas y el nombre que coincida con el comportamiento asociado con el `CharSet` campo, vea [especificar un juego de caracteres](~/docs/framework/interop/specifying-a-character-set.md).</span><span class="sxs-lookup"><span data-stu-id="746b8-150">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-151">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Runtime.InteropServices.DllImportAttribute> atributo importar Win32 `MessageBox` función.</span><span class="sxs-lookup"><span data-stu-id="746b8-151">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="746b8-152">El ejemplo de código, a continuación, llama al método importado.</span><span class="sxs-lookup"><span data-stu-id="746b8-152">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-153">Indica el nombre u ordinal del punto de entrada de la DLL al que se va a llamar.</span><span class="sxs-lookup"><span data-stu-id="746b8-153">Indicates the name or ordinal of the DLL entry point to be called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-154">Puede especificar el nombre del punto de entrada proporcionando una cadena que indica el nombre del archivo DLL que contiene el punto de entrada, o puede identificar el punto de entrada por su ordinal.</span><span class="sxs-lookup"><span data-stu-id="746b8-154">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="746b8-155">Los ordinales van precedidos del signo #, por ejemplo, #1.</span><span class="sxs-lookup"><span data-stu-id="746b8-155">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="746b8-156">Si se omite este campo, common language runtime usa el nombre del método de.NET marcado con el <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="746b8-156">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="746b8-157">Para obtener más información, consulte [identificar funciones en archivos DLL](~/docs/framework/interop/identifying-functions-in-dlls.md).</span><span class="sxs-lookup"><span data-stu-id="746b8-157">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="746b8-158">Para obtener ejemplos que muestran cómo utilizar el <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> campo, vea [especificando un punto de entrada](~/docs/framework/interop/specifying-an-entry-point.md).</span><span class="sxs-lookup"><span data-stu-id="746b8-158">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-159">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Runtime.InteropServices.DllImportAttribute> atributo importar Win32 `MessageBox` función.</span><span class="sxs-lookup"><span data-stu-id="746b8-159">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="746b8-160">El ejemplo de código se usa el <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> propiedad para especificar la función para importar y, a continuación, cambia el nombre a `MyNewMessageBoxMethod`.</span><span class="sxs-lookup"><span data-stu-id="746b8-160">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-161">Controla si el campo <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> hace que Common Language Runtime busque en un archivo DLL no administrado nombres de puntos de entrada distintos del especificado.</span><span class="sxs-lookup"><span data-stu-id="746b8-161">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-162">Si `false`, se invoca el nombre del punto de entrada anexado por la letra A cuando el <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> campo se establece en `CharSet.Ansi`, y el nombre de punto de entrada anexado con la letra W se invoca cuando el <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> campo se establece en el `CharSet.Unicode`.</span><span class="sxs-lookup"><span data-stu-id="746b8-162">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="746b8-163">Normalmente, los compiladores administrados establecen este campo.</span><span class="sxs-lookup"><span data-stu-id="746b8-163">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="746b8-164">En la tabla siguiente se muestra la relación entre el <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> y <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> campos, basándose en los valores predeterminados impuestos por el lenguaje de programación.</span><span class="sxs-lookup"><span data-stu-id="746b8-164">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="746b8-165">Puede invalidar la configuración predeterminada, pero hacerlo con precaución.</span><span class="sxs-lookup"><span data-stu-id="746b8-165">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="746b8-166">Lenguaje</span><span class="sxs-lookup"><span data-stu-id="746b8-166">Language</span></span>|<span data-ttu-id="746b8-167">ANSI</span><span class="sxs-lookup"><span data-stu-id="746b8-167">ANSI</span></span>|<span data-ttu-id="746b8-168">Unicode</span><span class="sxs-lookup"><span data-stu-id="746b8-168">Unicode</span></span>|<span data-ttu-id="746b8-169">Automático</span><span class="sxs-lookup"><span data-stu-id="746b8-169">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="746b8-170">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="746b8-170">Visual Basic</span></span>|<span data-ttu-id="746b8-171">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="746b8-171">ExactSpelling:=True</span></span>|<span data-ttu-id="746b8-172">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="746b8-172">ExactSpelling:=True</span></span>|<span data-ttu-id="746b8-173">ExactSpelling: = False</span><span class="sxs-lookup"><span data-stu-id="746b8-173">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="746b8-174">C#</span><span class="sxs-lookup"><span data-stu-id="746b8-174">C#</span></span>|<span data-ttu-id="746b8-175">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-175">ExactSpelling=false</span></span>|<span data-ttu-id="746b8-176">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-176">ExactSpelling=false</span></span>|<span data-ttu-id="746b8-177">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-177">ExactSpelling=false</span></span>|  
|<span data-ttu-id="746b8-178">C++</span><span class="sxs-lookup"><span data-stu-id="746b8-178">C++</span></span>|<span data-ttu-id="746b8-179">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-179">ExactSpelling=false</span></span>|<span data-ttu-id="746b8-180">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-180">ExactSpelling=false</span></span>|<span data-ttu-id="746b8-181">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="746b8-181">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="746b8-182">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute>, en lugar de usar el `Declare` instrucción, para definir una función DLL en código administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-182">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="746b8-183">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-183">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-184">Indica si los métodos no administrados que tienen el valor devuelto <see langword="HRESULT" /> o <see langword="retval" /> se traducen directamente o si los valores devueltos <see langword="HRESULT" /> o <see langword="retval" /> se convierten automáticamente en excepciones.</span><span class="sxs-lookup"><span data-stu-id="746b8-184">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-185">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo `true` traducir directamente firmas no administradas con `HRESULT` o `retval` valores; establézcalo como `false` para convertir automáticamente `HRESULT` o `retval` valores a las excepciones.</span><span class="sxs-lookup"><span data-stu-id="746b8-185">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="746b8-186">De forma predeterminada, el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo es `true`.</span><span class="sxs-lookup"><span data-stu-id="746b8-186">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="746b8-187">Cuando `true`, la firma del método resultante devuelve un valor entero que contiene el `HRESULT` valor.</span><span class="sxs-lookup"><span data-stu-id="746b8-187">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="746b8-188">En este caso, debe inspeccionar el valor devuelto y responder según corresponda manualmente en la aplicación.</span><span class="sxs-lookup"><span data-stu-id="746b8-188">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="746b8-189">Al establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo `false`, la firma del método resultante contiene un tipo de valor devuelto void en lugar de un entero (`HRESULT`) tipo de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="746b8-189">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="746b8-190">Cuando el método no administrado produce una `HRESULT`, el tiempo de ejecución omite automáticamente un valor devuelto de `S_OK` (o 0) y no inicia una excepción.</span><span class="sxs-lookup"><span data-stu-id="746b8-190">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="746b8-191">Para `HRESULT`s distinto `S_OK`, automáticamente, el runtime produce una excepción que se corresponde con el `HRESULT`.</span><span class="sxs-lookup"><span data-stu-id="746b8-191">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="746b8-192">Tenga en cuenta que el <xref:System.Runtime.InteropServices.DllImportAttribute> atributo solo realiza esta conversión a los métodos que devuelven un `HRESULT`.</span><span class="sxs-lookup"><span data-stu-id="746b8-192">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="746b8-193">Decide cambiar el comportamiento de los informes de errores predeterminada `HRESULT`s a las excepciones en casos donde las excepciones se ajusten mejor a la estructura de la aplicación de informes de errores.</span><span class="sxs-lookup"><span data-stu-id="746b8-193">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="746b8-194">Este campo es similar a la <xref:System.Runtime.InteropServices.PreserveSigAttribute>; sin embargo, en contraposición a la <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo, el valor predeterminado para el atributo es `false`.</span><span class="sxs-lookup"><span data-stu-id="746b8-194">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="746b8-195">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute>, en lugar de usar el `Declare` instrucción, para definir una función DLL en código administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-195">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="746b8-196">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-196">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-197">El siguiente ejemplo de código utiliza el <xref:System.Runtime.InteropServices.DllImportAttribute> a importar no administrado `SHAutoComplete` funcionar una vez con el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo establecido en `true` y luego con el <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> campo establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="746b8-197">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="746b8-198">Este ejemplo de código hace que el `SHAutoComplete` función para generar errores con una excepción una vez y un `HRESULT` la siguiente.</span><span class="sxs-lookup"><span data-stu-id="746b8-198">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-199">Indica que el destinatario de la llamada llamará a la función <see langword="SetLastError" /> de la API Win32 antes de volver del método con atributos.</span><span class="sxs-lookup"><span data-stu-id="746b8-199">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-200">`true` para indicar que el destinatario llamará `SetLastError`; en caso contrario, `false`.</span><span class="sxs-lookup"><span data-stu-id="746b8-200">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="746b8-201">El valor predeterminado es `false`.</span><span class="sxs-lookup"><span data-stu-id="746b8-201">The default is `false`.</span></span>  
  
 <span data-ttu-id="746b8-202">Las llamadas de contador de referencias en tiempo de ejecución `GetLastError` y almacena en caché el valor devuelto para evitar que se sobrescriban con otras llamadas API.</span><span class="sxs-lookup"><span data-stu-id="746b8-202">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="746b8-203">Puede recuperar el código de error mediante una llamada a <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span><span class="sxs-lookup"><span data-stu-id="746b8-203">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-204">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute>, en lugar de usar el `Declare` instrucción, para definir una función DLL en código administrado.</span><span class="sxs-lookup"><span data-stu-id="746b8-204">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="746b8-205">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-205">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-206">Habilita o deshabilita el inicio de una excepción cuando un carácter Unicode que no se puede asignar se convierte en un carácter ANSI "?".</span><span class="sxs-lookup"><span data-stu-id="746b8-206">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-207">`true` para indicar que se produce una excepción cada vez que el serializador de interoperabilidad convierte un carácter que no puede asignarse; `false` para indicar que el <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campo está deshabilitado.</span><span class="sxs-lookup"><span data-stu-id="746b8-207">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="746b8-208">Este campo es `false` de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="746b8-208">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="746b8-209">Common language runtime se convierte en caracteres ANSI que cualquier administrado caracteres Unicode que pasa a un método no administrado que se ejecute en Windows 98 o Windows Millennium Edition.</span><span class="sxs-lookup"><span data-stu-id="746b8-209">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="746b8-210">Asignación con ajuste perfecto permite que el serializador de interoperabilidad proporcionar un carácter de cierre coincidentes cuando no existe ninguna coincidencia exacta.</span><span class="sxs-lookup"><span data-stu-id="746b8-210">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="746b8-211">Por ejemplo, el contador de referencias convierte el carácter Unicode de copyright para 'c' para métodos no administrados que aceptan caracteres ANSI.</span><span class="sxs-lookup"><span data-stu-id="746b8-211">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="746b8-212">Algunos caracteres no tienen una representación con ajuste perfecto; estos caracteres se denominan no se puede asignar.</span><span class="sxs-lookup"><span data-stu-id="746b8-212">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="746b8-213">No se puede asignar caracteres normalmente se convierten en el valor predeterminado '?' Carácter ANSI.</span><span class="sxs-lookup"><span data-stu-id="746b8-213">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="746b8-214">Algunos caracteres Unicode se convierten en caracteres peligrosos, como la barra diagonal inversa '\\' carácter, que puede cambiar inadvertidamente una ruta de acceso.</span><span class="sxs-lookup"><span data-stu-id="746b8-214">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="746b8-215">Estableciendo el <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campo `true`, puede indicar la presencia de un carácter no se puede asignar al llamador iniciando una excepción.</span><span class="sxs-lookup"><span data-stu-id="746b8-215">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="746b8-216">No se puede cambiar los valores predeterminados proporcionados por el <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> y <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campos cuando se pasa una matriz administrada cuyos elementos son caracteres ANSI o punteros LPSTR a una matriz segura no administrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-216">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="746b8-217">Asignación con ajuste perfecto siempre está habilitada y se produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="746b8-217">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="746b8-218">Tenga en cuenta que esta combinación puede poner en peligro su modelo de seguridad.</span><span class="sxs-lookup"><span data-stu-id="746b8-218">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="746b8-219">En algunos casos, los desarrolladores de Visual Basic utilizan la <xref:System.Runtime.InteropServices.DllImportAttribute> para definir una función DLL en código administrado, en lugar de usar el `Declare` instrucción.</span><span class="sxs-lookup"><span data-stu-id="746b8-219">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="746b8-220">Establecer el <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> campo es uno de estos casos.</span><span class="sxs-lookup"><span data-stu-id="746b8-220">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="746b8-221">El ejemplo siguiente muestra cómo aplicar el más estricto definiciones de método de invocación de seguridad de la asignación de caracteres a una plataforma especificando el juego de caracteres ANSI, deshabilitando el comportamiento de asignación con ajuste perfecto y producir una excepción en los caracteres Unicode sin asignar.</span><span class="sxs-lookup"><span data-stu-id="746b8-221">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="746b8-222">Serialización de interoperabilidad</span><span class="sxs-lookup"><span data-stu-id="746b8-222">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="746b8-223">Obtiene el nombre del archivo DLL que contiene el punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-223">Gets the name of the DLL file that contains the entry point.</span></span></summary>
        <value><span data-ttu-id="746b8-224">Nombre del archivo DLL que contiene el punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="746b8-224">The name of the DLL file that contains the entry point.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="746b8-225">Puede proporcionar una ruta de acceso completa o relativa.</span><span class="sxs-lookup"><span data-stu-id="746b8-225">You can provide a full or relative path.</span></span> <span data-ttu-id="746b8-226">Si se proporciona ninguna ruta de acceso, el archivo DLL debe ser en la ruta de acceso actual en tiempo de ejecución, a menos que se carga el archivo DLL por otros medios.</span><span class="sxs-lookup"><span data-stu-id="746b8-226">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="746b8-227">Tenga en cuenta, sin embargo, que utiliza una ruta de acceso completa puede introducir imprecisión si se mueve el archivo DLL.</span><span class="sxs-lookup"><span data-stu-id="746b8-227">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>