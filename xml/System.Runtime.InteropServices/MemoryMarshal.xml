<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0af29550fe0050cf6f38464c775a95d309ad95b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55396259" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="72391-101">Proporciona métodos para interoperar con <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, y <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="72391-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-102">El tipo de elementos en el intervalo de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-103">El segmento de origen para convertir.</span><span class="sxs-lookup"><span data-stu-id="72391-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="72391-104">Convierte un <see cref="T:System.ReadOnlySpan`1" /> de un tipo primitivo, <paramref name="T" />, a un <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="72391-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="72391-105">Un intervalo de solo lectura de tipo <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="72391-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-106">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-107">`T` se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-108"><paramref name="T" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="72391-109">La propiedad <see cref="P:System.ReadOnlySpan`1.Length" /> del nuevo <see cref="T:System.ReadOnlySpan`1" /> superaría <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="72391-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-110">El tipo de elementos en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-111">El segmento de origen para convertir.</span><span class="sxs-lookup"><span data-stu-id="72391-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="72391-112">Convierte un <see cref="T:System.Span`1" /> de un tipo primitivo, <paramref name="T" />, a un <see langword="Span&lt;Byte&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="72391-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="72391-113">Un intervalo de tipo <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="72391-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-114">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-115">`T` se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-116"><paramref name="T" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="72391-117">La propiedad <see cref="P:System.Span`1.Length" /> del nuevo <see cref="T:System.Span`1" /> superaría <see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="72391-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-118">El tipo de elementos en el búfer de memoria de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="72391-119">El búfer de memoria de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="72391-120">Crea una instancia de <see cref="T:System.Memory`1" /> a partir de un <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="72391-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="72391-121">Un bloque de memoria que representa la misma memoria que <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="72391-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-122">Este método debe utilizarse con extrema precaución.</span><span class="sxs-lookup"><span data-stu-id="72391-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="72391-123"><xref:System.ReadOnlyMemory%601> se utiliza para representar datos inmutables y otro que no está pensado para escribirse en memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="72391-124"><xref:System.Memory%601> las instancias creadas por este método no deben escribirse en.</span><span class="sxs-lookup"><span data-stu-id="72391-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="72391-125">El propósito de este método es permitir que las variables de tipo <xref:System.Memory%601> , pero solo se utiliza para leer para almacenar un <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="72391-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="72391-126">El tipo de intervalo de origen.</span><span class="sxs-lookup"><span data-stu-id="72391-126">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="72391-127">El tipo de intervalo de destino.</span><span class="sxs-lookup"><span data-stu-id="72391-127">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-128">El segmento de origen para convertir.</span><span class="sxs-lookup"><span data-stu-id="72391-128">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="72391-129">Convierte un intervalo de solo lectura de un tipo primitivo a un intervalo de solo lectura de otro tipo primitivo.</span><span class="sxs-lookup"><span data-stu-id="72391-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="72391-130">El intervalo de solo lectura convertido.</span><span class="sxs-lookup"><span data-stu-id="72391-130">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-131">Ni `TFrom` ni `TTo` puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="72391-132">`TFrom` y `TTo` se comprueban en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="72391-133">Este método solo se admite en plataformas que admiten el acceso de memoria no alineadas o al bloquear la memoria está alineada por otros medios.</span><span class="sxs-lookup"><span data-stu-id="72391-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-134"><paramref name="TFrom" /> o <paramref name="TTo" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-134"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="72391-135">El tipo de intervalo de origen.</span><span class="sxs-lookup"><span data-stu-id="72391-135">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="72391-136">El tipo de intervalo de destino.</span><span class="sxs-lookup"><span data-stu-id="72391-136">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-137">El segmento de origen para convertir.</span><span class="sxs-lookup"><span data-stu-id="72391-137">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="72391-138">Convierte un intervalo de un tipo primitivo a un intervalo de otro tipo primitivo.</span><span class="sxs-lookup"><span data-stu-id="72391-138">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="72391-139">El intervalo convertido.</span><span class="sxs-lookup"><span data-stu-id="72391-139">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-140">Ni `TFrom` ni `TTo` puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="72391-141">`TFrom` y `TTo` se comprueban en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="72391-142">La conversión se produce en un contexto no comprobado.</span><span class="sxs-lookup"><span data-stu-id="72391-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="72391-143">Si el intervalo de `TTo` es menor que el intervalo de `TFrom`, puede producirse una pérdida de datos.</span><span class="sxs-lookup"><span data-stu-id="72391-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="72391-144">Por ejemplo, si `TFrom` es <xref:System.Int64>, uno de los `ReadOnlySpan<Int32>` valores es 0x100001111110F0F, y `TTo` es <xref:System.Int32>, el valor resultante es 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="72391-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="72391-145">Este método solo se admite en plataformas que admiten el acceso de memoria no alineadas o al bloquear la memoria está alineada por otros medios.</span><span class="sxs-lookup"><span data-stu-id="72391-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-146"><paramref name="TFrom" /> o <paramref name="TTo" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-146"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-147">Tipo de matriz.</span><span class="sxs-lookup"><span data-stu-id="72391-147">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="72391-148">La matriz de origen previamente anclada.</span><span class="sxs-lookup"><span data-stu-id="72391-148">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="72391-149">El índice de <paramref name="array" /> donde comienza el bloque de memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-149">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="72391-150">El número de elementos para incluir en el bloque de memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-150">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="72391-151">Crea un nuevo búfer de memoria sobre la parte de la matriz de destino anclada previamente que empieza en el índice <paramref name="start" /> y contiene <paramref name="length" /> elementos.</span><span class="sxs-lookup"><span data-stu-id="72391-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="72391-152">Un bloque de memoria sobre los elementos especificados de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="72391-152">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="72391-153">Si <paramref name="array" /> es <see langword="null" />, o si <paramref name="start" /> y <paramref name="length" /> son 0, el método devuelve una instancia <see cref="T:System.Memory`1" /> de <see cref="System.Memory`1.Length" /> cero.</span><span class="sxs-lookup"><span data-stu-id="72391-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-154">Ya se debe fijar la matriz antes de que se llama a este método y esa matriz no debe ser liberada mientras el <xref:System.Memory%601> búfer que devuelve todavía está en uso.</span><span class="sxs-lookup"><span data-stu-id="72391-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="72391-155">Llamar a este método en una matriz desanclada podría provocar daños en la memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="72391-156"><paramref name="array" /> es covariante y el tipo de <paramref name="array" /> no es exactamente <paramref name="T[]" />.</span><span class="sxs-lookup"><span data-stu-id="72391-156"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72391-157">El <paramref name="start" /> o el índice final no está en el intervalo de 0 a <see cref="P:System.Array.Length" />.</span><span class="sxs-lookup"><span data-stu-id="72391-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-158">El tipo de los elementos de datos.</span><span class="sxs-lookup"><span data-stu-id="72391-158">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="72391-159">Una referencia a los datos.</span><span class="sxs-lookup"><span data-stu-id="72391-159">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="72391-160">Número de elementos de <paramref name="T" /> que contiene <paramref name="reference" />.</span><span class="sxs-lookup"><span data-stu-id="72391-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="72391-161">Crea un intervalo de solo lectura sobre una parte de un objeto administrado normal.</span><span class="sxs-lookup"><span data-stu-id="72391-161">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="72391-162">Un intervalo de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-162">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-163">Este método puede ser útil si parte de un objeto que representa una matriz fija.</span><span class="sxs-lookup"><span data-stu-id="72391-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="72391-164">Este método debe utilizarse con precaución.</span><span class="sxs-lookup"><span data-stu-id="72391-164">This method should be used with caution.</span></span> <span data-ttu-id="72391-165">Es peligroso porque el `length` argumento no está activado.</span><span class="sxs-lookup"><span data-stu-id="72391-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="72391-166">Además, no se valida la duración del intervalo devuelto por motivos de seguridad por los lenguajes compatibles con el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-167">El tipo de los elementos de datos.</span><span class="sxs-lookup"><span data-stu-id="72391-167">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="72391-168">Una referencia a los datos.</span><span class="sxs-lookup"><span data-stu-id="72391-168">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="72391-169">Número de elementos de <paramref name="T" /> que contiene <paramref name="reference" />.</span><span class="sxs-lookup"><span data-stu-id="72391-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="72391-170">Crea un nuevo intervalo sobre una parte de un objeto administrado normal.</span><span class="sxs-lookup"><span data-stu-id="72391-170">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="72391-171">Un intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-171">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-172">Este método puede ser útil si parte de un objeto que representa una matriz fija.</span><span class="sxs-lookup"><span data-stu-id="72391-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="72391-173">Este método debe utilizarse con precaución.</span><span class="sxs-lookup"><span data-stu-id="72391-173">This method should be used with caution.</span></span> <span data-ttu-id="72391-174">Es peligroso porque el `length` argumento no está activado.</span><span class="sxs-lookup"><span data-stu-id="72391-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="72391-175">Además, no se valida la duración del intervalo devuelto por motivos de seguridad por los lenguajes compatibles con el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-176">El tipo de elementos en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-176">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-177">El intervalo de solo lectura desde el que se recupera la referencia.</span><span class="sxs-lookup"><span data-stu-id="72391-177">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="72391-178">Devuelve una referencia al elemento del intervalo de solo lectura en el índice cero.</span><span class="sxs-lookup"><span data-stu-id="72391-178">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="72391-179">Una referencia al elemento en el índice 0.</span><span class="sxs-lookup"><span data-stu-id="72391-179">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-180">Si el intervalo de solo lectura está vacío, este método devuelve una referencia a la ubicación donde se hubieran almacenado el elemento en el índice 0.</span><span class="sxs-lookup"><span data-stu-id="72391-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="72391-181">Este tipo de referencia puede o no ser `null`.</span><span class="sxs-lookup"><span data-stu-id="72391-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="72391-182">La referencia devuelta puede usarse para anclar, pero nunca se debe desreferenciar.</span><span class="sxs-lookup"><span data-stu-id="72391-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-183">El tipo de elementos en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-183">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="72391-184">El intervalo desde el que se recupera la referencia.</span><span class="sxs-lookup"><span data-stu-id="72391-184">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="72391-185">Devuelve una referencia al elemento del intervalo en el índice 0.</span><span class="sxs-lookup"><span data-stu-id="72391-185">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="72391-186">Una referencia al elemento en el índice 0.</span><span class="sxs-lookup"><span data-stu-id="72391-186">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-187">Si el intervalo está vacío, este método devuelve una referencia a la ubicación donde se hubieran almacenado el elemento en el índice 0.</span><span class="sxs-lookup"><span data-stu-id="72391-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="72391-188">Este tipo de referencia puede o no ser `null`.</span><span class="sxs-lookup"><span data-stu-id="72391-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="72391-189">La referencia devuelta puede usarse para anclar, pero nunca se debe desreferenciar.</span><span class="sxs-lookup"><span data-stu-id="72391-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-190">El tipo del elemento para recuperar desde el intervalo de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-190">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="72391-191">Un intervalo de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-191">A read-only span.</span></span></param>
        <summary><span data-ttu-id="72391-192">Lee una estructura de tipo</span><span class="sxs-lookup"><span data-stu-id="72391-192">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="72391-193">fuera de un intervalo de solo lectura de bytes.</span><span class="sxs-lookup"><span data-stu-id="72391-193">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="72391-194">La estructura recuperada del intervalo de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-194">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-195">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-196">' Se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-197"><paramref name="T" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-197"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72391-198"><paramref name="source" /> es menor que <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="72391-198"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-199">El tipo de los elementos en el búfer de memoria de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-199">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="72391-200">Un búfer de memoria de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-200">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="72391-201">Crea una vista <see cref="T:System.Collections.Generic.IEnumerable`1" /> del búfer de memoria de solo lectura especificado.</span><span class="sxs-lookup"><span data-stu-id="72391-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="72391-202">Vista enumerable de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="72391-202">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-203">Este método permite a un búfer de memoria de sólo lectura que se usará en las API existentes que requieren un parámetro de tipo <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="72391-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-204">El tipo de elementos en el búfer de memoria de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-204">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="72391-205">Un búfer de memoria de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-205">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="72391-206">Cuando se devuelve este método, contiene el segmento de matrices recuperado del búfer de memoria de solo lectura subyacente.</span><span class="sxs-lookup"><span data-stu-id="72391-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="72391-207">Si se produce un error en el método, el método devuelve un segmento de matriz predeterminado.</span><span class="sxs-lookup"><span data-stu-id="72391-207">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="72391-208">Intenta obtener un segmento de matriz desde el búfer de memoria subyacente.</span><span class="sxs-lookup"><span data-stu-id="72391-208">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="72391-209">El valor devuelto indica si la operación se completó correctamente.</span><span class="sxs-lookup"><span data-stu-id="72391-209">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="72391-210"><see langword="true" /> si la llamada al método se realiza correctamente; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-210"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-211">El tipo de los elementos en el búfer de memoria de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-211">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="72391-212">El tipo de la <see cref="T:System.Buffers.MemoryManager`1" /> para recuperar.</span><span class="sxs-lookup"><span data-stu-id="72391-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="72391-213">El búfer de memoria de solo lectura para el que se va a obtener el administrador de memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-213">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="72391-214">Cuando el método finaliza, administrador de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="72391-214">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="72391-215">Intenta recuperar un <see cref="T:System.Buffers.MemoryManager`1" /> desde el búfer de memoria de solo lectura subyacente.</span><span class="sxs-lookup"><span data-stu-id="72391-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="72391-216"><see langword="true" /> si el método recuperó el administrador de memoria; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-216"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-217">El tipo de los elementos en el búfer de memoria de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-217">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="72391-218">El tipo de la <see cref="T:System.Buffers.MemoryManager`1" /> para recuperar.</span><span class="sxs-lookup"><span data-stu-id="72391-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="72391-219">El búfer de memoria de solo lectura para el que se va a obtener el administrador de memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-219">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="72391-220">Cuando el método finaliza, administrador de <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="72391-220">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="72391-221">Cuando el método finaliza, desplazamiento desde el principio de <paramref name="manager" /> que representa <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="72391-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="72391-222">Cuando el método finaliza, longitud de <paramref name="manager" /> que representa <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="72391-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="72391-223">Intenta recuperar un <see cref="T:System.Buffers.MemoryManager`1" />, iniciar un índice y una longitud desde el búfer de memoria de solo lectura subyacente.</span><span class="sxs-lookup"><span data-stu-id="72391-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="72391-224">Es <see langword="true" /> si el método se ha ejecutado correctamente; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-224"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="72391-225">Memoria de solo lectura que contiene un bloque de caracteres.</span><span class="sxs-lookup"><span data-stu-id="72391-225">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="72391-226">Cuando el método lo devuelve, la cadena contenida en el búfer de memoria.</span><span class="sxs-lookup"><span data-stu-id="72391-226">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="72391-227">La ubicación de inicio de <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="72391-227">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="72391-228">Número de caracteres de <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="72391-228">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="72391-229">Intenta obtener la cadena subyacente de un <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="72391-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="72391-230"><see langword="true" /> Si el método recupera correctamente la cadena subyacente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-230"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-231">El tipo de la estructura para recuperar.</span><span class="sxs-lookup"><span data-stu-id="72391-231">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="72391-232">Un intervalo de bytes de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-232">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="72391-233">Cuando el método finaliza, instancia de <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="72391-233">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="72391-234">Intenta leer una estructura de tipo <paramref name="T" /> desde un intervalo de bytes de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="72391-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="72391-235"><see langword="true" /> si el método recupera correctamente una instancia de la estructura; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-235"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-236">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-237">' Se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-238"><paramref name="T" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-238"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-239">El tipo de la estructura.</span><span class="sxs-lookup"><span data-stu-id="72391-239">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="72391-240">El intervalo de bytes que contiene la estructura.</span><span class="sxs-lookup"><span data-stu-id="72391-240">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="72391-241">La estructura que se escribirá en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-241">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="72391-242">Intenta escribir una estructura de tipo <paramref name="T" /> en un intervalo de bytes.</span><span class="sxs-lookup"><span data-stu-id="72391-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="72391-243"><see langword="true" /> si la operación se realiza correctamente; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="72391-243"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="72391-244">El método devuelve <see langword="false" /> si el intervalo es demasiado pequeño para incluir <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="72391-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-245">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-246">' Se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-247"><paramref name="TFrom" /> o <paramref name="TTo" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-247"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="72391-248">El tipo de la estructura.</span><span class="sxs-lookup"><span data-stu-id="72391-248">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="72391-249">El intervalo de bytes que contiene la estructura.</span><span class="sxs-lookup"><span data-stu-id="72391-249">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="72391-250">La estructura que se escribirá en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="72391-250">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="72391-251">Escribe una estructura de tipo <paramref name="T" /> en un intervalo de bytes.</span><span class="sxs-lookup"><span data-stu-id="72391-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="72391-252">`T` no puede contener punteros o referencias.</span><span class="sxs-lookup"><span data-stu-id="72391-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="72391-253">' Se comprueba en tiempo de ejecución con el fin de preservar la seguridad de tipos.</span><span class="sxs-lookup"><span data-stu-id="72391-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="72391-254"><paramref name="T" /> contiene referencias o punteros.</span><span class="sxs-lookup"><span data-stu-id="72391-254"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="72391-255"><paramref name="destination" /> es demasiado pequeño para contener <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="72391-255"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>