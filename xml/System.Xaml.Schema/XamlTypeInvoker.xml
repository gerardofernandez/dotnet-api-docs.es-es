<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d908be848800de954203e3d83f4d2005b60a7c55" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39916365" /></Metadata><TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2695c-101">Proporciona un punto de la extensión que puede construir instancias de un tipo XAML a través de técnicas distintas de la reflexión y los constructores.</span><span class="sxs-lookup"><span data-stu-id="2695c-101">Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-102">El propósito de <xref:System.Xaml.Schema.XamlTypeInvoker> consiste en habilitar un sistema de tipos XAML extensible, esquema y un Runtime activo que no se basen completamente en características CLR como atributos de CLR, información de reflexión a través de <xref:System.Type> y <xref:System.Reflection.MemberInfo>, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="2695c-102">The purpose of <xref:System.Xaml.Schema.XamlTypeInvoker> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span> <span data-ttu-id="2695c-103">Las subclases de <xref:System.Xaml.Schema.XamlTypeInvoker> se usan como parámetros de entrada para los constructores de clases de esquema XAML alternativos, como <xref:System.Xaml.XamlType>.</span><span class="sxs-lookup"><span data-stu-id="2695c-103">Subclasses of <xref:System.Xaml.Schema.XamlTypeInvoker> are used as input parameters for the alternate constructors of XAML schema classes such as <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="2695c-104">Subclase <xref:System.Xaml.XamlType> y pasar el <xref:System.Xaml.Schema.XamlTypeInvoker> a través del constructor base.</span><span class="sxs-lookup"><span data-stu-id="2695c-104">You subclass <xref:System.Xaml.XamlType> and pass the <xref:System.Xaml.Schema.XamlTypeInvoker> through to the base constructor.</span></span> <span data-ttu-id="2695c-105">Junto con la definición de un <xref:System.Xaml.Schema.XamlTypeInvoker> para el constructor, también debe proporcionar valores de reemplazo de al menos algunos de los `Lookup` métodos de <xref:System.Xaml.XamlType>.</span><span class="sxs-lookup"><span data-stu-id="2695c-105">Along with defining a <xref:System.Xaml.Schema.XamlTypeInvoker> for the constructor, you must also provide overrides for at least some of the `Lookup` methods of <xref:System.Xaml.XamlType>.</span></span>  
  
 <span data-ttu-id="2695c-106"><xref:System.Xaml.Schema.XamlTypeInvoker> tiene una implementación predeterminada.</span><span class="sxs-lookup"><span data-stu-id="2695c-106"><xref:System.Xaml.Schema.XamlTypeInvoker> has a default implementation.</span></span> <span data-ttu-id="2695c-107">La implementación predeterminada sigue un modelo similar a la implementación predeterminada de tipos de esquema XAML <xref:System.Xaml.XamlType> y <xref:System.Xaml.XamlMember>: el sistema de tipos CLR se usa para la creación de instancias, valores y las búsquedas, incluido el uso de atributos de CLR, <xref:System.Type> y <xref:System.Reflection.MemberInfo>, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="2695c-107">The default implementation follows a similar model to the default implementation of XAML schema types <xref:System.Xaml.XamlType> and <xref:System.Xaml.XamlMember>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <xref:System.Type> and <xref:System.Reflection.MemberInfo>, and so on.</span></span>  
  
 <span data-ttu-id="2695c-108"><xref:System.Xaml.Schema.XamlTypeInvoker> Proporciona métodos para la creación de instancias básica (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) y los métodos que son relevantes para los tipos de donde la <xref:System.Xaml.XamlType> representa una colección, diccionario o matriz (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span><span class="sxs-lookup"><span data-stu-id="2695c-108"><xref:System.Xaml.Schema.XamlTypeInvoker> provides methods for basic instantiation (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) and methods that are relevant for types where the <xref:System.Xaml.XamlType> represents a collection, dictionary or array (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2695c-109">Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-109">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2695c-110">Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-110">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-111">La implementación predeterminada está vacía.</span><span class="sxs-lookup"><span data-stu-id="2695c-111">The default implementation is empty.</span></span>  
  
 <span data-ttu-id="2695c-112">Este constructor se invoca internamente para proporcionar un valor para <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</span><span class="sxs-lookup"><span data-stu-id="2695c-112">This constructor is invoked internally to provide a value for <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</span></span> <span data-ttu-id="2695c-113">Para un <xref:System.Xaml.Schema.XamlTypeInvoker> subclase, se espera que usa el <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> firma para la construcción o proporcione una invalidación que llama a <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> como base.</span><span class="sxs-lookup"><span data-stu-id="2695c-113">For a <xref:System.Xaml.Schema.XamlTypeInvoker> subclass, it is expected that you either use the <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> signature for construction or provide an override that calls <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> as base.</span></span> <span data-ttu-id="2695c-114">Proporcionar la <xref:System.Xaml.XamlType> implementa una predeterminada patrón where <xref:System.Xaml.Schema.XamlTypeInvoker> es inmutable.</span><span class="sxs-lookup"><span data-stu-id="2695c-114">Providing the <xref:System.Xaml.XamlType> implements a default pattern where <xref:System.Xaml.Schema.XamlTypeInvoker> is immutable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="2695c-115">El valor de <see cref="T:System.Xaml.XamlType" /> para el tipo XAML concreto relevante para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-115">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <summary><span data-ttu-id="2695c-116">Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basándose en la clase <see cref="T:System.Xaml.XamlType" /> proporcionada.</span><span class="sxs-lookup"><span data-stu-id="2695c-116">Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-117">Este constructor se llama internamente en función de la <xref:System.Xaml.XamlType> donde el <xref:System.Xaml.Schema.XamlTypeInvoker> se usa para la construcción.</span><span class="sxs-lookup"><span data-stu-id="2695c-117">This constructor is called internally based on the <xref:System.Xaml.XamlType> where the <xref:System.Xaml.Schema.XamlTypeInvoker> is used for construction.</span></span> <span data-ttu-id="2695c-118">El `type` proporcionado aquí no es relevante para todos los otro método se llama para <xref:System.Xaml.Schema.XamlTypeInvoker>.</span><span class="sxs-lookup"><span data-stu-id="2695c-118">The `type` provided here is relevant to all other method calls for <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2695c-119"><paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-119"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2695c-120">Una instancia del tipo especificado por <see cref="T:System.Xaml.XamlType" /> que se utiliza para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-120">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <param name="item"><span data-ttu-id="2695c-121">Elemento que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="2695c-121">The item to add.</span></span></param>
        <summary><span data-ttu-id="2695c-122">Agrega el elemento proporcionado a una instancia del tipo pertinente a esta <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-122">Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-123">Solo debe llamar a este método en un <xref:System.Xaml.XamlType> que representa una colección.</span><span class="sxs-lookup"><span data-stu-id="2695c-123">You should only call this method on a <xref:System.Xaml.XamlType> that represents a collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2695c-124">Se invoca este método en una clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se basa en una clase <see cref="T:System.Xaml.XamlType" /> desconocida.</span><span class="sxs-lookup"><span data-stu-id="2695c-124">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="2695c-125">**-o bien-**</span><span class="sxs-lookup"><span data-stu-id="2695c-125">**-or-**</span></span>  
  
<span data-ttu-id="2695c-126">Se invoca este método en una clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> donde el tipo pertinente no es una colección.</span><span class="sxs-lookup"><span data-stu-id="2695c-126">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2695c-127"><paramref name="instance" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-127"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><span data-ttu-id="2695c-128"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> devuelve <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-128"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-129"><para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  Internamente, la implementación base llama <see cref="P:System.Xaml.XamlType.IsCollection" />y se produce si el resultado es <see langword="false" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IList" /> se intenta realizar. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IList.Add(System.Object)" /> se realiza y el método devuelve. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="Add" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  En la implementación base no se produce ninguna excepción en este nivel si <paramref name="item" /> es <see langword="null" />. Es posible que subyacente <see langword="Add" /> método producirá una excepción cuando se invoca. Otras excepciones de tiempo de ejecución son posibles si <see cref="P:System.Xaml.XamlType.ItemType" /> no devuelve un resultado válido.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-129"><para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsCollection" />, and throws if the result is <see langword="false" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IList" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IList.Add(System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  In the base implementation no exception is raised at this level if <paramref name="item" /> is <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2695c-130">Una instancia del tipo especificado por <see cref="T:System.Xaml.XamlType" /> que se utiliza para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-130">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <param name="key"><span data-ttu-id="2695c-131">Clave de diccionario para el elemento que se agrega.</span><span class="sxs-lookup"><span data-stu-id="2695c-131">Dictionary key for the item to add.</span></span></param>
        <param name="item"><span data-ttu-id="2695c-132">Valor del elemento que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="2695c-132">The item value to add.</span></span></param>
        <summary><span data-ttu-id="2695c-133">Agrega el valor de la clave y del elemento proporcionados a una instancia del tipo que es relevante para esta <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-133">Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-134">Solo debe llamar a este método en un <xref:System.Xaml.XamlType> que representa un diccionario.</span><span class="sxs-lookup"><span data-stu-id="2695c-134">You should only call this method on a <xref:System.Xaml.XamlType> that represents a dictionary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2695c-135">Se invoca este método en una clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se basa en una clase <see cref="T:System.Xaml.XamlType" /> desconocida.</span><span class="sxs-lookup"><span data-stu-id="2695c-135">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="2695c-136">**-o bien-**</span><span class="sxs-lookup"><span data-stu-id="2695c-136">**-or-**</span></span>  
  
<span data-ttu-id="2695c-137">Se invoca este método en una clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> donde el tipo pertinente no es un diccionario.</span><span class="sxs-lookup"><span data-stu-id="2695c-137">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2695c-138"><paramref name="instance" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-138"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlSchemaException"><span data-ttu-id="2695c-139"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> devuelve <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-139"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-140"><para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  Internamente, la implementación base llama <see cref="P:System.Xaml.XamlType.IsDictionary" />y se produce si el resultado es <see langword="false" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IDictionary" /> se intenta realizar. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> se realiza y el método devuelve. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="Add" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  En la implementación base no se produce ninguna excepción en este nivel si <paramref name="item" /> o <paramref name="key" /> son <see langword="null" />. Es posible que subyacente <see langword="Add" /> método producirá una excepción cuando se invoca. Otras excepciones de tiempo de ejecución son posibles si <see cref="P:System.Xaml.XamlType.ItemType" /> no devuelve un resultado válido.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-140"><para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsDictionary" />, and throws if the result is <see langword="false" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IDictionary" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  In the base implementation no exception is raised at this level if <paramref name="item" /> or <paramref name="key" /> are <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments"><span data-ttu-id="2695c-141">Una matriz de objetos que proporciona <see langword="x:ConstructorArgs" /> para la instancia.</span><span class="sxs-lookup"><span data-stu-id="2695c-141">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance.</span></span> <span data-ttu-id="2695c-142">Puede ser <see langword="null" /> para los tipos que no requieren o utilizan <see langword="x:ConstructorArgs" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-142">May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</span></span></param>
        <summary><span data-ttu-id="2695c-143">Crea una instancia del objeto basada en el <see cref="T:System.Xaml.XamlType" /> iniciado por la construcción para este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-143">Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <returns><span data-ttu-id="2695c-144">Instancia creada basada en el <see cref="T:System.Xaml.XamlType" /> iniciado por la construcción para <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-144">The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="2695c-145">No pudo resolver un constructor.</span><span class="sxs-lookup"><span data-stu-id="2695c-145">Could not resolve a constructor.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-146"><para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-146"><para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType"><span data-ttu-id="2695c-147"><see cref="T:System.Xaml.XamlType" /> para el tipo de elemento que usa el método <see langword="Add" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-147"><see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</span></span></param>
        <summary><span data-ttu-id="2695c-148">Devuelve el método <see langword="Add" /> pertinente para un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que es pertinente para una colección o diccionario.</span><span class="sxs-lookup"><span data-stu-id="2695c-148">Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</span></span></summary>
        <returns><span data-ttu-id="2695c-149">Información <see cref="T:System.Reflection.MethodInfo" /> de CLR para el método <see langword="Add" />, o null.</span><span class="sxs-lookup"><span data-stu-id="2695c-149">CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-150">Este método debe devolver `null` para los casos donde el <xref:System.Xaml.XamlType> para este <xref:System.Xaml.Schema.XamlTypeInvoker> no es una colección grabable o diccionario.</span><span class="sxs-lookup"><span data-stu-id="2695c-150">This method should return `null` for cases where the <xref:System.Xaml.XamlType> for this <xref:System.Xaml.Schema.XamlTypeInvoker> is not a writeable collection or dictionary.</span></span> <span data-ttu-id="2695c-151">En concreto, debe devolver `null` para los casos donde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> devuelve `None`.</span><span class="sxs-lookup"><span data-stu-id="2695c-151">Specifically, should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2695c-152">Si no se tiene acceso a un sistema de tipos XAML plena confianza, este método tiene el potencial de false informe <xref:System.Reflection.MethodInfo> información a los llamadores.</span><span class="sxs-lookup"><span data-stu-id="2695c-152">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2695c-153"><paramref name="contentType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-153"><paramref name="contentType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-154"><para>La implementación base devuelve <see langword="null" /> para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />. También devuelve <see langword="null" /> si <see cref="P:System.Xaml.XamlType.ItemType" /> es <see langword="null" />.  Colecciones de XAML potencialmente tienen más de una <see langword="Add" /> método, ya que potencialmente puede admitir más de un tipo de contenido en una colección de XAML (consulte <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, o bien consulte <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> para obtener información acerca de una implementación de este concepto en WPF). La implementación predeterminada usa la lógica interna para devolver la mejor coincidencia basándose en las firmas y el tipo de proporcionado <paramref name="contentType" />.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-154"><para>The base implementation returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> if <see cref="P:System.Xaml.XamlType.ItemType" /> is <see langword="null" />.  XAML collections potentially have more than one <see langword="Add" /> method, because a XAML collection can potentially support more than one content type (see <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, or see <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> for information about one implementation of this concept in WPF). The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <paramref name="contentType" />.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2695c-155">Devuelve un objeto que representa un método que puede enumerar los elementos.</span><span class="sxs-lookup"><span data-stu-id="2695c-155">Returns an object representing a method that can enumerate over items.</span></span></summary>
        <returns><span data-ttu-id="2695c-156"><see cref="T:System.Reflection.MethodInfo" /> para un método enumerador o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-156"><see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-157">Debe devolver `null` para los casos donde <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> devuelve `None`.</span><span class="sxs-lookup"><span data-stu-id="2695c-157">Should return `null` for cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> returns `None`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2695c-158">Si no se tiene acceso a un sistema de tipos XAML plena confianza, este método tiene el potencial de false informe <xref:System.Reflection.MethodInfo> información a los llamadores.</span><span class="sxs-lookup"><span data-stu-id="2695c-158">If you are not accessing a fully trusted XAML type system, this method has the potential to report false <xref:System.Reflection.MethodInfo> information to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-159"><para>La implementación base llama a un método auxiliar interno. Esa aplicación auxiliar devuelve <see langword="null" /> para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />. También devuelve <see langword="null" /> para los casos donde <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> devuelve <see langword="None" />.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-159"><para>The base implementation calls an internal helper method. That helper returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> for cases where <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> returns <see langword="None" />.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="2695c-160">Una instancia del tipo especificado por <see cref="T:System.Xaml.XamlType" /> que se utiliza para construir este <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-160">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></param>
        <summary><span data-ttu-id="2695c-161">Devuelve un objeto <see cref="T:System.Collections.IEnumerator" /> que representa el conjunto de elementos.</span><span class="sxs-lookup"><span data-stu-id="2695c-161">Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</span></span></summary>
        <returns><span data-ttu-id="2695c-162">Un objeto <see cref="T:System.Collections.IEnumerator" /> o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-162">An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2695c-163">Se invoca este método en una clase <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> que se basa en una clase <see cref="T:System.Xaml.XamlType" /> desconocida.</span><span class="sxs-lookup"><span data-stu-id="2695c-163">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.</span></span>  
  
 <span data-ttu-id="2695c-164">**-o bien-**</span><span class="sxs-lookup"><span data-stu-id="2695c-164">**-or-**</span></span>  
  
<span data-ttu-id="2695c-165">Se invoca a este método en un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> donde el tipo pertinente no es una colección ni un diccionario.</span><span class="sxs-lookup"><span data-stu-id="2695c-165">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2695c-166"><paramref name="instance" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2695c-166"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><span data-ttu-id="2695c-167"><para>La implementación base incluye una llamada a la aplicación auxiliar interna <c>ThrowIfUnknown</c>. Esta aplicación auxiliar siempre produce una excepción para los casos donde un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> se basa en un estado desconocido <see cref="T:System.Xaml.XamlType" />, que incluye casos donde el <see cref="P:System.Xaml.XamlType.UnderlyingType" /> de la <see cref="T:System.Xaml.XamlType" /> es <see langword="null" />.  La implementación base no necesariamente utiliza su propio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementación. Primero, una conversión de <paramref name="instance" /> a <see cref="T:System.Collections.IEnumerable" /> se intenta realizar. Si esto se realiza correctamente, una llamada a <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> se realiza y devuelve el método que devuelva el valor. En caso contrario, la implementación base usa CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> para invocar subyacente <see langword="GetEnumerator" /> método, que se obtienen de una llamada a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> para este <paramref name="" /> <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para></span><span class="sxs-lookup"><span data-stu-id="2695c-167"><para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IEnumerable" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> is made and the method returns that return value. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="GetEnumerator" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para></span></span></block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2695c-168">Obtiene el controlador que se va a usar cuando un <see cref="T:System.Xaml.XamlObjectWriter" /> llama a una <see cref="T:System.Windows.Markup.MarkupExtension" /> implementada.</span><span class="sxs-lookup"><span data-stu-id="2695c-168">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</span></span></summary>
        <value><span data-ttu-id="2695c-169">Implementación de controlador que controla este caso.</span><span class="sxs-lookup"><span data-stu-id="2695c-169">A handler implementation that handles this case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-170">El controlador de eventos se basa en <xref:System.EventHandler%601> restringida a <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> datos del evento.</span><span class="sxs-lookup"><span data-stu-id="2695c-170">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="2695c-171">Devuelve el valor invoca la <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportamiento de la <xref:System.Xaml.XamlType> que el <xref:System.Xaml.Schema.XamlTypeInvoker> se basa en.</span><span class="sxs-lookup"><span data-stu-id="2695c-171">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="2695c-172">El valor devuelto es `null` para un <xref:System.Xaml.Schema.XamlTypeInvoker> que se basa en un estado desconocido <xref:System.Xaml.XamlType>.</span><span class="sxs-lookup"><span data-stu-id="2695c-172">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2695c-173">Consigue que el controlador se utilice cuando un <see cref="T:System.Xaml.XamlObjectWriter" /> llama a un <see cref="T:System.ComponentModel.TypeConverter" /> implementado por CLR.</span><span class="sxs-lookup"><span data-stu-id="2695c-173">Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</span></span></summary>
        <value><span data-ttu-id="2695c-174">Implementación de controlador que controla este caso.</span><span class="sxs-lookup"><span data-stu-id="2695c-174">A handler implementation that handles this case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-175">El controlador de eventos se basa en <xref:System.EventHandler%601> restringida a <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> datos del evento.</span><span class="sxs-lookup"><span data-stu-id="2695c-175">The event handler is based on <xref:System.EventHandler%601> constrained with <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> event data.</span></span>  
  
 <span data-ttu-id="2695c-176">Devuelve el valor invoca la <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportamiento de la <xref:System.Xaml.XamlType> que el <xref:System.Xaml.Schema.XamlTypeInvoker> se basa en.</span><span class="sxs-lookup"><span data-stu-id="2695c-176">The value returned invokes the <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> behavior of the <xref:System.Xaml.XamlType> that the <xref:System.Xaml.Schema.XamlTypeInvoker> is based on.</span></span>  
  
 <span data-ttu-id="2695c-177">El valor devuelto es `null` para un <xref:System.Xaml.Schema.XamlTypeInvoker> que se basa en un estado desconocido <xref:System.Xaml.XamlType>.</span><span class="sxs-lookup"><span data-stu-id="2695c-177">The return value is `null` for a <xref:System.Xaml.Schema.XamlTypeInvoker> that is based on an unknown <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2695c-178">Proporciona un valor estático que representa un objeto <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> desconocido y no implementado totalmente.</span><span class="sxs-lookup"><span data-stu-id="2695c-178">Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></summary>
        <value><span data-ttu-id="2695c-179">Un valor estático que representa un objeto <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> desconocido y no implementado totalmente.</span><span class="sxs-lookup"><span data-stu-id="2695c-179">A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2695c-180">Proporciona este valor para un <xref:System.Xaml.Schema.XamlTypeInvoker> API definido por el parámetro de System.Xaml normalmente hará que el código llamado producir excepciones.</span><span class="sxs-lookup"><span data-stu-id="2695c-180">Supplying this value for a <xref:System.Xaml.Schema.XamlTypeInvoker> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>