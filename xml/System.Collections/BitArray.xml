<Type Name="BitArray" FullName="System.Collections.BitArray">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1cf10d304085aace8f8456134a3c6c2a84e70de" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52353471" /></Metadata><TypeSignature Language="C#" Value="public sealed class BitArray : ICloneable, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit BitArray extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.BitArray" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BitArray&#xA;Implements ICloneable, ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class BitArray sealed : ICloneable, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type BitArray = class&#xA;    interface ICollection&#xA;    interface ICloneable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="31e4b-101">Administra una matriz compacta de valores de bit que se representan como valores booleanos, donde <see langword="true" /> indica que el bit está activado (1) y <see langword="false" /> indica que el bit está desactivado (0).</span><span class="sxs-lookup"><span data-stu-id="31e4b-101">Manages a compact array of bit values, which are represented as Booleans, where <see langword="true" /> indicates that the bit is on (1) and <see langword="false" /> indicates the bit is off (0).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-102">El <xref:System.Collections.BitArray> es una clase de colección en el que la capacidad es siempre el mismo que el recuento.</span><span class="sxs-lookup"><span data-stu-id="31e4b-102">The <xref:System.Collections.BitArray> class is a collection class in which the capacity is always the same as the count.</span></span> <span data-ttu-id="31e4b-103">Se agregan elementos a un <xref:System.Collections.BitArray> aumentando la <xref:System.Collections.BitArray.Length%2A> propiedad; se eliminan elementos reduciendo el <xref:System.Collections.BitArray.Length%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="31e4b-103">Elements are added to a <xref:System.Collections.BitArray> by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property.</span></span> <span data-ttu-id="31e4b-104">El tamaño de un <xref:System.Collections.BitArray> está controlada por el cliente; indexación más allá del final de la <xref:System.Collections.BitArray> produce una <xref:System.ArgumentException>. El <xref:System.Collections.BitArray> clase proporciona métodos que no se encuentran en otras colecciones, los que se permiten varios elementos a la vez mediante un filtro, como modificar incluidos <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>y <xref:System.Collections.BitArray.SetAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-104">The size of a <xref:System.Collections.BitArray> is controlled by the client; indexing past the end of the <xref:System.Collections.BitArray> throws an <xref:System.ArgumentException>.The <xref:System.Collections.BitArray> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.</span></span>  
  
 <span data-ttu-id="31e4b-105">El <xref:System.Collections.Specialized.BitVector32> clase es una estructura que proporciona la misma funcionalidad que <xref:System.Collections.BitArray>, pero con un rendimiento más rápido.</span><span class="sxs-lookup"><span data-stu-id="31e4b-105">The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as <xref:System.Collections.BitArray>, but with faster performance.</span></span> <span data-ttu-id="31e4b-106"><xref:System.Collections.Specialized.BitVector32> es más rápida porque es un tipo de valor y, por tanto, se asigna en la pila, mientras que <xref:System.Collections.BitArray> es un tipo de referencia y, por lo tanto, se asignan en el montón.</span><span class="sxs-lookup"><span data-stu-id="31e4b-106"><xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas <xref:System.Collections.BitArray> is a reference type and, therefore, allocated on the heap.</span></span>  
  
 <span data-ttu-id="31e4b-107"><xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType> puede almacenar exactamente 32 bits, mientras que <xref:System.Collections.BitArray> puede almacenar un número variable de bits.</span><span class="sxs-lookup"><span data-stu-id="31e4b-107"><xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType> can store exactly 32 bits, whereas <xref:System.Collections.BitArray> can store a variable number of bits.</span></span> <span data-ttu-id="31e4b-108"><xref:System.Collections.Specialized.BitVector32> almacena marcas de bits y enteros pequeños, lo resulta ideal para los datos que no se exponen al usuario.</span><span class="sxs-lookup"><span data-stu-id="31e4b-108"><xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user.</span></span> <span data-ttu-id="31e4b-109">Sin embargo, si el número de marcas de bits necesarios se desconoce, es variable o es mayor que 32, utilice <xref:System.Collections.BitArray> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="31e4b-109">However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref:System.Collections.BitArray> instead.</span></span>  
  
 <span data-ttu-id="31e4b-110"><xref:System.Collections.BitArray> en el <xref:System.Collections> espacio de nombres; <xref:System.Collections.Specialized.BitVector32> está en el <xref:System.Collections.Specialized> espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="31e4b-110"><xref:System.Collections.BitArray> is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace.</span></span>  
  
 <span data-ttu-id="31e4b-111">Elementos de esta colección se pueden acceder mediante un índice entero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-111">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="31e4b-112">Los índices de esta colección son de base cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-112">Indexes in this collection are zero-based.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-113">En el ejemplo de código siguiente se muestra cómo crear e inicializar un <xref:System.Collections.BitArray> y cómo imprimir sus valores.</span><span class="sxs-lookup"><span data-stu-id="31e4b-113">The following code example shows how to create and initialize a <xref:System.Collections.BitArray> and how to print out its values.</span></span>  
  
 [!code-cpp[Classic BitArray Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="31e4b-114">Estáticos públicos (<see langword="Shared" /> en Visual Basic) los miembros de este tipo son seguros para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-114">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="31e4b-115">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-115">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="31e4b-116">Esta implementación no proporciona un sincronizada contenedor (es seguro para subprocesos) para un <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-116">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.BitArray" />.</span></span>  
  
<span data-ttu-id="31e4b-117">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-117">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="31e4b-118">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="31e4b-118">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="31e4b-119">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-119">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.Specialized.BitVector32" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31e4b-120">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> cuya capacidad y valores iniciales pueden ser especificados.</span><span class="sxs-lookup"><span data-stu-id="31e4b-120">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class whose capacity and initial values can be specified.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (bool[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Boolean[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (values As Boolean())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(cli::array &lt;bool&gt; ^ values);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : bool[] -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray values" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="values" Type="System.Boolean[]" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="31e4b-121">Matriz de valores booleanos que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="31e4b-121">An array of Booleans to copy.</span></span></param>
        <summary><span data-ttu-id="31e4b-122">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de valores booleanos especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-122">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of Booleans.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-123">Este constructor es O (`n`) operación, donde `n` es el número de elementos de `values`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-123">This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-124">El valor de <paramref name="values" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-124"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bytes As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : byte[] -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray bytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="31e4b-125">Matriz de bytes que contiene los valores que se van a copiar, en la que cada byte representa ocho bits consecutivos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-125">An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</span></span></param>
        <summary><span data-ttu-id="31e4b-126">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de bytes especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-126">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-127">El primer byte de la matriz representa bits 0 a 7, el segundo byte representa bits 8 al 15 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="31e4b-127">The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on.</span></span> <span data-ttu-id="31e4b-128">El Bit menos significativo de cada byte representa el valor de índice más bajo: " `bytes` [0] & 1" representa el bit 0, " `bytes` [0] & 2" representa el bit 1, " `bytes` [0] & 4" representa bit 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="31e4b-128">The Least Significant Bit of each byte represents the lowest index value: " `bytes` [0] & 1" represents bit 0, " `bytes` [0] & 2" represents bit 1, " `bytes` [0] & 4" represents bit 2, and so on.</span></span>  
  
 <span data-ttu-id="31e4b-129">Este constructor es O (`n`) operación, donde `n` es el número de elementos de `bytes`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-129">This constructor is an O(`n`) operation, where `n` is the number of elements in `bytes`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-130">El valor de <paramref name="bytes" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-130"><paramref name="bytes" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-131">La longitud de <paramref name="bytes" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-131">The length of <paramref name="bytes" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (System.Collections.BitArray bits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.BitArray bits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bits As BitArray)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(System::Collections::BitArray ^ bits);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : System.Collections.BitArray -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray bits" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bits" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="bits"><span data-ttu-id="31e4b-132">Colección <see cref="T:System.Collections.BitArray" /> que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="31e4b-132">The <see cref="T:System.Collections.BitArray" /> to copy.</span></span></param>
        <summary><span data-ttu-id="31e4b-133">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la colección <see cref="T:System.Collections.BitArray" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-133">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-134">Este constructor es O (`n`) operación, donde `n` es el número de elementos de `bits`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-134">This constructor is an O(`n`) operation, where `n` is the number of elements in `bits`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-135">El valor de <paramref name="bits" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-135"><paramref name="bits" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(int length);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : int -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray length" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="31e4b-136">Número de valores de bit de la nueva colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-136">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</span></span></param>
        <summary><span data-ttu-id="31e4b-137">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que puede contener el número especificado de valores de bit, establecidos inicialmente en <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-137">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-138">Este constructor es O (`n`) operación, donde `n` es `length`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-138">This constructor is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-139"><paramref name="length" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-139"><paramref name="length" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (int[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (values As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(cli::array &lt;int&gt; ^ values);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : int[] -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray values" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="values" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="31e4b-140">Matriz de enteros que contiene los valores que se van a copiar, en la que cada entero representa 32 bits consecutivos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-140">An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</span></span></param>
        <summary><span data-ttu-id="31e4b-141">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que contiene los valores de bit copiados de la matriz de enteros de 32 bits especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-141">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that contains bit values copied from the specified array of 32-bit integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-142">El número de la primera `values` elemento de la matriz representa bits 0 a 31, el segundo número de la matriz representa 32 y 63 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="31e4b-142">The number in the first `values` array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on.</span></span> <span data-ttu-id="31e4b-143">El Bit menos significativo de cada entero representa el valor de índice más bajo: " `values` [0] & 1" representa el bit 0, " `values` [0] & 2" representa el bit 1, " `values` [0] & 4" representa bit 2 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="31e4b-143">The Least Significant Bit of each integer represents the lowest index value: " `values` [0] & 1" represents bit 0, " `values` [0] & 2" represents bit 1, " `values` [0] & 4" represents bit 2, and so on.</span></span>  
  
 <span data-ttu-id="31e4b-144">Este constructor es O (`n`) operación, donde `n` es el número de elementos de `values`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-144">This constructor is an O(`n`) operation, where `n` is the number of elements in `values`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-145">El valor de <paramref name="values" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-145"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-146">La longitud de <paramref name="values" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-146">The length of <paramref name="values" /> is greater than <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitArray (int length, bool defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 length, bool defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (length As Integer, defaultValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitArray(int length, bool defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Collections.BitArray : int * bool -&gt; System.Collections.BitArray" Usage="new System.Collections.BitArray (length, defaultValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="defaultValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="31e4b-147">Número de valores de bit de la nueva colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-147">The number of bit values in the new <see cref="T:System.Collections.BitArray" />.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="31e4b-148">Valor booleano que se asigna a cada bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-148">The Boolean value to assign to each bit.</span></span></param>
        <summary><span data-ttu-id="31e4b-149">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.BitArray" /> que puede contener el número especificado de valores de bit, establecidos inicialmente en el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="31e4b-149">Initializes a new instance of the <see cref="T:System.Collections.BitArray" /> class that can hold the specified number of bit values, which are initially set to the specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-150">Este constructor es O (`n`) operación, donde `n` es `length`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-150">This constructor is an O(`n`) operation, where `n` is `length`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-151"><paramref name="length" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-151"><paramref name="length" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray And (System.Collections.BitArray value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray And(class System.Collections.BitArray value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.And(System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (value As BitArray) As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ And(System::Collections::BitArray ^ value);" />
      <MemberSignature Language="F#" Value="member this.And : System.Collections.BitArray -&gt; System.Collections.BitArray" Usage="bitArray.And value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31e4b-152">La matriz con la que se realiza la operación AND bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-152">The array with which to perform the bitwise AND operation.</span></span></param>
        <summary><span data-ttu-id="31e4b-153">Realiza la operación AND bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual y los elementos correspondientes de la matriz especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-153">Performs the bitwise AND operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object and the corresponding elements in the specified array.</span></span> <span data-ttu-id="31e4b-154">El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación AND bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-154">The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise AND operation.</span></span></summary>
        <returns><span data-ttu-id="31e4b-155">Matriz que contiene el resultado de la operación AND bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</span><span class="sxs-lookup"><span data-stu-id="31e4b-155">An array containing the result of the bitwise AND operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-156">Devuelve la operación AND bit a bit `true` si ambos operandos son `true`y devuelve `false` si uno o ambos operandos son `false`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-156">The bitwise AND operation returns `true` if both operands are `true`, and returns `false` if one or both operands are `false`.</span></span>  
  
 <span data-ttu-id="31e4b-157">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-157">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-158">En el ejemplo de código siguiente se muestra cómo realizar la operación AND bit a bit entre dos <xref:System.Collections.BitArray> objetos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-158">The following code example shows how to perform the bitwise AND operation between two <xref:System.Collections.BitArray> objects.</span></span>  
  
 [!code-cpp[Classic BitArray.And Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.And Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.And Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.And Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.And Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.And Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-159">El valor de <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-159"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-160"><paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-160"><paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="bitArray.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31e4b-161">Crea una copia superficial de la colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-161">Creates a shallow copy of the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <returns><span data-ttu-id="31e4b-162">Copia superficial de la colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-162">A shallow copy of the <see cref="T:System.Collections.BitArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-163">Una copia superficial de una colección copia solo los elementos de la colección, si son tipos de referencia o tipos de valor, pero no copia los objetos que hacen referencia las referencias.</span><span class="sxs-lookup"><span data-stu-id="31e4b-163">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="31e4b-164">Las referencias de la nueva colección apuntan a los mismos objetos que seleccione las referencias en la colección original.</span><span class="sxs-lookup"><span data-stu-id="31e4b-164">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="31e4b-165">En cambio, una copia en profundidad de una colección copia los elementos y todo lo que hacen referencia directa o indirectamente los elementos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-165">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="31e4b-166">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-166">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="bitArray.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="31e4b-167"><see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-167">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.BitArray" />.</span></span> <span data-ttu-id="31e4b-168">La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-168">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="31e4b-169">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="31e4b-169">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="31e4b-170">Copia la totalidad de <see cref="T:System.Collections.BitArray" /> en una matriz <see cref="T:System.Array" /> unidimensional compatible, comenzando en el índice especificado de la matriz de destino.</span><span class="sxs-lookup"><span data-stu-id="31e4b-170">Copies the entire <see cref="T:System.Collections.BitArray" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-171">La matriz especificada debe ser de un tipo compatible.</span><span class="sxs-lookup"><span data-stu-id="31e4b-171">The specified array must be of a compatible type.</span></span> <span data-ttu-id="31e4b-172">Solo `bool`, `int`, y `byte` admiten los tipos de matrices.</span><span class="sxs-lookup"><span data-stu-id="31e4b-172">Only `bool`, `int`, and `byte` types of arrays are supported.</span></span>  
  
 <span data-ttu-id="31e4b-173">Este método usa <xref:System.Array.Copy%2A?displayProperty=nameWithType> para copiar los elementos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-173">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="31e4b-174">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-174">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-175">El ejemplo de código siguiente muestra cómo copiar un <xref:System.Collections.BitArray> en unidimensional <xref:System.Array>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-175">The following code example shows how to copy a <xref:System.Collections.BitArray> into a one-dimensional <xref:System.Array>.</span></span>  
  
 [!code-cpp[Classic BitArray.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-176">El valor de <paramref name="array" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-176"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-177"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-177"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-178"><paramref name="array" /> es multidimensional.</span><span class="sxs-lookup"><span data-stu-id="31e4b-178"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="31e4b-179">O bien</span><span class="sxs-lookup"><span data-stu-id="31e4b-179">-or-</span></span> 
<span data-ttu-id="31e4b-180">El número de elementos de la <see cref="T:System.Collections.BitArray" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="31e4b-180">The number of elements in the source <see cref="T:System.Collections.BitArray" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="31e4b-181">El tipo de la <see cref="T:System.Collections.BitArray" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="31e4b-181">The type of the source <see cref="T:System.Collections.BitArray" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.BitArray.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31e4b-182">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-182">Gets the number of elements contained in the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <value><span data-ttu-id="31e4b-183">Número de elementos contenidos en <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-183">The number of elements contained in the <see cref="T:System.Collections.BitArray" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-184"><xref:System.Collections.BitArray.Length%2A> y <xref:System.Collections.BitArray.Count%2A> devuelven el mismo valor.</span><span class="sxs-lookup"><span data-stu-id="31e4b-184"><xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value.</span></span> <span data-ttu-id="31e4b-185"><xref:System.Collections.BitArray.Length%2A> se puede establecer en un valor específico, pero <xref:System.Collections.BitArray.Count%2A> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="31e4b-185"><xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.</span></span>  
  
 <span data-ttu-id="31e4b-186">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-186">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public bool Get (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Get(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Get(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Get(int index);" />
      <MemberSignature Language="F#" Value="member this.Get : int -&gt; bool" Usage="bitArray.Get index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="31e4b-187">Índice de base cero del valor que se va a obtener.</span><span class="sxs-lookup"><span data-stu-id="31e4b-187">The zero-based index of the value to get.</span></span></param>
        <summary><span data-ttu-id="31e4b-188">Obtiene el valor del bit en una posición específica de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-188">Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <returns><span data-ttu-id="31e4b-189">Valor del bit en la posición <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-189">The value of the bit at position <paramref name="index" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-190">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-190">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-191">En el ejemplo de código siguiente se muestra cómo establecer y obtener elementos específicos en un <xref:System.Collections.BitArray>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-191">The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.</span></span>  
  
 [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-192"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-192"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="31e4b-193">O bien</span><span class="sxs-lookup"><span data-stu-id="31e4b-193">-or-</span></span> 
 <span data-ttu-id="31e4b-194"><paramref name="index" /> es igual o mayor que el número de elementos de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-194"><paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="bitArray.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31e4b-195">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-195">Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <returns><span data-ttu-id="31e4b-196">Interfaz <see cref="T:System.Collections.IEnumerator" /> para toda la colección <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-196">An <see cref="T:System.Collections.IEnumerator" /> for the entire <see cref="T:System.Collections.BitArray" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-197">La instrucción `foreach` del lenguaje C# (`for each` en Visual Basic) oculta la complejidad de los enumeradores.</span><span class="sxs-lookup"><span data-stu-id="31e4b-197">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="31e4b-198">Por lo tanto, se recomienda el uso de `foreach`, en lugar de manipular directamente el enumerador.</span><span class="sxs-lookup"><span data-stu-id="31e4b-198">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="31e4b-199">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="31e4b-199">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="31e4b-200">En principio, el enumerador se coloca antes del primer elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="31e4b-200">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="31e4b-201"><xref:System.Collections.IEnumerator.Reset%2A> también devuelve el enumerador a esta posición.</span><span class="sxs-lookup"><span data-stu-id="31e4b-201"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="31e4b-202">En esta posición, el valor de propiedad <xref:System.Collections.IEnumerator.Current%2A> está sin definir.</span><span class="sxs-lookup"><span data-stu-id="31e4b-202">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="31e4b-203">Por lo tanto, debe llamar a <xref:System.Collections.IEnumerator.MoveNext%2A> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-203">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="31e4b-204"><xref:System.Collections.IEnumerator.Current%2A> devuelve el mismo objeto hasta que se llama a <xref:System.Collections.IEnumerator.MoveNext%2A> o a <xref:System.Collections.IEnumerator.Reset%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-204"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="31e4b-205"><xref:System.Collections.IEnumerator.MoveNext%2A> establece <xref:System.Collections.IEnumerator.Current%2A> en el siguiente elemento.</span><span class="sxs-lookup"><span data-stu-id="31e4b-205"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="31e4b-206">Si <xref:System.Collections.IEnumerator.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-206">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="31e4b-207">Cuando el enumerador está en esta posición, las llamadas subsiguientes a <xref:System.Collections.IEnumerator.MoveNext%2A> también devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-207">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="31e4b-208">Si la última llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`, <xref:System.Collections.IEnumerator.Current%2A> es indefinido.</span><span class="sxs-lookup"><span data-stu-id="31e4b-208">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="31e4b-209">Para volver a establecer el valor de <xref:System.Collections.IEnumerator.Current%2A> en el primer elemento de la colección, se puede llamar primero a <xref:System.Collections.IEnumerator.Reset%2A> y después a <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-209">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="31e4b-210">Un enumerador es válido mientras la colección no cambie.</span><span class="sxs-lookup"><span data-stu-id="31e4b-210">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="31e4b-211">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</span><span class="sxs-lookup"><span data-stu-id="31e4b-211">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="31e4b-212">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-212">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="31e4b-213">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="31e4b-213">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="31e4b-214">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</span><span class="sxs-lookup"><span data-stu-id="31e4b-214">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="31e4b-215">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-215">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.BitArray.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31e4b-216">Obtiene un valor que indica si <see cref="T:System.Collections.BitArray" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="31e4b-216">Gets a value indicating whether the <see cref="T:System.Collections.BitArray" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="31e4b-217">Esta propiedad es siempre <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-217">This property is always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-218"><xref:System.Collections.BitArray> implementa el <xref:System.Collections.BitArray.IsReadOnly%2A> propiedad porque es necesaria para la <xref:System.Collections.IList?displayProperty=nameWithType> interfaz.</span><span class="sxs-lookup"><span data-stu-id="31e4b-218"><xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IList?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="31e4b-219">Una colección de solo lectura no permite que se agreguen, quiten o modifiquen elementos una vez que se ha creado.</span><span class="sxs-lookup"><span data-stu-id="31e4b-219">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="31e4b-220">Una colección es de solo lectura es simplemente una colección con un contenedor que evita la modificación de la colección; por lo tanto, si se realizan cambios en la colección subyacente, la colección de solo lectura refleja los cambios.</span><span class="sxs-lookup"><span data-stu-id="31e4b-220">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="31e4b-221">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-221">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.BitArray.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31e4b-222">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.BitArray" /> está sincronizado (es seguro para subprocesos).</span><span class="sxs-lookup"><span data-stu-id="31e4b-222">Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="31e4b-223">Esta propiedad es siempre <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-223">This property is always <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-224"><xref:System.Collections.BitArray> implementa el <xref:System.Collections.BitArray.IsSynchronized%2A> propiedad porque es necesaria para la <xref:System.Collections.ICollection?displayProperty=nameWithType> interfaz.</span><span class="sxs-lookup"><span data-stu-id="31e4b-224"><xref:System.Collections.BitArray> implements the <xref:System.Collections.BitArray.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="31e4b-225">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-225">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="31e4b-226">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="31e4b-226">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="31e4b-227">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-227">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-228">El ejemplo de código siguiente muestra cómo bloquear la colección utilizando el <xref:System.Collections.BitArray.SyncRoot%2A> durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="31e4b-228">The following code example shows how to lock the collection using the <xref:System.Collections.BitArray.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic BitArray Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic BitArray Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source2.cs#2)]
 [!code-vb[Classic BitArray Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="31e4b-229">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-229">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.BitArray.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public bool this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool default[int] { bool get(int index); void set(int index, bool value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : bool with get, set" Usage="System.Collections.BitArray.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="31e4b-230">El índice de base cero del valor que se va a obtener o establecer.</span><span class="sxs-lookup"><span data-stu-id="31e4b-230">The zero-based index of the value to get or set.</span></span></param>
        <summary><span data-ttu-id="31e4b-231">Obtiene o establece el valor del bit que se encuentra en una posición específica de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-231">Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <value><span data-ttu-id="31e4b-232">Valor del bit en la posición <paramref name="index" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-232">The value of the bit at position <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-233">Esta propiedad permite obtener acceso a un elemento específico de la colección utilizando la sintaxis siguiente: `myCollection[index]`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-233">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="31e4b-234">El lenguaje C# utiliza la palabra clave para definir los indizadores en lugar de implementar el <xref:System.Collections.BitArray.Item%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="31e4b-234">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.BitArray.Item%2A> property.</span></span> <span data-ttu-id="31e4b-235">Visual Basic implementa <xref:System.Collections.BitArray.Item%2A> como propiedad predeterminada, lo que proporciona la misma funcionalidad de indización.</span><span class="sxs-lookup"><span data-stu-id="31e4b-235">Visual Basic implements <xref:System.Collections.BitArray.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="31e4b-236">Recuperar el valor de esta propiedad es una operación o (1); establecer la propiedad también es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-236">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-237"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-237"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="31e4b-238">O bien</span><span class="sxs-lookup"><span data-stu-id="31e4b-238">-or-</span></span> 
 <span data-ttu-id="31e4b-239"><paramref name="index" /> es igual o mayor que <see cref="P:System.Collections.BitArray.Count" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-239"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.BitArray.Count" />.</span></span></exception>
        <altmember cref="P:System.Collections.BitArray.Count" />
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray LeftShift (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray LeftShift(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.LeftShift(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LeftShift (count As Integer) As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ LeftShift(int count);" />
      <MemberSignature Language="F#" Value="member this.LeftShift : int -&gt; System.Collections.BitArray" Usage="bitArray.LeftShift count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.Length" />
      <MemberSignature Language="VB.NET" Value="Public Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Length : int with get, set" Usage="System.Collections.BitArray.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31e4b-240">Obtiene o establece el número de elementos de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-240">Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <value><span data-ttu-id="31e4b-241">Número de elementos incluidos en <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-241">The number of elements in the <see cref="T:System.Collections.BitArray" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-242"><xref:System.Collections.BitArray.Length%2A> y <xref:System.Collections.BitArray.Count%2A> devuelven el mismo valor.</span><span class="sxs-lookup"><span data-stu-id="31e4b-242"><xref:System.Collections.BitArray.Length%2A> and <xref:System.Collections.BitArray.Count%2A> return the same value.</span></span> <span data-ttu-id="31e4b-243"><xref:System.Collections.BitArray.Length%2A> se puede establecer en un valor específico, pero <xref:System.Collections.BitArray.Count%2A> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="31e4b-243"><xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.</span></span>  
  
 <span data-ttu-id="31e4b-244">Si <xref:System.Collections.BitArray.Length%2A> está establecido en un valor que es menor que <xref:System.Collections.BitArray.Count%2A>, <xref:System.Collections.BitArray> se trunca y los elementos después del índice `value` -1 se eliminan.</span><span class="sxs-lookup"><span data-stu-id="31e4b-244">If <xref:System.Collections.BitArray.Length%2A> is set to a value that is less than <xref:System.Collections.BitArray.Count%2A>, the <xref:System.Collections.BitArray> is truncated and the elements after the index `value` -1 are deleted.</span></span>  
  
 <span data-ttu-id="31e4b-245">Si <xref:System.Collections.BitArray.Length%2A> está establecido en un valor mayor que <xref:System.Collections.BitArray.Count%2A>, los nuevos elementos se establecen en `false`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-245">If <xref:System.Collections.BitArray.Length%2A> is set to a value that is greater than <xref:System.Collections.BitArray.Count%2A>, the new elements are set to `false`.</span></span>  
  
 <span data-ttu-id="31e4b-246">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-246">Retrieving the value of this property is an O(1) operation.</span></span> <span data-ttu-id="31e4b-247">Al establecer esta propiedad es O (`n`) operación.</span><span class="sxs-lookup"><span data-stu-id="31e4b-247">Setting this property is an O(`n`) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-248">La propiedad está establecida en un valor menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-248">The property is set to a value that is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray Not ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray Not() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Not" />
      <MemberSignature Language="VB.NET" Value="Public Function Not () As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ Not();" />
      <MemberSignature Language="F#" Value="member this.Not : unit -&gt; System.Collections.BitArray" Usage="bitArray.Not " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31e4b-249">Invierte todos los valores de bit que se encuentran en la colección <see cref="T:System.Collections.BitArray" /> actual, de manera que los elementos establecidos en <see langword="true" /> cambien a <see langword="false" /> y los elementos establecidos en <see langword="false" /> cambien a <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-249">Inverts all the bit values in the current <see cref="T:System.Collections.BitArray" />, so that elements set to <see langword="true" /> are changed to <see langword="false" />, and elements set to <see langword="false" /> are changed to <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="31e4b-250">Instancia actual con los valores de bit invertidos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-250">The current instance with inverted bit values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-251">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-251">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-252">El ejemplo de código siguiente muestra cómo se aplican no a un <xref:System.Collections.BitArray>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-252">The following code example shows how to apply NOT to a <xref:System.Collections.BitArray>.</span></span>  
  
 [!code-cpp[Classic BitArray.Not Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Not Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Not Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Not Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Not Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Not Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray Or (System.Collections.BitArray value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray Or(class System.Collections.BitArray value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Or(System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (value As BitArray) As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ Or(System::Collections::BitArray ^ value);" />
      <MemberSignature Language="F#" Value="member this.Or : System.Collections.BitArray -&gt; System.Collections.BitArray" Usage="bitArray.Or value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31e4b-253">Matriz con la que se realiza la operación OR bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-253">The array with which to perform the bitwise OR operation.</span></span></param>
        <summary><span data-ttu-id="31e4b-254">Realiza la operación OR bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual y los elementos correspondientes de la matriz especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-254">Performs the bitwise OR operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object and the corresponding elements in the specified array.</span></span> <span data-ttu-id="31e4b-255">El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación OR bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-255">The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise OR operation.</span></span></summary>
        <returns><span data-ttu-id="31e4b-256">Matriz que contiene el resultado de la operación OR bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</span><span class="sxs-lookup"><span data-stu-id="31e4b-256">An array containing the result of the bitwise OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-257">Devuelve la operación OR bit a bit `true` si uno o ambos operandos son `true`y devuelve `false` si ambos operandos son `false`.</span><span class="sxs-lookup"><span data-stu-id="31e4b-257">The bitwise OR operation returns `true` if one or both operands are `true`, and returns `false` if both operands are `false`.</span></span>  
  
 <span data-ttu-id="31e4b-258">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-258">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-259">En el ejemplo de código siguiente se muestra cómo realizar la operación de OR entre dos <xref:System.Collections.BitArray> objetos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-259">The following code example shows how to perform the OR operation between two <xref:System.Collections.BitArray> objects.</span></span>  
  
 [!code-cpp[Classic BitArray.Or Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Or Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Or Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Or Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Or Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Or Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-260">El valor de <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-260"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-261"><paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-261"><paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray RightShift (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray RightShift(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.RightShift(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RightShift (count As Integer) As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ RightShift(int count);" />
      <MemberSignature Language="F#" Value="member this.RightShift : int -&gt; System.Collections.BitArray" Usage="bitArray.RightShift count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.Set : int * bool -&gt; unit" Usage="bitArray.Set (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="31e4b-262">El índice de base cero del bit que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="31e4b-262">The zero-based index of the bit to set.</span></span></param>
        <param name="value"><span data-ttu-id="31e4b-263">Valor booleano que se asigna al bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-263">The Boolean value to assign to the bit.</span></span></param>
        <summary><span data-ttu-id="31e4b-264">Establece el bit situado en una posición específica de <see cref="T:System.Collections.BitArray" /> en el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="31e4b-264">Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray" /> to the specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-265">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-265">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-266">En el ejemplo de código siguiente se muestra cómo establecer y obtener elementos específicos en un <xref:System.Collections.BitArray>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-266">The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.</span></span>  
  
 [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="31e4b-267"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="31e4b-267"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="31e4b-268">O bien</span><span class="sxs-lookup"><span data-stu-id="31e4b-268">-or-</span></span> 
 <span data-ttu-id="31e4b-269"><paramref name="index" /> es igual o mayor que el número de elementos de <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-269"><paramref name="index" /> is greater than or equal to the number of elements in the <see cref="T:System.Collections.BitArray" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAll">
      <MemberSignature Language="C#" Value="public void SetAll (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAll(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.SetAll(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAll (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAll(bool value);" />
      <MemberSignature Language="F#" Value="member this.SetAll : bool -&gt; unit" Usage="bitArray.SetAll value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31e4b-270">Valor booleano que se asigna a todos los bits.</span><span class="sxs-lookup"><span data-stu-id="31e4b-270">The Boolean value to assign to all bits.</span></span></param>
        <summary><span data-ttu-id="31e4b-271">Establece todos los bits de <see cref="T:System.Collections.BitArray" /> en el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="31e4b-271">Sets all bits in the <see cref="T:System.Collections.BitArray" /> to the specified value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-272">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-272">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-273">En el ejemplo de código siguiente se muestra cómo establecer y obtener elementos específicos en un <xref:System.Collections.BitArray>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-273">The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.</span></span>  
  
 [!code-cpp[Classic BitArray.Get Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Get Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Get Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.BitArray.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31e4b-274">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-274">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</span></span></summary>
        <value><span data-ttu-id="31e4b-275">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.BitArray" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-275">An object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-276">Las clases derivadas pueden proporcionar su propia versión sincronizada de la <xref:System.Collections.BitArray> utilizando el <xref:System.Collections.BitArray.SyncRoot%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="31e4b-276">Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the <xref:System.Collections.BitArray.SyncRoot%2A> property.</span></span> <span data-ttu-id="31e4b-277">El código de sincronización debe realizar operaciones en el <xref:System.Collections.BitArray.SyncRoot%2A> de la <xref:System.Collections.BitArray>, no directamente en el <xref:System.Collections.BitArray>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-277">The synchronizing code must perform operations on the <xref:System.Collections.BitArray.SyncRoot%2A> of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>.</span></span> <span data-ttu-id="31e4b-278">De este modo, se garantiza el funcionamiento correcto de las colecciones derivadas de otros objetos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-278">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="31e4b-279">En concreto, mantiene la sincronización correcta con otros subprocesos que podrían modificar simultáneamente la <xref:System.Collections.BitArray> objeto.</span><span class="sxs-lookup"><span data-stu-id="31e4b-279">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.</span></span>  
  
 <span data-ttu-id="31e4b-280">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-280">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="31e4b-281">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="31e4b-281">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="31e4b-282">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-282">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-283">El ejemplo de código siguiente muestra cómo bloquear la colección utilizando el <xref:System.Collections.BitArray.SyncRoot%2A> durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="31e4b-283">The following code example shows how to lock the collection using the <xref:System.Collections.BitArray.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic BitArray Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic BitArray Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray Example/CS/source2.cs#2)]
 [!code-vb[Classic BitArray Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="31e4b-284">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="31e4b-284">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.BitArray.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public System.Collections.BitArray Xor (System.Collections.BitArray value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.BitArray Xor(class System.Collections.BitArray value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.BitArray.Xor(System.Collections.BitArray)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (value As BitArray) As BitArray" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::BitArray ^ Xor(System::Collections::BitArray ^ value);" />
      <MemberSignature Language="F#" Value="member this.Xor : System.Collections.BitArray -&gt; System.Collections.BitArray" Usage="bitArray.Xor value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.BitArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.BitArray" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31e4b-285">La matriz con la que se realiza la operación exclusiva OR bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-285">The array with which to perform the bitwise exclusive OR operation.</span></span></param>
        <summary><span data-ttu-id="31e4b-286">Realiza la operación exclusiva OR bit a bit entre los elementos del objeto <see cref="T:System.Collections.BitArray" /> actual frente a los elementos correspondientes de la matriz especificada.</span><span class="sxs-lookup"><span data-stu-id="31e4b-286">Performs the bitwise exclusive OR operation between the elements of the current <see cref="T:System.Collections.BitArray" /> object against the corresponding elements in the specified array.</span></span> <span data-ttu-id="31e4b-287">El objeto <see cref="T:System.Collections.BitArray" /> actual se modificará para almacenar el resultado de la operación OR exclusiva bit a bit.</span><span class="sxs-lookup"><span data-stu-id="31e4b-287">The current <see cref="T:System.Collections.BitArray" /> object will be modified to store the result of the bitwise exclusive OR operation.</span></span></summary>
        <returns><span data-ttu-id="31e4b-288">Matriz que contiene el resultado de la operación OR exclusiva bit a bit, que es una referencia al objeto <see cref="T:System.Collections.BitArray" /> actual.</span><span class="sxs-lookup"><span data-stu-id="31e4b-288">An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31e4b-289">Devuelve la operación OR exclusiva bit a bit `true` si exactamente uno de los operandos es `true`y devuelve `false` si ambos operandos tienen el mismo valor booleano.</span><span class="sxs-lookup"><span data-stu-id="31e4b-289">The bitwise exclusive OR operation returns `true` if exactly one operand is `true`, and returns `false` if both operands have the same Boolean value.</span></span>  
  
 <span data-ttu-id="31e4b-290">Este método es O (`n`) operación, donde `n` es <xref:System.Collections.BitArray.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="31e4b-290">This method is an O(`n`) operation, where `n` is <xref:System.Collections.BitArray.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31e4b-291">En el ejemplo de código siguiente se muestra cómo realizar la operación XOR entre dos <xref:System.Collections.BitArray> objetos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-291">The following code example shows how to perform the XOR operation between two <xref:System.Collections.BitArray> objects.</span></span>  
  
 [!code-cpp[Classic BitArray.Xor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BitArray.Xor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/CS/source.cs#1)]
 [!code-vb[Classic BitArray.Xor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic BitArray.Xor Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31e4b-292">El valor de <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="31e4b-292"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31e4b-293"><paramref name="value" /> y el <see cref="T:System.Collections.BitArray" /> actual no tienen el mismo número de elementos.</span><span class="sxs-lookup"><span data-stu-id="31e4b-293"><paramref name="value" /> and the current <see cref="T:System.Collections.BitArray" /> do not have the same number of elements.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>