<Type Name="ExpressionConverter" FullName="System.Windows.ExpressionConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c05c1dc2dbd3998d0d9e96eace83a29fc8ed74d8" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53484192" /></Metadata><TypeSignature Language="C#" Value="public class ExpressionConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpressionConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ExpressionConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type ExpressionConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7ce3b-101">Convierte instancias de <see cref="T:System.Windows.Expression" /> a otros tipos y viceversa.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-101">Converts instances of <see cref="T:System.Windows.Expression" /> to and from other types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce3b-102">El <xref:System.Windows.Expression> tipo no debe usar una ruta de convertidor de tipos para convertir los valores (debe usar las extensiones de marcado en su lugar).</span><span class="sxs-lookup"><span data-stu-id="7ce3b-102">The <xref:System.Windows.Expression> type should not use a type converter pathway to convert values (should use markup extensions instead).</span></span> <span data-ttu-id="7ce3b-103">Por este motivo, <xref:System.Windows.ExpressionConverter.CanConvertFrom%2A?displayProperty=nameWithType> y <xref:System.Windows.ExpressionConverter.CanConvertTo%2A?displayProperty=nameWithType> siempre devuelven `false`.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-103">For this reason, <xref:System.Windows.ExpressionConverter.CanConvertFrom%2A?displayProperty=nameWithType> and <xref:System.Windows.ExpressionConverter.CanConvertTo%2A?displayProperty=nameWithType> always return `false`.</span></span> <span data-ttu-id="7ce3b-104"><xref:System.Windows.ExpressionConverter.ConvertFrom%2A?displayProperty=nameWithType> y <xref:System.Windows.ExpressionConverter.ConvertTo%2A?displayProperty=nameWithType> siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-104"><xref:System.Windows.ExpressionConverter.ConvertFrom%2A?displayProperty=nameWithType> and <xref:System.Windows.ExpressionConverter.ConvertTo%2A?displayProperty=nameWithType> always throw an exception.</span></span>  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ExpressionConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7ce3b-105">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.ExpressionConverter" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-105">Initializes a new instance of the <see cref="T:System.Windows.ExpressionConverter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="expressionConverter.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="7ce3b-106"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-106">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</span></span></param>
        <param name="sourceType"><span data-ttu-id="7ce3b-107"><see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-107">A <see cref="T:System.Type" /> that represents the type you wish to convert from.</span></span></param>
        <summary><span data-ttu-id="7ce3b-108">Devuelve un valor que especifica si este convertidor puede convertir un objeto de origen en un objeto <see cref="T:System.Windows.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-108">Returns whether this converter can convert from a source object to an <see cref="T:System.Windows.Expression" /> object.</span></span></summary>
        <returns><span data-ttu-id="7ce3b-109">Siempre es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-109">Always <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="expressionConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="7ce3b-110"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-110">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</span></span></param>
        <param name="destinationType"><span data-ttu-id="7ce3b-111">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-111">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</span></span></param>
        <summary><span data-ttu-id="7ce3b-112">Devuelve un valor que indica si este convertidor puede convertir un objeto <see cref="T:System.Windows.Expression" /> en un tipo de destino concreto.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-112">Returns whether this converter can convert an <see cref="T:System.Windows.Expression" /> object to a specific destination type.</span></span></summary>
        <returns><span data-ttu-id="7ce3b-113">Siempre es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-113">Always <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="expressionConverter.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="7ce3b-114"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-114">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</span></span></param>
        <param name="culture"><span data-ttu-id="7ce3b-115"><see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-115">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</span></span></param>
        <param name="value"><span data-ttu-id="7ce3b-116">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-116">The object to convert.</span></span></param>
        <summary><span data-ttu-id="7ce3b-117">Convierte el valor proporcionado en el tipo <see cref="T:System.Windows.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-117">Converts the provided value to the <see cref="T:System.Windows.Expression" /> type.</span></span></summary>
        <returns><span data-ttu-id="7ce3b-118">Siempre inicia una excepción y devuelve <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-118">Always throws an exception and returns <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="expressionConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="7ce3b-119"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-119">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</span></span></param>
        <param name="culture"><span data-ttu-id="7ce3b-120"><see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-120">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</span></span></param>
        <param name="value"><span data-ttu-id="7ce3b-121">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-121">The object to convert.</span></span></param>
        <param name="destinationType"><span data-ttu-id="7ce3b-122">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-122">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</span></span></param>
        <summary><span data-ttu-id="7ce3b-123">Convierte el objeto <see cref="T:System.Windows.Expression" /> proporcionado en el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-123">Converts the provided <see cref="T:System.Windows.Expression" /> object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="7ce3b-124">Siempre inicia una excepción y devuelve <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7ce3b-124">Always throws an exception and returns <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>