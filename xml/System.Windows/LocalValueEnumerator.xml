<Type Name="LocalValueEnumerator" FullName="System.Windows.LocalValueEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87419407c964ec6edfc3c1c4babfb741dcb7db0b" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46677318" /></Metadata><TypeSignature Language="C#" Value="public struct LocalValueEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit LocalValueEnumerator extends System.ValueType implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LocalValueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure LocalValueEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public value class LocalValueEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type LocalValueEnumerator = struct&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e9d20-101">Proporciona compatibilidad con la enumeración para los valores locales de las propiedades de dependencia que existen en un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-101">Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-102">Un *valor local* es un valor para una propiedad de dependencia que se estableció directamente en una propiedad de dependencia, mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%2A>, o por lo general mediante el descriptor de acceso de un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] contenedor de propiedad que llama a <xref:System.Windows.DependencyObject.SetValue%2A> internamente.</span><span class="sxs-lookup"><span data-stu-id="e9d20-102">A *local value* is a value for a dependency property that was set directly on a dependency property, by calling <xref:System.Windows.DependencyObject.SetValue%2A>, or more typically by using the set accessor of a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrapper that calls <xref:System.Windows.DependencyObject.SetValue%2A> internally.</span></span> <span data-ttu-id="e9d20-103">Ejemplos de otros factores determinantes de sistema de propiedad que no son valores locales son los valores establecidos mediante los estilos, o los valores predeterminados de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="e9d20-103">Examples of other property system determinants that are not local values are values set through styles, or dependency property default values.</span></span> <span data-ttu-id="e9d20-104">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="e9d20-104">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="e9d20-105">Un <xref:System.Windows.LocalValueEnumerator> devuelto por la <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> método e implementa el <xref:System.Collections.IEnumerator> interfaz.</span><span class="sxs-lookup"><span data-stu-id="e9d20-105">A <xref:System.Windows.LocalValueEnumerator> is returned by the <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> method and implements the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="e9d20-106">Una pública <xref:System.Windows.LocalValueEnumerator> no existe el constructor; por lo tanto, debe llamar a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> para obtener una instancia de esta clase.</span><span class="sxs-lookup"><span data-stu-id="e9d20-106">A public <xref:System.Windows.LocalValueEnumerator> constructor does not exist; therefore, you must call <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> to obtain an instance of this class.</span></span>  
  
 <span data-ttu-id="e9d20-107">No modifique los valores locales (mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%2A> o <xref:System.Windows.DependencyObject.ClearValue%2A>) durante la enumeración de valores locales.</span><span class="sxs-lookup"><span data-stu-id="e9d20-107">Do not modify local values (by calling <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyObject.ClearValue%2A>) while enumerating local values.</span></span> <span data-ttu-id="e9d20-108">Si cambia o borrar los valores de propiedad en función de las propiedades que devuelven el enumerador, el cambio o las operaciones de borrado no invalidan la colección del enumerador, como es el caso de muchos <xref:System.Collections.IEnumerator> implementaciones.</span><span class="sxs-lookup"><span data-stu-id="e9d20-108">If you change or clear the property values based on properties that are returned by the enumerator, the change or clear operations do not invalidate the enumerator collection, as is the case for many <xref:System.Collections.IEnumerator> implementations.</span></span> <span data-ttu-id="e9d20-109">Además, la vista de enumerador es una instantánea.</span><span class="sxs-lookup"><span data-stu-id="e9d20-109">Also, the enumerator view is a snapshot.</span></span> <span data-ttu-id="e9d20-110">Un cambio en la colección no se garantiza que sea seguro para subprocesos y no se aplica ningún bloqueo.</span><span class="sxs-lookup"><span data-stu-id="e9d20-110">A change to the collection is not guaranteed to be thread safe, and no lock is enforced.</span></span> <span data-ttu-id="e9d20-111">Otros subprocesos seguirán teniendo acceso gratuito a los valores locales desde un contexto distinto del enumerador.</span><span class="sxs-lookup"><span data-stu-id="e9d20-111">Other threads still have free access to the local values from a context other than the enumerator.</span></span>  
  
 <span data-ttu-id="e9d20-112">Use este tipo si hay operaciones en una clase que es importante saber si el valor de una propiedad procede de un valor local.</span><span class="sxs-lookup"><span data-stu-id="e9d20-112">Use this type if you have operations in your class where it is important to know whether a property's value came from a local value.</span></span> <span data-ttu-id="e9d20-113">Por ejemplo, use este tipo en un <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementación, o establece las propiedades en la que desee consultar los metadatos localmente en todos.</span><span class="sxs-lookup"><span data-stu-id="e9d20-113">For example, use this type in an <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementation, or where you want to query the metadata on all locally set properties.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.LocalValueEnumerator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9d20-114">Obtiene el número de elementos representados en la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-114">Gets the number of items that are represented in the collection.</span></span></summary>
        <value><span data-ttu-id="e9d20-115">Número de elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-115">The number of items in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-116">Esta propiedad no es un miembro definido de <xref:System.Collections.IEnumerator> pero se proporciona por comodidad.</span><span class="sxs-lookup"><span data-stu-id="e9d20-116">This property is not a defined member of <xref:System.Collections.IEnumerator> but is provided as a convenience.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEntry Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LocalValueEntry Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As LocalValueEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LocalValueEntry Current { System::Windows::LocalValueEntry get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.LocalValueEntry" Usage="System.Windows.LocalValueEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9d20-117">Obtiene el elemento actual de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-117">Gets the current element in the collection.</span></span></summary>
        <value><span data-ttu-id="e9d20-118"><see cref="T:System.Windows.LocalValueEntry" /> actual de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-118">The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-119">Esta versión accesibles a nivel general de la propiedad se basa en una instantánea de la colección que se realiza durante la creación.</span><span class="sxs-lookup"><span data-stu-id="e9d20-119">This generally accessible version of the property relies on a snapshot of the collection that is taken at creation.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms749010(v=vs.90)"><span data-ttu-id="e9d20-120">Cómo: restaurar el valor predeterminado de una propiedad de dependencia</span><span class="sxs-lookup"><span data-stu-id="e9d20-120">How to: Restore the Default Value of a Dependency Property</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="localValueEnumerator.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="e9d20-121">Objeto <see cref="T:System.Windows.LocalValueEnumerator" /> que se va a comparar con el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> actual.</span><span class="sxs-lookup"><span data-stu-id="e9d20-121">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span></span></param>
        <summary><span data-ttu-id="e9d20-122">Determina si el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> proporcionado es equivalente a este objeto <see cref="T:System.Windows.LocalValueEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-122">Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</span></span></summary>
        <returns><span data-ttu-id="e9d20-123"><see langword="true" /> si el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> especificado es igual al objeto <see cref="T:System.Windows.LocalValueEnumerator" /> actual; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-123"><see langword="true" /> if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-124">Esta implementación admite únicamente la igualdad de referencia.</span><span class="sxs-lookup"><span data-stu-id="e9d20-124">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="localValueEnumerator.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9d20-125">Devuelve un código hash para el <see cref="T:System.Windows.LocalValueEnumerator" /> actual.</span><span class="sxs-lookup"><span data-stu-id="e9d20-125">Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span></span></summary>
        <returns><span data-ttu-id="e9d20-126">Código hash entero de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="e9d20-126">A 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="localValueEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9d20-127">Desplaza el enumerador al siguiente elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-127">Advances the enumerator to the next element of the collection.</span></span></summary>
        <returns><span data-ttu-id="e9d20-128">Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-128"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.LocalValueEnumerator * System.Windows.LocalValueEnumerator -&gt; bool" Usage="obj1 = obj2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="e9d20-129">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e9d20-129">The first object to compare.</span></span></param>
        <param name="obj2"><span data-ttu-id="e9d20-130">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e9d20-130">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e9d20-131">Compara si los dos objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados son iguales.</span><span class="sxs-lookup"><span data-stu-id="e9d20-131">Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</span></span></summary>
        <returns><span data-ttu-id="e9d20-132"><see langword="true" /> si <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> es igual que <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-132"><see langword="true" /> if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-133">Esta implementación admite únicamente la igualdad de referencia.</span><span class="sxs-lookup"><span data-stu-id="e9d20-133">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.LocalValueEnumerator * System.Windows.LocalValueEnumerator -&gt; bool" Usage="System.Windows.LocalValueEnumerator.op_Inequality (obj1, obj2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1"><span data-ttu-id="e9d20-134">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e9d20-134">The first object to compare.</span></span></param>
        <param name="obj2"><span data-ttu-id="e9d20-135">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="e9d20-135">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="e9d20-136">Compara los dos objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para determinar si no son iguales.</span><span class="sxs-lookup"><span data-stu-id="e9d20-136">Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</span></span></summary>
        <returns><span data-ttu-id="e9d20-137">Es <see langword="true" /> si las instancias no son iguales; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-137"><see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-138">Esta implementación admite únicamente la igualdad de referencia.</span><span class="sxs-lookup"><span data-stu-id="e9d20-138">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="localValueEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9d20-139">Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</span><span class="sxs-lookup"><span data-stu-id="e9d20-139">Sets the enumerator to its initial position, which is before the first element in the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9d20-140">Para obtener una descripción de este miembro, vea <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="e9d20-140">For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="e9d20-141">Elemento actual de la colección.</span><span class="sxs-lookup"><span data-stu-id="e9d20-141">The current element in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9d20-142">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="e9d20-142">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="e9d20-143">Solo se puede utilizar cuando la instancia de <xref:System.Windows.LocalValueEnumerator> se convierte en una interfaz <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="e9d20-143">It can be used only when the <xref:System.Windows.LocalValueEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.LocalValueEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>