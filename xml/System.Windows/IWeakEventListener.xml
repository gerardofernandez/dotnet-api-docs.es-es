<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37492176" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="10b78-101">Proporciona compatibilidad con la escucha de eventos para las clases que esperan recibir eventos a través del modelo WeakEvent y <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="10b78-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10b78-102">El <xref:System.Windows.WeakEventManager> (un distribuidor) reenvía un evento mediante una llamada a la <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> método en las clases que implementan esta interfaz, y que se han agregado como agentes de escucha mediante una llamada a <xref:System.Windows.WeakEventManager> métodos con antelación.</span><span class="sxs-lookup"><span data-stu-id="10b78-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="10b78-103">La principal razón para seguir el patrón WeakEvent es cuando el origen de eventos tiene una duración del objeto que es potencialmente independiente de los agentes de escucha de eventos.</span><span class="sxs-lookup"><span data-stu-id="10b78-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="10b78-104">Mediante el envío de eventos central de un <xref:System.Windows.WeakEventManager> habilita los controladores para los agentes de escucha de elementos no utilizados recopilan (o la depuración manual) incluso si la duración del objeto de origen se extiende más allá de los agentes de escucha.</span><span class="sxs-lookup"><span data-stu-id="10b78-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="10b78-105">Por el contrario, un enlace de eventos normal mediante `+=` o sintaxis de eventos específica del lenguaje equivalente hace que el origen podría seguir conectado contener una referencia segura a los controladores.</span><span class="sxs-lookup"><span data-stu-id="10b78-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="10b78-106">Esto evita que las referencias del agente de escucha que se recopila de manera oportuna.</span><span class="sxs-lookup"><span data-stu-id="10b78-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="10b78-107">Una situación común donde las relaciones entre orígenes y los agentes de escucha sugiere el uso de este patrón es el control de eventos de actualización procedentes de orígenes para los enlaces de datos.</span><span class="sxs-lookup"><span data-stu-id="10b78-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="10b78-108">Puede usar el patrón WeakEvent para escuchar los eventos que son externos a la aplicación.</span><span class="sxs-lookup"><span data-stu-id="10b78-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="10b78-109">Solo necesita definir un <xref:System.Windows.WeakEventManager> , proporcionar el comportamiento de escucha en <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>y usar el <xref:System.Windows.WeakEventManager> para asociar el controlador de referencias en lugar de `+=`.</span><span class="sxs-lookup"><span data-stu-id="10b78-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="10b78-110">Tipo de la clase <see cref="T:System.Windows.WeakEventManager" /> que llama a este método.</span><span class="sxs-lookup"><span data-stu-id="10b78-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="10b78-111">Objeto que originó el evento.</span><span class="sxs-lookup"><span data-stu-id="10b78-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="10b78-112">Datos de evento</span><span class="sxs-lookup"><span data-stu-id="10b78-112">Event data.</span></span></param>
        <summary><span data-ttu-id="10b78-113">Recibe los eventos del administrador de eventos centralizado.</span><span class="sxs-lookup"><span data-stu-id="10b78-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="10b78-114">Es <see langword="true" /> si el agente de escucha controló el evento.</span><span class="sxs-lookup"><span data-stu-id="10b78-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="10b78-115">La clase <see cref="T:System.Windows.WeakEventManager" /> que controla en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] considera como un error el registro de un agente de escucha para un evento que el agente de escucha no controla.</span><span class="sxs-lookup"><span data-stu-id="10b78-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="10b78-116">De todos modos, el método debe devolver <see langword="false" /> si recibe un evento que no reconoce o no controla.</span><span class="sxs-lookup"><span data-stu-id="10b78-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="10b78-117">En el ejemplo siguiente se implementa <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> para proporcionar compatibilidad con el modelo WeakEvent para dos eventos `ClockwiseSpin` y `CounterclockwiseSpin` cada uno tiene una dedicado <xref:System.Windows.WeakEventManager> (no mostrado).</span><span class="sxs-lookup"><span data-stu-id="10b78-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="10b78-118">Esta implementación llama al código auxiliar del controlador de clase para cada evento admitido, conversión de los datos de evento (en este caso, los dos eventos comparten un tipo de datos de evento `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="10b78-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="10b78-119">La implementación devuelve `false` si el evento recibido no es uno que se espera.</span><span class="sxs-lookup"><span data-stu-id="10b78-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><span data-ttu-id="10b78-120"><para>Este método está pensado para recibir todos los posibles eventos donde está el receptor en una lista de agente de escucha. Especialmente si se implementa para una clase que está realizando escuchas para más de un evento, debe comprobar el tipo de entrada <paramref name="managerType" /> parámetro con el fin de saber qué evento de la llamada corresponde a. Es por esta razón que cada evento que se va a parte del patrón debe tener una dedicado <see cref="T:System.Windows.WeakEventManager" />. Además, el <paramref name="e" /> parámetro es de tipo general <see cref="T:System.EventArgs" />. Por lo tanto, para obtener propiedades específicas de los datos del evento, la implementación deberá convertir al tipo de datos de evento específico.  Normalmente, después de comprobar la identidad del evento según el <see cref="T:System.Windows.WeakEventManager" /> tipo, la implementación debe llamar a un controlador de clase privada. El controlador de clase posiblemente podría ser el mismo controlador de clase que se usa para administrar el evento para los agentes de escucha que se agregan mediante el patrón de eventos convencional de agregar a través de <see langword="+=" /> al evento en el remitente. La siguiente sección ejemplo proporciona una plantilla de implementación aproximada.</para></span><span class="sxs-lookup"><span data-stu-id="10b78-120"><para>This method is intended to receive all possible events where the receiver is in a listener list. Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to. This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />. Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />. Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.  Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler. Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender. The following example section provides a rough implementation template.</para></span></span></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>