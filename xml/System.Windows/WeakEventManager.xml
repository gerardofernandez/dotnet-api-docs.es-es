<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b902a9b8f78c0d8e904a6bd4037d22a00c7fb84" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57941651" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="440cd-101">Proporciona una clase base para el administrador de eventos que se usa en el *modelo de evento débil*.</span><span class="sxs-lookup"><span data-stu-id="440cd-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="440cd-102">El administrador agrega y quita los agentes de escucha para los eventos (o las devoluciones de llamada) que también usan el modelo.</span><span class="sxs-lookup"><span data-stu-id="440cd-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-103">Normalmente, el modelo de evento débil se usa cuando el origen de eventos tiene una duración del objeto que es independiente de los agentes de escucha de eventos.</span><span class="sxs-lookup"><span data-stu-id="440cd-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="440cd-104">Mediante el evento central distribuir la capacidad de un <xref:System.Windows.WeakEventManager> que los controladores de los agentes de escucha pueden recogidos incluso si persiste el objeto de origen.</span><span class="sxs-lookup"><span data-stu-id="440cd-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="440cd-105">Por el contrario, un enlace de eventos regulares mediante la `+=` operador hace que el origen potencialmente desconectado mantener una referencia a los agentes de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="440cd-106">Esto impide que el receptor se recopila de manera oportuna.</span><span class="sxs-lookup"><span data-stu-id="440cd-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="440cd-107">Una situación común donde se deben usar las relaciones de duración entre orígenes y los agentes de escucha del modelo de evento débil es el control de eventos de actualización procedentes de los enlaces de datos.</span><span class="sxs-lookup"><span data-stu-id="440cd-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="440cd-108">El modelo de evento débil puede usarse también para las devoluciones de llamada y eventos normales.</span><span class="sxs-lookup"><span data-stu-id="440cd-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="440cd-109">Para obtener un ejemplo de un personalizado <see cref="T:System.Windows.WeakEventManager" />, consulte [modelos de evento débil](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="440cd-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="440cd-110">Inicializa los valores de la clase base cuando el constructor de una clase derivada los usa como inicializador.</span><span class="sxs-lookup"><span data-stu-id="440cd-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="440cd-111">Objeto en el que se administra el evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="440cd-112"><see cref="T:System.EventArgs" /> que contiene los datos que el evento va a entregar.</span><span class="sxs-lookup"><span data-stu-id="440cd-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="440cd-113">Entrega el evento que se administra a cada agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-114">Llame a la <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método dentro de los controladores de eventos que se agregan o quitan por la <xref:System.Windows.WeakEventManager.StartListening%2A> y <xref:System.Windows.WeakEventManager.StopListening%2A> las implementaciones de las subclases.</span><span class="sxs-lookup"><span data-stu-id="440cd-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="440cd-115">Si se llama a la <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> método en su `AddListener` implementación de la clase, la lista de agentes de escucha recibe el evento se mantiene en una colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="440cd-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="440cd-116">(`AddListener` no forma parte de un contrato de interfaz o clase.</span><span class="sxs-lookup"><span data-stu-id="440cd-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="440cd-117">`AddListener` es el nombre sugerido para el método de la clase de administrador que llama a <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> y agrega los agentes de escucha de evento débil patrón para el evento.)</span><span class="sxs-lookup"><span data-stu-id="440cd-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="440cd-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> los agentes de escucha se agrega a una lista.</span><span class="sxs-lookup"><span data-stu-id="440cd-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="440cd-119">Si la implementación del administrador mantiene más de una lista de agentes de escucha por evento, no use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> o <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="440cd-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="440cd-120">En su lugar, la implementación debe crear su propio <xref:System.Windows.WeakEventManager.ListenerList> instancias, `AddListener` debe agregar los agentes de escucha a la lista correspondiente, y los eventos se deben entregar a la lista de agente de escucha adecuado mediante una llamada a <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="440cd-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="440cd-121">Objeto en el que se administra el evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="440cd-122">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="440cd-123"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="440cd-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="440cd-124">Entrega el evento que se administra a cada agente de escucha en la lista proporcionada.</span><span class="sxs-lookup"><span data-stu-id="440cd-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-125">Este método es necesario si la implementación del administrador mantiene las listas de agentes de escucha independientes según la información que se captura en los datos del evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="440cd-126">Si usa esta técnica avanzada, debe crear y mantener listas independientes como parte de la implementación del administrador, y debe proporcionar una manera de agregar los agentes de escucha a una lista específica.</span><span class="sxs-lookup"><span data-stu-id="440cd-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="440cd-127">La implementación del controlador que escucha el evento sin formato debe actuar según la condición que se usa para diferenciar las listas y entregar el evento únicamente a la lista o listas adecuadas.</span><span class="sxs-lookup"><span data-stu-id="440cd-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="440cd-128">Tipo para el que se obtiene <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="440cd-129">Devuelve la implementación de <see cref="T:System.Windows.WeakEventManager" /> que se usa para el tipo proporcionado.</span><span class="sxs-lookup"><span data-stu-id="440cd-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="440cd-130">Implementación de <see cref="T:System.Windows.WeakEventManager" /> correspondiente.</span><span class="sxs-lookup"><span data-stu-id="440cd-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> las implementaciones de llamar a este método mediante su pasado `managerType`.</span><span class="sxs-lookup"><span data-stu-id="440cd-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="440cd-132">El valor devuelto <xref:System.Windows.WeakEventManager> , a continuación, se usa como el diferenciador que determina qué evento se recibió y qué controlador de clase privada que se inicia.</span><span class="sxs-lookup"><span data-stu-id="440cd-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-133">Índice de base cero del origen solicitado.</span><span class="sxs-lookup"><span data-stu-id="440cd-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="440cd-134">Obtiene o establece los datos que se almacenan para el origen especificado.</span><span class="sxs-lookup"><span data-stu-id="440cd-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="440cd-135">Datos que almacena el administrador para este origen.</span><span class="sxs-lookup"><span data-stu-id="440cd-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-136">Las clases derivadas pueden elegir qué datos y tipos se almacenan en este indizador.</span><span class="sxs-lookup"><span data-stu-id="440cd-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="440cd-137">Normalmente, esto se implementa como un <xref:System.Windows.WeakEventManager.ListenerList>, que es una lista de referencias débiles a los agentes de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="440cd-138">Sólo tendría que cambiar este tipo si el <xref:System.Windows.WeakEventManager.ListenerList> tipo no puede contener la información necesaria.</span><span class="sxs-lookup"><span data-stu-id="440cd-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="440cd-139">Si es así, tendrá que reemplazar el <xref:System.Windows.WeakEventManager.Purge%2A> método para que toda la limpieza del tipo subyacente se realiza correctamente.</span><span class="sxs-lookup"><span data-stu-id="440cd-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="440cd-140">Devuelve un nuevo objeto para contener agentes de escucha para un evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="440cd-141">Nuevo objeto para contener agentes de escucha para un evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-142">El objeto de origen al que el delegado de controlador se suscribe.</span><span class="sxs-lookup"><span data-stu-id="440cd-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="440cd-143">Delegado que controla el evento generado por <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="440cd-144">Agrega el delegado especificado como controlador de eventos del origen especificado.</span><span class="sxs-lookup"><span data-stu-id="440cd-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-145">Origen al que se asocian los agentes de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="440cd-146">Clase que realiza las escuchas (que debe implementar <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="440cd-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="440cd-147">Agrega el agente de escucha proporcionado al origen proporcionado para el evento que se administra.</span><span class="sxs-lookup"><span data-stu-id="440cd-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-148">Llame a este método dentro de la clase manager `AddListener` métodos en <xref:System.Windows.WeakEventManager> implementaciones.</span><span class="sxs-lookup"><span data-stu-id="440cd-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="440cd-149">`AddListener` es el nombre sugerido para el método estático que define en la clase de administrador para habilitar otras clases agregar un agente de escucha para el modelo de evento débil.</span><span class="sxs-lookup"><span data-stu-id="440cd-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="440cd-150">`AddListener` debe tomar dos parámetros: el `source` donde el agente de escucha está conectado y el `listener` instancia.</span><span class="sxs-lookup"><span data-stu-id="440cd-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="440cd-151">Para su `AddListener` implementación, llamada la <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> método en el administrador actual y pase los mismos dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="440cd-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="440cd-152">Si la lista de agentes de escucha estaba vacía anteriormente <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> llamadas la <xref:System.Windows.WeakEventManager.StartListening%2A> método internamente, que llamará específica de su <xref:System.Windows.WeakEventManager.StartListening%2A> invalidar a través de polimorfismo.</span><span class="sxs-lookup"><span data-stu-id="440cd-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="440cd-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> los agentes de escucha se agrega a una sola interna <xref:System.Windows.WeakEventManager.ListenerList> por `source`.</span><span class="sxs-lookup"><span data-stu-id="440cd-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="440cd-154">Si la implementación del administrador mantiene más de una lista de agentes de escucha para cada combinación de origen del evento, no use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="440cd-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="440cd-155">En su lugar, la implementación debe crear su propio <xref:System.Windows.WeakEventManager.ListenerList> instancias, `AddListener` debe agregar los agentes de escucha a la lista correspondiente, y los eventos se deben entregar a la lista de agente de escucha adecuado mediante una llamada a la <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> eventos en lugar de la <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método.</span><span class="sxs-lookup"><span data-stu-id="440cd-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-156">Origen del que se va a quitar el controlador.</span><span class="sxs-lookup"><span data-stu-id="440cd-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="440cd-157">Delegado que se va a quitar de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="440cd-158">Quita el controlador agregado anteriormente del origen especificado.</span><span class="sxs-lookup"><span data-stu-id="440cd-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-159">Origen del que se quitan los agentes de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="440cd-160">Clase que realiza las escuchas (que debe implementar <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="440cd-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="440cd-161">Quita un agente de escucha previamente agregado del origen proporcionado.</span><span class="sxs-lookup"><span data-stu-id="440cd-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-162">Llame a este método dentro de la clase manager `RemoveListener` métodos en <xref:System.Windows.WeakEventManager> implementaciones.</span><span class="sxs-lookup"><span data-stu-id="440cd-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="440cd-163">`RemoveListener` es el nombre sugerido para el método estático que define en la clase de administrador para habilitar otras clases quitar un agente de escucha para el modelo de evento débil.</span><span class="sxs-lookup"><span data-stu-id="440cd-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="440cd-164">`RemoveListener` debe tomar dos parámetros: el `source` donde se quita el agente de escucha y el `listener` clase.</span><span class="sxs-lookup"><span data-stu-id="440cd-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="440cd-165">Para su `RemoveListener` implementación, llamada la <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> método en el administrador actual y pase los mismos dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="440cd-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="440cd-166">Si una llamada a <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> quita el último agente de escucha en la lista, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> llamadas la <xref:System.Windows.WeakEventManager.StopListening%2A> método internamente, que llamará específica de su <xref:System.Windows.WeakEventManager.StopListening%2A> invalidar a través de polimorfismo.</span><span class="sxs-lookup"><span data-stu-id="440cd-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="440cd-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Quita los agentes de escucha de un solo interno <xref:System.Windows.WeakEventManager.ListenerList> por `source`.</span><span class="sxs-lookup"><span data-stu-id="440cd-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="440cd-168">Si la implementación del administrador mantiene más de una lista de agentes de escucha para cada combinación de origen del evento, no use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="440cd-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="440cd-169">En su lugar, la implementación debe crear su propio <xref:System.Windows.WeakEventManager.ListenerList> instancias, `RemoveListener` debe quitar los agentes de escucha de la lista adecuada y los eventos se deben entregar a la lista de agente de escucha adecuado mediante una llamada a la <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> método en lugar de la <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método.</span><span class="sxs-lookup"><span data-stu-id="440cd-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-170">Origen de los eventos que se escuchan.</span><span class="sxs-lookup"><span data-stu-id="440cd-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="440cd-171">Datos que se van a comprobar.</span><span class="sxs-lookup"><span data-stu-id="440cd-171">The data to check.</span></span> <span data-ttu-id="440cd-172">Se espera que este objeto sea una implementación de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="440cd-173">Es <see langword="true" /> para dejar de escuchar a <paramref name="source" /> y quitar completamente todas las entradas de <paramref name="data" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="440cd-174">Quita las entradas del agente de escucha inactivas de la lista de datos para el origen proporcionado.</span><span class="sxs-lookup"><span data-stu-id="440cd-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="440cd-175">Devuelve <see langword="true" /> si se quitaron realmente algunas entradas de la lista.</span><span class="sxs-lookup"><span data-stu-id="440cd-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="440cd-176"><see langword="true" /> si se han quitado realmente algunas entradas; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-177">El <xref:System.Windows.WeakEventManager.Purge%2A> método tiene una implementación predeterminada que se quitará todas las entradas cuando los datos están un <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="440cd-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="440cd-178">Si la base de tipo de la <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> es algo que no sean <see cref="T:System.Windows.WeakEventManager.ListenerList" />, o contiene datos más allá de un <see cref="T:System.Windows.WeakEventManager.ListenerList" />, debe invalidar el <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> método.</span><span class="sxs-lookup"><span data-stu-id="440cd-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="440cd-179">La invalidación debe proporcionar el comportamiento de purga de la lista de elementos de tipo alternativo.</span><span class="sxs-lookup"><span data-stu-id="440cd-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="440cd-180">Por lo general, la invalidación debe proporcionar el comportamiento sin llamar a la implementación base.</span><span class="sxs-lookup"><span data-stu-id="440cd-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="440cd-181">Si un determinado <see cref="T:System.Windows.WeakEventManager.ListenerList" /> todavía necesita borrar, llamada <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="440cd-182">Establece un bloqueo de lectura en la tabla de datos subyacente y devuelve <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="440cd-183">Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <see langword="using" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-184">En las clases derivadas, consulta a la tabla contenida en <xref:System.Windows.WeakEventManager.Item%2A> siempre debe realizarse dentro de un `using (ReadLock) { ... }` cláusula, excepto para las consultas que ya están dentro de un bloqueo de escritura.</span><span class="sxs-lookup"><span data-stu-id="440cd-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="440cd-185">Estas consultas pueden ser necesarias si su clase admite más sofisticados `AddListener` implementación que requiere más datos más allá de la `source` y `listener`y usa el <xref:System.Windows.WeakEventManager.Item%2A> colección para almacenar la información adicional.</span><span class="sxs-lookup"><span data-stu-id="440cd-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-186">Origen del que se quita la información del agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="440cd-187">Quita todos los agentes de escucha del origen especificado.</span><span class="sxs-lookup"><span data-stu-id="440cd-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="440cd-188">Solicita que se realice una purga de entradas no usadas en la lista de agentes de escucha subyacente en un subproceso de menor prioridad.</span><span class="sxs-lookup"><span data-stu-id="440cd-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-189">Una llamada a la <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> es similar a llamar al método el <xref:System.Windows.WeakEventManager.Purge%2A> método en la lista del administrador actual, con prioridad inferior de subprocesos, con el `purgeAll` parámetro establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="440cd-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="440cd-190">Tipo en el que se establece el nuevo administrador de eventos.</span><span class="sxs-lookup"><span data-stu-id="440cd-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="440cd-191">Nuevo administrador del evento.</span><span class="sxs-lookup"><span data-stu-id="440cd-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="440cd-192">Establece el administrador actual para el tipo de administrador especificado.</span><span class="sxs-lookup"><span data-stu-id="440cd-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-193">Llame a la <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> método para inicializar un administrador, si es necesario mediante una llamada a su `CurrentManager` propiedad en un <xref:System.Windows.WeakEventManager> implementación.</span><span class="sxs-lookup"><span data-stu-id="440cd-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-194">Origen en el que se empiezan a realizar escuchas.</span><span class="sxs-lookup"><span data-stu-id="440cd-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="440cd-195">Cuando se invalida en una clase derivada, inicia la escucha para el evento que se administra.</span><span class="sxs-lookup"><span data-stu-id="440cd-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="440cd-196">Después de llamar al método <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> por primera vez, el administrador debe estar en el estado de llamar a <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> o <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> cada vez que se administre el evento pertinente del origen proporcionado.</span><span class="sxs-lookup"><span data-stu-id="440cd-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="440cd-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> Overrides deben agregar un controlador a proporcionado <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="440cd-198">El controlador se declara mediante el propio administrador.</span><span class="sxs-lookup"><span data-stu-id="440cd-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="440cd-199">El controlador de clase no debe ser público y solo debe llamarse en respuesta al evento que se va a administrar.</span><span class="sxs-lookup"><span data-stu-id="440cd-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="440cd-200">El controlador de clase debe llamar a la <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> método o la <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> método correctamente.</span><span class="sxs-lookup"><span data-stu-id="440cd-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="440cd-201">Origen en el que se dejan de realizar escuchas.</span><span class="sxs-lookup"><span data-stu-id="440cd-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="440cd-202">Cuando se invalida en una clase derivada, deja de realizar escuchas en el origen proporcionado para el evento que se administra.</span><span class="sxs-lookup"><span data-stu-id="440cd-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="440cd-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> las implementaciones deben quitar el controlador de clase como agregados por el <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> método.</span><span class="sxs-lookup"><span data-stu-id="440cd-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="440cd-204">Quitar un agente de escucha no debe borrar la lista de escucha.</span><span class="sxs-lookup"><span data-stu-id="440cd-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="440cd-205">En su lugar, solo debe desconectar el controlador de clase (quizás temporalmente).</span><span class="sxs-lookup"><span data-stu-id="440cd-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="440cd-206">Existen otros métodos para borrar la lista completa, como el <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> método con el <paramref name="purgeAll" /> parámetro establecido en <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="440cd-207">Establece un bloqueo de escritura en la tabla de datos subyacente y devuelve <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="440cd-208">Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <see langword="using" />.</span><span class="sxs-lookup"><span data-stu-id="440cd-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="440cd-209">En las clases derivadas, todas las modificaciones en la tabla de datos subyacente deben realizarse dentro de un `using (WriteLock) { ... }` cláusula.</span><span class="sxs-lookup"><span data-stu-id="440cd-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="440cd-210">Estas modificaciones pueden ser necesarias si su clase admite más sofisticados `AddListener` implementación que requiere más datos más allá de la `source` y `listener`y usa el <xref:System.Windows.WeakEventManager.Item%2A> colección para almacenar la información adicional.</span><span class="sxs-lookup"><span data-stu-id="440cd-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>