<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdad856ca1190b53eeb702e6825901cbd349d2ed" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55320244" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7d71c-101">Representa un objeto que forma parte del sistema de propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-102">El <xref:System.Windows.DependencyObject> clase permite [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] servicios del sistema de propiedades en sus clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="7d71c-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="7d71c-103">Función principal del sistema de propiedades es para calcular los valores de propiedades y para proporcionar una notificación del sistema acerca de los valores que han cambiado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="7d71c-104">Otra clase clave que participa en el sistema de propiedades es <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="7d71c-105"><xref:System.Windows.DependencyProperty> habilita el registro de las propiedades de dependencia en el sistema de propiedades y proporciona identificación e información sobre cada propiedad de dependencia, mientras que <xref:System.Windows.DependencyObject> como una clase base permite a los objetos usar las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="7d71c-106"><xref:System.Windows.DependencyObject> servicios y características incluyen lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="7d71c-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="7d71c-107">Compatibilidad con el host la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-107">Dependency property hosting support.</span></span> <span data-ttu-id="7d71c-108">Registrar una propiedad de dependencia mediante una llamada a la <xref:System.Windows.DependencyProperty.Register%2A> método y almacenar el valor devuelto del método como un campo estático público en su clase.</span><span class="sxs-lookup"><span data-stu-id="7d71c-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="7d71c-109">Compatibilidad con el hospedaje de propiedad adjunta.</span><span class="sxs-lookup"><span data-stu-id="7d71c-109">Attached property hosting support.</span></span> <span data-ttu-id="7d71c-110">Registrar una propiedad adjunta mediante una llamada a la <xref:System.Windows.DependencyProperty.RegisterAttached%2A> método y almacenar el valor devuelto del método como un campo de solo lectura público estático en la clase.</span><span class="sxs-lookup"><span data-stu-id="7d71c-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="7d71c-111">(También hay requisitos de miembro adicionales; tenga en cuenta que esto representa un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] implementación específica para las propiedades adjuntas.</span><span class="sxs-lookup"><span data-stu-id="7d71c-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="7d71c-112">Para obtener más información, consulte [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) A continuación, se puede establecer la propiedad adjunta en cualquier clase que deriva de <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="7d71c-113">Get, set y desactive los métodos de utilidad para los valores de las propiedades de dependencia que existen en el <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="7d71c-114">Los metadatos, compatibilidad con valores de notificación de cambio de propiedad y las devoluciones de llamada de invalidación para las propiedades de dependencia de coerción o las propiedades adjuntas.</span><span class="sxs-lookup"><span data-stu-id="7d71c-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="7d71c-115">Además, el <xref:System.Windows.DependencyObject> clase facilita los metadatos de propiedad por propietario para una propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="7d71c-116">Una clase base común para las clases derivadas de <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, o <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="7d71c-117">(<xref:System.Windows.UIElement>, otra clase de elemento base, tiene una jerarquía de clases que incluye <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="7d71c-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-118">En el siguiente ejemplo se deriva de <xref:System.Windows.DependencyObject> para crear una nueva clase abstracta.</span><span class="sxs-lookup"><span data-stu-id="7d71c-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="7d71c-119">La clase, a continuación, registra una propiedad adjunta e incluye compatibilidad con miembros de esa propiedad asociada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d71c-120">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d71c-121">Borra el valor local de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d71c-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-122">Propiedad de dependencia que se va a borrar, identificada con una referencia de objeto <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="7d71c-123">Borra el valor local de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d71c-123">Clears the local value of a property.</span></span> <span data-ttu-id="7d71c-124">La propiedad que se va a borrar se especifica mediante un identificador <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-125">Borrar el valor de propiedad mediante una llamada a <xref:System.Windows.DependencyObject.ClearValue%2A> no necesariamente a una propiedad de dependencia el valor predeterminado que se especifica en los metadatos de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="7d71c-126">Al borrar la propiedad solo borra específicamente cualquier valor local se han aplicado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="7d71c-127">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-128">El ejemplo siguiente se recorre en iteración todas las propiedades que tienen valores locales establecidos en un objeto, a continuación, llama a <xref:System.Windows.DependencyObject.ClearValue%2A> para borrar los valores de cada propiedad de este tipo.</span><span class="sxs-lookup"><span data-stu-id="7d71c-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-129">Se intentó llamar a <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> en un <see cref="T:System.Windows.DependencyObject" /> sellado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7d71c-130">Clave de la propiedad de dependencia que se va a borrar.</span><span class="sxs-lookup"><span data-stu-id="7d71c-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="7d71c-131">Borra el valor local de una propiedad de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7d71c-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="7d71c-132">La propiedad que se va a borrar se especifica mediante un <see cref="T:System.Windows.DependencyPropertyKey" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-133">Un <xref:System.Windows.DependencyPropertyKey> identifica una propiedad de dependencia de solo lectura para las operaciones de sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="7d71c-134">Las clases que definen las propiedades de dependencia de solo lectura no deben exponer esta clave con acceso público.</span><span class="sxs-lookup"><span data-stu-id="7d71c-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="7d71c-135">Una clave expuesta públicamente proporcionaría una ruta de código público que niega el carácter de solo lectura de la propiedad, si los métodos como <xref:System.Windows.DependencyObject.ClearValue%2A> o <xref:System.Windows.DependencyObject.SetValue%2A> podría denominarse fuera de la clase o el ensamblado, que hacen referencia a la clave.</span><span class="sxs-lookup"><span data-stu-id="7d71c-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="7d71c-136">Borrar el valor de propiedad mediante una llamada a <xref:System.Windows.DependencyObject.ClearValue%2A> no necesariamente a una propiedad de dependencia el valor predeterminado que se especifica en los metadatos de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="7d71c-137">Al borrar el valor solo borra específicamente cualquier valor local se han aplicado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="7d71c-138">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-139">Se intentó llamar a <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> en un <see cref="T:System.Windows.DependencyObject" /> sellado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-140">Identificador de la propiedad de dependencia que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="7d71c-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="7d71c-141">Convierte el valor de la propiedad de dependencia especificada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="7d71c-142">Esto se logra invocando cualquier función <see cref="T:System.Windows.CoerceValueCallback" /> especificada en los metadatos de la propiedad de dependencia tal como existe en la clase <see cref="T:System.Windows.DependencyObject" /> que llama.</span><span class="sxs-lookup"><span data-stu-id="7d71c-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-143">Además de que se va a invocar explícitamente llamando a <xref:System.Windows.DependencyObject.CoerceValue%2A>, <xref:System.Windows.CoerceValueCallback> en una dependencia de propiedad también se invoca internamente cada vez que el valor de propiedad de dependencia se reevalúa el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="7d71c-144">Cuando se invoca el <xref:System.Windows.DependencyObject.CoerceValue%2A> método, en última instancia, se invoca la devolución de llamada de valor forzado para la propiedad que especifique.</span><span class="sxs-lookup"><span data-stu-id="7d71c-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="7d71c-145">Normalmente, invocará <xref:System.Windows.DependencyObject.CoerceValue%2A> solo si sabe que existe una devolución de llamada de valor de coerción, y si sabe que los criterios de la devolución de llamada para la conversión.</span><span class="sxs-lookup"><span data-stu-id="7d71c-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="7d71c-146">El escenario más común para llamar a <xref:System.Windows.DependencyObject.CoerceValue%2A> está dentro de la clase control o la propiedad cambio las devoluciones de llamada de propiedades relacionadas que influyen en los valores de los demás de forma dependiente.</span><span class="sxs-lookup"><span data-stu-id="7d71c-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="7d71c-147">Para obtener más información, consulte [Devoluciones de llamada y validación de las propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-148">El ejemplo siguiente se llama <xref:System.Windows.DependencyObject.CoerceValue%2A> dentro de un <xref:System.Windows.PropertyChangedCallback> implementación que se utiliza como el <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> un diferentes propiedades de dependencia en la misma clase.</span><span class="sxs-lookup"><span data-stu-id="7d71c-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="7d71c-149">Se trata de un patrón común para introducir un valor true dependencias entre las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-150">El parámetro <paramref name="dp" /> especificado o su valor no eran válidos o no existían.</span><span class="sxs-lookup"><span data-stu-id="7d71c-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d71c-151">Obtiene el objeto <see cref="T:System.Windows.DependencyObjectType" /> que ajusta el tipo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="7d71c-152"><see cref="T:System.Windows.DependencyObjectType" /> que ajusta el tipo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-153">Esta propiedad es útil si un objeto que se devuelve desde un método tiene un tipo de valor devuelto de <xref:System.Windows.DependencyObject> y desea realizar la propiedad del sistema en él operaciones específicas según su tipo.</span><span class="sxs-lookup"><span data-stu-id="7d71c-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="7d71c-154">Por ejemplo es más eficaz llamar a <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> utilizando el <xref:System.Windows.DependencyObjectType> en lugar de [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] tipo.</span><span class="sxs-lookup"><span data-stu-id="7d71c-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="7d71c-155"><xref:System.Windows.DependencyObjectType> facilita la búsqueda rápida.</span><span class="sxs-lookup"><span data-stu-id="7d71c-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-156">En el siguiente ejemplo de pseudocódigo `MySubClass` prevé que las clases derivadas adicionales pueden cambiar el valor predeterminado de la `MyCustom` propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="7d71c-157">La clase implementa un constructor predeterminado que se puede determinar la clase derivada real aprovechando las ventajas de polimorfismo el <xref:System.Windows.DependencyObjectType> valor cada vez que el constructor se utiliza como un creador de instancias de clase derivada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7d71c-158"><see cref="T:System.Windows.DependencyObject" /> que se va a comparar con la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="7d71c-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="7d71c-159">Determina si un objeto <see cref="T:System.Windows.DependencyObject" /> proporcionado es equivalente al objeto <see cref="T:System.Windows.DependencyObject" /> actual.</span><span class="sxs-lookup"><span data-stu-id="7d71c-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="7d71c-160">Es <see langword="true" /> si las dos instancias son iguales; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-161">Esta implementación es sólo la igualdad de referencia y no intenta evaluar la igualdad de valores de las propiedades contenidas.</span><span class="sxs-lookup"><span data-stu-id="7d71c-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d71c-162">
            <see cref="T:System.Windows.DependencyObject" /> invalida y, a continuación, sella dos basic <see cref="T:System.Object" /> métodos: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> y <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="7d71c-163">La llamada de invalidaciones del <see cref="T:System.Object" /> implementaciones, lo que resulta en un comportamiento de igualdad de objetos.</span><span class="sxs-lookup"><span data-stu-id="7d71c-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="7d71c-164">El propósito de estas invalidaciones deliberadas es impedir que se intenta definir una igualdad de valores para las clases derivadas un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="7d71c-165">Valor de igualdades para <see cref="T:System.Windows.DependencyObject" /> nunca serán precisos debido a las funcionalidades de cambio de valor de propiedad innata de un <see cref="T:System.Windows.DependencyObject" /> y sus propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="7d71c-166">Esto incluye fundamentales [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] características como el enlace de datos y el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d71c-167">Obtiene un código hash de este objeto <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="7d71c-168">Código hash entero de 32 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="7d71c-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d71c-169">
            <see cref="T:System.Windows.DependencyObject" /> invalida y, a continuación, sella dos <see cref="T:System.Object" /> métodos: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> y <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="7d71c-170">La llamada de invalidaciones del <see cref="T:System.Object" /> implementaciones, lo que resulta en un comportamiento de igualdad de objetos.</span><span class="sxs-lookup"><span data-stu-id="7d71c-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="7d71c-171">El propósito de estas invalidaciones deliberadas es impedir que se intenta definir una igualdad de valores para las clases derivadas un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="7d71c-172">Valor de igualdades para <see cref="T:System.Windows.DependencyObject" /> nunca serán precisos debido a las funcionalidades de cambio de valor de propiedad innata de un <see cref="T:System.Windows.DependencyObject" /> y sus propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="7d71c-173">Esto incluye fundamentales [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] características como el enlace de datos y el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d71c-174">Crea un enumerador especializado para determinar qué propiedades de dependencia han establecido localmente los valores en <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="7d71c-175">Enumerador de valor local especializado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-176">Un *valor local* es cualquier valor de propiedad de dependencia que se ha establecido mediante <xref:System.Windows.DependencyObject.SetValue%2A>, en contraposición a otros aspectos del sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="7d71c-177">El <xref:System.Windows.LocalValueEnumerator> obtenido mediante una llamada a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> puede utilizarse para enumerar las propiedades que tienen establecido localmente el valor en un <xref:System.Windows.DependencyObject> instancia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="7d71c-178">Cada propiedad de este tipo se representa en el enumerador por un <xref:System.Windows.LocalValueEntry> objeto, que tiene propiedades que hacen referencia las específicas <xref:System.Windows.DependencyProperty> y sus valores.</span><span class="sxs-lookup"><span data-stu-id="7d71c-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="7d71c-179">Esta técnica de enumerar sobre establecido localmente los valores pueden utilizarse para la optimización o para otro control de valores locales, por ejemplo, para determinar qué valores de propiedad de un <xref:System.Windows.DependencyObject> podría cambiar si han borrado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7d71c-180">El valor devuelto <xref:System.Windows.LocalValueEnumerator> podría contener <xref:System.Windows.LocalValueEntry> registros de las propiedades de dependencia que son de solo lectura o de las propiedades de dependencia donde los valores se calculan por el sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="7d71c-181">Por ejemplo, un elemento de marco visual que tiene un ancho establecido a través de diseño informará de un valor local para <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="7d71c-182">Si va a obtener los valores locales para restablecerlos, compruebe el <xref:System.Windows.DependencyProperty.ReadOnly%2A> valor en el identificador de propiedad de cada <xref:System.Windows.LocalValueEntry> para comprobar que la <xref:System.Windows.DependencyProperty> en cuestión no es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7d71c-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-183">El ejemplo siguiente se recorre en iteración todas las propiedades que tienen valores locales establecidos en un objeto, a continuación, llama a <xref:System.Windows.DependencyObject.ClearValue%2A> para borrar los valores de cada propiedad de este tipo.</span><span class="sxs-lookup"><span data-stu-id="7d71c-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-184">Identificador <see cref="T:System.Windows.DependencyProperty" /> de la propiedad de la que se debe recuperar el valor.</span><span class="sxs-lookup"><span data-stu-id="7d71c-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="7d71c-185">Devuelve el valor efectivo actual de una propiedad de dependencia en esta instancia de un <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="7d71c-186">Devuelve el valor efectivo actual.</span><span class="sxs-lookup"><span data-stu-id="7d71c-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-187">El *valor efectivo* es el valor de la propiedad que es devuelto por el sistema de propiedades para cualquier llamador que solicita el valor.</span><span class="sxs-lookup"><span data-stu-id="7d71c-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="7d71c-188">El valor efectivo es el resultado del sistema de propiedades evalúe todas las entradas posibles que participan en la precedencia de valores de propiedad del sistema.</span><span class="sxs-lookup"><span data-stu-id="7d71c-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="7d71c-189">Esto incluye la conversión y animación.</span><span class="sxs-lookup"><span data-stu-id="7d71c-189">This includes coercion and animation.</span></span> <span data-ttu-id="7d71c-190">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="7d71c-191">Este método nunca devuelve <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="7d71c-192">El <xref:System.Windows.DependencyProperty.UnsetValue> es un valor de Centinela para el sistema de propiedades que se usa en varias capacidades internamente y, ocasionalmente, también se exponen a través de las devoluciones de llamada de conversión.</span><span class="sxs-lookup"><span data-stu-id="7d71c-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="7d71c-193">Si no está seguro de cuál debe ser el tipo de propiedad, puede consultar el identificador de la propiedad de dependencia solicitada para determinar si hay un determinado más <xref:System.Windows.DependencyProperty.PropertyType%2A> que el valor devuelto puede convertirse en.</span><span class="sxs-lookup"><span data-stu-id="7d71c-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-194">El <paramref name="dp" /> especificado o su valor no eran válidos, o el <paramref name="dp" /> especificado no existe.</span><span class="sxs-lookup"><span data-stu-id="7d71c-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-195">Identificador de <see cref="T:System.Windows.DependencyProperty" /> de la propiedad que se debe invalidar.</span><span class="sxs-lookup"><span data-stu-id="7d71c-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="7d71c-196">Vuelve a evaluar el valor efectivo para la propiedad de dependencia especificada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-196">Re-evaluates the effective value for the specified dependency property</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-197">Cuando se llama a <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, cualquier asociado y aplicable <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funciones registrado para esa propiedad de dependencia podría ser invocada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="7d71c-198">Una llamada a <xref:System.Windows.DependencyObject.InvalidateProperty%2A> en una propiedad que tiene a su valor local establecido no tendrá ningún efecto, porque el valor local tiene prioridad sobre otras entradas del sistema de propiedad, excepto las animaciones.</span><span class="sxs-lookup"><span data-stu-id="7d71c-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="7d71c-199">Sin embargo, podría llamar a <xref:System.Windows.DependencyObject.ClearValue%2A>, a continuación, llamar a <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="7d71c-200">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="7d71c-201">Una llamada a <xref:System.Windows.DependencyObject.InvalidateProperty%2A> no es necesariamente aplicable a muchos escenarios de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="7d71c-202">Si una propiedad de dependencia se invalida debido a cambios de valor en cualquiera de los componentes, el sistema de propiedades invalida y vuelve a evaluar la propiedad de dependencia de forma automática.</span><span class="sxs-lookup"><span data-stu-id="7d71c-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="7d71c-203">Sin embargo, todavía hay algunos escenarios adecuados donde <xref:System.Windows.DependencyObject.InvalidateProperty%2A> es útil.</span><span class="sxs-lookup"><span data-stu-id="7d71c-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="7d71c-204">En concreto, puede usar <xref:System.Windows.DependencyObject.InvalidateProperty%2A> dentro de la propiedad o valor de coerción cambió la devolución de llamada para una propiedad de dependencia distinta.</span><span class="sxs-lookup"><span data-stu-id="7d71c-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="7d71c-205">También puede usar <xref:System.Windows.DependencyObject.InvalidateProperty%2A> para forzar la reevaluación de un enlace con un origen de datos que no es capaz de implementar la recomendada <xref:System.ComponentModel.INotifyPropertyChanged> mecanismo de notificación (quizás si consume las clases de datos que no se pueden derivar o donde los datos están estático miembro).</span><span class="sxs-lookup"><span data-stu-id="7d71c-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-206">El ejemplo siguiente se llama <xref:System.Windows.DependencyObject.InvalidateProperty%2A> en una propiedad personalizada, siempre que cambian las propiedades que están implicadas en los cálculos de la propiedad invalidada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="7d71c-207">Se trata de una técnica alternativa a llamar a la <xref:System.Windows.DependencyObject.CoerceValue%2A> método, porque la propiedad que se invalide también llamará a cualquier registrado <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d71c-208">Obtiene un valor que indica si esta instancia está actualmente sellada (es de solo lectura).</span><span class="sxs-lookup"><span data-stu-id="7d71c-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="7d71c-209"><see langword="true" /> si se sella esta instancia; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-210">Este valor se establece internamente.</span><span class="sxs-lookup"><span data-stu-id="7d71c-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7d71c-211">Datos de evento que contendrán el identificador de propiedad de dependencia de interés, los metadatos del tipo de propiedad, y valores antiguos y nuevos.</span><span class="sxs-lookup"><span data-stu-id="7d71c-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="7d71c-212">Se invoca cuando se actualiza el valor efectivo de alguna propiedad de dependencia en este <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="7d71c-213">La propiedad de dependencia específica que cambió se notifica en los datos de evento.</span><span class="sxs-lookup"><span data-stu-id="7d71c-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-214">Este método no está pensado para detectar generalmente los cambios de propiedad individual o realizar invalidaciones de las propiedades por caso.</span><span class="sxs-lookup"><span data-stu-id="7d71c-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="7d71c-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> en su lugar, está pensado para las modificaciones del modelo de invalidación general, si se conoce cierta información sobre las clasificaciones de anchas de propiedades.</span><span class="sxs-lookup"><span data-stu-id="7d71c-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="7d71c-216">Por ejemplo, los cambios en un <xref:System.Windows.Freezable> posible que haya cambios en los tipos de valor de la <xref:System.Windows.Freezable>, o podría ser subpropiedades, donde los cambios están dentro de otros <xref:System.Windows.Freezable> referencias.</span><span class="sxs-lookup"><span data-stu-id="7d71c-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="7d71c-217">El <xref:System.Windows.Freezable> invalidar la implementación de <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> información interna se utiliza para determinar si las propiedades son subpropiedades y proporciona la lógica de la clase base adecuada para cualquiera de los casos.</span><span class="sxs-lookup"><span data-stu-id="7d71c-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="7d71c-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> se invoca posiblemente muchas veces durante la vida de un objeto.</span><span class="sxs-lookup"><span data-stu-id="7d71c-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="7d71c-219">Por lo tanto, puede lograr un mejor rendimiento para el sistema de propiedades general si invalida los metadatos de las propiedades específicas y, a continuación, adjuntar <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funciones para las propiedades individuales.</span><span class="sxs-lookup"><span data-stu-id="7d71c-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="7d71c-220">Sin embargo, podría utilizar este método si un <xref:System.Windows.DependencyObject> incluye un número significativo de propiedades de dependencia interrelacionadas por valor, o si incluye lógica como comportamiento de representación que se debe volver a ejecutar para varios casos de invalidaciones de propiedad relacionados.</span><span class="sxs-lookup"><span data-stu-id="7d71c-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d71c-221">Llame siempre a la implementación base.</span><span class="sxs-lookup"><span data-stu-id="7d71c-221">Always call the base implementation.</span></span> <span data-ttu-id="7d71c-222">Si no lo hace mucho, se deshabilitará todo el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades, valores incorrectos que se notificarán.</span><span class="sxs-lookup"><span data-stu-id="7d71c-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-223">Identificador <see cref="T:System.Windows.DependencyProperty" /> de la propiedad de la que se debe recuperar el valor.</span><span class="sxs-lookup"><span data-stu-id="7d71c-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="7d71c-224">Devuelve el valor local de una propiedad de dependencia, si existe.</span><span class="sxs-lookup"><span data-stu-id="7d71c-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="7d71c-225">Devuelve el valor local o devuelve el valor centinela <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> si no se establece ningún valor local.</span><span class="sxs-lookup"><span data-stu-id="7d71c-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-226">Debe usar <xref:System.Windows.DependencyObject.GetValue%2A> para las operaciones más habituales para una propiedad de dependencia "get".</span><span class="sxs-lookup"><span data-stu-id="7d71c-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="7d71c-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> no devuelve el valor efectivo para una variedad de circunstancias donde el valor no se ha establecido localmente.</span><span class="sxs-lookup"><span data-stu-id="7d71c-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="7d71c-228">Los valores que se establecen mediante los estilos, temas, plantillas, el valor predeterminado de los metadatos o la herencia de valores de propiedad no se consideran valores locales.</span><span class="sxs-lookup"><span data-stu-id="7d71c-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="7d71c-229">Sin embargo, los enlaces y otras expresiones se consideran valores locales, una vez que se han evaluado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="7d71c-230">Cuando se establece ningún valor local, este método devuelve <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="7d71c-231">Si el valor devuelto es distinto <xref:System.Windows.DependencyProperty.UnsetValue>, puede consultar los metadatos de la propiedad de dependencia solicitada para determinar si hay un tipo más específico que el valor devuelto puede convertirse en.</span><span class="sxs-lookup"><span data-stu-id="7d71c-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-232">Identificador de la propiedad de dependencia que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="7d71c-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="7d71c-233">Nuevo valor local.</span><span class="sxs-lookup"><span data-stu-id="7d71c-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="7d71c-234">Establece el valor de una propiedad de dependencia sin cambiar el origen de su valor.</span><span class="sxs-lookup"><span data-stu-id="7d71c-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-235">Este método se usa un componente que se establece mediante programación el valor de uno de sus propias propiedades sin deshabilitar el uso declarado de la aplicación de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="7d71c-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="7d71c-236">El <xref:System.Windows.DependencyObject.SetCurrentValue%2A> método cambia el valor efectivo de la propiedad, pero los desencadenadores existentes, los enlaces de datos y estilos seguirán funcionando.</span><span class="sxs-lookup"><span data-stu-id="7d71c-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-237">Se intentó modificar una propiedad de dependencia de solo lectura o una propiedad en una clase <see cref="T:System.Windows.DependencyObject" /> sellada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7d71c-238"><paramref name="value" /> no era el tipo correcto registrado para la propiedad <paramref name="dp" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7d71c-239">Devuelve el valor local de una propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-240">Identificador de la propiedad de dependencia que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="7d71c-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="7d71c-241">Nuevo valor local.</span><span class="sxs-lookup"><span data-stu-id="7d71c-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="7d71c-242">Establece el valor local de una propiedad de dependencia, especificado por su identificador de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-243">Si el tipo proporcionado no coincide con el tipo declarado de la propiedad de dependencia tal como se registró originalmente, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="7d71c-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="7d71c-244">El `value` siempre se deben proporcionar los parámetros como el tipo adecuado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="7d71c-245">Las condiciones de excepción potencialmente se ven afectadas por la <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> devolución de llamada que existe en el identificador de propiedad de dependencia de la propiedad de dependencia que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="7d71c-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="7d71c-246">En caso contrario, el valor proporcionado podría no ser correcta condiciones generales de comprobación de tipos (por ejemplo, pasando una cadena al tipo nativo es Double).</span><span class="sxs-lookup"><span data-stu-id="7d71c-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d71c-247">Se intentó modificar una propiedad de dependencia de solo lectura o una propiedad en una clase <see cref="T:System.Windows.DependencyObject" /> sellada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7d71c-248"><paramref name="value" /> no era el tipo correcto registrado para la propiedad <paramref name="dp" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7d71c-249">Identificador <see cref="T:System.Windows.DependencyPropertyKey" /> de la propiedad que se debe establecer.</span><span class="sxs-lookup"><span data-stu-id="7d71c-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="7d71c-250">Nuevo valor local.</span><span class="sxs-lookup"><span data-stu-id="7d71c-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="7d71c-251">Establece el valor local de una propiedad de dependencia de solo lectura, especificado por el identificador <see cref="T:System.Windows.DependencyPropertyKey" /> de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-252">Esta firma se usa generalmente al establecer los valores para las propiedades de dependencia de solo lectura que se definen por las clases personalizadas.</span><span class="sxs-lookup"><span data-stu-id="7d71c-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="7d71c-253">Por lo general, <xref:System.Windows.DependencyObject.SetValue%2A> solo se llama desde el tipo que registra esa propiedad de dependencia, que implementa la lógica interna que proporciona el valor determinado para la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="7d71c-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="7d71c-254">Para obtener más información, consulte [Propiedades de dependencia de solo lectura](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="7d71c-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="7d71c-255">Si el tipo proporcionado no coincide con el tipo declarado de la propiedad de dependencia tal como se registró originalmente, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="7d71c-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="7d71c-256">El `value` siempre se deben proporcionar los parámetros como el tipo adecuado.</span><span class="sxs-lookup"><span data-stu-id="7d71c-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="7d71c-257">Las condiciones de excepción potencialmente se ven afectadas por la <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> devolución de llamada que existe en el identificador de propiedad de dependencia de la propiedad de dependencia que se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="7d71c-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d71c-258">En el ejemplo siguiente se define una propiedad de dependencia de solo lectura, junto con un `public static readonly` <xref:System.Windows.DependencyProperty> que proporciona la exposición de solo lectura es necesaria para los consumidores de propiedad y el descriptor de acceso get de la [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] contenedor.</span><span class="sxs-lookup"><span data-stu-id="7d71c-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="7d71c-259">El identificador de la propiedad de dependencia que se debe serializar.</span><span class="sxs-lookup"><span data-stu-id="7d71c-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="7d71c-260">Devuelve un valor que indica si los procesos de serialización deben serializar el valor de la propiedad de dependencia suministrada.</span><span class="sxs-lookup"><span data-stu-id="7d71c-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="7d71c-261">Es <see langword="true" /> si la propiedad de dependencia que se proporciona debe serializarse por valor; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d71c-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d71c-262">La implementación predeterminada devuelve `true` para todos los casos en que una propiedad de dependencia tenía un valor local establecido en el <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="7d71c-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7d71c-263">Invalidaciones de este método podrían controlar las propiedades de dependencia concreta forma diferente.</span><span class="sxs-lookup"><span data-stu-id="7d71c-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>