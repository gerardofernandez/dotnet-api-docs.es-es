<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="346b263b0e22fb800ba4b1fdb296032637c17b7c" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737248" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1c8f5-101">Notifica o aplica los metadatos de una propiedad de dependencia, agregando específicamente las características del sistema de propiedades específico del marco.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-102">Esta clase se deriva de <xref:System.Windows.PropertyMetadata> (a través de <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="1c8f5-103">Para fines de desarrollo de aplicaciones de nivel de marco WPF mayoría, <xref:System.Windows.FrameworkPropertyMetadata> es el tipo utilizado para los metadatos de propiedad de dependencia, en lugar de los tipos de metadatos base <xref:System.Windows.PropertyMetadata> o <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="1c8f5-104">Esto es cierto tanto para las propiedades de dependencia existentes para la mayoría de los escenarios de propiedad de dependencia personalizada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="1c8f5-105">Los miembros declarados por esta clase ese complemento la <xref:System.Windows.PropertyMetadata> clase base se incluyen diversas propiedades booleanas que especifican o comportamiento del sistema de propiedad de nivel de marco WPF, como la herencia de propiedades, enlace de datos y diseño de informes.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="1c8f5-106">Varias firmas de constructor para crear un <xref:System.Windows.FrameworkPropertyMetadata> instancia toman un <xref:System.Windows.FrameworkPropertyMetadataOptions> parámetro.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="1c8f5-107">El <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeración sólo se utiliza para especificar el comportamiento inicial en el constructor y no se expone después <xref:System.Windows.FrameworkPropertyMetadata> se construye.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="1c8f5-108">Desde una instancia construida, puede obtener o establecer la información correspondiente a través de varias propiedades que comparten el nombre de los valores de enumeración que se usa en la llamada al constructor.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-109">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-109">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-110">Esta clase no se utiliza normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-111">El ejemplo siguiente obtiene los metadatos para una propiedad de dependencia en el propietario de un determinado como inicial base <xref:System.Windows.PropertyMetadata> tipo.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="1c8f5-112">Los metadatos se convierten a <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="1c8f5-113">Si la conversión devolvió válido <xref:System.Windows.FrameworkPropertyMetadata>, a continuación, varios <xref:System.Windows.FrameworkPropertyMetadata> los valores de propiedad se notifican a través de una interfaz de usuario simple (no mostrado).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1c8f5-114">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1c8f5-115">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-116">Esta firma inicializa todos los valores de <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> en sus valores de propiedad predeterminados.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="1c8f5-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> será `null`y las distintas <xref:System.Windows.FrameworkPropertyMetadata> propiedades booleanas será `false`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-118">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-118">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <summary><span data-ttu-id="1c8f5-119">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado especificado.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-120">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-121">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-122">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-123">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-124">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-125">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-125"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-126">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="1c8f5-127">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con la devolución de llamada de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1c8f5-128">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-129">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-129">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="1c8f5-130">Marcadores de la opción de metadatos (una combinación de valores de <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="1c8f5-131">Estas opciones especifican características de la propiedad de dependencia que interactúan con sistemas como el de diseño o el de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <summary><span data-ttu-id="1c8f5-132">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado y las opciones de metadatos de nivel de marco.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-133">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-134">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-135">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-136">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="1c8f5-137">Los valores marcan como marcadores establecidos en el `flags` parámetro establecerá el valor booleano de <xref:System.Windows.FrameworkPropertyMetadata> propiedades que coincidan <xref:System.Windows.FrameworkPropertyMetadataOptions> nombre del marcador para `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="1c8f5-138">Posteriormente puede cambiar los valores de las propiedades de los metadatos, siempre que los metadatos aún no se ha aplicado a una operación del sistema de propiedades concreta.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-139">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-140">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-140"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-141">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-141">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-142">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="1c8f5-143">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado y la devolución de llamada de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-144">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-145">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-146">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-147">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-148">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-149">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-149"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-150">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="1c8f5-151">Se llamará a una referencia a una implementación del controlador siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> para esta propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="1c8f5-152">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con las devoluciones de llamada de especificadas.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-153">Esta implementación llama a un inicializador de base y, a continuación, agrega el `coerceValueCallback` estableciendo la propiedad en la instancia de base.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-154">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-155">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-155">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="1c8f5-156">Marcadores de la opción de metadatos (una combinación de valores de <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="1c8f5-157">Estas opciones especifican características de la propiedad de dependencia que interactúan con sistemas como el de diseño o el de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-158">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="1c8f5-159">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado, las opciones de metadatos de nivel de marco y la devolución de llamada de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-160">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-161">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-162">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-163">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="1c8f5-164">Los valores marcan como marcadores establecidos en el `flags` parámetro establecerá el valor booleano de <xref:System.Windows.FrameworkPropertyMetadata> propiedades que coincidan <xref:System.Windows.FrameworkPropertyMetadataOptions> nombre del marcador para `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="1c8f5-165">Todavía puede cambiar los valores de las propiedades de los metadatos, siempre que los metadatos aún no se ha aplicado a una operación del sistema de propiedades concreta.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-166">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-167">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-167"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-168">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-168">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-169">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="1c8f5-170">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> para esta propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="1c8f5-171">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado y las devoluciones de llamada especificadas.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-172">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-173">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-174">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-175">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-176">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-177">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-177"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-178">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-178">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="1c8f5-179">Marcadores de la opción de metadatos (una combinación de valores de <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="1c8f5-180">Estas opciones especifican características de la propiedad de dependencia que interactúan con sistemas como el de diseño o el de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-181">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="1c8f5-182">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="1c8f5-183">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado, las opciones de metadatos de nivel de marco y las devoluciones de llamada especificadas.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-184">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-185">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-186">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-187">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="1c8f5-188">Los valores marcan como marcadores establecidos en el `flags` parámetro establecerá el valor booleano de <xref:System.Windows.FrameworkPropertyMetadata> propiedades que coincidan <xref:System.Windows.FrameworkPropertyMetadataOptions> nombre del marcador para `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="1c8f5-189">Todavía puede cambiar los valores de las propiedades de los metadatos, siempre que los metadatos aún no se ha aplicado a una operación del sistema de propiedades concreta.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-190">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-191">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-191"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-192">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-192">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="1c8f5-193">Marcadores de la opción de metadatos (una combinación de valores de <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="1c8f5-194">Estas opciones especifican características de la propiedad de dependencia que interactúan con sistemas como el de diseño o el de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-195">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="1c8f5-196">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> en esta propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="1c8f5-197">Es <see langword="true" /> para evitar que el sistema de propiedades anime la propiedad a la que se aplican los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-197"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="1c8f5-198">Tales propiedades producirán una excepción en tiempo de ejecución que se origina desde el sistema de propiedades si se intentan su animación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="1c8f5-199">Es <see langword="false" /> para permitir animar la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-199"><see langword="false" /> to permit animating the property.</span></span> <span data-ttu-id="1c8f5-200">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-200">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="1c8f5-201">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado y las opciones de metadatos de marco, las devoluciones de llamada especificadas y un valor de tipo booleano que se pueden usar para evitar la animación de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-202">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-203">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-204">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-205">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="1c8f5-206">El `isAnimationProhibited` parámetro establece el valor inicial de la <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> propiedad declarada por la base de inmediata <xref:System.Windows.UIPropertyMetadata> clase.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="1c8f5-207">Los valores marcan como marcadores establecidos en el `flags` parámetro establecerá el valor booleano de <xref:System.Windows.FrameworkPropertyMetadata> propiedades que coincidan <xref:System.Windows.FrameworkPropertyMetadataOptions> nombre del marcador para `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="1c8f5-208">Todavía puede cambiar los valores de las propiedades de los metadatos, siempre que los metadatos aún no se ha aplicado a una operación del sistema de propiedades concreta.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-209">El ejemplo siguiente se llama a esta firma de constructor:</span><span class="sxs-lookup"><span data-stu-id="1c8f5-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-210">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-210"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="1c8f5-211">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-211">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="1c8f5-212">Marcadores de la opción de metadatos (una combinación de valores de <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" />).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="1c8f5-213">Estas opciones especifican características de la propiedad de dependencia que interactúan con sistemas como el de diseño o el de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="1c8f5-214">Referencia a una implementación de controlador a la que llamará el sistema de propiedades cada vez que cambie el valor real de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="1c8f5-215">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="1c8f5-216">Es <see langword="true" /> para evitar que el sistema de propiedades anime la propiedad a la que se aplican los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-216"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="1c8f5-217">Tales propiedades producirán una excepción en tiempo de ejecución que se origina desde el sistema de propiedades si se intentan su animación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="1c8f5-218">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-218">The default is <see langword="false" />.</span></span></param>
        <param name="defaultUpdateSourceTrigger"><span data-ttu-id="1c8f5-219"><see cref="T:System.Windows.Data.UpdateSourceTrigger" /> que se va a usar cuando se aplican enlaces para esta propiedad que tiene su conjunto de <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> establecido en <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></param>
        <summary><span data-ttu-id="1c8f5-220">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.FrameworkPropertyMetadata" /> con el valor predeterminado proporcionado y las opciones de metadatos de marco, las devoluciones de llamada especificadas y un valor de tipo booleano que se pueden usar para evitar la animación de la propiedad; así como el valor predeterminado de un desencadenador de actualización de enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-221">El tipo del valor proporcionado para `defaultValue` deben coincidir o estar relacionado con el tipo especificado en el registro original de la propiedad de dependencia que se aplicarán estos metadatos a.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="1c8f5-222">Las diferencias entre el tipo de valor predeterminado de los metadatos y el tipo de la propiedad de dependencia que se está aplicando pueden ser difíciles de depurar, ya que la falta de coincidencia no se detectan durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="1c8f5-223">El sistema de propiedades no evalúa el valor efectivo de una propiedad hasta que el tiempo de ejecución, por lo que el resultado de la coincidencia de tipos de tipo y propiedad de valor predeterminado es un error en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="1c8f5-224">El valor <xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial en el sistema de propiedades y no se puede usar como un valor predeterminado de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="1c8f5-225">El `isAnimationProhibited` parámetro establece el valor inicial de la <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> propiedad declarada por la base de inmediata <xref:System.Windows.UIPropertyMetadata> clase.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="1c8f5-226">Para obtener más información sobre el comportamiento del origen de actualización para los enlaces, vea [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="1c8f5-227">Los valores marcan como marcadores establecidos en el `flags` parámetro establecerá el valor booleano de <xref:System.Windows.FrameworkPropertyMetadata> propiedades que coincidan <xref:System.Windows.FrameworkPropertyMetadataOptions> nombre del marcador para `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="1c8f5-228">Todavía puede cambiar los valores de las propiedades de los metadatos, siempre que los metadatos aún no se ha aplicado a una operación del sistema de propiedades concreta.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-229">El valor de <paramref name="defaultValue" /> está establecido en <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-229"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-230">Obtiene o establece un valor que indica si una propiedad de dependencia afecta potencialmente al paso de organización durante las operaciones del motor de diseño.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="1c8f5-231"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos afecta potencialmente al paso de organización; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-231"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-232">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-232">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-233"><xref:System.Windows.FrameworkElement> y <xref:System.Windows.FrameworkContentElement> incluyen una implementación de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> que supervisa los cambios de valor efectivo en todas las propiedades de dependencia que existen en un elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="1c8f5-234">Como parte de esa lógica, las propiedades de dependencia que cambian en vigor, valor y tienen los metadatos con <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> establecido en `true` iniciará una solicitud diferida para invalidar los elementos visuales de ese elemento (una llamada a <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="1c8f5-235">Dado que esta implementación de nivel de marco WPF ya está en su lugar, normalmente no es necesario buscar las propiedades de dependencia con <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> a menos que esencialmente va a reemplazar o modificar el comportamiento de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="1c8f5-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementaciones pueden optar por tener un comportamiento similar para los cambios de propiedad de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-237">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-238">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-239">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-240">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-241">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-241">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-242">Los miembros de esta clase se utilizan normalmente no en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-243">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-244">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-245">Obtiene o establece un valor que indica si una propiedad de dependencia afecta potencialmente al paso de medida durante las operaciones del motor de diseño.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="1c8f5-246"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos afecta potencialmente al paso de medida; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-246"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-247">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-247">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-248"><xref:System.Windows.FrameworkElement> y <xref:System.Windows.FrameworkContentElement> incluyen una implementación de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> que supervisa los cambios de valor efectivo en todas las propiedades de dependencia que existen en un elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="1c8f5-249">Como parte de esa lógica, las propiedades de dependencia que cambian en vigor, valor y tienen los metadatos con <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> establecido en `true` iniciará una solicitud diferida para invalidar los elementos visuales de ese elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="1c8f5-250">Dado que esta implementación de nivel de marco WPF ya está en su lugar, normalmente no es necesario buscar las propiedades de dependencia con <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> a menos que esencialmente va a reemplazar o modificar el comportamiento de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="1c8f5-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementaciones pueden optar por tener un comportamiento similar para los cambios de propiedad de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-252">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-253">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-254">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-255">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-256">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-256">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-257">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-258">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-259">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-260">Obtiene o establece un valor que indica si una propiedad de dependencia afecta potencialmente al paso de organización del diseño de su elemento principal durante las operaciones del motor de diseño.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="1c8f5-261"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos afecta potencialmente al paso de organización, específicamente en su elemento principal; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-261"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-262">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-263"><xref:System.Windows.FrameworkElement> y <xref:System.Windows.FrameworkContentElement> incluyen una implementación de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> que supervisa los cambios de valor efectivo en todas las propiedades de dependencia que existen en un elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="1c8f5-264">Como parte de esa lógica, las propiedades de dependencia que cambian en vigor, valor y tienen los metadatos con <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> establecido en `true` iniciará una solicitud diferida para invalidar los elementos visuales del elemento primario.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="1c8f5-265">Por lo general, no es necesario para notificar los cambios de un <xref:System.Windows.FrameworkElement> propiedad a un elemento primario mediante <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> porque el propio elemento ya tendría su propia <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> como `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="1c8f5-266">Que generalmente es suficiente, ya que generalmente se inician los cambios en el elemento secundario primario organizar cuando corresponda.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="1c8f5-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> a veces se usa para un <xref:System.Windows.FrameworkContentElement> clase derivada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="1c8f5-268">En este caso, los conjuntos de elementos secundarios una propiedad, pero un <xref:System.Windows.FrameworkContentElement> clase derivada no controla su propia representación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="1c8f5-269">La representación se controla mediante un <xref:System.Windows.FrameworkElement> elemento primario que actúa como host de contenido.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="1c8f5-270">Por ejemplo, un cambio en el valor de la <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> propiedad adjunta un elemento secundario invalida organizar del elemento primario, ya que se debe cambiar la posición del elemento secundario en el elemento primario.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="1c8f5-271">Por lo tanto, el <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> propiedad adjunta tiene metadatos donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="1c8f5-272">Otro ejemplo es <xref:System.Windows.Controls.Control.Padding%2A>; cuando se cambia esta propiedad, el elemento primario puede cambiar la posición del elemento secundario, según el espacio disponible.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="1c8f5-273">Dado que esta implementación de nivel de marco WPF ya está en su lugar, normalmente no es necesario buscar las propiedades de dependencia con <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> a menos que esencialmente va a reemplazar o modificar el comportamiento de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="1c8f5-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementaciones pueden optar por tener un comportamiento similar para los cambios de propiedad de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-275">Las propiedades en cualquier las clases derivan de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-276">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-277">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-278">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-279">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-279">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-280">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-281">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-282">Obtiene o establece un valor que indica si una propiedad de dependencia afecta potencialmente al paso de medición del diseño de su elemento principal durante las operaciones del motor de diseño.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="1c8f5-283"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos afecta potencialmente al paso de medición, específicamente en su elemento principal; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-283"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-284"><xref:System.Windows.FrameworkElement> y <xref:System.Windows.FrameworkContentElement> incluyen una implementación de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> que supervisa los cambios de valor efectivo en todas las propiedades de dependencia que existen en un elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="1c8f5-285">Como parte de esa lógica, las propiedades de dependencia que cambian en vigor, valor y tienen los metadatos con <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> establecido en `true` iniciará una solicitud diferida para invalidar los elementos visuales del elemento primario.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="1c8f5-286">Dado que esta implementación de nivel de marco WPF ya está en su lugar, normalmente no es necesario buscar las propiedades de dependencia con <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> a menos que esencialmente va a reemplazar o modificar el comportamiento de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="1c8f5-287">Por lo general, no es necesario para notificar los cambios de un <xref:System.Windows.FrameworkElement> propiedad a un elemento primario mediante <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> porque el propio elemento ya tendría su propia <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> como `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="1c8f5-288">Que generalmente es suficiente, ya que los cambios en el elemento secundario generalmente inician un paso de medida primario cuando corresponda.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="1c8f5-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> a veces se usa para un <xref:System.Windows.FrameworkContentElement> clase derivada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="1c8f5-290">En este caso, los conjuntos de elementos secundarios una propiedad, pero un <xref:System.Windows.FrameworkContentElement> clase derivada no controla su propia representación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="1c8f5-291">La representación se controla mediante un <xref:System.Windows.FrameworkElement> elemento primario que actúa como host de contenido.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="1c8f5-292">Por ejemplo, un cambio en el valor de la <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> propiedad por un elemento secundario invalida la medición del elemento primario, porque el espaciado de párrafos relativo podría cambiar y puede aumentar o disminuir el tamaño del host de contenido.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="1c8f5-293">Por lo tanto, el <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> propiedad tiene metadatos donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-294">Elementos host de contenido también suelen buscar cambios en las propiedades de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> es `true`, como parte de la lógica de procesamiento de host de contenido.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="1c8f5-295">Por ejemplo, el <xref:System.Windows.Controls.TextBox> elemento debe responder a algunos cambios del texto que pueden requerir que el cuadro de límite de la <xref:System.Windows.Controls.TextBox> sí se puede cambiar.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="1c8f5-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementaciones pueden optar por tener un comportamiento similar para los cambios de propiedad de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-297">Las propiedades en cualquier las clases derivan de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-298">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-299">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-300">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-301">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-301">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-302">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-303">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-304">Obtiene o establece un valor que indica si una propiedad de dependencia afecta potencialmente al diseño general de alguna manera que no influye en concreto en la organización o medición, pero requeriría volver a dibujar.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span></span></summary>
        <value><span data-ttu-id="1c8f5-305"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos afecta a la representación; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-305"><see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-306">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-306">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-307"><xref:System.Windows.FrameworkElement> y <xref:System.Windows.FrameworkContentElement> incluyen una implementación de <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> que supervisa los cambios de valor efectivo en todas las propiedades de dependencia que existen en un elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="1c8f5-308">Como parte de esa lógica, las propiedades de dependencia que cambian en vigor, valor y tienen los metadatos con <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> establecido en `true` iniciará una solicitud diferida para invalidar los elementos visuales de ese elemento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="1c8f5-309">Dado que esta implementación de nivel de marco WPF ya está en su lugar, normalmente no es necesario buscar las propiedades de dependencia con <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> a menos que esencialmente va a reemplazar o modificar el comportamiento de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="1c8f5-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementaciones pueden optar por tener un comportamiento similar para los cambios de propiedad de dependencia donde <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> es `true`.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="1c8f5-311">Las propiedades en cualquier las clases derivan de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-312">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-313">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-314">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-315">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-315">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-316">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-317">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-318">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-319">Obtiene o establece un valor que indica si la propiedad enlaza de manera bidireccional de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-319">Gets or sets a value that indicates whether the property binds two-way by default.</span></span></summary>
        <value><span data-ttu-id="1c8f5-320"><see langword="true" /> si la propiedad de dependencia en la que existen estos metadatos enlaza de manera bidireccional de forma predeterminada; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-320"><see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-321">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-321">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-322">En ausencia de esta propiedad está `true`, actualizaciones de enlaces son unidireccionales de manera predeterminada, según el comportamiento predeterminado de la <xref:System.Windows.Data.Binding> constructores o equivalente [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="1c8f5-323">En los elementos existentes, normalmente encontrará esta propiedad establecida en `true` en los metadatos de las propiedades de dependencia que notifican el estado y son modificables por acción del usuario, por ejemplo <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="1c8f5-324">Esta propiedad sólo notifica las características de actualización de enlace predeterminada de la propiedad de dependencia en general.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="1c8f5-325">Cualquier enlace establecido en esta propiedad en una instancia puede establecer localmente la <xref:System.Windows.Data.Binding.Mode%2A> propiedad del enlace y cambiar este comportamiento predeterminado.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="1c8f5-326">Las propiedades en cualquier las clases derivan de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-327">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-328">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-329">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-330">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-330">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-331">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-332">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-333">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-334">Obtiene o establece el valor predeterminado para que se use <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> cuando se aplican los enlaces de la propiedad con los metadatos, que tienen su enumeración <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> establecida en <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></summary>
        <value><span data-ttu-id="1c8f5-335">Valor de la enumeración, que no sea <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-336">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-337">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-338">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-339">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-340">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-340">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-341">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1c8f5-342">Esta propiedad está establecida en <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; el valor que establece se supone que se convierte en el valor predeterminado cuando lo solicitaron los enlaces.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-343">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-344">Obtiene o establece un valor que indica si el valor de la propiedad de dependencia es heredable.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span></span></summary>
        <value><span data-ttu-id="1c8f5-345"><see langword="true" /> si el valor de propiedad es heredable; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-345"><see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-346">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-346">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-347">Herencia de valores de propiedad es una característica de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades en el nivel de marco WPF, mediante el cual ciertas propiedades de dependencia se pueden establecer localmente en un elemento en o cerca de la raíz de un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] elemento de árbol y, a continuación, tiene su valor heredado por todos los elementos dentro del árbol lógico de los elementos secundarios que también poseen esa propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="1c8f5-348">Herencia de valores de propiedad no está habilitada de forma predeterminada y habilitarla tiene algunas implicaciones de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="1c8f5-349">Para obtener información detallada, consulte [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c8f5-350">Aunque podría parecer que la herencia de valores de propiedad funciona para las propiedades de dependencia, el comportamiento de herencia para una propiedad no asociada a través de ciertas divisiones de objeto del objeto en el árbol de tiempo de ejecución es indefinido.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="1c8f5-351">Utilice siempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar las propiedades donde especifique <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="1c8f5-352">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-353">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-354">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-355">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-356">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-356">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-357">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-358">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-359">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-360">Obtiene un valor que indica si el enlace de datos se admite en la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-360">Gets a value that indicates whether data binding is supported for the dependency property.</span></span></summary>
        <value><span data-ttu-id="1c8f5-361"><see langword="true" /> si el enlace de datos se admite en la propiedad de dependencia en la que se aplican los metadatos; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-361"><see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-362">El valor predeterminado es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-362">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-363">Esta propiedad notifica `false` para uno de dos condiciones posibles: cualquier enlace de datos a una propiedad de dependencia no está permitido porque la propiedad de dependencia es de solo lectura (como notificadas en el identificador de propiedad de dependencia, no los metadatos), o el valor de otra propiedad de metadatos, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, se establece en `true` en estos metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="1c8f5-364">Esta propiedad se expone como una comodidad para que los llamadores no tengan que comprobar ambos <xref:System.Windows.DependencyProperty.ReadOnly%2A> y <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="1c8f5-365">Si está intentando crear los metadatos que especifica que una propiedad de lectura/escritura en caso contrario, no debe admitir el enlace de datos, especifique el marcador <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (tenga en cuenta la ligera diferencia de convención de nomenclatura frente a <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="1c8f5-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-366">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-366">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-367">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c8f5-368">El siguiente ejemplo obtiene los metadatos predeterminados de dependencia de distintos campos de propiedades, consulta el valor de diversos <xref:System.Windows.FrameworkPropertyMetadata> propiedades en él y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="1c8f5-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-369">Obtiene o establece un valor que indica si la propiedad de dependencia admite enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span></span></summary>
        <value><span data-ttu-id="1c8f5-370"><see langword="true" /> si la propiedad no admite enlace de datos; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-370"><see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-371">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-371">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-372">Tenga en cuenta que esta propiedad de metadatos se establece en `true` específicamente para las propiedades que no se deben admitir el enlace de datos, a pesar de ser propiedades de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="1c8f5-373">La expectativa es que en la mayoría de los casos donde se declara una propiedad de dependencia, enlace de datos es el deseado, porque el enlace de datos es uno de los escenarios clave donde resulta útil una propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="1c8f5-374">A diferencia de <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, esto no cambia simplemente un valor predeterminado que se puede cambiar más adelante en un enlace específico.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="1c8f5-375">Al establecer esta propiedad `true` en los metadatos de una propiedad de dependencia metadatos deshabilitará todos los enlaces de aplicar sus valores a través de expresiones a esa propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="1c8f5-376">Las propiedades de dependencia de solo lectura no admiten el enlace de datos (porque no tienen ningún establecedor que se puede aplicar los valores modificados), pero seguirá informe `false` para <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="1c8f5-377">Esto es porque las propiedades que corresponden a un <xref:System.Windows.FrameworkPropertyMetadataOptions> valores informará de paridad con los metadatos de cómo se estableció en realidad, en lugar de informar siempre el comportamiento del resultado final que implique la nomenclatura de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="1c8f5-378">Para determinar si una propiedad de dependencia determinado permite el enlace de datos, normalmente se debe comprobar <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="1c8f5-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> resulta práctico para comprobar ambos <xref:System.Windows.DependencyProperty.ReadOnly%2A> y <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> como una sola operación, lo que produce el resultado esperado.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="1c8f5-380">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-381">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-382">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-383">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-384">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-384">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-385">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-386">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-387">Obtiene o establece un valor que indica si esta propiedad contiene información de registro en diario que las aplicaciones pueden o deben almacenar como parte de una implementación del diario.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span></span></summary>
        <value><span data-ttu-id="1c8f5-388"><see langword="true" /> si se debe realizar el registro en diario en la propiedad de dependencia a la que se aplican estos metadatos; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-388"><see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-389">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-389">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-390">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-391">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-392">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-393">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-394">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-394">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-395">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-396">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="1c8f5-397">Metadatos base para fusionar mediante combinación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-397">The base metadata to merge.</span></span></param>
        <param name="dp"><span data-ttu-id="1c8f5-398">Propiedad de dependencia que se aplica a estos metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-398">The dependency property this metadata is being applied to.</span></span></param>
        <summary><span data-ttu-id="1c8f5-399">Habilita una fusión mediante combinación de metadatos de origen con metadatos base.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-399">Enables a merge of the source metadata with base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-400">Este método se usa internamente cuando se invalida los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1c8f5-401">Las clases que derivan de <see cref="T:System.Windows.PropertyMetadata" /> (o esta clase en particular) deben invalidar este método para tener en cuenta las propiedades de metadatos que hayan agregado en sus implementaciones.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="1c8f5-402">Por ejemplo, su implementación podría haber agregado un nuevo valor de enumeración basada en marcas y el <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementación, a continuación, podrá combinar esos indicadores correctamente.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="1c8f5-403">Llame siempre a la implementación base antes de su propia implementación, ya que la implementación base se ocupa de combinar todas las propiedades ya definidas en tipos anteriores de la jerarquía.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span></span>  
  
<span data-ttu-id="1c8f5-404">El comportamiento agregado por el <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementación en <see cref="T:System.Windows.FrameworkPropertyMetadata" /> es que propiedades específicas de nivel de marco WPF en los metadatos como <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> se combinan en un bit a bit o de operación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span></span>  
  
<span data-ttu-id="1c8f5-405">El <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> comportamiento también implementa el comportamiento al invalidar los metadatos de propiedad en una propiedad de dependencia existente mediante una llamada a <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, mediante la invalidación de los metadatos que es <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="1c8f5-406">Propiedad de dependencia a la que se han aplicado los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-406">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="1c8f5-407">Tipo asociado a estos metadatos si se trata de metadatos específicos de tipo.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-407">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="1c8f5-408">Si se trata de los metadatos predeterminados, este valor puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-408">If this is default metadata, this value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="1c8f5-409">Se le llama cuando los metadatos se han aplicado a una propiedad, que indica que se sellan los metadatos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-410">Cualquier mutabilidad de la estructura de datos de un <xref:System.Windows.FrameworkPropertyMetadata> instancia debe marcarse como inmutable cuando se invoca este método.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="1c8f5-411">El <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementación de este método no hace nada más allá de una llamada a la implementación base.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-412">Obtiene o establece un valor que indica si la evaluación de la herencia del valor de propiedad se debe extender a algunos límites de contenido en el árbol lógico de elementos.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span></span></summary>
        <value><span data-ttu-id="1c8f5-413">Es <see langword="true" /> si la herencia del valor de propiedad se debe extender a algunos límites de contenido; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-413"><see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-414">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-414">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-415">Estos metadatos notifican una modificación rara vez aplica al comportamiento de herencia del valor de propiedad entre límites de elementos secundarios del elemento principal especial.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="1c8f5-416">El ejemplo canónico de este tipo de límite es el contenido de un <xref:System.Windows.Controls.Frame>, donde el <xref:System.Windows.Controls.Frame> contenido puede recargar independientemente de la existencia de la <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="1c8f5-417">El comportamiento del sistema de propiedad deseada es que la herencia de valores de propiedad no debe pasar el contenido de la <xref:System.Windows.Controls.Frame>, ya que este contenido podría ser elementos que la aplicación que hospeda el marco no posea o controle.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="1c8f5-418">Especificación de metadatos con <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> establecido en `true`, así como especificando <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> como `true`, hará que la propiedad que se aplican los metadatos para que sea heredable incluso en el <xref:System.Windows.Controls.Frame> límite o límites similares.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="1c8f5-419">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-420">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-421">Sin embargo, después de que los metadatos se consumen como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-422">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-423">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-423">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-424">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-425">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1c8f5-426">Obtiene o establece un valor que indica si las subpropiedades de la propiedad de dependencia no afectan a la representación del objeto contenedor.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span></span></summary>
        <value><span data-ttu-id="1c8f5-427"><see langword="true" /> si los cambios en los valores de la subpropiedad no afectan a la representación si ha cambiado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-427"><see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="1c8f5-428">El valor predeterminado es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-428">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c8f5-429">Esta opción de metadatos es pertinente para las propiedades de dependencia que son tipos de referencia, que ese tipo tiene valores de propiedad de su propio.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="1c8f5-430">Normalmente, la lógica del sistema de diseño es suponer que cualquier propiedad de dependencia con subpropiedades afectará potencialmente el diseño, porque la comprobación de todas las subpropiedades de cambios es requiere más tiempo que se ejecuta realmente otro paso de representación.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="1c8f5-431">Si esta opción `true` es útil para optimizar el rendimiento de la implementación de sistema de diseño de nivel de marco WPF.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="1c8f5-432">Las propiedades de las clases derivadas de <xref:System.Windows.PropertyMetadata> normalmente se definen en el modelo de objetos de lectura y escritura.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="1c8f5-433">Esto es por lo que se pueden ajustar después de la inicialización de la instancia.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="1c8f5-434">Sin embargo, una vez que se consumen los metadatos como parte de una llamada a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, el sistema de propiedades sellar esa instancia de metadatos y propiedades que contienen los detalles de los metadatos se consideran inmutables.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="1c8f5-435">Se intentó establecer esta propiedad después de <xref:System.Windows.PropertyMetadata.IsSealed%2A> es `true` en los metadatos de esta instancia genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="1c8f5-436">Uso de texto XAML</span><span class="sxs-lookup"><span data-stu-id="1c8f5-436">XAML Text Usage</span></span>  
 <span data-ttu-id="1c8f5-437">Los miembros de esta clase no se usan normalmente en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="1c8f5-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1c8f5-438">Los metadatos ya se aplicaron a una operación de propiedad de dependencia, por lo que están sellados y no se pueden establecer sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="1c8f5-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>