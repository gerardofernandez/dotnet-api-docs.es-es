<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc1a383fe21e6b9b549e0ccda7aa8c21c6f92d9f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37493668" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="5d493-101">Objeto en el que existe la propiedad.</span><span class="sxs-lookup"><span data-stu-id="5d493-101">The object that the property exists on.</span></span> <span data-ttu-id="5d493-102">Cuando se invoca la devolución de llamada, el sistema de propiedades pasará este valor.</span><span class="sxs-lookup"><span data-stu-id="5d493-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="5d493-103">Nuevo valor de la propiedad, antes de cualquier intento de conversión.</span><span class="sxs-lookup"><span data-stu-id="5d493-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="5d493-104">Proporciona una plantilla para un método al que se llama cuando se vuelve a evaluar el valor de una propiedad de dependencia o cuando se solicita específicamente la conversión.</span><span class="sxs-lookup"><span data-stu-id="5d493-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="5d493-105">Valor convertido (con el tipo apropiado).</span><span class="sxs-lookup"><span data-stu-id="5d493-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d493-106">Las devoluciones de llamada según <xref:System.Windows.CoerceValueCallback> puede asignarse a una propiedad de dependencia a través de varias técnicas diferentes.</span><span class="sxs-lookup"><span data-stu-id="5d493-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="5d493-107">Cada una de estas técnicas requiere que primero cree un nuevo objeto de metadatos de propiedad (<xref:System.Windows.PropertyMetadata>, o una clase derivada como <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="5d493-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="5d493-108">Crear el objeto de metadatos mediante una firma del constructor que toma el `coerceValueCallback` parámetro y asignar ese parámetro al controlador de devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="5d493-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="5d493-109">O generar los metadatos por cualquier firma y establezca el <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> propiedad antes de colocar los metadatos en uso.</span><span class="sxs-lookup"><span data-stu-id="5d493-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="5d493-110">Cuando tenga estos metadatos, puede:</span><span class="sxs-lookup"><span data-stu-id="5d493-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="5d493-111">Definir una nueva propiedad de dependencia en una nueva clase, utilizando cualquiera de las firmas de <xref:System.Windows.DependencyProperty.Register%2A>, lo que proporciona los metadatos como el `typeMetadata` valor.</span><span class="sxs-lookup"><span data-stu-id="5d493-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="5d493-112">Invalidar los metadatos (llamar a <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) para una propiedad de dependencia existente, al derivar de la clase que posee la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="5d493-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="5d493-113">Agregue una propiedad de dependencia existente a un nuevo <xref:System.Windows.DependencyObject> clase, utilizando los nuevos metadatos, mediante una llamada a <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="5d493-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="5d493-114">Las implementaciones de esta devolución de llamada deben comprobar el valor `baseValue` y determinar según el valor o el tipo si se trata de un valor que deba convertirse aún más.</span><span class="sxs-lookup"><span data-stu-id="5d493-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="5d493-115">El <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> para una dependencia se invoca cada vez que el sistema de propiedades o cualquier otro autor de llamada llama a la propiedad <xref:System.Windows.DependencyObject.CoerceValue%2A> en un <xref:System.Windows.DependencyObject> instancia, especificando el identificador de la propiedad como el `dp`.</span><span class="sxs-lookup"><span data-stu-id="5d493-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="5d493-116">Los cambios realizados en el valor de propiedad pueden proceder de cualquier posible participante en el sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="5d493-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="5d493-117">Esto incluye los estilos, invalidación genérica, desencadenadores, herencia de valores de propiedad y valor local.</span><span class="sxs-lookup"><span data-stu-id="5d493-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="5d493-118">Por lo general debe evitar especificar más de una <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> para cualquier propiedad de dependencia de dada (reemplaza o agrega con nuevos metadatos para una propiedad de dependencia que ya tenía un <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="5d493-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="5d493-119">Solo una de las devoluciones de llamada podrá actuar. La devolución de llamada que actúa será el que se aplicó a la clase más derivada en la herencia en comparación con el <xref:System.Windows.DependencyObject> llamador.</span><span class="sxs-lookup"><span data-stu-id="5d493-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="5d493-120">Cuando se invalidan los metadatos, se reemplazan otras devoluciones de llamada como asignadas a los metadatos para la propiedad de dependencia tal como se encontraban superior en la jerarquía del propietario.</span><span class="sxs-lookup"><span data-stu-id="5d493-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d493-121">El ejemplo siguiente incluye una implementación de esta devolución de llamada para convertir el valor almacenado de una propiedad de dependencia basado en otras entradas, como el valor de otra propiedad.</span><span class="sxs-lookup"><span data-stu-id="5d493-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="5d493-122">En este caso, la devolución de llamada comprueba si el `ShirtType` propiedad se corresponde con un tipo de camisa que tiene botones; si es así establece un color predeterminado inicial para el `ButtonColor`, si el tipo de la camisa no tiene ningún botón, convierte el `ButtonColor` valor a un valor inicial, lo que hace que el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (no mostrado) para quitar esa lista desplegable de las opciones efectivas.</span><span class="sxs-lookup"><span data-stu-id="5d493-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>