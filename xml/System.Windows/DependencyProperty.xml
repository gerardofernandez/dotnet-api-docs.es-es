<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="48e189814c9d38e818a9d416a18db9a92e096f66" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48623043" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8ff91-101">Representa una propiedad que se puede establecer a través de métodos como, por ejemplo, el estilo, el enlace de datos, la animación y la herencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-102">Un <xref:System.Windows.DependencyProperty> admite las siguientes capacidades de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="8ff91-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="8ff91-103">La propiedad puede establecerse en un estilo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-103">The property can be set in a style.</span></span> <span data-ttu-id="8ff91-104">Para obtener más información, consulte [Aplicar estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="8ff91-105">La propiedad puede establecerse mediante enlace de datos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-105">The property can be set through data binding.</span></span> <span data-ttu-id="8ff91-106">Para obtener más información sobre las propiedades de dependencia de enlace de datos, vea [Cómo: enlazar las propiedades de dos controles](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="8ff91-107">La propiedad puede establecerse con una referencia de recurso dinámico.</span><span class="sxs-lookup"><span data-stu-id="8ff91-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="8ff91-108">Para obtener más información, consulte [Recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="8ff91-109">La propiedad puede heredar automáticamente su valor de un elemento primario del árbol de elementos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="8ff91-110">Para más información, vea [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="8ff91-111">Se puede animar la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-111">The property can be animated.</span></span> <span data-ttu-id="8ff91-112">Para obtener más información, consulte [Información general sobre animaciones](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="8ff91-113">La propiedad puede notificar cuando ha cambiado el valor anterior de la propiedad y se puede convertir el valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="8ff91-114">Para obtener más información, consulte [Devoluciones de llamada y validación de las propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="8ff91-115">La propiedad notifica información a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], como si al cambiar un valor de propiedad necesario el sistema de diseño recomponga los elementos visuales de un elemento.</span><span class="sxs-lookup"><span data-stu-id="8ff91-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="8ff91-116">La propiedad recibe soporte técnico en el [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="8ff91-117">Por ejemplo, la propiedad se puede editar en el **propiedades** ventana.</span><span class="sxs-lookup"><span data-stu-id="8ff91-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="8ff91-118">Para obtener más información acerca de las propiedades de dependencia, vea [información general sobre las propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="8ff91-119">Si desea que las propiedades de los tipos personalizados para admitir las capacidades de la lista anterior, debe crear una propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="8ff91-120">Para obtener información sobre cómo crear propiedades de dependencia personalizadas, vea [propiedades de dependencia personalizadas](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="8ff91-121">Una propiedad adjunta es una propiedad que permite a cualquier objeto para notificar la información del tipo que define la propiedad adjunta.</span><span class="sxs-lookup"><span data-stu-id="8ff91-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="8ff91-122">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], cualquier tipo que hereda de <xref:System.Windows.DependencyObject> puede usar una propiedad adjunta, independientemente de si el tipo hereda del tipo que define la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="8ff91-123">Una propiedad adjunta es una característica de la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] lenguaje.</span><span class="sxs-lookup"><span data-stu-id="8ff91-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="8ff91-124">Para establecer una propiedad adjunta en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], utilice el *tipoDePropietario*.\* propertyName\* sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8ff91-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="8ff91-125">Un ejemplo de una propiedad adjunta es la <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8ff91-126">Si desea crear una propiedad que se puede usar en todos los <xref:System.Windows.DependencyObject> tipos, a continuación, debe crear una propiedad adjunta.</span><span class="sxs-lookup"><span data-stu-id="8ff91-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="8ff91-127">Para obtener más información sobre las propiedades adjuntas, incluido cómo crearlos, vea [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8ff91-128">Uso de atributos XAML</span><span class="sxs-lookup"><span data-stu-id="8ff91-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8ff91-129">Valores XAML</span><span class="sxs-lookup"><span data-stu-id="8ff91-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="8ff91-130">Una cadena que especifica la <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> de la propiedad de dependencia deseada.</span><span class="sxs-lookup"><span data-stu-id="8ff91-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="8ff91-131">Puede ir precedida por un prefijo de espacio de nombres XML si la propiedad no está en el espacio de nombres XML predeterminado (para obtener más información, consulte [los espacios de nombres XAML y Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="8ff91-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="8ff91-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="8ff91-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="8ff91-133">Una cadena que especifica un tipo de propietario de una propiedad de dependencia, un punto (.), el <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ff91-134">`ownerType` También puede ir precedido por un prefijo de espacio de nombres XML.</span><span class="sxs-lookup"><span data-stu-id="8ff91-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="8ff91-135">Este uso es específico para enlazadas estilos y plantillas, donde se debe especificar el propietario de la propiedad de dependencia para el contexto de análisis porque el `TargetType` todavía no se conoce.</span><span class="sxs-lookup"><span data-stu-id="8ff91-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="8ff91-136">Para obtener más información, consulte [Aplicar estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="8ff91-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="8ff91-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="8ff91-138">Cadena que especifica el propietario de una propiedad adjunta, un punto (.) seguido del nombre de propiedad adjunta.</span><span class="sxs-lookup"><span data-stu-id="8ff91-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="8ff91-139">`attachedPropertyOwnerType` También puede ir precedido por un prefijo de espacio de nombres XML.</span><span class="sxs-lookup"><span data-stu-id="8ff91-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-140">Agrega otro tipo como propietario de una propiedad de dependencia que ya está registrada en un tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="8ff91-141">Tipo que se va a agregar como propietario de esta propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-141">The type to add as an owner of this dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-142">Agrega otro tipo como propietario de una propiedad de dependencia que ya está registrada.</span><span class="sxs-lookup"><span data-stu-id="8ff91-142">Adds another type as an owner of a dependency property that has already been registered.</span></span></summary>
        <returns><span data-ttu-id="8ff91-143">Referencia al identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="8ff91-144">Este identificador debe exponerse mediante la adición de la clase como un campo <see langword="public static readonly" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-145">Este método permite que el sistema de propiedades para que reconozca una propiedad de dependencia en un tipo que no se registró inicialmente esa propiedad de dependencia determinado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="8ff91-146">Por lo general, <xref:System.Windows.DependencyProperty.AddOwner%2A> se usa para agregar las propiedades de dependencia para las clases que ya no exponen esa propiedad de dependencia a través de la herencia de clases administradas (herencia de clases haría que las propiedades de contenedor que se va a heredar la clase derivada y, por tanto, proporcionaría acceso general de la tabla de miembros para la propiedad de dependencia ya).</span><span class="sxs-lookup"><span data-stu-id="8ff91-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="8ff91-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> permite que el sistema de propiedades para que reconozca una propiedad de dependencia en un tipo que no se registró inicialmente esa propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="8ff91-148">Esta firma no permite especificar los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="8ff91-149">Cuando se usa este método, los metadatos se generan automáticamente para el nuevo <xref:System.Windows.DependencyProperty> y su tipo de propietario.</span><span class="sxs-lookup"><span data-stu-id="8ff91-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="8ff91-150">Los metadatos generados automáticamente están el resultado de los metadatos combinados de todos los tipos bases que tienen esta propiedad definida.</span><span class="sxs-lookup"><span data-stu-id="8ff91-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="8ff91-151">Si no hay metadatos combinados están disponible, se usan los metadatos predeterminados para la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="8ff91-152">Si la propiedad se registra mediante el <xref:System.Windows.DependencyProperty.RegisterAttached%2A> es igual que los metadatos que se crean al método y, a continuación, los metadatos predeterminados <xref:System.Windows.DependencyProperty.RegisterAttached%2A> llamó.</span><span class="sxs-lookup"><span data-stu-id="8ff91-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="8ff91-153">En caso contrario, el <xref:System.Windows.PropertyMetadata> objeto se crea con el <xref:System.Windows.PropertyMetadata.DefaultValue%2A> propiedad establecida en el valor predeterminado del tipo de propiedad y todas las demás propiedades de la <xref:System.Windows.PropertyMetadata> está establecido en `null`.</span><span class="sxs-lookup"><span data-stu-id="8ff91-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="8ff91-154">Use el <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> firma si desea proporcionar metadatos para la versión de la propiedad de dependencia tal como se agregan al tipo proporcionado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="8ff91-155">El valor devuelto de este método se utiliza normalmente para declarar y exponer la propiedad de dependencia mediante el almacenamiento de un identificador de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="8ff91-156">El identificador proporciona acceso a la propiedad de dependencia, si desea llamar al sistema de propiedades [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] frente a la propiedad de dependencia, especialmente porque existe en la clase de propietario de la adición.</span><span class="sxs-lookup"><span data-stu-id="8ff91-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="8ff91-157">El mismo nombre de propiedad para el propietario original y propietario agregado se debe usar para indicar una funcionalidad similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="8ff91-158">Debe usar el <xref:System.Windows.DependencyProperty> devolver el valor de la <xref:System.Windows.DependencyProperty.AddOwner%2A> método para definir el identificador de propiedad de dependencia y también para declarar [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] contenedores de propiedad, para las propiedades de dependencia que se agregan a los tipos mediante <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-159">El <xref:System.Windows.DependencyProperty.AddOwner%2A> se usa la metodología recomendada anteriormente al crear las propiedades de dependencia que se declaran dentro de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="8ff91-160">Por ejemplo, ambos <xref:System.Windows.Controls.Border> y <xref:System.Windows.Controls.Control> definir un `BorderBrush` propiedad de dependencia, que tienen una funcionalidad similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="8ff91-161"><xref:System.Windows.Controls.Control> define su `BorderBrush` propiedad al sistema de propiedades mediante una llamada a <xref:System.Windows.DependencyProperty.AddOwner%2A> basándose en el propietario original <xref:System.Windows.Controls.Border> y su registrados <xref:System.Windows.Controls.Border.BorderBrushProperty> identificador de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="8ff91-162">El <xref:System.Windows.DependencyProperty.AddOwner%2A> devolver valor, a continuación, se usa para establecer un nuevo estático <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) para esa propiedad en el propietario agregado y un `BorderBrush` también se declara el contenedor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="8ff91-163">Tipo que se va a agregar como propietario de esta propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-163">The type to add as owner of this dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-164">Metadatos que califican la propiedad de dependencia tal como existe en el tipo proporcionado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-164">The metadata that qualifies the dependency property as it exists on the provided type.</span></span></param>
        <summary><span data-ttu-id="8ff91-165">Agrega otro tipo como propietario de una propiedad de dependencia que ya se ha registrado y ofrece los metadatos de propiedad de dependencia para la propiedad de dependencia como se verá en el tipo de propietario proporcionado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-166">Referencia al identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="8ff91-167">Este identificador debe exponerse mediante la adición de la clase como un campo <see langword="public static readonly" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-168">Este método permite que el sistema de propiedades para que reconozca una propiedad de dependencia en un tipo que no se registró inicialmente esa propiedad de dependencia determinado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="8ff91-169">El valor devuelto de este método se utiliza para declarar y exponer la propiedad de dependencia, especialmente, tal como existe en la clase de propietario de la adición.</span><span class="sxs-lookup"><span data-stu-id="8ff91-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="8ff91-170">Por lo general, se debe usar el mismo nombre de propiedad para el propietario original y propietario agregado para indicar una funcionalidad similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="8ff91-171">Es recomendable exponer los identificadores, así como nuevos [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] contenedores de propiedad, para las propiedades de dependencia que se agregan a los tipos mediante <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-172">El <xref:System.Windows.DependencyProperty.AddOwner%2A> se usa la metodología recomendada anteriormente al crear [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declarados dentro de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="8ff91-173">Por ejemplo, ambos <xref:System.Windows.Controls.Border> y <xref:System.Windows.Controls.Control> definir un `BorderBrush` propiedad de dependencia, que tienen una funcionalidad similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="8ff91-174"><xref:System.Windows.Controls.Control> define su `BorderBrush` propiedad al sistema de propiedades mediante una llamada a <xref:System.Windows.DependencyProperty.AddOwner%2A> propietario original <xref:System.Windows.Controls.Border> y su registrados <xref:System.Windows.Controls.Border.BorderBrushProperty> identificador de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="8ff91-175">El <xref:System.Windows.DependencyProperty.AddOwner%2A> devolver valor, a continuación, se usa para establecer una variable static <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) para esa propiedad en el propietario agregado y un `BorderBrush` también se declara el contenedor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="8ff91-176">Identificador de propiedad de dependencia del propietario agregado se debe usar para operaciones tales como <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="8ff91-177">Sin embargo, operaciones específicas del tipo que implican tipos o instancias de la clase que se ha agregado como propietario con distintos metadatos seguirán devolverán la incluso si los resultados esperados original (no se ha agregado del propietario) se especifica el identificador de propiedad de dependencia en las llamadas a métodos como <xref:System.Windows.DependencyObject.GetValue%2A> o <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="8ff91-178">Los metadatos para el propietario agregado se perpetúan por la <xref:System.Windows.DependencyProperty.AddOwner%2A> llamar a sí mismo, no necesariamente hace referencia a exclusivamente el campo de identificador de clase de propietario de la adición.</span><span class="sxs-lookup"><span data-stu-id="8ff91-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="8ff91-179">No obstante, es recomendable para exponer el identificador, así como nuevo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] contenedores de propiedad, para las propiedades de dependencia que se agregan a los tipos mediante <xref:System.Windows.DependencyProperty.AddOwner%2A>, porque de lo contrario, crea la disparidad entre el [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] y [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representaciones de sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="8ff91-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="8ff91-180">Los metadatos proporcionados se combinan con los metadatos de propiedad para la propiedad de dependencia tal como existe en el propietario de la base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="8ff91-181">Se conservará cualquier característica que se especificaron en los metadatos base original.</span><span class="sxs-lookup"><span data-stu-id="8ff91-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="8ff91-182">Sólo las características que se cambiaron específicamente en los nuevos metadatos invalidarán las características de los metadatos base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="8ff91-183">Algunas características, tales como <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, se reemplazan si se especifican en los nuevos metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="8ff91-184">Otros, como <xref:System.Windows.PropertyChangedCallback>, se combinan.</span><span class="sxs-lookup"><span data-stu-id="8ff91-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="8ff91-185">En última instancia, el comportamiento de combinación depende de que se usa para la invalidación, por lo que es el comportamiento descrito aquí para las clases de metadatos de propiedad existentes utilizadas por el tipo de metadatos de propiedad [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="8ff91-186">Para obtener más información, consulte [los metadatos de propiedad de dependencia](~/docs/framework/wpf/advanced/dependency-property-metadata.md) y [metadatos de propiedad de marco de trabajo](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-187">Obtiene los metadatos predeterminados de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-187">Gets the default metadata of the dependency property.</span></span></summary>
        <value><span data-ttu-id="8ff91-188">Metadatos predeterminados de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-188">The default metadata of the dependency property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-189">Los metadatos predeterminados son los metadatos de propiedad que están disponible para ese objeto concreto o un objeto de un tipo derivado donde no hay metadatos alternativos proporcionó explícita <xref:System.Windows.DependencyProperty.Register%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> llamar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="8ff91-190">Si el propietario original aplica metadatos a la primera <xref:System.Windows.DependencyProperty.Register%2A> llamada que es necesario establecer la propiedad de dependencia, a continuación, los metadatos se devuelven como <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-191">Si no hay metadatos se aplican en el original <xref:System.Windows.DependencyProperty.Register%2A> llamar, a continuación, se generan los metadatos desde el <xref:System.Windows.DependencyProperty.Register%2A> llamada y este valor se devuelve como el <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-192">El propósito principal de tener los metadatos predeterminados asociados con un <xref:System.Windows.DependencyProperty> consiste en proporcionar un valor predeterminado para esta propiedad en cualquier <xref:System.Windows.DependencyObject> o un tipo derivado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="8ff91-193">Para las propiedades no son asociadas, no se puede convertir el tipo de metadatos devuelto por esta propiedad para los tipos derivados de <xref:System.Windows.PropertyMetadata> escribe, incluso si la propiedad se registró originalmente con un tipo de metadatos derivadas.</span><span class="sxs-lookup"><span data-stu-id="8ff91-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="8ff91-194">Si desea que los metadatos registrados originalmente, incluidos el tipo de metadatos derivadas posiblemente original, llame a <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> en su lugar, pasando el registro original escriba como un parámetro.</span><span class="sxs-lookup"><span data-stu-id="8ff91-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="8ff91-195">Para las propiedades adjuntas, el tipo de los metadatos devueltos por esta propiedad coincidirá con el tipo especificado en el original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> método de registro.</span><span class="sxs-lookup"><span data-stu-id="8ff91-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff91-196">Devuelve un código hash para esta <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="8ff91-197">Código hash de esta <see cref="T:System.Windows.DependencyProperty" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-198">El sistema de propiedades usa su propio identificador único <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, y devuelve el valor de la propiedad <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-199">Devuelve los metadatos asociados a esta propiedad de dependencia tal como existe para un tipo específico.</span><span class="sxs-lookup"><span data-stu-id="8ff91-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span></span> <span data-ttu-id="8ff91-200">Este puede ser el tipo en el que la propiedad de dependencia se registró por primera vez, uno al que se agregó posteriormente o uno en el que se obtuvo la propiedad de dependencia a través de la herencia, pero en el que los metadatos se invalidaron específicamente.</span><span class="sxs-lookup"><span data-stu-id="8ff91-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="8ff91-201">El tipo específico del que se deben recuperar los metadatos de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-201">The specific type from which to retrieve the dependency property metadata.</span></span></param>
        <summary><span data-ttu-id="8ff91-202">Devuelve los metadatos de esta propiedad de dependencia tal como existe en un tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-203">Objeto de metadatos de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-203">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-204">Especificar el tipo o una referencia de objeto para usar como tipo es necesario porque los metadatos pueden variar desde el registro original debido a <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> llamadas que modifican los metadatos de la propiedad de dependencia tal como existe en un tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-205">El ejemplo siguiente obtiene los metadatos para una propiedad de dependencia según su tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="8ff91-206">El tipo se obtiene mediante una `typeof` operador.</span><span class="sxs-lookup"><span data-stu-id="8ff91-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="8ff91-207">Objeto de dependencia que se comprueba para el tipo, para determinar de qué versión específica del tipo de la propiedad de dependencia deben proceder los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span></span></param>
        <summary><span data-ttu-id="8ff91-208">Devuelve los metadatos de esta propiedad de dependencia tal como existe en la instancia de objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span></span></summary>
        <returns><span data-ttu-id="8ff91-209">Objeto de metadatos de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-209">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-210">Especifica el tipo o una referencia de objeto es necesaria porque los metadatos de cualquier propiedad de dependencia pueden variar desde el registro original debido a <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> las llamadas que se pueden refinar los metadatos de propiedad, tal como existe en un tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="8ff91-211">Al solicitar los metadatos de propiedad basados en una instancia, que está pasando simplemente la instancia para que se puede evaluar su tipo internamente.</span><span class="sxs-lookup"><span data-stu-id="8ff91-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="8ff91-212">Los metadatos de propiedad de dependencia no varían por instancia; es siempre coherente para cualquier combinación de propiedades de tipo especificada.</span><span class="sxs-lookup"><span data-stu-id="8ff91-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-213">El ejemplo siguiente obtiene los metadatos para una propiedad de dependencia basado en un determinado <xref:System.Windows.DependencyObject> instancia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType"><span data-ttu-id="8ff91-214">Objeto específico que registra el tipo de objeto de dependencia del que se quieren obtener los metadatos de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span></span></param>
        <summary><span data-ttu-id="8ff91-215">Devuelve los metadatos de esta propiedad de dependencia tal como existe en un tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-215">Returns the metadata for this dependency property as it exists on a specified type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-216">Objeto de metadatos de una propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-216">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-217">Especifica el tipo o una referencia de objeto es necesaria porque los metadatos de cualquier propiedad de dependencia pueden variar desde el registro original debido a <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> las llamadas que se pueden refinar los metadatos de propiedad, tal como existe en un tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-218">El ejemplo siguiente obtiene los metadatos para una propiedad de dependencia en función de su <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-219">Obtiene un valor generado internamente que identifica exclusivamente la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-219">Gets an internally generated value that uniquely identifies the dependency property.</span></span></summary>
        <value><span data-ttu-id="8ff91-220">Identificador numérico único.</span><span class="sxs-lookup"><span data-stu-id="8ff91-220">A unique numeric identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-221">Este valor es un entero, no un identificador único global (GUID).</span><span class="sxs-lookup"><span data-stu-id="8ff91-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="8ff91-222">Por lo general, no es necesario utilizar este valor de índice, y no hay ningún índice acceso a las tablas de todas las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="8ff91-223">En su lugar los campos de identificador deben hacer referencia a las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="8ff91-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> se usa internamente para acelerar el acceso a estructuras de datos que usan el <xref:System.Windows.DependencyProperty.GlobalIndex%2A> como un índice de matriz basada en cero.</span><span class="sxs-lookup"><span data-stu-id="8ff91-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="8ff91-225">Un uso similar podría tener aplicaciones de diseñadores o herramientas.</span><span class="sxs-lookup"><span data-stu-id="8ff91-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ff91-226">El valor que se va a comprobar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-226">The value to check.</span></span></param>
        <summary><span data-ttu-id="8ff91-227">Determina si un valor especificado es aceptable para el tipo de esta propiedad de dependencia, como se ha comprobado en el tipo de propiedad proporcionado en el registro de propiedad de dependencia original.</span><span class="sxs-lookup"><span data-stu-id="8ff91-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span></span></summary>
        <returns><span data-ttu-id="8ff91-228">Es <see langword="true" /> si el valor especificado es el tipo de propiedad registrado o un tipo derivado aceptable; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-228"><see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-229">Un valor de `null` es un tipo válido para las propiedades de dependencia de tipo de referencia, o para un <xref:System.Nullable%601> propiedad de dependencia y devolvería `true` para estos casos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="8ff91-230">En casos donde la propiedad de dependencia es ni una referencia ni un <xref:System.Nullable%601> tipo, <xref:System.Windows.DependencyProperty.IsValidType%2A> devolverá `false` para un valor null en lugar de generar una excepción.</span><span class="sxs-lookup"><span data-stu-id="8ff91-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-231">En el ejemplo siguiente se usa <xref:System.Windows.DependencyProperty.IsValidType%2A> como una comprobación antes de llamar a <xref:System.Windows.DependencyObject.SetValue%2A> en la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ff91-232">El valor que se va a comprobar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-232">The value to check.</span></span></param>
        <summary><span data-ttu-id="8ff91-233">Determina si el valor proporcionado se acepta para el tipo de propiedad mediante la comprobación de tipo básico y, potencialmente, si está comprendido en el intervalo permitido de valores de ese tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-234">Es <see langword="true" /> si el valor es aceptable y es del tipo correcto o un tipo derivado; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-234"><see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-235">Para una propiedad de dependencia, se puede especificar un intervalo permitido de valores para ese tipo a través de un <xref:System.Windows.ValidateValueCallback> que se proporciona en el registro de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="8ff91-236">Este método llama a <xref:System.Windows.DependencyProperty.IsValidType%2A> internamente.</span><span class="sxs-lookup"><span data-stu-id="8ff91-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="8ff91-237">Si la propiedad de dependencia en cuestión no tiene ningún <xref:System.Windows.ValidateValueCallback>, a continuación, llamar a este método es equivalente a llamar a <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="8ff91-238">Si la propiedad de dependencia tiene un <xref:System.Windows.ValidateValueCallback>y si <xref:System.Windows.DependencyProperty.IsValidType%2A> habría devuelto `true`, a continuación, el valor devuelto será como se implementa en la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="8ff91-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="8ff91-239">Un valor null es un valor válido para las propiedades de dependencia de tipo de referencia, o para un <xref:System.Nullable%601> propiedad de dependencia y devolvería `true` para estos casos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="8ff91-240">En casos donde la propiedad de dependencia es ni una referencia ni un <xref:System.Nullable%601> tipo, <xref:System.Windows.DependencyProperty.IsValidType%2A> devolverá `false` para un valor null en lugar de generar una excepción.</span><span class="sxs-lookup"><span data-stu-id="8ff91-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-241">En el ejemplo siguiente se usa <xref:System.Windows.DependencyProperty.IsValidValue%2A> como una comprobación antes de llamar a <xref:System.Windows.DependencyObject.SetValue%2A> en la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-242">Obtiene el nombre de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-242">Gets the name of the dependency property.</span></span></summary>
        <value><span data-ttu-id="8ff91-243">Nombre de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-243">The name of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-244">Esta propiedad obtiene el nombre proporcionado como el `name` parámetro durante el registro de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="8ff91-245">Este nombre es inmutable y no puede ser `null` o una cadena vacía.</span><span class="sxs-lookup"><span data-stu-id="8ff91-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="8ff91-246">No se permiten registros de nombre duplicado en el mismo tipo de propietario e inician una excepción al intentar registrar el duplicado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8ff91-247">El <xref:System.Windows.DependencyProperty.Name%2A> de una dependencia de propiedad debe seguir la convención de que coincida con el nombre de su identificador de propiedad de dependencia sin el sufijo "Property".</span><span class="sxs-lookup"><span data-stu-id="8ff91-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="8ff91-248">Para obtener más información, consulte [Propiedades de dependencia personalizadas](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-249">El ejemplo siguiente consulta varias características de un identificador de propiedad de dependencia, incluida la <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-250">Proporciona los metadatos alternativos para esta propiedad de dependencia cuando se encuentra en instancias de un tipo especificado, frente a los metadatos que se proporcionaron en el registro inicial de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="8ff91-251">Tipo en el que se hereda esta propiedad de dependencia y donde se aplicarán los metadatos alternativos proporcionados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-252">Metadatos que se deben aplicar a la propiedad de dependencia en el tipo de reemplazo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-252">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <summary><span data-ttu-id="8ff91-253">Especifica los metadatos alternativos para esta propiedad de dependencia cuando se encuentra en instancias de un tipo especificado y reemplaza los metadatos existentes para la propiedad de dependencia tal y como se heredó de los tipos base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-254">Antes de que el sistema de propiedades utilice la propiedad de dependencia, se deben invalidar los metadatos de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="8ff91-255">Esto equivale a la vez que se crean instancias específicas mediante la clase que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="8ff91-256">Las llamadas a <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> solo debe realizarse dentro de los constructores estáticos del tipo que se proporciona como el `forType` parámetro de este método, o a través de la creación de instancias similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="8ff91-257">Al intentar cambiar los metadatos después de que existan instancias del tipo de propietario no producirá excepciones, pero generará comportamientos incoherentes en el sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="8ff91-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="8ff91-258">Después de establecer los metadatos para una invalidación de la clase derivada concreta con este método, los intentos posteriores de invalidar metadatos en esta misma clase derivada, producirán una excepción.</span><span class="sxs-lookup"><span data-stu-id="8ff91-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="8ff91-259">Los metadatos proporcionados se combinan con los metadatos de propiedad para la propiedad de dependencia tal como existe en el propietario de la base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="8ff91-260">Se conservará cualquier característica que se especificaron en los metadatos base originales; sólo las características que se cambiaron específicamente en los nuevos metadatos invalidarán las características de los metadatos base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="8ff91-261">Algunas características como <xref:System.Windows.PropertyMetadata.DefaultValue%2A> se reemplazan si se especifica en los nuevos metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="8ff91-262">Otros, como <xref:System.Windows.PropertyChangedCallback>, se combinan.</span><span class="sxs-lookup"><span data-stu-id="8ff91-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="8ff91-263">En última instancia, el comportamiento de combinación depende de que se usa para la invalidación, por lo que es el comportamiento descrito aquí para las clases de metadatos de propiedad existentes utilizadas por el tipo de metadatos de propiedad [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] las propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="8ff91-264">Para obtener más información, consulte [los metadatos de propiedad de dependencia](~/docs/framework/wpf/advanced/dependency-property-metadata.md) y [metadatos de propiedad de marco de trabajo](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ff91-265">Se intentaron reemplazar los metadatos en una propiedad de dependencia de solo lectura (esa operación no se puede realizar con esta signatura).</span><span class="sxs-lookup"><span data-stu-id="8ff91-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ff91-266">Los metadatos ya se establecieron para la propiedad de dependencia tal como existe en el tipo proporcionado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-266">Metadata was already established for the dependency property as it exists on the provided type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="8ff91-267">Tipo en el que se hereda esta propiedad de dependencia y donde se aplicarán los metadatos alternativos proporcionados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-268">Metadatos que se deben aplicar a la propiedad de dependencia en el tipo de reemplazo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-268">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <param name="key"><span data-ttu-id="8ff91-269">Clave de acceso para una propiedad de dependencia de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-269">The access key for a read-only dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-270">Proporciona los metadatos alternativos para una propiedad de dependencia de solo lectura cuando se encuentra en instancias de un tipo especificado y reemplaza los metadatos que se proporcionaron en el registro inicial de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span></span> <span data-ttu-id="8ff91-271">Debe pasar <see cref="T:System.Windows.DependencyPropertyKey" /> para que la propiedad de dependencia de sólo lectura evite producir una excepción.</span><span class="sxs-lookup"><span data-stu-id="8ff91-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-272">Esta firma proporciona la implementación subyacente para un identificador de propiedad de dependencia de sólo lectura (<xref:System.Windows.DependencyPropertyKey>) método.</span><span class="sxs-lookup"><span data-stu-id="8ff91-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="8ff91-273">Si la invalidación de metadatos para una propiedad de dependencia de lectura y escritura, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="8ff91-274">Antes de que el sistema de propiedades utilice la propiedad de dependencia, se deben invalidar los metadatos de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="8ff91-275">Esto equivale a la vez que se crean objetos específicos de la clase que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="8ff91-276">Las llamadas a <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> solo debe realizarse dentro de los constructores estáticos del tipo que se proporciona como el `forType` parámetro de este método, o a través de la creación de instancias similar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="8ff91-277">Al intentar cambiar los metadatos después de que existan instancias del tipo de propietario no producirá excepciones, pero generará comportamientos incoherentes en el sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="8ff91-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="8ff91-278">Después de establecer los metadatos para una invalidación de la clase derivada concreta con este método, los intentos posteriores de invalidar metadatos en esta misma clase derivada, producirán una excepción.</span><span class="sxs-lookup"><span data-stu-id="8ff91-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="8ff91-279">Los metadatos proporcionados se combinan con los metadatos de propiedad para la propiedad de dependencia tal como existe en el propietario de la base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="8ff91-280">Se conservará cualquier característica que se especificaron en los metadatos base originales; sólo las características que se cambiaron específicamente en los nuevos metadatos invalidarán las características de los metadatos base.</span><span class="sxs-lookup"><span data-stu-id="8ff91-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="8ff91-281">Algunas características como <xref:System.Windows.PropertyMetadata.DefaultValue%2A> se reemplazan si se especifica en los nuevos metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="8ff91-282">Otros, como <xref:System.Windows.PropertyChangedCallback>, se combinan.</span><span class="sxs-lookup"><span data-stu-id="8ff91-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="8ff91-283">El comportamiento de combinación depende el tipo de metadatos de propiedad que se usa para la invalidación.</span><span class="sxs-lookup"><span data-stu-id="8ff91-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="8ff91-284">Para obtener más información, consulte [los metadatos de propiedad de dependencia](~/docs/framework/wpf/advanced/dependency-property-metadata.md) y [metadatos de propiedad de marco de trabajo](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-285">Obtiene el tipo del objeto que registró la propiedad de dependencia con el sistema de propiedades o se agregó a sí mismo como su propietario.</span><span class="sxs-lookup"><span data-stu-id="8ff91-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span></span></summary>
        <value><span data-ttu-id="8ff91-286">Tipo del objeto que registró la propiedad o se agregó a sí mismo como su propietario.</span><span class="sxs-lookup"><span data-stu-id="8ff91-286">The type of the object that registered the property or added itself as owner of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-287">Este valor se proporcionó durante el registro de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-287">This value was provided during property registration.</span></span> <span data-ttu-id="8ff91-288">El propietario será el tipo del registro original en el caso de un <xref:System.Windows.DependencyProperty> identificador generado a partir de un <xref:System.Windows.DependencyProperty.Register%2A> llamada o el tipo que se agregó a sí mismo como propietario en el caso de un <xref:System.Windows.DependencyProperty> identificador generado a partir de un <xref:System.Windows.DependencyProperty.AddOwner%2A> llamar a.</span><span class="sxs-lookup"><span data-stu-id="8ff91-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="8ff91-289">El <xref:System.Windows.DependencyProperty.OwnerType%2A> en cualquier <xref:System.Windows.DependencyProperty> es inmutable y no puede ser `null` en válido <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-290">En el ejemplo siguiente se obtiene el tipo de propietario en función de un identificador de propiedad de dependencia `dp`y, a continuación, obtiene los metadatos en el tipo de propietario de ese mismo identificador.</span><span class="sxs-lookup"><span data-stu-id="8ff91-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="8ff91-291">Esta operación es realmente equivalente a obtener <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> en `dp`.</span><span class="sxs-lookup"><span data-stu-id="8ff91-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-292">Obtiene el tipo que usa la propiedad de dependencia para su valor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-292">Gets the type that the dependency property uses for its value.</span></span></summary>
        <value><span data-ttu-id="8ff91-293">Clase <see cref="T:System.Type" /> del valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-293">The <see cref="T:System.Type" /> of the property value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-294">Esta propiedad indica el tipo de valor de la propiedad tal y como declara el registro original de la propiedad, a través de la `propertyType` parámetro.</span><span class="sxs-lookup"><span data-stu-id="8ff91-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="8ff91-295">Similar a la <xref:System.Windows.DependencyProperty.Name%2A>, el tipo de propiedad de una propiedad de dependencia es inmutable después del registro.</span><span class="sxs-lookup"><span data-stu-id="8ff91-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-296">El ejemplo siguiente consulta varias características de un identificador de propiedad de dependencia, incluida la <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="8ff91-297">La cadena de nombre de tipo de la <xref:System.Windows.DependencyProperty.PropertyType%2A> se obtiene desde el valor devuelto <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-298">Obtiene un valor que indica si la propiedad de dependencia identificada por esta instancia de <see cref="T:System.Windows.DependencyProperty" /> es una propiedad de dependencia de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span></span></summary>
        <value><span data-ttu-id="8ff91-299">Es <see langword="true" /> si la propiedad de dependencia es de sólo lectura; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ff91-299"><see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-300">Las propiedades de dependencia de solo lectura se registran en el sistema de propiedades mediante una llamada a la <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> método en contraposición a la <xref:System.Windows.DependencyProperty.Register%2A> método.</span><span class="sxs-lookup"><span data-stu-id="8ff91-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="8ff91-301">También se pueden registrar propiedades adjuntas como de solo lectura. consulte <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-302">Las propiedades de dependencia de solo lectura requieren un <xref:System.Windows.DependencyPropertyKey> identificador en lugar de un <xref:System.Windows.DependencyProperty> identificador para realizar operaciones de metadatos como invalidar los metadatos o establecer el valor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="8ff91-303">Si ha adquirido una colección de <xref:System.Windows.DependencyProperty> identificadores mediante una llamada a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> u otro [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] que expone los identificadores, compruebe el <xref:System.Windows.DependencyProperty.ReadOnly%2A> valor antes de intentar llamar a <xref:System.Windows.DependencyObject.SetValue%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> está utilizando identificador de propiedad de dependencia como un parámetro de entrada para comprobar que la propiedad de dependencia que representa el identificador no es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="8ff91-304">Si el valor de <xref:System.Windows.DependencyProperty.ReadOnly%2A> es `true` en una propiedad de dependencia, no hay ninguna manera programática para obtener una referencia a la <xref:System.Windows.DependencyPropertyKey> identificador de esa propiedad de dependencia de los metadatos o desde el <xref:System.Windows.DependencyProperty> identificador; el identificador debe estar disponible como un campo estático para poder llamar a <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> con respecto a una propiedad de dependencia de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="8ff91-305">Al crear una propiedad de dependencia personalizada y registrarlo como de solo lectura, debe definir solo un descriptor de acceso get de la [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] propiedad de contenedor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="8ff91-306">En caso contrario, la clase tendrá un modelo de objetos confuso para el contenedor de propiedad en comparación con el acceso a la propiedad de dependencia de respaldo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="8ff91-307">Para obtener más información, consulte [propiedades de dependencia personalizadas](~/docs/framework/wpf/advanced/custom-dependency-properties.md) o [las propiedades de dependencia de sólo lectura](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-308">En el ejemplo siguiente obtiene los metadatos predeterminados y las propiedades de identificador de propiedad de dependencia de distintos campos de propiedades de dependencia y usa la información para rellenar una tabla para implementar un "Explorador de metadatos".</span><span class="sxs-lookup"><span data-stu-id="8ff91-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-309">Registra una propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-309">Registers a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-310">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-310">The name of the dependency property to register.</span></span> <span data-ttu-id="8ff91-311">El nombre debe ser único dentro del espacio de nombres de registro del tipo de propietario.</span><span class="sxs-lookup"><span data-stu-id="8ff91-311">The name must be unique within the registration namespace of the owner type.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-312">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-312">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-313">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-313">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-314">Registra una propiedad de dependencia con el nombre de propiedad, el tipo de propiedad y el tipo de propietario especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-314">Registers a dependency property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-315">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-316">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-317">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-318">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-318">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-319">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-319">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-320">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-320">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-321">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-321">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-322">Registra una propiedad de dependencia con el nombre de la propiedad, el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="8ff91-323">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-324">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-325">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-326">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-326">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-327">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-327">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-328">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-328">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-329">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-329">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="8ff91-330">Referencia a una devolución de llamada que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="8ff91-331">Registra una propiedad de dependencia con los valores especificados de nombre de la propiedad, tipo de propiedad, tipo de propietario, metadatos de propiedad y una devolución de llamada de validación de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="8ff91-332">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-333">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-334">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-335">En el ejemplo siguiente se registra una propiedad de dependencia, incluida una devolución de llamada de validación (la definición de la devolución de llamada no se muestra; para obtener más información sobre la definición de la devolución de llamada, vea <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="8ff91-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-336">Registra una propiedad adjunta con el sistema de propiedades.</span><span class="sxs-lookup"><span data-stu-id="8ff91-336">Registers an attached property with the property system.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-337">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-337">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-338">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-338">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-339">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-339">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-340">Registra una propiedad adjunta con el nombre de propiedad, el tipo de propiedad y el tipo de propietario especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-340">Registers an attached property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="8ff91-341">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-342">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-343">Una propiedad adjunta es un concepto de propiedad definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8ff91-344">implementa propiedades adjuntas como propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-344">implements attached properties as dependency properties.</span></span> <span data-ttu-id="8ff91-345">Dado que el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] las propiedades adjuntas son propiedades de dependencia, pueden tener metadatos aplicados y que se pueden usar el sistema de propiedades general para operaciones como las características de diseño de informes.</span><span class="sxs-lookup"><span data-stu-id="8ff91-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="8ff91-346">Para más información, consulte la [información general sobre propiedades adjuntas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="8ff91-347">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-348">En el ejemplo siguiente se registra una propiedad adjunta en una clase abstracta mediante este <xref:System.Windows.DependencyProperty.RegisterAttached%2A> firma.</span><span class="sxs-lookup"><span data-stu-id="8ff91-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-349">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-349">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-350">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-350">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-351">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-351">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="8ff91-352">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-352">Property metadata for the dependency property.</span></span> <span data-ttu-id="8ff91-353">Esto puede incluir el valor predeterminado, así como otras características.</span><span class="sxs-lookup"><span data-stu-id="8ff91-353">This can include the default value as well as other characteristics.</span></span></param>
        <summary><span data-ttu-id="8ff91-354">Registra una propiedad adjunta con el nombre de la propiedad, el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="8ff91-355">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-356">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-357">Una propiedad adjunta es un concepto de propiedad definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8ff91-358">implementa propiedades adjuntas como propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-358">implements attached properties as dependency properties.</span></span> <span data-ttu-id="8ff91-359">Dado que el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] las propiedades adjuntas son propiedades de dependencia, pueden tener metadatos aplicados y que se pueden usar el sistema de propiedades general para operaciones como las características de diseño de informes.</span><span class="sxs-lookup"><span data-stu-id="8ff91-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="8ff91-360">Para más información, consulte la [información general sobre propiedades adjuntas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="8ff91-361">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="8ff91-362">Usar RegisterAttached para heredan las propiedades de dependencia</span><span class="sxs-lookup"><span data-stu-id="8ff91-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="8ff91-363">Un escenario concreto para registrar una propiedad de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> en lugar de <xref:System.Windows.DependencyProperty.Register%2A> es admitir la herencia de valores de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="8ff91-364">Debe registrar heredan las propiedades de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> incluso si la clase define los descriptores de acceso de contenedor de propiedades que exponen la propiedad de dependencia e incluso si no desea exponer los métodos estáticos Get \* y Set \* para proporcionar true adjunta compatibilidad con descriptores de acceso.</span><span class="sxs-lookup"><span data-stu-id="8ff91-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="8ff91-365">Aunque podría parecer que la herencia de valores de propiedad funciona para las propiedades de dependencia, el comportamiento de herencia para una propiedad no asociada a través de algunos límites de elementos en el árbol de tiempo de ejecución es indefinido.</span><span class="sxs-lookup"><span data-stu-id="8ff91-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="8ff91-366">Registra la propiedad como asociada, realmente hace que la propiedad adjunta una propiedad global para el sistema de propiedades y garantiza que la herencia de valores de propiedad funciona a través de todos los límites de un árbol de elementos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="8ff91-367">Utilice siempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar las propiedades donde especifique <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="8ff91-368">Para más información, vea [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-369">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-369">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-370">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-370">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-371">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-371">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="8ff91-372">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-372">Property metadata for the dependency property.</span></span> <span data-ttu-id="8ff91-373">Esto puede incluir el valor predeterminado, así como otras características.</span><span class="sxs-lookup"><span data-stu-id="8ff91-373">This can include the default value as well as other characteristics.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="8ff91-374">Referencia a una devolución de llamada que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="8ff91-375">Registra una propiedad adjunta con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación de valor especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="8ff91-376">Identificador de la propiedad de dependencia que se debe utilizar para establecer el valor de un campo <see langword="public static readonly" /> en la clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="8ff91-377">Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-378">Una propiedad adjunta es un concepto de propiedad definido por [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="8ff91-379">implementa propiedades adjuntas como propiedades de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-379">implements attached properties as dependency properties.</span></span> <span data-ttu-id="8ff91-380">Dado que el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] las propiedades adjuntas son propiedades de dependencia, pueden tener metadatos aplicados y que se pueden usar el sistema de propiedades general para operaciones como las características de diseño de informes.</span><span class="sxs-lookup"><span data-stu-id="8ff91-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="8ff91-381">Para más información, consulte la [información general sobre propiedades adjuntas](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="8ff91-382">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="8ff91-383">Usar RegisterAttached para heredan las propiedades de dependencia</span><span class="sxs-lookup"><span data-stu-id="8ff91-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="8ff91-384">Un escenario concreto para registrar una propiedad de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> en lugar de <xref:System.Windows.DependencyProperty.Register%2A> es admitir la herencia de valores de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="8ff91-385">Debe registrar heredan las propiedades de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> incluso si la clase define los descriptores de acceso de contenedor de propiedades que exponen la propiedad de dependencia e incluso si no desea exponer los métodos estáticos Get \* y Set \* para proporcionar true adjunta compatibilidad con descriptores de acceso.</span><span class="sxs-lookup"><span data-stu-id="8ff91-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="8ff91-386">Aunque podría parecer que la herencia de valores de propiedad funciona para las propiedades de dependencia, el comportamiento de herencia para una propiedad no asociada a través de algunos límites de elementos en el árbol de tiempo de ejecución es indefinido.</span><span class="sxs-lookup"><span data-stu-id="8ff91-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="8ff91-387">Registra la propiedad como asociada, realmente hace que la propiedad adjunta una propiedad global para el sistema de propiedades y garantiza que la herencia de valores de propiedad funciona a través de todos los límites de un árbol de elementos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="8ff91-388">Utilice siempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar las propiedades donde especifique <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="8ff91-389">Para más información, vea [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-390">En el ejemplo siguiente se registra una propiedad adjunta en una clase abstracta mediante este <xref:System.Windows.DependencyProperty.RegisterAttached%2A> firma.</span><span class="sxs-lookup"><span data-stu-id="8ff91-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="8ff91-391">Esta propiedad adjunta es una propiedad de tipo de enumeración y el registro agrega una devolución de llamada de validación para comprobar que el valor proporcionado es un valor de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="8ff91-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-392">Registra una propiedad adjunta de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-392">Registers a read-only attached property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-393">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-393">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-394">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-394">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-395">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-395">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="8ff91-396">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-396">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-397">Registra una propiedad adjunta de solo lectura, con el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="8ff91-398">Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia más tarde.</span><span class="sxs-lookup"><span data-stu-id="8ff91-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-399">Este método devuelve el tipo <xref:System.Windows.DependencyPropertyKey>, mientras que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> devuelve el tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="8ff91-400">Normalmente, no se hacen públicas, las claves que representan las propiedades de solo lectura porque las claves se pueden usar para establecer el valor de propiedad de dependencia mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="8ff91-401">El diseño de clase afectará a sus requisitos, pero generalmente se recomienda limitar el acceso y la visibilidad de cualquier <xref:System.Windows.DependencyPropertyKey> a sólo aquellas partes del código que son necesarias para establecer esa propiedad de dependencia como parte de la clase o una aplicación lógica.</span><span class="sxs-lookup"><span data-stu-id="8ff91-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="8ff91-402">También se recomienda que exponga un identificador de propiedad de dependencia para la propiedad de dependencia de solo lectura, exponiendo el valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como un `public static readonly` campo en su clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="8ff91-403">Solo lectura de las propiedades adjuntas son un escenario poco frecuente, porque el escenario principal para una propiedad adjunta es su uso en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="8ff91-404">Sin un establecedor público, no se puede establecer una propiedad adjunta [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8ff91-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="8ff91-405">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="8ff91-406">Usar RegisterAttached para heredan las propiedades de dependencia</span><span class="sxs-lookup"><span data-stu-id="8ff91-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="8ff91-407">Adjunto es un escenario concreto para registrar una propiedad de dependencia como admitir la herencia de valores de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="8ff91-408">Debe registrar heredan las propiedades de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> incluso si la clase define los descriptores de acceso de contenedor de propiedades que exponen la propiedad de dependencia e incluso si no desea exponer los métodos estáticos Get \* y Set \* para proporcionar true adjunta compatibilidad con descriptores de acceso.</span><span class="sxs-lookup"><span data-stu-id="8ff91-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="8ff91-409">Aunque podría parecer que la herencia de valores de propiedad funciona para las propiedades de dependencia, el comportamiento de herencia para una propiedad no asociada a través de algunos límites de elementos en el árbol de tiempo de ejecución es indefinido.</span><span class="sxs-lookup"><span data-stu-id="8ff91-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="8ff91-410">Registra la propiedad como asociada, realmente hace que la propiedad adjunta una propiedad global para el sistema de propiedades y garantiza que la herencia de valores de propiedad funciona a través de todos los límites de un árbol de elementos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="8ff91-411">Utilice siempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar las propiedades donde especifique <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="8ff91-412">Para más información, vea [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-413">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-413">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-414">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-414">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-415">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-415">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="8ff91-416">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-416">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="8ff91-417">Referencia a una devolución de llamada creada por el usuario que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="8ff91-418">Registra una propiedad adjunta de solo lectura, con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="8ff91-419">Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-420">Este método devuelve el tipo <xref:System.Windows.DependencyPropertyKey>, mientras que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> devuelve el tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="8ff91-421">Normalmente, las claves que representan el tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="8ff91-422">Normalmente, no se hacen públicas, las claves que representan las propiedades de solo lectura porque las claves se pueden usar para establecer el valor de propiedad de dependencia mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="8ff91-423">El diseño de clase afectará a sus requisitos, pero generalmente se recomienda limitar el acceso y la visibilidad de cualquier <xref:System.Windows.DependencyPropertyKey> a sólo aquellas partes del código que son necesarias para establecer esa propiedad de dependencia como parte de la clase o una aplicación lógica.</span><span class="sxs-lookup"><span data-stu-id="8ff91-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="8ff91-424">También se recomienda que exponga un identificador de propiedad de dependencia para la propiedad de dependencia de solo lectura, exponiendo el valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como un `public static readonly` campo en su clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="8ff91-425">Solo lectura de las propiedades adjuntas son un escenario poco frecuente, porque el escenario principal para una propiedad adjunta es su uso en [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="8ff91-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="8ff91-426">Sin un establecedor público, no se puede establecer una propiedad adjunta [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis.</span><span class="sxs-lookup"><span data-stu-id="8ff91-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="8ff91-427">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="8ff91-428">Usar RegisterAttached para heredan las propiedades de dependencia</span><span class="sxs-lookup"><span data-stu-id="8ff91-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="8ff91-429">Un escenario concreto para registrar una propiedad de dependencia como asociada en lugar de <xref:System.Windows.DependencyProperty.Register%2A> es admitir la herencia de valores de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="8ff91-430">Debe registrar heredan las propiedades de dependencia con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> incluso si la clase define los descriptores de acceso de contenedor de propiedades que exponen la propiedad de dependencia e incluso si no desea exponer los métodos estáticos Get \* y Set \* para proporcionar true adjunta compatibilidad con descriptores de acceso.</span><span class="sxs-lookup"><span data-stu-id="8ff91-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="8ff91-431">Aunque podría parecer que la herencia de valores de propiedad funciona para las propiedades de dependencia, el comportamiento de herencia para una propiedad no asociada a través de algunos límites de elementos en el árbol de tiempo de ejecución es indefinido.</span><span class="sxs-lookup"><span data-stu-id="8ff91-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="8ff91-432">Registra la propiedad como asociada, realmente hace que la propiedad adjunta una propiedad global para el sistema de propiedades y garantiza que la herencia de valores de propiedad funciona a través de todos los límites de un árbol de elementos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="8ff91-433">Utilice siempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> para registrar las propiedades donde especifique <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="8ff91-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="8ff91-434">Para más información, vea [Herencia de valores de propiedad](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ff91-435">Registra una propiedad de dependencia como una propiedad de dependencia de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-435">Registers a dependency property as a read-only dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-436">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-436">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-437">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-437">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-438">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-438">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-439">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-439">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="8ff91-440">Registra una propiedad de dependencia de solo lectura, con el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="8ff91-441">Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-442">Este método devuelve el tipo <xref:System.Windows.DependencyPropertyKey>, mientras que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> devuelve el tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="8ff91-443">Normalmente, no se hacen públicas, las claves que representan las propiedades de solo lectura porque las claves se pueden usar para establecer el valor de propiedad de dependencia mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="8ff91-444">El diseño de clase afectará a sus requisitos, pero generalmente se recomienda limitar el acceso y la visibilidad de cualquier <xref:System.Windows.DependencyPropertyKey> a sólo aquellas partes del código que son necesarias para establecer esa propiedad de dependencia como parte de la clase o una aplicación lógica.</span><span class="sxs-lookup"><span data-stu-id="8ff91-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="8ff91-445">También se recomienda que exponga un identificador de propiedad de dependencia para la propiedad de dependencia de solo lectura, exponiendo el valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como un `public static readonly` campo en su clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="8ff91-446">Las propiedades de dependencia de solo lectura son un escenario bastante típico ambos existente [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] y para escenarios de personalización, porque otros [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] características pueden requerir una propiedad de dependencia incluso si esa propiedad no pretende ser configurable por autores de llamadas.</span><span class="sxs-lookup"><span data-stu-id="8ff91-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="8ff91-447">Puede usar el valor de una propiedad de dependencia de solo lectura como base para otras operaciones del sistema de propiedades que toman una propiedad de dependencia, como basar un <xref:System.Windows.Trigger> en la propiedad de dependencia en un estilo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="8ff91-448">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ff91-449">En el ejemplo siguiente se registra un `AquariumSize` propiedad de dependencia como de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8ff91-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="8ff91-450">El ejemplo define `AquariumSizeKey` como una clave interna (para que las clases del ensamblado podrían invalidar metadatos) y expone el identificador de propiedad de dependencia basándose en esa clave como `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="8ff91-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="8ff91-451">Además, se crea un contenedor para `AquariumSize`, con solo un descriptor de acceso get.</span><span class="sxs-lookup"><span data-stu-id="8ff91-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ff91-452">Nombre de la propiedad de dependencia que se va a registrar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-452">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="8ff91-453">Tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-453">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="8ff91-454">Tipo de propietario que registra la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-454">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="8ff91-455">Metadatos de propiedad de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-455">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="8ff91-456">Referencia a una devolución de llamada creada por el usuario que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="8ff91-457">Registra una propiedad de dependencia de solo lectura, con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación especificados.</span><span class="sxs-lookup"><span data-stu-id="8ff91-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="8ff91-458">Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia más tarde.</span><span class="sxs-lookup"><span data-stu-id="8ff91-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-459">Este método devuelve el tipo <xref:System.Windows.DependencyPropertyKey>, mientras que <xref:System.Windows.DependencyProperty.RegisterAttached%2A> devuelve el tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="8ff91-460">Normalmente, no se hacen públicas, las claves que representan las propiedades de solo lectura porque las claves se pueden usar para establecer el valor de propiedad de dependencia mediante una llamada a <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="8ff91-461">El diseño de clase afectará a sus requisitos, pero generalmente se recomienda limitar el acceso y la visibilidad de cualquier <xref:System.Windows.DependencyPropertyKey> a sólo aquellas partes del código que son necesarias para establecer esa propiedad de dependencia como parte de la clase o una aplicación lógica.</span><span class="sxs-lookup"><span data-stu-id="8ff91-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="8ff91-462">También se recomienda que exponga un identificador de propiedad de dependencia para la propiedad de dependencia de solo lectura, exponiendo el valor de <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> como un `public static readonly` campo en su clase.</span><span class="sxs-lookup"><span data-stu-id="8ff91-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="8ff91-463">Las propiedades de dependencia de solo lectura son un escenario bastante típico.</span><span class="sxs-lookup"><span data-stu-id="8ff91-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="8ff91-464">Puede usar el valor de una propiedad de dependencia de solo lectura como base para otras operaciones del sistema de propiedades que toman una propiedad de dependencia, como basar un <xref:System.Windows.Trigger> en la propiedad de dependencia en un estilo.</span><span class="sxs-lookup"><span data-stu-id="8ff91-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="8ff91-465">Para obtener más información sobre el registro de la propiedad de dependencia, consulte <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="8ff91-466">Validación en una propiedad de dependencia de sólo lectura puede ser menos importante.</span><span class="sxs-lookup"><span data-stu-id="8ff91-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="8ff91-467">El nivel de acceso no público que especifique para la clave reduce la probabilidad de entrada no válida arbitraria.</span><span class="sxs-lookup"><span data-stu-id="8ff91-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ff91-468">Devuelve la representación de cadena de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-468">Returns the string representation of the dependency property.</span></span></summary>
        <returns><span data-ttu-id="8ff91-469">Representación de cadena de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-469">The string representation of the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-470">Esta implementación devuelve el <xref:System.Windows.DependencyProperty.Name%2A> valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="8ff91-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-471">Especifica un valor estático que usa el sistema de propiedades de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en vez de <see langword="null" /> para indicar que la propiedad existe, pero el sistema de propiedades no ha establecido su valor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-472"><xref:System.Windows.DependencyProperty.UnsetValue> es un valor de centinela que se utiliza para escenarios donde el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades no puede determinar un solicitado <xref:System.Windows.DependencyProperty> valor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="8ff91-473"><xref:System.Windows.DependencyProperty.UnsetValue> se usa en lugar de `null`, porque `null` podría ser un valor de propiedad válido, así como válido (y de uso frecuente) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="8ff91-474"><xref:System.Windows.DependencyProperty.UnsetValue> no se devuelve nunca fuera de <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ff91-475">Cuando se llama a <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> en una propiedad de dependencia en un <xref:System.Windows.DependencyObject> instancia, los siguientes casos:</span><span class="sxs-lookup"><span data-stu-id="8ff91-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="8ff91-476">Una propiedad de dependencia tiene un valor predeterminado establecido en los metadatos y se devuelve ese valor.</span><span class="sxs-lookup"><span data-stu-id="8ff91-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="8ff91-477">Este valor podría proceder de <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="8ff91-478">Algún otro valor se estableció con el sistema de propiedades y el valor predeterminado ya no es relevante.</span><span class="sxs-lookup"><span data-stu-id="8ff91-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="8ff91-479">Para obtener más información, consulte [Prioridad de los valores de propiedades de dependencia](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="8ff91-480">Establecer un <xref:System.Windows.PropertyMetadata.DefaultValue%2A> de <xref:System.Windows.DependencyProperty.UnsetValue> específicamente no está permitida.</span><span class="sxs-lookup"><span data-stu-id="8ff91-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="8ff91-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Devuelve <xref:System.Windows.DependencyProperty.UnsetValue> cuando la propiedad solicitada no se ha establecido localmente.</span><span class="sxs-lookup"><span data-stu-id="8ff91-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="8ff91-482"><xref:System.Windows.DependencyProperty.UnsetValue> tiene un significado especial cuando se usa como el valor devuelto de un <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="8ff91-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="8ff91-483">Para obtener más información, consulte [devoluciones de llamada y validación](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="8ff91-484">Si va a enlazar a una base de datos, tenga en cuenta que <xref:System.Windows.DependencyProperty.UnsetValue> no es equivalente a <xref:System.DBNull.Value>, de forma similar a cómo <xref:System.DBNull.Value> no es equivalente a un valor null es true.</span><span class="sxs-lookup"><span data-stu-id="8ff91-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ff91-485">Obtiene la devolución de llamada de validación del valor de la propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-485">Gets the value validation callback for the dependency property.</span></span></summary>
        <value><span data-ttu-id="8ff91-486">La devolución de llamada de validación del valor de esta propiedad de dependencia, tal y como se proporciona para el parámetro <paramref name="validateValueCallback" /> del registro de propiedad de dependencia original.</span><span class="sxs-lookup"><span data-stu-id="8ff91-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ff91-487">Esta propiedad contendrá `null` para cualquier propiedad de dependencia con ninguna devolución de llamada de validación registrado.</span><span class="sxs-lookup"><span data-stu-id="8ff91-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="8ff91-488">Validar el valor devoluciones de llamada deben actuar en un sentido estático: aplicada a través de la validación de la <xref:System.Windows.ValidateValueCallback> no se puede determinar si el valor proporcionado es válido para cualquier instancia concreta.</span><span class="sxs-lookup"><span data-stu-id="8ff91-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="8ff91-489">La devolución de llamada solo puede determinar si todos los objetos que poseen la propiedad de dependencia deben o no deben aceptar el valor proporcionado como válido.</span><span class="sxs-lookup"><span data-stu-id="8ff91-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="8ff91-490">Si tiene que realizar la validación que se basa en el conocimiento de los valores de otras propiedades de dependencia en una instancia concreta, use un <xref:System.Windows.CoerceValueCallback> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="8ff91-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="8ff91-491">El <xref:System.Windows.CoerceValueCallback> está registrado como parte de los metadatos de propiedad de dependencia, en lugar de directamente dentro del identificador de propiedad de dependencia.</span><span class="sxs-lookup"><span data-stu-id="8ff91-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="8ff91-492">Para obtener más información, consulte [devoluciones de llamada y validación](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="8ff91-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>