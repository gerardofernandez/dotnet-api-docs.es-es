<Type Name="PartConventionBuilder&lt;T&gt;" FullName="System.Composition.Convention.PartConventionBuilder&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7889b00ba62f2ecfd6ab1357a9f5cd3be0a7512" /><Meta Name="ms.sourcegitcommit" Value="bfce49b3a0c0685f994313d2e44a7c70def1694a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/05/2019" /><Meta Name="ms.locfileid" Value="66690784" /></Metadata><TypeSignature Language="C#" Value="public class PartConventionBuilder&lt;T&gt; : System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PartConventionBuilder`1&lt;T&gt; extends System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.PartConventionBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PartConventionBuilder(Of T)&#xA;Inherits PartConventionBuilder" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class PartConventionBuilder : System::Composition::Convention::PartConventionBuilder" />
  <TypeSignature Language="F#" Value="type PartConventionBuilder&lt;'T&gt; = class&#xA;    inherit PartConventionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Composition.Convention.PartConventionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="51caa-101">Tipo de elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-101">The type of the part.</span></span></typeparam>
    <summary><span data-ttu-id="51caa-102">Configura un tipo como elemento de Managed Extensibility Framework (MEF), con valores devueltos fuertemente tipados.</span><span class="sxs-lookup"><span data-stu-id="51caa-102">Configures a type as a Managed Extensibility Framework (MEF) part, with strongly typed return values.</span></span></summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector"><span data-ttu-id="51caa-103">Función que selecciona la propiedad para exportar.</span><span class="sxs-lookup"><span data-stu-id="51caa-103">A function that selects the property to export.</span></span></param>
        <summary><span data-ttu-id="51caa-104">Exporta una propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="51caa-104">Exports a specified property.</span></span></summary>
        <returns><span data-ttu-id="51caa-105">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-105">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty (propertySelector, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector"><span data-ttu-id="51caa-106">Función que selecciona la propiedad para exportar.</span><span class="sxs-lookup"><span data-stu-id="51caa-106">A function that selects the property to export.</span></span></param>
        <param name="exportConfiguration"><span data-ttu-id="51caa-107">Acción que configura la propiedad exportada.</span><span class="sxs-lookup"><span data-stu-id="51caa-107">An action that configures the exported property.</span></span></param>
        <summary><span data-ttu-id="51caa-108">Exporta una propiedad especificada con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="51caa-108">Exports a specified property with the specified configuration.</span></span></summary>
        <returns><span data-ttu-id="51caa-109">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-109">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-110">La expresión <paramref name="propertySelector" /> debe ser una <see cref="T:System.Linq.Expressions.MemberExpression" /> para tener acceso a una propiedad.</span><span class="sxs-lookup"><span data-stu-id="51caa-110">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract"><span data-ttu-id="51caa-111">El tipo de contrato.</span><span class="sxs-lookup"><span data-stu-id="51caa-111">The contract type.</span></span></typeparam>
        <param name="propertySelector"><span data-ttu-id="51caa-112">Función que selecciona la propiedad para exportar.</span><span class="sxs-lookup"><span data-stu-id="51caa-112">A function that selects the property to export.</span></span></param>
        <summary><span data-ttu-id="51caa-113">Exporta una propiedad especificada como un tipo de contrato especificado.</span><span class="sxs-lookup"><span data-stu-id="51caa-113">Exports a specified property as a specified contract type.</span></span></summary>
        <returns><span data-ttu-id="51caa-114">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-114">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-115">La expresión <paramref name="propertySelector" /> debe ser una <see cref="T:System.Linq.Expressions.MemberExpression" /> para tener acceso a una propiedad.</span><span class="sxs-lookup"><span data-stu-id="51caa-115">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty (propertySelector, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract"><span data-ttu-id="51caa-116">El tipo de contrato.</span><span class="sxs-lookup"><span data-stu-id="51caa-116">The contract type.</span></span></typeparam>
        <param name="propertySelector"><span data-ttu-id="51caa-117">Función que selecciona la propiedad para exportar.</span><span class="sxs-lookup"><span data-stu-id="51caa-117">A function that selects the property to export.</span></span></param>
        <param name="exportConfiguration"><span data-ttu-id="51caa-118">Acción que configura la propiedad exportada.</span><span class="sxs-lookup"><span data-stu-id="51caa-118">An action that configures the exported property.</span></span></param>
        <summary><span data-ttu-id="51caa-119">Exporta una propiedad especificada como un tipo de contrato especificado con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="51caa-119">Exports a specified property as a specified contract type by using the specified configuration.</span></span></summary>
        <returns><span data-ttu-id="51caa-120">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-120">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector"><span data-ttu-id="51caa-121">Función que selecciona la propiedad para importar.</span><span class="sxs-lookup"><span data-stu-id="51caa-121">A function that selects the property to import.</span></span></param>
        <summary><span data-ttu-id="51caa-122">Importa una propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="51caa-122">Imports a specified property.</span></span></summary>
        <returns><span data-ttu-id="51caa-123">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-123">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty (propertySelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector"><span data-ttu-id="51caa-124">Función que selecciona la propiedad para importar.</span><span class="sxs-lookup"><span data-stu-id="51caa-124">A function that selects the property to import.</span></span></param>
        <param name="importConfiguration"><span data-ttu-id="51caa-125">Acción que configura la propiedad importada.</span><span class="sxs-lookup"><span data-stu-id="51caa-125">An action that configures the imported property.</span></span></param>
        <summary><span data-ttu-id="51caa-126">Importa una propiedad especificada con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="51caa-126">Imports a specified property by using the specified configuration.</span></span></summary>
        <returns><span data-ttu-id="51caa-127">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-127">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-128">La expresión <paramref name="propertySelector" /> debe ser una <see cref="T:System.Linq.Expressions.MemberExpression" /> para tener acceso a una propiedad.</span><span class="sxs-lookup"><span data-stu-id="51caa-128">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract"><span data-ttu-id="51caa-129">El tipo de contrato.</span><span class="sxs-lookup"><span data-stu-id="51caa-129">The contract type.</span></span></typeparam>
        <param name="propertySelector"><span data-ttu-id="51caa-130">Función que selecciona la propiedad para importar.</span><span class="sxs-lookup"><span data-stu-id="51caa-130">A function that selects the property to import.</span></span></param>
        <summary><span data-ttu-id="51caa-131">Importa una propiedad especificada con el tipo de contrato especificado.</span><span class="sxs-lookup"><span data-stu-id="51caa-131">Imports a specified property with the specified contract type.</span></span></summary>
        <returns><span data-ttu-id="51caa-132">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-132">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty (propertySelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract"><span data-ttu-id="51caa-133">El tipo de contrato.</span><span class="sxs-lookup"><span data-stu-id="51caa-133">The contract type.</span></span></typeparam>
        <param name="propertySelector"><span data-ttu-id="51caa-134">Función que selecciona la propiedad para importar.</span><span class="sxs-lookup"><span data-stu-id="51caa-134">A function that selects the property to import.</span></span></param>
        <param name="importConfiguration"><span data-ttu-id="51caa-135">Acción que configura la propiedad importada.</span><span class="sxs-lookup"><span data-stu-id="51caa-135">An action that configures the imported property.</span></span></param>
        <summary><span data-ttu-id="51caa-136">Importa una propiedad especificada con el tipo y la configuración de contrato especificados.</span><span class="sxs-lookup"><span data-stu-id="51caa-136">Imports a specified property with the specified contract type and configuration.</span></span></summary>
        <returns><span data-ttu-id="51caa-137">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-137">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-138">La expresión <paramref name="propertySelector" /> debe ser una <see cref="T:System.Linq.Expressions.MemberExpression" /> para tener acceso a una propiedad.</span><span class="sxs-lookup"><span data-stu-id="51caa-138">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NotifyImportsSatisfied">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; NotifyImportsSatisfied (System.Linq.Expressions.Expression&lt;Action&lt;T&gt;&gt; methodSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; NotifyImportsSatisfied(class System.Linq.Expressions.Expression`1&lt;class System.Action`1&lt;!T&gt;&gt; methodSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.NotifyImportsSatisfied(System.Linq.Expressions.Expression{System.Action{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function NotifyImportsSatisfied (methodSelector As Expression(Of Action(Of T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ NotifyImportsSatisfied(System::Linq::Expressions::Expression&lt;Action&lt;T&gt; ^&gt; ^ methodSelector);" />
      <MemberSignature Language="F#" Value="override this.NotifyImportsSatisfied : System.Linq.Expressions.Expression&lt;Action&lt;'T&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.NotifyImportsSatisfied methodSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodSelector" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="methodSelector"><span data-ttu-id="51caa-139">Acción que selecciona el método al que se va a llamar.</span><span class="sxs-lookup"><span data-stu-id="51caa-139">An action that selects the method to call.</span></span></param>
        <summary><span data-ttu-id="51caa-140">Selecciona un método al que se llamará cuando se complete la composición.</span><span class="sxs-lookup"><span data-stu-id="51caa-140">Selects a method to be called when composition is complete.</span></span></summary>
        <returns><span data-ttu-id="51caa-141">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-141">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-142">La expresión <paramref name="methodSelector" /> debe ser un método <see langword="void" /> sin argumentos.</span><span class="sxs-lookup"><span data-stu-id="51caa-142">The <paramref name="methodSelector" /> expression must be a <see langword="void" /> method with no arguments.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; SelectConstructor (System.Linq.Expressions.Expression&lt;Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt; constructorSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; SelectConstructor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Composition.Convention.ParameterImportConventionBuilder, !T&gt;&gt; constructorSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.Composition.Convention.ParameterImportConventionBuilder,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Expression(Of Func(Of ParameterImportConventionBuilder, T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ SelectConstructor(System::Linq::Expressions::Expression&lt;Func&lt;System::Composition::Convention::ParameterImportConventionBuilder ^, T&gt; ^&gt; ^ constructorSelector);" />
      <MemberSignature Language="F#" Value="override this.SelectConstructor : System.Linq.Expressions.Expression&lt;Func&lt;System.Composition.Convention.ParameterImportConventionBuilder, 'T&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.SelectConstructor constructorSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector"><span data-ttu-id="51caa-143">Función que selecciona un constructor.</span><span class="sxs-lookup"><span data-stu-id="51caa-143">A function that selects a constructor.</span></span></param>
        <summary><span data-ttu-id="51caa-144">Selecciona un constructor que se utilizará en la composición.</span><span class="sxs-lookup"><span data-stu-id="51caa-144">Selects a constructor to be used in composition.</span></span></summary>
        <returns><span data-ttu-id="51caa-145">Objeto que se puede usar para configurar aún más el elemento.</span><span class="sxs-lookup"><span data-stu-id="51caa-145">An object that can be used to further configure the part.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="51caa-146">La expresión <paramref name="constructorSelector" /> debe usar el operador <see langword="new" />.</span><span class="sxs-lookup"><span data-stu-id="51caa-146">The <paramref name="constructorSelector" /> expression must use the <see langword="new" /> operator.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>