<Type Name="Func&lt;T1,T2,TResult&gt;" FullName="System.Func&lt;T1,T2,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d4b225866e408fdf1627740ced3567f54c22682" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58729617" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,out TResult&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`3&lt;- T1, - T2, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, Out TResult)(arg1 As T1, arg2 As T2) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'Result&gt; = delegate of 'T1 * 'T2 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="01540-101">Tipo del primer parámetro del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="01540-102">Tipo del segundo parámetro del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="01540-103">Tipo del valor devuelto del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-103">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="01540-104">Primer parámetro del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="01540-105">Segundo parámetro del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="01540-106">Encapsula un método que tiene dos parámetros y devuelve un valor del tipo especificado por el parámetro <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="01540-106">Encapsulates a method that has two parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="01540-107">Valor devuelto del método que este delegado encapsula.</span><span class="sxs-lookup"><span data-stu-id="01540-107">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01540-108">Este delegado se puede usar para representar un método que se puede pasar como un parámetro sin declarar explícitamente un delegado personalizado.</span><span class="sxs-lookup"><span data-stu-id="01540-108">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="01540-109">El método encapsulado debe corresponder a la firma del método que está definida por este delegado.</span><span class="sxs-lookup"><span data-stu-id="01540-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="01540-110">Esto significa que el método encapsulado debe tener dos parámetros, cada uno de los cuales se pasa por valor, y debe devolver un valor.</span><span class="sxs-lookup"><span data-stu-id="01540-110">This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01540-111">Hacer referencia a un método que tiene dos parámetros y devuelve `void` (o en Visual Basic, que se declara como un `Sub` en lugar de como un `Function`), use el tipo genérico <xref:System.Action%602> delegar en su lugar.</span><span class="sxs-lookup"><span data-stu-id="01540-111">To reference a method that has two parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%602> delegate instead.</span></span>  
  
 <span data-ttu-id="01540-112">Cuando se usa el <xref:System.Func%603> no es necesario definir explícitamente un delegado que encapsula un método con dos parámetros de delegado.</span><span class="sxs-lookup"><span data-stu-id="01540-112">When you use the <xref:System.Func%603> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</span></span> <span data-ttu-id="01540-113">Por ejemplo, el código siguiente declara explícitamente un delegado denominado `ExtractMethod` y le asigna una referencia a la `ExtractWords` método a su instancia de delegado.</span><span class="sxs-lookup"><span data-stu-id="01540-113">For example, the following code explicitly declares a delegate named `ExtractMethod` and assigns a reference to the `ExtractWords` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Delegate.cs#1)]
 [!code-vb[System.Func~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="01540-114">En el ejemplo siguiente se simplifica este código creando instancias de un <xref:System.Func%603> delegado en lugar de definir explícitamente un nuevo delegado y asignarle un método con nombre.</span><span class="sxs-lookup"><span data-stu-id="01540-114">The following example simplifies this code by instantiating a <xref:System.Func%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Func3.cs#2)]
 [!code-vb[System.Func~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Func3.vb#2)]  
  
 <span data-ttu-id="01540-115">Puede usar el <xref:System.Func%603> delegar con métodos anónimos en C#, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="01540-115">You can use the <xref:System.Func%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="01540-116">(Para obtener una introducción a los métodos anónimos, consulte [métodos anónimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="01540-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="01540-117">También puede asignar una expresión lambda a un <xref:System.Func%603> delegado, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="01540-117">You can also assign a lambda expression to a <xref:System.Func%603> delegate, as the following example illustrates.</span></span> <span data-ttu-id="01540-118">(Para obtener una introducción a las expresiones lambda, vea [expresiones Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) y [expresiones Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="01540-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Lambda.cs#4)]
 [!code-vb[System.Func~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/lambda.vb#4)]  
  
 <span data-ttu-id="01540-119">El tipo subyacente de una expresión lambda es uno de la clase genérica `Func` delegados.</span><span class="sxs-lookup"><span data-stu-id="01540-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="01540-120">Esto permite pasar una expresión lambda como un parámetro sin asignar explícitamente a un delegado.</span><span class="sxs-lookup"><span data-stu-id="01540-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="01540-121">En concreto, porque muchos métodos de tipos en el <xref:System.Linq> tiene espacio de nombres <xref:System.Func%603> parámetros, puede pasar estos métodos de una expresión lambda sin crear explícitamente instancias de un <xref:System.Func%603> delegar.</span><span class="sxs-lookup"><span data-stu-id="01540-121">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%603> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%603> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01540-122">En el ejemplo siguiente se muestra cómo declarar y usar un <xref:System.Func%603> delegar.</span><span class="sxs-lookup"><span data-stu-id="01540-122">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="01540-123">Este ejemplo se declara un <xref:System.Func%603> variable y se asigna una expresión lambda que toma un <xref:System.String> valor y un <xref:System.Int32> valor como parámetros.</span><span class="sxs-lookup"><span data-stu-id="01540-123">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="01540-124">Devuelve la expresión lambda `true` si la longitud de la <xref:System.String> es igual al valor del parámetro el <xref:System.Int32> parámetro.</span><span class="sxs-lookup"><span data-stu-id="01540-124">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="01540-125">El delegado que encapsula este método se utiliza posteriormente en una consulta para filtrar las cadenas en una matriz de cadenas.</span><span class="sxs-lookup"><span data-stu-id="01540-125">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="01540-126">Expresiones lambda (Guía de programación de C#)</span><span class="sxs-lookup"><span data-stu-id="01540-126">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="01540-127">Expresiones lambda</span><span class="sxs-lookup"><span data-stu-id="01540-127">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="01540-128">Delegados (Guía de programación de C#)</span><span class="sxs-lookup"><span data-stu-id="01540-128">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="01540-129">Delegados en Visual Basic</span><span class="sxs-lookup"><span data-stu-id="01540-129">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>