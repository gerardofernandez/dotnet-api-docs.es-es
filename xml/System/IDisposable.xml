<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0173afb2044bf3eff6d9c5187d74f826f4c4fa77" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733154" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f5e4e-101">Proporciona un mecanismo para liberar recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5e4e-102">El uso principal de esta interfaz es liberar recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="f5e4e-103">El recolector de elementos no utilizados libera automáticamente la memoria asignada a un objeto administrado cuando ya no se utiliza ese objeto.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="f5e4e-104">Sin embargo, no es posible predecir cuándo se producirá la recolección de elementos.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="f5e4e-105">Además, el recolector de elementos no utilizados no tiene conocimiento de los recursos no administrados como identificadores de ventana, o abrir archivos y secuencias.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="f5e4e-106">Use el <xref:System.IDisposable.Dispose%2A> método de esta interfaz para liberar explícitamente los recursos no administrados, junto con el recolector de elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="f5e4e-107">El consumidor de un objeto puede llamar a este método cuando el objeto ya no es necesario.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="f5e4e-108">Es un cambio importante para agregar el <xref:System.IDisposable> interfaz a una clase existente.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="f5e4e-109">Dado que los consumidores ya existentes de su tipo no pueden llamar a <xref:System.IDisposable.Dispose%2A>, no puede estar seguro de que se liberará los recursos no administrados mantenidos por su tipo.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="f5e4e-110">Dado que el <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación es invocada por el consumidor de un tipo cuando ya no son necesarios los recursos que pertenecen a una instancia, o bien debe encapsular el objeto administrado en un <xref:System.Runtime.InteropServices.SafeHandle> (la alternativa recomendada) o se debe reemplazar <xref:System.Object.Finalize%2A?displayProperty=nameWithType>para liberar recursos no administrados en caso de que el consumidor se olvide de llamar a <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5e4e-111">En .NET Framework, el compilador de C++ admite la eliminación determinista de recursos y no se permite la implementación directa de la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f5e4e-112">Para obtener información detallada acerca de cómo esta interfaz y la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método se usan, vea la [recolección](~/docs/standard/garbage-collection/index.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) temas.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="f5e4e-113">Usar un objeto que implementa IDisposable</span><span class="sxs-lookup"><span data-stu-id="f5e4e-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="f5e4e-114">Si su aplicación usa simplemente un objeto que implementa el <xref:System.IDisposable> interfaz, debe llamar al objeto <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación cuando haya terminado de utilizarlo.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="f5e4e-115">Dependiendo del lenguaje de programación, puede hacerlo de dos maneras:</span><span class="sxs-lookup"><span data-stu-id="f5e4e-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="f5e4e-116">Mediante el lenguaje de construcción como la `using` instrucción en C# y Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="f5e4e-117">Al encapsular la llamada a la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación en un `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5e4e-118">Documentación para los tipos que implementan <xref:System.IDisposable> tenga en cuenta este hecho e incluir un aviso para llamar a su <xref:System.IDisposable.Dispose%2A> implementación.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="f5e4e-119">La instrucción de C# y el uso de Visual Basic</span><span class="sxs-lookup"><span data-stu-id="f5e4e-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="f5e4e-120">Si su lenguaje admite una construcción como la [mediante](~/docs/csharp/language-reference/keywords/using.md) instrucción en C# y el [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) instrucción en Visual Basic, puede usar en lugar de llamar explícitamente a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> usted mismo.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="f5e4e-121">En el ejemplo siguiente se usa este enfoque en la definición de un `WordCount` clase que se conserva la información acerca de un archivo y el número de palabras en ella.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="f5e4e-122">El `using` instrucción es realmente una comodidad sintáctica.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="f5e4e-123">En tiempo de compilación, el compilador de lenguaje implementa el lenguaje intermedio (IL) para un `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="f5e4e-124">Para obtener más información sobre la `using` instrucción, vea el [instrucción Using](~/docs/visual-basic/language-reference/statements/using-statement.md) o [instrucción using](~/docs/csharp/language-reference/keywords/using-statement.md) temas.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="f5e4e-125">El bloque Try/Finally</span><span class="sxs-lookup"><span data-stu-id="f5e4e-125">The Try/Finally block</span></span>  
 <span data-ttu-id="f5e4e-126">Si su lenguaje de programación no admite una construcción como la `using` instrucción en C# o Visual Basic, o si prefiere no debe usarse, puede llamar a la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación desde el `finally` block de un `try` / `finally` instrucción.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="f5e4e-127">En el ejemplo siguiente se sustituye el `using` bloquear en el ejemplo anterior con un `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="f5e4e-128">Para obtener más información sobre la `try` / `finally` de patrón, vea [intente... Catch... Finally (instrucción)](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), o [instrucción try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="f5e4e-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="f5e4e-129">Implementar IDisposable</span><span class="sxs-lookup"><span data-stu-id="f5e4e-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="f5e4e-130">Debe implementar <xref:System.IDisposable> solo si su tipo usa recursos no administrados directamente.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="f5e4e-131">Pueden llamar los consumidores de su tipo su <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación para liberar recursos cuando ya no es necesaria la instancia.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="f5e4e-132">Para controlar los casos en los que no pueden llamar a <xref:System.IDisposable.Dispose%2A>, debería usar una clase derivada de <xref:System.Runtime.InteropServices.SafeHandle> encapsular los recursos no administrados, o se debe reemplazar el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método para un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="f5e4e-133">En cualquier caso, se usa el <xref:System.IDisposable.Dispose%2A> método para realizar cualquier limpieza es necesario después de usar los recursos no administrados, como la liberación o restablecimiento de los recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5e4e-134">Si va a definir una clase base que usa recursos no administrados y que tiene, o es probable que tenga las subclases que deberían eliminarse, debe implementar la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método y proporcionar una segunda sobrecarga de `Dispose`, como se describe en el siguiente sección.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="f5e4e-135">IDisposable y la jerarquía de herencia</span><span class="sxs-lookup"><span data-stu-id="f5e4e-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="f5e4e-136">Una clase base con subclases que deban ser desechables debe implementar <xref:System.IDisposable> como sigue.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="f5e4e-137">Debe usar este patrón siempre que implemente <xref:System.IDisposable> en cualquier tipo que no sea `sealed` (`NotInheritable` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="f5e4e-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="f5e4e-138">Debe proporcionar una pública, no virtual <xref:System.IDisposable.Dispose> protegidos y método virtual `Dispose(Boolean disposing)` método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="f5e4e-139">El <xref:System.IDisposable.Dispose> debe llamar al método `Dispose(true)` y se debe suprimir la finalización para el rendimiento.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="f5e4e-140">El tipo base no debe incluir ningún finalizador.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="f5e4e-141">El siguiente fragmento de código refleja el patrón de dispose para clases base.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="f5e4e-142">Se supone que el tipo no invalida el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="f5e4e-143">Si invalida el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método, la clase debe implementar el patrón siguiente.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="f5e4e-144">Las subclases deben implementar el patrón disponible de la siguiente forma:</span><span class="sxs-lookup"><span data-stu-id="f5e4e-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="f5e4e-145">Deben reemplazar `Dispose(Boolean)` y llamar a la implementación `Dispose(Boolean)` de la clase base.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="f5e4e-146">Pueden proporcionar un finalizador si es necesario.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="f5e4e-147">El finalizador debe llamar a `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="f5e4e-148">Tenga en cuenta que las clases derivadas no propios implementan la <xref:System.IDisposable> interfaz y no incluyen una sin parámetros <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="f5e4e-149">Solo invalidan la clase base `Dispose(Boolean)` método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="f5e4e-150">El siguiente fragmento de código refleja el patrón de dispose para clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="f5e4e-151">Se supone que el tipo no invalida el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="f5e4e-152">En el ejemplo siguiente se muestra cómo crear una clase de recursos que implementa el <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="f5e4e-153">Implementar un método Dispose</span><span class="sxs-lookup"><span data-stu-id="f5e4e-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5e4e-154">Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5e4e-155">Utilice este método para cerrar o liberar recursos no administrados como archivos, secuencias e identificadores mantenidos por una instancia de la clase que implementa esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="f5e4e-156">Por convención, este método se usa para todas las tareas asociadas con los recursos mantenidos por un objeto, se liberan o preparar un objeto para su reutilización.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="f5e4e-157">Si usa una clase que implementa el <xref:System.IDisposable> interfaz, debe llamar a su <xref:System.IDisposable.Dispose%2A> cuando haya terminado de utilizar la clase de implementación.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="f5e4e-158">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="f5e4e-159">Al implementar este método, asegúrese de que todos mantienen se liberan los recursos mediante la propagación de la llamada a través de la jerarquía de contención.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="f5e4e-160">Por ejemplo, si un objeto A asigna un objeto B, y el objeto B asigna un objeto C, a continuación, un <xref:System.IDisposable.Dispose%2A> implementación debe llamar a <xref:System.IDisposable.Dispose%2A> en B, que debe llamar a su vez <xref:System.IDisposable.Dispose%2A> en C.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5e4e-161">El compilador de C++ admite la eliminación determinista de recursos y no se permite la implementación directa de la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f5e4e-162">También debe llamar un objeto la <xref:System.IDisposable.Dispose%2A> método de su clase base si la clase base implementa <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="f5e4e-163">Para obtener más información acerca de cómo implementar <xref:System.IDisposable> en una clase base y sus subclases, consulte la sección "IDisposable y la jerarquía de herencia" en el <xref:System.IDisposable> tema.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="f5e4e-164">Si un objeto <xref:System.IDisposable.Dispose%2A> método se llama varias veces, el objeto debe tener en cuenta todas las llamadas posteriores a la primera.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="f5e4e-165">El objeto no debe producir una excepción si su <xref:System.IDisposable.Dispose%2A> método se llama varias veces.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="f5e4e-166">Métodos de instancia distinto <xref:System.IDisposable.Dispose%2A> puede producir un <xref:System.ObjectDisposedException> cuando ya se eliminen los recursos.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="f5e4e-167">Los usuarios de esperar un tipo de recurso para usar una convención determinada para indicar un estado de asignación frente a un estado de liberación.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="f5e4e-168">Un ejemplo de esto es que las clases de secuencia, que tradicionalmente se consideran como abiertas o cerradas.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="f5e4e-169">El implementador de una clase que tiene una convención de este tipo puede optar por implementar un método público con un nombre personalizado, como `Close`, que llama a la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="f5e4e-170">Porque el <xref:System.IDisposable.Dispose%2A> debe llamar explícitamente al método, siempre hay un riesgo de que los recursos no administrados no se ha liberado, porque el consumidor de un objeto no llama a su <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="f5e4e-171">Hay dos maneras de evitarlo:</span><span class="sxs-lookup"><span data-stu-id="f5e4e-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="f5e4e-172">Ajustar el recurso administrado en un objeto derivado de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f5e4e-173">Su <xref:System.IDisposable.Dispose%2A> implementación, a continuación, llama a la <xref:System.IDisposable.Dispose%2A> método de la <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instancias.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="f5e4e-174">Para obtener más información, consulte la sección "La alternativa SafeHandle" en el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tema.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="f5e4e-175">Implementar un finalizador para liberar recursos cuando <xref:System.IDisposable.Dispose%2A> no se llama.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="f5e4e-176">De forma predeterminada, el recolector de elementos no utilizados llama automáticamente a un finalizador del objeto antes de reclamar su memoria.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="f5e4e-177">Sin embargo, si la <xref:System.IDisposable.Dispose%2A> ha sido el método llamado, normalmente no es necesario para el recolector de elementos no utilizados llame al finalizador del objeto desechado.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="f5e4e-178">Para evitar una finalización automática, <xref:System.IDisposable.Dispose%2A> pueden llamar las implementaciones del <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="f5e4e-179">Cuando se usa un objeto que tiene acceso a los recursos no administrados, como un <xref:System.IO.StreamWriter>, es una buena práctica crear la instancia con un `using` instrucción.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="f5e4e-180">El `using` instrucción cierra automáticamente la secuencia y llama a <xref:System.IDisposable.Dispose%2A> en el objeto cuando se haya completado el código que lo usa.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="f5e4e-181">Para obtener un ejemplo, vea el <xref:System.IO.StreamWriter> clase.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5e4e-182">El ejemplo siguiente muestra cómo puede implementar la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="f5e4e-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="f5e4e-183">Implementar un método Dispose</span><span class="sxs-lookup"><span data-stu-id="f5e4e-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>