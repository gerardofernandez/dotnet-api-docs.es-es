<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97615c0cc55673df4c0518c94f836c20ffcbede4" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52376290" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="586d9-101">Indica que una enumeración se puede tratar como un campo de bits, es decir, un conjunto de marcas.</span><span class="sxs-lookup"><span data-stu-id="586d9-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="586d9-102">Campos de bits se utilizan generalmente para listas de elementos que pueden producirse en combinaciones, mientras que las constantes de enumeración se suelen usar para las listas de elementos mutuamente excluyentes.</span><span class="sxs-lookup"><span data-stu-id="586d9-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="586d9-103">Por lo tanto, los campos de bits están diseñados para combinarse con una operación OR bit a bit para generar valores sin nombre, mientras que no son de constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="586d9-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="586d9-104">Lenguajes pueden variar en su uso de campos de bits en comparación con las constantes de enumeración.</span><span class="sxs-lookup"><span data-stu-id="586d9-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="586d9-105">Atributos de FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="586d9-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="586d9-106"><xref:System.AttributeUsageAttribute> se aplica a esta clase y su <xref:System.AttributeUsageAttribute.Inherited%2A> especifica la propiedad `false`.</span><span class="sxs-lookup"><span data-stu-id="586d9-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="586d9-107">Este atributo solo puede aplicarse a las enumeraciones.</span><span class="sxs-lookup"><span data-stu-id="586d9-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="586d9-108">Directrices para FlagsAttribute y Enum</span><span class="sxs-lookup"><span data-stu-id="586d9-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="586d9-109">Use el <xref:System.FlagsAttribute> atributo personalizado para una enumeración solo si es una operación bit a bit (AND, OR exclusivo o) que se realizará en un valor numérico.</span><span class="sxs-lookup"><span data-stu-id="586d9-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="586d9-110">Constantes de enumeración se definen en potencias de dos, es decir, 1, 2, 4, 8 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="586d9-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="586d9-111">Esto significa que no se superponen las marcas individuales en constantes de enumeración combinadas.</span><span class="sxs-lookup"><span data-stu-id="586d9-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="586d9-112">Considere la posibilidad de crear una constante enumerada para combinaciones de marcadores usados.</span><span class="sxs-lookup"><span data-stu-id="586d9-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="586d9-113">Por ejemplo, si tiene una enumeración que se usa para las operaciones de E/S de archivo que contiene las constantes enumeradas `Read = 1` y `Write = 2`, considere la posibilidad de crear la constante enumerada `ReadWrite = Read OR Write`, que combina el `Read` y `Write` marcas.</span><span class="sxs-lookup"><span data-stu-id="586d9-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="586d9-114">Además, la operación OR bit a bit utilizada para combinar las marcas podría considerarse un concepto avanzado en algunas circunstancias que no debería requerirse para tareas sencillas.</span><span class="sxs-lookup"><span data-stu-id="586d9-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="586d9-115">Tenga cuidado si define un número negativo como una constante enumerada marca porque muchas de las posiciones indicador pueden establecerse en 1, lo que podría hacer que el código confuso y animar a errores de codificación.</span><span class="sxs-lookup"><span data-stu-id="586d9-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="586d9-116">Una manera cómoda para comprobar si se establece una marca de un valor numérico es realizar una operación AND bit a bit entre el valor numérico y la constante enumerada de marca, que establece todos los bits del valor numérico de cero que no corresponden a la marca , a continuación, pruebe si el resultado de esa operación es igual a la constante enumerada del indicador.</span><span class="sxs-lookup"><span data-stu-id="586d9-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="586d9-117">Use `None` como el nombre de la marca enumerada constante cuyo valor es cero.</span><span class="sxs-lookup"><span data-stu-id="586d9-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="586d9-118">No puede usar el `None` constante enumerada en una operación AND bit a bit para probar un marcador porque el resultado siempre es cero.</span><span class="sxs-lookup"><span data-stu-id="586d9-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="586d9-119">Sin embargo, puede realizar una operación lógica, no una comparación bit a bit, entre el valor numérico y el `None` constante enumerada para determinar si están establecidos los bits del valor numérico.</span><span class="sxs-lookup"><span data-stu-id="586d9-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="586d9-120">Si crea un valor de enumeración en lugar de una enumeración de marcas, merece la pena seguir para crear un `None` constante enumerada.</span><span class="sxs-lookup"><span data-stu-id="586d9-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="586d9-121">El motivo es que, de forma predeterminada, la memoria utilizada para la enumeración se inicializa en cero por common language runtime.</span><span class="sxs-lookup"><span data-stu-id="586d9-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="586d9-122">Por lo tanto, si no se define una constante cuyo valor es cero, la enumeración contendrá un valor no válido cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="586d9-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="586d9-123">Si hay un caso predeterminado obvio que la aplicación necesita representar, considere el uso de una constante enumerada cuyo valor sea cero para representar el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="586d9-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="586d9-124">Si no hay ningún caso predeterminado, considere la posibilidad de uso de una constante enumerada cuyo valor es cero significa que el caso de que no se representa mediante cualquiera de las otras constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="586d9-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="586d9-125">No defina un valor de enumeración únicamente para reflejar el estado de la propia enumeración.</span><span class="sxs-lookup"><span data-stu-id="586d9-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="586d9-126">Por ejemplo, no se define una constante enumerada que simplemente marca el final de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="586d9-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="586d9-127">Si necesita determinar el último valor de la enumeración, comprobar explícitamente si ese valor.</span><span class="sxs-lookup"><span data-stu-id="586d9-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="586d9-128">Además, puede realizar una comprobación de intervalo para la constante enumerada primera y última si todos los valores dentro del intervalo son válidos.</span><span class="sxs-lookup"><span data-stu-id="586d9-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="586d9-129">No especifique constantes enumeradas que se reservan para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="586d9-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="586d9-130">Al definir un método o propiedad que toma una constante enumerada como un valor, considere la posibilidad de validar el valor.</span><span class="sxs-lookup"><span data-stu-id="586d9-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="586d9-131">El motivo es que puede convertir un valor numérico para el tipo de enumeración, incluso si ese valor numérico no está definido en la enumeración.</span><span class="sxs-lookup"><span data-stu-id="586d9-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="586d9-132">El ejemplo siguiente muestra el uso de la `FlagsAttribute` de atributo y se muestra el efecto en el <xref:System.Enum.ToString%2A> método del uso de `FlagsAttribute` en un <xref:System.Enum> declaración.</span><span class="sxs-lookup"><span data-stu-id="586d9-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="586d9-133">El siguiente ejemplo define dos enumeraciones relacionadas con el color, `SingleHue` y `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="586d9-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="586d9-134">El segundo tiene la `FlagsAttribute` atributo; no es el primero.</span><span class="sxs-lookup"><span data-stu-id="586d9-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="586d9-135">En el ejemplo se muestra la diferencia de comportamiento cuando un intervalo de enteros, incluidos los enteros que representan valores subyacentes del tipo de enumeración, no se convierten al tipo de enumeración y sus representaciones de cadena que se muestra.</span><span class="sxs-lookup"><span data-stu-id="586d9-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="586d9-136">Por ejemplo, tenga en cuenta que 3 no se puede representar como un `SingleHue` valor porque 3 no es el valor subyacente de cualquier `SingleHue` miembro, mientras que el `FlagsAttribute` atributo hace posible representar 3 como un `MultiHue` valor de `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="586d9-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="586d9-137">Inicializa una nueva instancia de la clase <see cref="T:System.FlagsAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="586d9-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="586d9-138">En el ejemplo siguiente se define un `PhoneService` las enumeraciones que representan formas de comunicación proporcionados por una compañía telefónica.</span><span class="sxs-lookup"><span data-stu-id="586d9-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="586d9-139">Se inicializa tres variables que representan el servicio proporcionado a los tres hogares diferentes y, a continuación, indica que los hogares no tienen ningún servicio, qué hogares tienen solo el servicio de telefonía móvil y qué hogares tienen el servicio de línea de teléfono celular y terrenos.</span><span class="sxs-lookup"><span data-stu-id="586d9-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="586d9-140">Por último, llama implícitamente el <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> método para mostrar los tipos de servicio proporcionado a cada núcleo.</span><span class="sxs-lookup"><span data-stu-id="586d9-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="586d9-141">El ejemplo siguiente muestra el uso de la `FlagsAttribute` de atributo y se muestra el efecto en el <xref:System.Enum.ToString%2A> método del uso de `FlagsAttribute` en un <xref:System.Enum> declaración.</span><span class="sxs-lookup"><span data-stu-id="586d9-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>