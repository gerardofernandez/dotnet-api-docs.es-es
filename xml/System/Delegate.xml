<Type Name="Delegate" FullName="System.Delegate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d9b1839ccedabbb705da25899027acccda6a8a3" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233125" /></Metadata><TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b5a45-101">Representa un delegado, que es una estructura de datos que hace referencia a un método estático o a una instancia de clase y a un método de instancia de dicha clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-102">La <xref:System.Delegate> clase es la clase base para tipos de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="b5a45-103">Sin embargo, el sistema y los compiladores pueden derivar explícitamente de la <xref:System.Delegate> clase o desde el <xref:System.MulticastDelegate> clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="b5a45-104">También no está permitida para derivar un nuevo tipo de un tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="b5a45-105">La <xref:System.Delegate> clase no se considera un tipo de delegado; es una clase que se utiliza para derivar tipos de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="b5a45-106">Implementa la mayoría de los lenguajes un `delegate` palabra clave como los compiladores para esos lenguajes son puede derivar de la <xref:System.MulticastDelegate> clase; por lo tanto, los usuarios deben utilizar el `delegate` palabra clave proporcionado por el lenguaje.</span><span class="sxs-lookup"><span data-stu-id="b5a45-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-107">Common language runtime proporciona un `Invoke` método para cada tipo de delegado, con la misma firma que el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="b5a45-108">No es necesario llamar explícitamente a este método desde C#, Visual Basic o Visual C++, porque los compiladores llaman automáticamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="b5a45-109">El `Invoke` método es útil en [reflexión](~/docs/framework/reflection-and-codedom/reflection.md) cuando desee buscar la firma del tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="b5a45-110">Common language runtime proporciona cada tipo de delegado con `BeginInvoke` y `EndInvoke` métodos para habilitar la invocación asincrónica del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="b5a45-111">Para obtener más información acerca de estos métodos, consulte [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="b5a45-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="b5a45-112">La declaración de un tipo de delegado establece un contrato que especifica la firma de uno o varios métodos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="b5a45-113">Un delegado es una instancia de un tipo de delegado que tiene referencias para:</span><span class="sxs-lookup"><span data-stu-id="b5a45-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="b5a45-114">Un método de instancia de un tipo y un objeto de destino que se puede asignar a ese tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="b5a45-115">Un método de instancia de un tipo, con el texto oculto `this` parámetro expuesto en la lista de parámetros formales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="b5a45-116">El delegado se dice que un delegado de la instancia abierta.</span><span class="sxs-lookup"><span data-stu-id="b5a45-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="b5a45-117">Un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-117">A static method.</span></span>  
  
-   <span data-ttu-id="b5a45-118">Un método estático y un objeto de destino que se puede asignar al primer parámetro del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="b5a45-119">Se dice que el delegado se cerrados a lo largo de su primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="b5a45-120">Para obtener más información sobre el enlace a delegados, vea el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-121">En las versiones 1.0 y 1.1 de .NET Framework, un delegado puede representar un método solo si la firma del método coincide exactamente con la firma especificada por el tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="b5a45-122">Por lo tanto, se admiten solo la primeros y terceros viñetas en la lista anterior, y la primera viñeta requiere a una coincidencia exacta de tipos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="b5a45-123">Cuando un delegado representa un método de instancia cerrado a lo largo de su primer argumento (el caso más común), el delegado almacena una referencia al punto de entrada del método y una referencia a un objeto, denominado el destino, que es de un tipo asignable al tipo que define el método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="b5a45-124">Cuando un delegado representa un método de instancia abierto, almacena una referencia al punto de entrada del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="b5a45-125">La firma del delegado debe incluir el texto oculto `this` parámetro en su lista de parámetros formales; en este caso, el delegado no tiene una referencia a un objeto de destino y un objeto de destino debe especificarse cuando se invoca el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="b5a45-126">Cuando un delegado representa un método estático, el delegado almacena una referencia al punto de entrada del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="b5a45-127">Cuando un delegado representa un método estático cerrado a lo largo de su primer argumento, el delegado almacena una referencia al punto de entrada del método y una referencia a un objeto de destino que se puede asignar al tipo del primer argumento del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="b5a45-128">Cuando se invoca el delegado, el primer argumento del método estático recibe el objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="b5a45-129">La lista de invocaciones de un delegado es un conjunto ordenado de delegados en el que cada elemento de la lista invoca exactamente uno de los métodos representados por el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="b5a45-130">Una lista de invocaciones puede contener métodos duplicados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="b5a45-131">Durante una invocación, los métodos se invocan en el orden en que aparecen en la lista de invocación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="b5a45-132">Un delegado intenta invocar todos los métodos de su lista de invocación; una vez por cada vez que aparecen en la lista de invocación, se invocan los duplicados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="b5a45-133">Los delegados son inmutables; una vez creado, no cambia la lista de invocaciones de un delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="b5a45-134">Los delegados se conocen como multidifusión o combinables, porque un delegado puede invocar uno o varios métodos y puede utilizarse en operaciones de combinación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="b5a45-135">Combinar las operaciones, tales como <xref:System.Delegate.Combine%2A> y <xref:System.Delegate.Remove%2A>, no se modifican los delegados existentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="b5a45-136">En su lugar, esta operación devuelve un nuevo delegado que contiene los resultados de la operación, un delegado sin cambios, o `null`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="b5a45-137">Una operación de combinación devuelve `null` cuando el resultado de la operación es un delegado que no hace referencia al menos un método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="b5a45-138">Una operación de combinación devuelve a un delegado sin modificar cuando la operación solicitada no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-139">Administrado lenguajes utilizan el <xref:System.Delegate.Combine%2A> y <xref:System.Delegate.Remove%2A> métodos para implementar operaciones de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="b5a45-140">Algunos ejemplos son el `AddHandler` y `RemoveHandler` instrucciones en Visual Basic y los operadores += y -= en tipos de delegados en C#.</span><span class="sxs-lookup"><span data-stu-id="b5a45-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="b5a45-141">A partir de la [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], tipos de delegado genérico pueden tener parámetros de tipo variante.</span><span class="sxs-lookup"><span data-stu-id="b5a45-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="b5a45-142">Parámetros de tipo contravariante pueden usarse como tipos de parámetro del delegado y un parámetro de tipo covariante puede usarse como el tipo de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="b5a45-143">Esta característica permite que los tipos que se construyen a partir de la misma definición de tipo genérico para ser compatible con la asignación si sus argumentos de tipo son tipos de referencia con una relación de herencia, como se explica en delegado genérico [covarianza y Contravarianza](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="b5a45-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-144">Los delegados genéricos que son compatibles con la asignación debido a la variación no son necesariamente combinables.</span><span class="sxs-lookup"><span data-stu-id="b5a45-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="b5a45-145">Para ser combinables, los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="b5a45-146">Por ejemplo, suponga que una clase denominada `Derived` se deriva una clase denominada `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="b5a45-147">Un delegado del tipo `Action<Base>` (`Action(Of Base)` en Visual Basic) pueden asignarse a una variable de tipo `Action<Derived>`, pero no se pueden combinar dos delegados porque los tipos no coinciden exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-148">Si un método invocado produce una excepción, el método deja de ejecutarse, la excepción se pasa al llamador del delegado y no se invocan los métodos restantes en la lista de invocación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="b5a45-149">Detectar la excepción en el llamador no modifica este comportamiento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="b5a45-150">Cuando la firma de los métodos invocados por un delegado incluye un valor devuelto, el delegado devuelve el valor devuelto del último elemento en la lista de invocación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="b5a45-151">Cuando la firma incluye un parámetro que se pasa por referencia, el valor final del parámetro es el resultado de cada método en la lista de invocaciones ejecute secuencialmente y actualice el valor del parámetro.</span><span class="sxs-lookup"><span data-stu-id="b5a45-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="b5a45-152">El equivalente más cercano de un delegado en C es un puntero de función.</span><span class="sxs-lookup"><span data-stu-id="b5a45-152">The closest equivalent of a delegate in C is a function pointer.</span></span> <span data-ttu-id="b5a45-153">Un delegado puede representar un método estático o un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="b5a45-154">Cuando el delegado representa un método de instancia, el delegado almacena una referencia al punto de entrada del método pero una referencia a la instancia de clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="b5a45-155">A diferencia de los punteros de función, los delegados están orientados a objetos y de tipos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-156">El ejemplo siguiente muestra cómo definir un delegado denominado `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="b5a45-157">Se crean instancias de este delegado para un método de instancia y un método estático de anidado `mySampleClass` clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="b5a45-158">El delegado para el método de instancia requiere una instancia de `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="b5a45-159">El `mySampleClass` instancia se guarda en una variable denominada `mySC`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
    <related type="Article" href="https://msdn.microsoft.com/library/41972034-92ed-450a-9664-ab93fcc6f1fb"><span data-ttu-id="b5a45-160">Llamar a métodos sincrónicos de forma asincrónica</span><span class="sxs-lookup"><span data-stu-id="b5a45-160">Calling Synchronous Methods Asynchronously</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="b5a45-161">Delegados (Guía de programación de C#)</span><span class="sxs-lookup"><span data-stu-id="b5a45-161">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="b5a45-162">Delegados (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="b5a45-162">Delegates (Visual Basic)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1cdf3420-89c1-47c0-b796-aa984020e0f8"><span data-ttu-id="b5a45-163">Cómo: Definir y utilizar delegados (C++/CLI)</span><span class="sxs-lookup"><span data-stu-id="b5a45-163">How to: Define and Use Delegates (C++/CLI)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f"><span data-ttu-id="b5a45-164">Controlar y provocar eventos</span><span class="sxs-lookup"><span data-stu-id="b5a45-164">Handling and Raising Events</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5a45-165">Inicializa un nuevo delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-165">Initializes a new delegate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b5a45-166">Instancia de clase donde el delegado invoca a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-166">The class instance on which the delegate invokes <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-167">Nombre del método de instancia que representa el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-167">The name of the instance method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="b5a45-168">Inicializa un delegado que invoca al método de instancia especificado en la instancia de clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-168">Initializes a delegate that invokes the specified instance method on the specified class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-169">Este constructor no se puede usar en código de aplicación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-169">This constructor cannot be used in application code.</span></span> <span data-ttu-id="b5a45-170">Para crear un delegado especificando el nombre de un método de instancia, use una sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método que especifica un nombre de método y un objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-170">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="b5a45-171">Por ejemplo, el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> sobrecarga del método crea un delegado para un método de instancia con un nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-171">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="b5a45-172">Este constructor crea a delegados por métodos de instancia solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-172">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="b5a45-173">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-173">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-174">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-174"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-175">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-175">-or-</span></span> 
 <span data-ttu-id="b5a45-176">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-176"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-177">Se produjo un error al enlazar al método de destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-177">There was an error binding to the target method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-178">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-178">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-179">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-179">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="b5a45-180"><see cref="T:System.Type" /> que representa la clase que define <paramref name="method" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-180">The <see cref="T:System.Type" /> representing the class that defines <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-181">Nombre del método estático que representa el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-181">The name of the static method that the delegate represents.</span></span></param>
        <summary><span data-ttu-id="b5a45-182">Inicializa un delegado que invoca al método estático especificado a partir de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-182">Initializes a delegate that invokes the specified static method from the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-183">Este constructor no se puede usar en código de aplicación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-183">This constructor cannot be used in application code.</span></span> <span data-ttu-id="b5a45-184">Para crear un delegado especificando el nombre de un método estático, use una sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método que especifica un nombre de método pero no especifica un objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-184">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="b5a45-185">Por ejemplo, el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> sobrecarga del método crea un delegado para un método estático con un nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-185">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="b5a45-186">Este constructor crea a delegados para los métodos estáticos solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-186">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="b5a45-187">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-187">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-188">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-188"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-189">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-189">-or-</span></span> 
 <span data-ttu-id="b5a45-190">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-190"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-191"><paramref name="target" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-191"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-192">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-192">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-193">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-193">-or-</span></span> 
 <span data-ttu-id="b5a45-194"><paramref name="target" /> representa un tipo genérico abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-194"><paramref name="target" /> represents an open generic type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-195">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-195">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-196">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-196">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5a45-197">Crea una copia superficial del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-197">Creates a shallow copy of the delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-198">Copia superficial del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-198">A shallow copy of the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-199">El clon tiene el mismo <xref:System.Type>, destino, método y lista de invocaciones que el delegado original.</span><span class="sxs-lookup"><span data-stu-id="b5a45-199">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="b5a45-200">Una copia superficial crea una nueva instancia del mismo tipo que el objeto original y, a continuación, copia los campos no estáticos del objeto original.</span><span class="sxs-lookup"><span data-stu-id="b5a45-200">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="b5a45-201">Si el campo es un tipo de valor, se realiza una copia bit a bit del campo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-201">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="b5a45-202">Si el campo es un tipo de referencia, se copia la referencia, pero el objeto que se hace referencia no; es por lo tanto, la referencia en el objeto original y la referencia en el clon punto al mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-202">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="b5a45-203">En cambio, una copia en profundidad de un objeto duplica todo lo que hace referencia directa o indirectamente por los campos del objeto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-203">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-204">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-204">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-205">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-205">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5a45-206">Concatena las listas de invocaciones de los delegados de multidifusión (combinables) especificados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-206">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates"><span data-ttu-id="b5a45-207">Matriz de delegados que se combinará.</span><span class="sxs-lookup"><span data-stu-id="b5a45-207">The array of delegates to combine.</span></span></param>
        <summary><span data-ttu-id="b5a45-208">Concatena las listas de invocaciones de una matriz de delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-208">Concatenates the invocation lists of an array of delegates.</span></span></summary>
        <returns><span data-ttu-id="b5a45-209">Nuevo delegado con una lista de invocación que concatena las listas de invocación de los delegados de la matriz <paramref name="delegates" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-209">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span></span> <span data-ttu-id="b5a45-210">Devuelve <see langword="null" /> si <paramref name="delegates" /> es <see langword="null" />, si <paramref name="delegates" /> no contiene ningún elemento o si todas las entradas de <paramref name="delegates" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-210">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-211">Si el `delegates` matriz contiene entradas que son `null`, estas entradas se omiten.</span><span class="sxs-lookup"><span data-stu-id="b5a45-211">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="b5a45-212">La lista de invocación puede contener entradas duplicadas; es decir, las entradas que hacen referencia al mismo método en el mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-212">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-213">Los delegados genéricos que son compatibles con la asignación debido a la variación no son necesariamente combinables.</span><span class="sxs-lookup"><span data-stu-id="b5a45-213">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="b5a45-214">Para ser combinables, los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-214">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="b5a45-215">Por ejemplo, suponga que una clase denominada `Derived` se deriva una clase denominada `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-215">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="b5a45-216">Un delegado del tipo `Action<Base>` (`Action(Of Base)` en Visual Basic) pueden asignarse a una variable de tipo `Action<Derived>`, tal y como se explica en [covarianza y contravarianza](~/docs/standard/generics/covariance-and-contravariance.md), pero no se pueden combinar dos delegados dado que los tipos no coinciden exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-216">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-217"><xref:System.Delegate.Combine%2A> es útil para crear controladores de eventos que se produce un evento de tiempo de varios métodos de llamada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-217"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-218">No todas las entradas que no son null de <paramref name="delegates" /> son instancias del mismo tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-218">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-219">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-219">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-220">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-220">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="b5a45-221">Delegado cuya lista de invocaciones está en primer lugar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-221">The delegate whose invocation list comes first.</span></span></param>
        <param name="b"><span data-ttu-id="b5a45-222">Delegado cuya lista de invocaciones está en último lugar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-222">The delegate whose invocation list comes last.</span></span></param>
        <summary><span data-ttu-id="b5a45-223">Concatena las listas de invocaciones de dos delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-223">Concatenates the invocation lists of two delegates.</span></span></summary>
        <returns><span data-ttu-id="b5a45-224">Nuevo delegado con una lista de invocaciones que concatena las listas de invocaciones de <paramref name="a" /> y <paramref name="b" /> en ese orden.</span><span class="sxs-lookup"><span data-stu-id="b5a45-224">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span></span> <span data-ttu-id="b5a45-225">Devuelve <paramref name="a" /> si <paramref name="b" /> es <see langword="null" />, devuelve <paramref name="b" /> si <paramref name="a" /> es una referencia nula y devuelve una referencia nula cuando tanto <paramref name="a" /> como <paramref name="b" /> son referencias nulas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-225">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-226">La lista de invocación puede contener entradas duplicadas; es decir, las entradas que hacen referencia al mismo método en el mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-226">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-227">Los delegados genéricos que son compatibles con la asignación debido a la variación no son necesariamente combinables.</span><span class="sxs-lookup"><span data-stu-id="b5a45-227">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="b5a45-228">Para ser combinables, los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-228">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="b5a45-229">Por ejemplo, suponga que una clase denominada `Derived` se deriva una clase denominada `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-229">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="b5a45-230">Un delegado del tipo `Action<Base>` (`Action(Of Base)` en Visual Basic) pueden asignarse a una variable de tipo `Action<Derived>`, tal y como se explica en [covarianza y contravarianza](~/docs/standard/generics/covariance-and-contravariance.md), pero no se pueden combinar dos delegados dado que los tipos no coinciden exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-230">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-231"><xref:System.Delegate.Combine%2A> es útil para crear controladores de eventos que se produce un evento de tiempo de varios métodos de llamada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-231"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-232"><paramref name="a" /> y <paramref name="b" /> no son <see langword="null" />, y <paramref name="a" /> y <paramref name="b" /> no son instancias del mismo tipo de delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-232">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-233">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-233">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-234">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-234">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b5a45-235">Delegado de multidifusión (combinable) cuya lista de invocaciones se agrega al final de la lista de invocaciones del delegado de multidifusión (combinable) actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-235">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span></span></param>
        <summary><span data-ttu-id="b5a45-236">Concatena las listas de invocaciones del delegado de multidifusión (combinable) especificado y del delegado de multidifusión (combinable) actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-236">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-237">Nuevo delegado de multidifusión (combinable) con una lista de invocaciones que concatena la lista de invocaciones del delegado de multidifusión (combinable) actual y la lista de invocaciones de <paramref name="d" />; o delegado de multidifusión (combinable) actual si <paramref name="d" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-237">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-238">Este método solo se aplica si el delegado actual es de multidifusión (combinable).</span><span class="sxs-lookup"><span data-stu-id="b5a45-238">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="b5a45-239">La implementación actual simplemente inicia un <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-239">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="b5a45-240">La lista de invocación puede contener entradas duplicadas; es decir, las entradas que hacen referencia al mismo método en el mismo objeto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-240">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException"><span data-ttu-id="b5a45-241">Siempre se produce.</span><span class="sxs-lookup"><span data-stu-id="b5a45-241">Always thrown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-242">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-242">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-243">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-243">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5a45-244">Crea un delegado del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-244">Creates a delegate of the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-245"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-245">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-246"><see cref="T:System.Reflection.MethodInfo" /> que describe el método estático o de instancia que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-246">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span> <span data-ttu-id="b5a45-247">Solo se admiten métodos estáticos en las versiones 1.0 y 1.1 de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="b5a45-247">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span></span></param>
        <summary><span data-ttu-id="b5a45-248">Crea un delegado del tipo especificado para representar el método estático especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-248">Creates a delegate of the specified type to represent the specified static method.</span></span></summary>
        <returns><span data-ttu-id="b5a45-249">Delegado del tipo especificado para representar el método estático especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-249">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-250">En la versión 1.0 y 1.1 de .NET Framework, esta sobrecarga del método crea a los delegados para los métodos estáticos solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-250">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="b5a45-251">En la versión 2.0 de .NET Framework, esta sobrecarga del método también puede crear instancia abierta delegados de método; es decir, los delegados que proporcionar explícitamente el primer argumento oculto de métodos de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-251">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="b5a45-252">Para obtener una explicación detallada, vea más general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> sobrecarga del método, que permite crear todas las combinaciones de delegados abiertos o cerrados para la instancia o métodos estáticos y, opcionalmente, para especificar un primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-252">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-253">Esta sobrecarga del método debe usarse cuando no se cierra el delegado en su primer argumento, porque en ese caso es un poco más rápido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-253">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="b5a45-254">Esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método y especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-254">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-255">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-255">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-256">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-256">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-257">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-257">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="b5a45-258">Tipos de parámetros compatibles y el tipo de valor devuelto</span><span class="sxs-lookup"><span data-stu-id="b5a45-258">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="b5a45-259">En la versión 2.0 de .NET Framework, los tipos de parámetro y el tipo de valor devuelto de un delegado que se crea mediante esta sobrecarga del método deben ser compatibles con los tipos de parámetro y el tipo de valor devuelto del método que representa el delegado; los tipos no tienen que coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-259">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="b5a45-260">Representa una relajación del comportamiento de enlace en .NET Framework versiones 1.0 y 1.1, donde los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-260">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-261">Un parámetro de un delegado es compatible con el parámetro correspondiente de un método si el tipo del parámetro del delegado es más restrictivo que el del método, porque así se garantiza que el argumento que se pase al delegado también se podrá pasar de forma segura al método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-261">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="b5a45-262">De forma similar, el tipo de devolución de un delegado es compatible con el tipo de devolución de un método si el del método es más restrictivo que el del delegado, porque así se garantiza que el valor devuelto por el método se puede convertir con seguridad al tipo de devolución del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-262">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-263">Por ejemplo, un delegado con un parámetro de tipo <xref:System.Collections.Hashtable> y un tipo de valor devuelto de <xref:System.Object> puede representar un método con un parámetro de tipo <xref:System.Object> y un valor devuelto de tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-263">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-264">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="b5a45-264">This section contains two code examples.</span></span> <span data-ttu-id="b5a45-265">El primer ejemplo muestra los dos tipos de delegados que se pueden crear con esta sobrecarga del método: abra a través de un método de instancia y a través de un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-265">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="b5a45-266">El segundo ejemplo de código muestra los tipos de parámetros compatibles y los tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-266">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="b5a45-267">**Ejemplo 1**</span><span class="sxs-lookup"><span data-stu-id="b5a45-267">**Example 1**</span></span>  
  
 <span data-ttu-id="b5a45-268">El ejemplo de código siguiente muestra las dos maneras en que se puede crear un delegado mediante esta sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-268">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-269">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifican un <xref:System.Reflection.MethodInfo> pero no un primer argumento; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-269">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-270">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-270">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-271">En el ejemplo se declara una clase `C` con un método estático `M2` y un método de instancia `M1`, y dos tipos de delegado: `D1` toma una instancia de `C` y una cadena, y `D2` toma una cadena.</span><span class="sxs-lookup"><span data-stu-id="b5a45-271">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="b5a45-272">Una segunda clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-272">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-273">Un delegado del tipo `D1`, que representa un método de instancia abierta, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-273">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-274">Cuando se invoca el delegado, se debe pasar una instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-274">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-275">Un delegado del tipo `D2`, que representa un método estático abierto, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-275">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="b5a45-276">**Ejemplo 2**</span><span class="sxs-lookup"><span data-stu-id="b5a45-276">**Example 2**</span></span>  
  
 <span data-ttu-id="b5a45-277">En el ejemplo de código siguiente se muestra la compatibilidad de tipos de parámetro y tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-277">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="b5a45-278">El ejemplo de código define una clase base denominada `Base` y una clase denominada `Derived` que se deriva de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-278">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="b5a45-279">La clase derivada tiene una `static` (`Shared` en Visual Basic) método denominado `MyMethod` con un parámetro de tipo `Base` y un tipo de valor devuelto de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-279">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="b5a45-280">El ejemplo de código también define un delegado denominado `Example` que tiene un parámetro de tipo `Derived` y un tipo de valor devuelto de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-280">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="b5a45-281">El ejemplo de código se muestra que el delegado denominado `Example` puede usarse para representar el método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-281">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="b5a45-282">El método se puede enlazar al delegado porque:</span><span class="sxs-lookup"><span data-stu-id="b5a45-282">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="b5a45-283">El tipo de parámetro del delegado (`Derived`) es más restrictivo que el tipo de parámetro `MyMethod` (`Base`), de modo que siempre es seguro pasar el argumento del delegado para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-283">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="b5a45-284">El tipo de valor devuelto de `MyMethod` (`Derived`) es más restrictivo que el tipo de parámetro del delegado (`Base`), de modo que siempre es seguro convertir el tipo de valor devuelto del método para el tipo de valor devuelto del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-284">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-285">El ejemplo de código no genera ninguna salida.</span><span class="sxs-lookup"><span data-stu-id="b5a45-285">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-286">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-286"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-287">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-287">-or-</span></span> 
 <span data-ttu-id="b5a45-288">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-288"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-289"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-289"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-290">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-290">-or-</span></span> 
 <span data-ttu-id="b5a45-291"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-291"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-292">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-292">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-293">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-293">-or-</span></span> 
 <span data-ttu-id="b5a45-294"><paramref name="method" /> no es un método estático y la versión de .NET Framework es 1.0 o 1.1.</span><span class="sxs-lookup"><span data-stu-id="b5a45-294"><paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span></span>  
  
<span data-ttu-id="b5a45-295">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-295">-or-</span></span> 
 <span data-ttu-id="b5a45-296"><paramref name="method" /> no se puede enlazar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-296"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="b5a45-297">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-297">-or-</span></span> 
 <span data-ttu-id="b5a45-298"><paramref name="method" /> no es un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-298"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="b5a45-299">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-299">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-300">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-300">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-301">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-301">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-302">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-302">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-303">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-303">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-304"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-304">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="b5a45-305">Objeto al que se enlaza el delegado o <see langword="null" /> para tratar <paramref name="method" /> como <see langword="static" /> (<see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-305">The object to which the delegate is bound, or <see langword="null" /> to treat <paramref name="method" /> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-306"><see cref="T:System.Reflection.MethodInfo" /> que describe el método estático o de instancia que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-306">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="b5a45-307">Crea un delegado del tipo especificado que representa el método estático o de instancia especificado, con el primer argumento definido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-307">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span></span></summary>
        <returns><span data-ttu-id="b5a45-308">Delegado del tipo especificado que representa el método estático o de instancia definido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-308">A delegate of the specified type that represents the specified static or instance method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-309">Llamar a esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método y especificando `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-309">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="b5a45-310">Estas dos sobrecargas proporcionan la manera más flexible para crear a delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-310">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="b5a45-311">Puede usarlos para crear delegados para estáticas o métodos de instancia y, opcionalmente, para especificar el primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-311">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-312">Si no proporciona un primer argumento, utilice el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga del método para mejorar el rendimiento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-312">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="b5a45-313">El tipo de delegado y el método deben tener tipos de valor devuelto compatibles.</span><span class="sxs-lookup"><span data-stu-id="b5a45-313">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="b5a45-314">Es decir, el tipo de valor devuelto de `method` debe ser asignable al tipo de valor devuelto de `type`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-314">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="b5a45-315">Si `firstArgument` es proporciona, se pasa a `method` cada vez que se invoca al delegado; `firstArgument` se dice que está enlazado al delegado, y se dice que el delegado se cerrados a lo largo de su primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-315">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="b5a45-316">Si `method` es `static` (`Shared` en Visual Basic), la lista de argumentos proporcionado al invocar al delegado incluye todos los parámetros excepto el primero; si `method` es un método de instancia, a continuación, `firstArgument` se pasa a la instancia oculta parámetro (representado por `this` en C# o por `Me` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-316">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="b5a45-317">Si `firstArgument` se proporciona, el primer parámetro de `method` debe ser un tipo de referencia y `firstArgument` debe ser compatible con ese tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-317">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5a45-318">Si `method` es `static` (`Shared` en Visual Basic) y su primer parámetro es de tipo <xref:System.Object> o <xref:System.ValueType>, a continuación, `firstArgument` puede ser un tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="b5a45-318">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="b5a45-319">En este caso `firstArgument` se aplica automáticamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-319">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="b5a45-320">La conversión boxing automática no se produce para los demás argumentos, como en C# o Visual Basic función llamaría.</span><span class="sxs-lookup"><span data-stu-id="b5a45-320">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="b5a45-321">Si `firstArgument` es una referencia nula y `method` es un método de instancia, el resultado depende de las firmas del tipo de delegado `type` y de `method`:</span><span class="sxs-lookup"><span data-stu-id="b5a45-321">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="b5a45-322">Si la firma de `type` incluya explícitamente el primer parámetro oculto de `method`, se dice que el delegado representa un método de instancia abierta.</span><span class="sxs-lookup"><span data-stu-id="b5a45-322">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="b5a45-323">Cuando se invoca el delegado, el primer argumento de la lista de argumentos se pasa al parámetro de instancia oculta `method`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-323">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="b5a45-324">Si las firmas de `method` y `type` coinciden (es decir, todos los tipos de parámetro son compatibles), a continuación, se dice que el delegado se cerrados a lo largo de una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-324">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="b5a45-325">Invocación del delegado es como una llamada a un método de instancia en una instancia null, que no es algo especialmente útil.</span><span class="sxs-lookup"><span data-stu-id="b5a45-325">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="b5a45-326">Si `firstArgument` es una referencia nula y `method` es estático, el resultado depende de las firmas del tipo de delegado `type` y de `method`:</span><span class="sxs-lookup"><span data-stu-id="b5a45-326">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="b5a45-327">Si la firma de `method` y `type` coinciden (es decir, todos los tipos de parámetro son compatibles), se dice que el delegado para representar un método estático abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-327">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="b5a45-328">Este es el caso más común para los métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-328">This is the most common case for static methods.</span></span> <span data-ttu-id="b5a45-329">En este caso, puede obtener un rendimiento ligeramente mejor mediante el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-329">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="b5a45-330">Si la firma de `type` comienza con el segundo parámetro de `method` y el resto de los tipos de parámetros son compatibles y, después, se dice que el delegado se cerrados a lo largo de una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-330">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="b5a45-331">Cuando se invoca el delegado, se pasa una referencia nula al primer parámetro de `method`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-331">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-332">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-332">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-333">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-333">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-334">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-334">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="b5a45-335">Tipos de parámetros compatibles y el tipo de valor devuelto</span><span class="sxs-lookup"><span data-stu-id="b5a45-335">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="b5a45-336">Los tipos de parámetro y el tipo de valor devuelto de un delegado deben ser compatibles con los tipos de parámetro y el tipo de valor devuelto del método que representa el delegado; los tipos no tienen que coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-336">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-337">En la versión 1.0 y 1.1 de .NET Framework, los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-337">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-338">Un parámetro de un delegado es compatible con el parámetro correspondiente de un método si el tipo del parámetro del delegado es más restrictivo que el del método, porque así se garantiza que el argumento que se pase al delegado también se podrá pasar de forma segura al método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-338">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="b5a45-339">De forma similar, el tipo de devolución de un delegado es compatible con el tipo de devolución de un método si el del método es más restrictivo que el del delegado, porque así se garantiza que el valor devuelto por el método se puede convertir con seguridad al tipo de devolución del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-339">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-340">Por ejemplo, un delegado con un parámetro de tipo <xref:System.Collections.Hashtable> y un tipo de valor devuelto de <xref:System.Object> puede representar un método con un parámetro de tipo <xref:System.Object> y un valor devuelto de tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-340">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="b5a45-341">Determinación de los métodos que puede representar un delegado</span><span class="sxs-lookup"><span data-stu-id="b5a45-341">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="b5a45-342">Otra manera útil pensar en la flexibilidad proporcionada por esta sobrecarga de <xref:System.Delegate.CreateDelegate%2A> es que cualquier delegado puede representar cuatro combinaciones diferentes de firma de método y el tipo de método (estático frente a la instancia).</span><span class="sxs-lookup"><span data-stu-id="b5a45-342">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="b5a45-343">Considere la posibilidad de un tipo de delegado `D` con un argumento de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-343">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="b5a45-344">Lo siguiente describe los métodos `D` puede representar, omitiendo el tipo de valor devuelto, puesto que debe coincidir en todos los casos:</span><span class="sxs-lookup"><span data-stu-id="b5a45-344">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="b5a45-345">`D` puede representar cualquier método de instancia que tiene exactamente un argumento de tipo `C`, independientemente de qué tipo pertenece el método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-345">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="b5a45-346">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una instancia del tipo `method` pertenece, y se dice que el delegado resultante se cerrados a lo largo de esa instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-346">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="b5a45-347">(De forma trivial, `D` también se puede cerrar a través de una referencia nula si `firstArgument` es una referencia nula.)</span><span class="sxs-lookup"><span data-stu-id="b5a45-347">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="b5a45-348">`D` puede representar un método de instancia de `C` que no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-348">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="b5a45-349">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-349">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="b5a45-350">El delegado resultante representa un método de instancia abierta y una instancia de `C` se debe proporcionar cada vez que se invoca.</span><span class="sxs-lookup"><span data-stu-id="b5a45-350">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-351">`D` puede representar un método estático que toma un argumento de tipo `C`, y que el método puede pertenecer a cualquier tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-351">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="b5a45-352">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-352">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="b5a45-353">El delegado resultante representa un método estático abierto y una instancia de `C` se debe proporcionar cada vez que se invoca.</span><span class="sxs-lookup"><span data-stu-id="b5a45-353">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-354">`D` puede representar un método estático que pertenece al tipo `F` y tiene dos argumentos de tipo `F` y tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-354">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="b5a45-355">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una instancia de `F`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-355">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="b5a45-356">El delegado resultante representa un método estático que se cierra en esa instancia de `F`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-356">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="b5a45-357">Tenga en cuenta que en el caso donde `F` y `C` son del mismo tipo, el método estático tiene dos argumentos de ese tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-357">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="b5a45-358">(En este caso, `D` se cierra en una referencia nula si `firstArgument` es una referencia nula.)</span><span class="sxs-lookup"><span data-stu-id="b5a45-358">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-359">Esta sección contiene tres ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="b5a45-359">This section contains three code examples.</span></span> <span data-ttu-id="b5a45-360">El primer ejemplo muestra los cuatro tipos de delegados que se pueden crear: cerrados a lo largo de un método de instancia, abra a través de un método de instancia, abra a través de un método estático y cerrados a lo largo de un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-360">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="b5a45-361">El segundo ejemplo de código muestra los tipos de parámetros compatibles y los tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-361">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="b5a45-362">El tercer ejemplo de código define un tipo de delegado único y muestra todos los métodos de ese tipo de delegado pueden representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-362">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="b5a45-363">**Ejemplo 1**</span><span class="sxs-lookup"><span data-stu-id="b5a45-363">**Example 1**</span></span>  
  
 <span data-ttu-id="b5a45-364">En el ejemplo de código siguiente se muestra las cuatro maneras se puede crear un delegado mediante esta sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-364">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-365">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifique `firstArgument` y un <xref:System.Reflection.MethodInfo>; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-365">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-366">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-366">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-367">En el ejemplo se declara una clase `C` con un método estático `M2` y un método de instancia `M1`, y tres tipos de delegado: `D1` toma una instancia de `C` y una cadena, `D2` toma una cadena y `D3`no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-367">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="b5a45-368">Una segunda clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-368">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-369">Un delegado del tipo `D2`, cerrado a través de una instancia de `C`, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-369">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-370">Se invoca con cadenas diferentes, para mostrar que la instancia enlazada de `C` siempre se utiliza.</span><span class="sxs-lookup"><span data-stu-id="b5a45-370">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="b5a45-371">Un delegado del tipo `D1`, que representa un método de instancia abierta, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-371">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-372">Cuando se invoca el delegado, se debe pasar una instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-372">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-373">Un delegado del tipo `D2`, que representa un método estático abierto, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-373">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="b5a45-374">Por último, un delegado del tipo `D3`, cerrados a lo largo de una cadena, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-374">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="b5a45-375">El método se invoca para mostrar que utiliza la cadena enlazada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-375">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="b5a45-376">**Ejemplo 2**</span><span class="sxs-lookup"><span data-stu-id="b5a45-376">**Example 2**</span></span>  
  
 <span data-ttu-id="b5a45-377">En el ejemplo de código siguiente se muestra la compatibilidad de tipos de parámetro y tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-377">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-378">Este ejemplo de código utiliza el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-378">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="b5a45-379">El uso de otras sobrecargas que toman <xref:System.Reflection.MethodInfo> es similar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-379">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="b5a45-380">El ejemplo de código define una clase base denominada `Base` y una clase denominada `Derived` que se deriva de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-380">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="b5a45-381">La clase derivada tiene una `static` (`Shared` en Visual Basic) método denominado `MyMethod` con un parámetro de tipo `Base` y un tipo de valor devuelto de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-381">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="b5a45-382">El ejemplo de código también define un delegado denominado `Example` que tiene un parámetro de tipo `Derived` y un tipo de valor devuelto de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-382">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="b5a45-383">El ejemplo de código se muestra que el delegado denominado `Example` puede usarse para representar el método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-383">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="b5a45-384">El método se puede enlazar al delegado porque:</span><span class="sxs-lookup"><span data-stu-id="b5a45-384">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="b5a45-385">El tipo de parámetro del delegado (`Derived`) es más restrictivo que el tipo de parámetro `MyMethod` (`Base`), de modo que siempre es seguro pasar el argumento del delegado para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-385">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="b5a45-386">El tipo de valor devuelto de `MyMethod` (`Derived`) es más restrictivo que el tipo de parámetro del delegado (`Base`), de modo que siempre es seguro convertir el tipo de valor devuelto del método para el tipo de valor devuelto del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-386">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-387">El ejemplo de código no genera ninguna salida.</span><span class="sxs-lookup"><span data-stu-id="b5a45-387">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="b5a45-388">**Ejemplo 3**</span><span class="sxs-lookup"><span data-stu-id="b5a45-388">**Example 3**</span></span>  
  
 <span data-ttu-id="b5a45-389">En el ejemplo de código siguiente se muestra todos los métodos puede representar un tipo de delegado único, utilizando el <xref:System.Delegate.CreateDelegate%2A> método para crear los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-389">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-390">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifique `firstArgument` y un <xref:System.Reflection.MethodInfo>; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-390">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-391">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-391">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-392">El ejemplo de código define dos clases, `C` y `F`y un tipo de delegado `D` con un argumento de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-392">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="b5a45-393">Las clases tienen coincidentes estáticos y métodos de instancia `M1`, `M3`, y `M4`y la clase `C` también tiene un método de instancia `M2` que no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-393">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="b5a45-394">Una tercera clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-394">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-395">Los delegados se crean, por ejemplo, método `M1` de tipo `C` y tipo `F`; cada uno se cierra sobre una instancia del tipo correspondiente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-395">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="b5a45-396">Método `M1` typu `C` muestra el `ID` las propiedades de la instancia enlazada y del argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-396">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="b5a45-397">Se crea un delegado para método `M2` de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-397">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="b5a45-398">Se trata de un delegado de la instancia abierta, en el que el argumento del delegado representa el primer argumento oculto en el método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-398">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="b5a45-399">El método no tiene ningún otro argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-399">The method has no other arguments.</span></span> <span data-ttu-id="b5a45-400">Se llama como si fuera un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-400">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="b5a45-401">Se crean delegados para el método estático `M3` de tipo `C` y tipo `F`; estos son delegados estáticos abiertos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-401">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-402">Por último, se crean los delegados de método estático `M4` typu `C` y tipo `F`; cada método tiene el tipo declarativo como primer argumento y se proporciona una instancia del tipo, por lo que los delegados se cierran en sus primeros argumentos .</span><span class="sxs-lookup"><span data-stu-id="b5a45-402">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="b5a45-403">Método `M4` typu `C` muestra el `ID` las propiedades de la instancia enlazada y del argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-403">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-404">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-404"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-405">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-405">-or-</span></span> 
 <span data-ttu-id="b5a45-406">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-406"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-407"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-407"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-408">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-408">-or-</span></span> 
 <span data-ttu-id="b5a45-409"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-409"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-410">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-410">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-411">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-411">-or-</span></span> 
 <span data-ttu-id="b5a45-412"><paramref name="method" /> no se puede enlazar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-412"><paramref name="method" /> cannot be bound.</span></span>  
  
<span data-ttu-id="b5a45-413">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-413">-or-</span></span> 
 <span data-ttu-id="b5a45-414"><paramref name="method" /> no es un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-414"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="b5a45-415">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-415">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-416">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-416">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-417">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-417">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-418">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-418">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-419">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-419">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-420"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-420">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-421">Instancia de clase en la que se invoca a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-421">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-422">Nombre del método de instancia que el delegado va a representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-422">The name of the instance method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="b5a45-423">Crea un delegado del tipo especificado que representa el método de instancia especificado que se va a invocar en la instancia de clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-423">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></summary>
        <returns><span data-ttu-id="b5a45-424">Delegado del tipo especificado que representa el método de instancia especificado que se va a invocar en la instancia de clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-424">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-425">Este método crea a los delegados por métodos de instancia solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-425">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="b5a45-426">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-426">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="b5a45-427">Esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga del método, especifica `false` para `ignoreCase` y `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-427">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-428">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-428">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-429">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-429">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-430">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-430">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-431">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-431"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-432">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-432">-or-</span></span> 
 <span data-ttu-id="b5a45-433">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-433"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-434">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-434">-or-</span></span> 
 <span data-ttu-id="b5a45-435">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-435"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-436"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-436"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-437">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-437">-or-</span></span> 
 <span data-ttu-id="b5a45-438"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-438"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-439">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-439">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-440">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-440">-or-</span></span> 
 <span data-ttu-id="b5a45-441"><paramref name="method" /> no es un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-441"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="b5a45-442">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-442">-or-</span></span> 
 <span data-ttu-id="b5a45-443"><paramref name="method" /> no se puede enlazar, por ejemplo, porque no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-443"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-444">El método <see langword="Invoke" /> de <paramref name="type" /> no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-444">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-445">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-445">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-446">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-446">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-447">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-447">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-448"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-448">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-449"><see cref="T:System.Reflection.MethodInfo" /> que describe el método estático o de instancia que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-449">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="b5a45-450">Es <see langword="true" /> para iniciar una excepción si no se puede enlazar <paramref name="method" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-450"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-451">Crea un delegado del tipo especificado para representar el método estático especificado, con el comportamiento establecido para el caso de que se produzca un error al enlazar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-451">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="b5a45-452">Delegado del tipo especificado para representar el método estático especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-452">A delegate of the specified type to represent the specified static method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-453">Esta sobrecarga del método puede crear a delegados de método estático abierto y abrir instancia delegados de método: es decir, los delegados que exponen el primer argumento oculto de los métodos de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-453">This method overload can create open static method delegates and open instance method delegates - that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="b5a45-454">Para obtener una explicación detallada, vea más general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método, que le permite crear todas las combinaciones de delegados abiertos o cerrados por ejemplo o métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-454">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-455">Esta sobrecarga del método debe usarse cuando no se cierra el delegado en su primer argumento, porque en ese caso es un poco más rápido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-455">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-456">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-456">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-457">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-457">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-458">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-458">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="b5a45-459">Tipos de parámetros compatibles y el tipo de valor devuelto</span><span class="sxs-lookup"><span data-stu-id="b5a45-459">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="b5a45-460">Los tipos de parámetro y el tipo de valor devuelto de un delegado deben ser compatibles con los tipos de parámetro y el tipo de valor devuelto del método que representa el delegado; los tipos no tienen que coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-460">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-461">En la versión 1.0 y 1.1 de .NET Framework, los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-461">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-462">Un parámetro de un delegado es compatible con el parámetro correspondiente de un método si el tipo del parámetro del delegado es más restrictivo que el del método, porque así se garantiza que el argumento que se pase al delegado también se podrá pasar de forma segura al método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-462">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="b5a45-463">De forma similar, el tipo de devolución de un delegado es compatible con el tipo de devolución de un método si el del método es más restrictivo que el del delegado, porque así se garantiza que el valor devuelto por el método se puede convertir con seguridad al tipo de devolución del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-463">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-464">Por ejemplo, un delegado con un parámetro de tipo <xref:System.Collections.Hashtable> y un tipo de valor devuelto de <xref:System.Object> puede representar un método con un parámetro de tipo <xref:System.Object> y un valor devuelto de tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-464">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-465">Esta sección contiene dos ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="b5a45-465">This section contains two code examples.</span></span> <span data-ttu-id="b5a45-466">El primer ejemplo muestra los dos tipos de delegados que se pueden crear con esta sobrecarga del método: abra a través de un método de instancia y a través de un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-466">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="b5a45-467">El segundo ejemplo de código muestra los tipos de parámetros compatibles y los tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-467">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="b5a45-468">**Ejemplo 1**</span><span class="sxs-lookup"><span data-stu-id="b5a45-468">**Example 1**</span></span>  
  
 <span data-ttu-id="b5a45-469">El ejemplo de código siguiente muestra las dos maneras en que se puede crear un delegado mediante esta sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-469">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-470">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifican un <xref:System.Reflection.MethodInfo> pero no un primer argumento; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-470">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-471">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-471">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-472">En el ejemplo se declara una clase `C` con un método estático `M2` y un método de instancia `M1`, y dos tipos de delegado: `D1` toma una instancia de `C` y una cadena, y `D2` toma una cadena.</span><span class="sxs-lookup"><span data-stu-id="b5a45-472">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="b5a45-473">Una segunda clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-473">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-474">Un delegado del tipo `D1`, que representa un método de instancia abierta, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-474">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-475">Cuando se invoca el delegado, se debe pasar una instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-475">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-476">Un delegado del tipo `D2`, que representa un método estático abierto, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-476">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="b5a45-477">**Ejemplo 2**</span><span class="sxs-lookup"><span data-stu-id="b5a45-477">**Example 2**</span></span>  
  
 <span data-ttu-id="b5a45-478">En el ejemplo de código siguiente se muestra la compatibilidad de tipos de parámetro y tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-478">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-479">Este ejemplo de código utiliza el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-479">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="b5a45-480">El uso de otras sobrecargas que toman <xref:System.Reflection.MethodInfo> es similar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-480">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="b5a45-481">El ejemplo de código define una clase base denominada `Base` y una clase denominada `Derived` que se deriva de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-481">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="b5a45-482">La clase derivada tiene una `static` (`Shared` en Visual Basic) método denominado `MyMethod` con un parámetro de tipo `Base` y un tipo de valor devuelto de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-482">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="b5a45-483">El ejemplo de código también define un delegado denominado `Example` que tiene un parámetro de tipo `Derived` y un tipo de valor devuelto de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-483">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="b5a45-484">El ejemplo de código se muestra que el delegado denominado `Example` puede usarse para representar el método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-484">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="b5a45-485">El método se puede enlazar al delegado porque:</span><span class="sxs-lookup"><span data-stu-id="b5a45-485">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="b5a45-486">El tipo de parámetro del delegado (`Derived`) es más restrictivo que el tipo de parámetro `MyMethod` (`Base`), de modo que siempre es seguro pasar el argumento del delegado para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-486">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="b5a45-487">El tipo de valor devuelto de `MyMethod` (`Derived`) es más restrictivo que el tipo de parámetro del delegado (`Base`), de modo que siempre es seguro convertir el tipo de valor devuelto del método para el tipo de valor devuelto del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-487">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-488">El ejemplo de código no genera ninguna salida.</span><span class="sxs-lookup"><span data-stu-id="b5a45-488">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-489">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-489"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-490">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-490">-or-</span></span> 
 <span data-ttu-id="b5a45-491">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-491"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-492"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-492"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-493">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-493">-or-</span></span> 
 <span data-ttu-id="b5a45-494"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-494"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-495">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-495">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-496">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-496">-or-</span></span> 
 <span data-ttu-id="b5a45-497"><paramref name="method" /> no se puede enlazar y <paramref name="throwOnBindFailure" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-497"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="b5a45-498">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-498">-or-</span></span> 
 <span data-ttu-id="b5a45-499"><paramref name="method" /> no es un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-499"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="b5a45-500">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-500">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-501">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-501">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-502">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-502">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-503">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-503">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-504">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-504">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-505"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-505">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-506"><see cref="T:System.Type" /> que representa la clase que implementa <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-506">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-507">Nombre del método estático que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-507">The name of the static method that the delegate is to represent.</span></span></param>
        <summary><span data-ttu-id="b5a45-508">Crea un delegado del tipo especificado que representa el método estático especificado de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-508">Creates a delegate of the specified type that represents the specified static method of the specified class.</span></span></summary>
        <returns><span data-ttu-id="b5a45-509">Delegado del tipo especificado que representa el método estático especificado de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-509">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-510">Este método crea a los delegados para los métodos estáticos solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-510">This method creates delegates for static methods only.</span></span> <span data-ttu-id="b5a45-511">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-511">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="b5a45-512">Esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga del método, especifica `false` para `ignoreCase` y `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-512">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-513">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-513">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-514">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-514">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-515">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-515">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-516">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-516"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-517">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-517">-or-</span></span> 
 <span data-ttu-id="b5a45-518">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-518"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-519">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-519">-or-</span></span> 
 <span data-ttu-id="b5a45-520">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-520"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-521"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-521"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-522">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-522">-or-</span></span> 
 <span data-ttu-id="b5a45-523"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-523"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-524">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-524">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-525">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-525">-or-</span></span> 
 <span data-ttu-id="b5a45-526"><paramref name="target" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-526"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="b5a45-527">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-527">-or-</span></span> 
 <span data-ttu-id="b5a45-528"><paramref name="target" /> es un tipo genérico abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-528"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="b5a45-529">Es decir, su propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-529">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="b5a45-530">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-530">-or-</span></span> 
 <span data-ttu-id="b5a45-531"><paramref name="method" /> no es un método <see langword="static" /> (método <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-531"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="b5a45-532">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-532">-or-</span></span> 
 <span data-ttu-id="b5a45-533"><paramref name="method" /> no se puede enlazar (por ejemplo, porque no se encuentra) y <paramref name="throwOnBindFailure" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-533"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-534">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-534">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-535">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-535">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-536">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-536">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-537">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-537">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-538"><see cref="T:System.Type" /> que representa el tipo de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-538">A <see cref="T:System.Type" /> representing the type of delegate to create.</span></span></param>
        <param name="firstArgument"><span data-ttu-id="b5a45-539"><see cref="T:System.Object" /> que es el primer argumento del método que representa el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-539">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span></span> <span data-ttu-id="b5a45-540">Para los métodos de instancia, debe ser compatible con el tipo de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-540">For instance methods, it must be compatible with the instance type.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-541"><see cref="T:System.Reflection.MethodInfo" /> que describe el método estático o de instancia que el delegado va a representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-541">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="b5a45-542">Es <see langword="true" /> para iniciar una excepción si no se puede enlazar <paramref name="method" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-542"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-543">Crea un delegado del tipo especificado que representa el método estático o de instancia determinado, con el primer argumento definido y el comportamiento especificado si se produce un error en el enlace.</span><span class="sxs-lookup"><span data-stu-id="b5a45-543">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="b5a45-544">Delegado del tipo especificado que representa el método estático o de instancia determinado, o <see langword="null" /> si <paramref name="throwOnBindFailure" /> es <see langword="false" /> y no se puede enlazar el delegado a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-544">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-545">Esta sobrecarga del método y el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> sobrecarga del método siempre produce una excepción en caso de error para enlazar, proporcionan la manera más flexible para crear delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-545">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="b5a45-546">Puede usarlos para crear delegados para estáticas o métodos de instancia, con o sin un primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-546">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-547">Si no proporciona un primer argumento, utilice el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método para mejorar el rendimiento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-547">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="b5a45-548">El tipo de delegado y el método deben tener tipos de valor devuelto compatibles.</span><span class="sxs-lookup"><span data-stu-id="b5a45-548">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="b5a45-549">Es decir, el tipo de valor devuelto de `method` debe ser asignable al tipo de valor devuelto de `type`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-549">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="b5a45-550">Si `firstArgument` es proporciona, se pasa a `method` cada vez que se invoca al delegado; `firstArgument` se dice que está enlazado al delegado, y se dice que el delegado se cerrados a lo largo de su primer argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-550">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="b5a45-551">Si `method` es `static` (`Shared` en Visual Basic), la lista de argumentos proporcionado al invocar al delegado incluye todos los parámetros excepto el primero; si `method` es un método de instancia, a continuación, `firstArgument` se pasa a la instancia oculta parámetro (representado por `this` en C# o por `Me` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-551">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="b5a45-552">Si `firstArgument` se proporciona, el primer parámetro de `method` debe ser un tipo de referencia y `firstArgument` debe ser compatible con ese tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-552">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5a45-553">Si `method` es `static` (`Shared` en Visual Basic) y su primer parámetro es de tipo <xref:System.Object> o <xref:System.ValueType>, a continuación, `firstArgument` puede ser un tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="b5a45-553">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="b5a45-554">En este caso `firstArgument` se aplica automáticamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-554">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="b5a45-555">La conversión boxing automática no se produce para los demás argumentos, como en C# o Visual Basic función llamaría.</span><span class="sxs-lookup"><span data-stu-id="b5a45-555">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="b5a45-556">Si `firstArgument` es una referencia nula y `method` es un método de instancia, el resultado depende de las firmas del tipo de delegado `type` y de `method`:</span><span class="sxs-lookup"><span data-stu-id="b5a45-556">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="b5a45-557">Si la firma de `type` incluya explícitamente el primer parámetro oculto de `method`, se dice que el delegado representa un método de instancia abierta.</span><span class="sxs-lookup"><span data-stu-id="b5a45-557">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="b5a45-558">Cuando se invoca el delegado, el primer argumento de la lista de argumentos se pasa al parámetro de instancia oculta `method`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-558">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="b5a45-559">Si las firmas de `method` y `type` coinciden (es decir, todos los tipos de parámetro son compatibles), a continuación, se dice que el delegado se cerrados a lo largo de una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-559">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="b5a45-560">Invocación del delegado es como una llamada a un método de instancia en una instancia null, que no es algo especialmente útil.</span><span class="sxs-lookup"><span data-stu-id="b5a45-560">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="b5a45-561">Si `firstArgument` es una referencia nula y `method` es estático, el resultado depende de las firmas del tipo de delegado `type` y de `method`:</span><span class="sxs-lookup"><span data-stu-id="b5a45-561">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="b5a45-562">Si la firma de `method` y `type` coinciden (es decir, todos los tipos de parámetro son compatibles), se dice que el delegado para representar un método estático abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-562">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="b5a45-563">Este es el caso más común para los métodos estáticos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-563">This is the most common case for static methods.</span></span> <span data-ttu-id="b5a45-564">En este caso, puede obtener un rendimiento ligeramente mejor mediante el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-564">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="b5a45-565">Si la firma de `type` comienza con el segundo parámetro de `method` y el resto de los tipos de parámetros son compatibles y, después, se dice que el delegado se cerrados a lo largo de una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-565">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="b5a45-566">Cuando se invoca el delegado, se pasa una referencia nula al primer parámetro de `method`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-566">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-567">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-567">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-568">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-568">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-569">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-569">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="b5a45-570">Tipos de parámetros compatibles y el tipo de valor devuelto</span><span class="sxs-lookup"><span data-stu-id="b5a45-570">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="b5a45-571">Los tipos de parámetro y el tipo de valor devuelto de un delegado deben ser compatibles con los tipos de parámetro y el tipo de valor devuelto del método que representa el delegado; los tipos no tienen que coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-571">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-572">En la versión 1.0 y 1.1 de .NET Framework los tipos deben coincidir exactamente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-572">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="b5a45-573">Un parámetro de un delegado es compatible con el parámetro correspondiente de un método si el tipo del parámetro del delegado es más restrictivo que el del método, porque así se garantiza que el argumento que se pase al delegado también se podrá pasar de forma segura al método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-573">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="b5a45-574">De forma similar, el tipo de devolución de un delegado es compatible con el tipo de devolución de un método si el del método es más restrictivo que el del delegado, porque así se garantiza que el valor devuelto por el método se puede convertir con seguridad al tipo de devolución del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-574">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-575">Por ejemplo, un delegado con un parámetro de tipo <xref:System.Collections.Hashtable> y un tipo de valor devuelto de <xref:System.Object> puede representar un método con un parámetro de tipo <xref:System.Object> y un valor devuelto de tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-575">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="b5a45-576">Determinación de los métodos que puede representar un delegado</span><span class="sxs-lookup"><span data-stu-id="b5a45-576">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="b5a45-577">Otra manera útil pensar en la flexibilidad proporcionada por esta sobrecarga de <xref:System.Delegate.CreateDelegate%2A> es que cualquier delegado puede representar cuatro combinaciones diferentes de firma de método y el tipo de método (estático frente a la instancia).</span><span class="sxs-lookup"><span data-stu-id="b5a45-577">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="b5a45-578">Considere la posibilidad de un tipo de delegado `D` con un argumento de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-578">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="b5a45-579">Lo siguiente describe los métodos `D` puede representar, omitiendo el tipo de valor devuelto, puesto que debe coincidir en todos los casos:</span><span class="sxs-lookup"><span data-stu-id="b5a45-579">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="b5a45-580">`D` puede representar cualquier método de instancia que tiene exactamente un argumento de tipo `C`, independientemente de qué tipo pertenece el método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-580">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="b5a45-581">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una instancia del tipo `method` pertenece, y se dice que el delegado resultante se cerrados a lo largo de esa instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-581">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="b5a45-582">(De forma trivial, `D` también se puede cerrar a través de una referencia nula si `firstArgument` es `null`.)</span><span class="sxs-lookup"><span data-stu-id="b5a45-582">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="b5a45-583">`D` puede representar un método de instancia de `C` que no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-583">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="b5a45-584">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-584">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="b5a45-585">El delegado resultante representa un método de instancia abierta y una instancia de `C` se debe proporcionar cada vez que se invoca.</span><span class="sxs-lookup"><span data-stu-id="b5a45-585">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-586">`D` puede representar un método estático que toma un argumento de tipo `C`, y que el método puede pertenecer a cualquier tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-586">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="b5a45-587">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-587">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="b5a45-588">El delegado resultante representa un método estático abierto y una instancia de `C` se debe proporcionar cada vez que se invoca.</span><span class="sxs-lookup"><span data-stu-id="b5a45-588">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-589">`D` puede representar un método estático que pertenece al tipo `F` y tiene dos argumentos de tipo `F` y tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-589">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="b5a45-590">Cuando <xref:System.Delegate.CreateDelegate%2A> se llama, `firstArgument` es una instancia de `F`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-590">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="b5a45-591">El delegado resultante representa un método estático que se cierra en esa instancia de `F`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-591">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="b5a45-592">Tenga en cuenta que en el caso donde `F` y `C` son del mismo tipo, el método estático tiene dos argumentos de ese tipo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-592">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="b5a45-593">(En este caso, `D` se cierra en una referencia nula si `firstArgument` es `null`.)</span><span class="sxs-lookup"><span data-stu-id="b5a45-593">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-594">Esta sección contiene tres ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="b5a45-594">This section contains three code examples.</span></span> <span data-ttu-id="b5a45-595">El primer ejemplo muestra los cuatro tipos de delegados que se pueden crear: cerrados a lo largo de un método de instancia, abra a través de un método de instancia, abra a través de un método estático y cerrados a lo largo de un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-595">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="b5a45-596">El segundo ejemplo de código muestra los tipos de parámetros compatibles y los tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-596">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="b5a45-597">El tercer ejemplo de código define un tipo de delegado único y muestra todos los métodos de ese tipo de delegado pueden representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-597">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="b5a45-598">**Ejemplo 1**</span><span class="sxs-lookup"><span data-stu-id="b5a45-598">**Example 1**</span></span>  
  
 <span data-ttu-id="b5a45-599">En el ejemplo de código siguiente se muestra las cuatro maneras se puede crear un delegado mediante esta sobrecarga de la <xref:System.Delegate.CreateDelegate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-599">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-600">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifique `firstArgument` y un <xref:System.Reflection.MethodInfo>; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-600">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-601">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-601">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-602">En el ejemplo se declara una clase `C` con un método estático `M2` y un método de instancia `M1`, y tres tipos de delegado: `D1` toma una instancia de `C` y una cadena, `D2` toma una cadena y `D3`no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-602">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="b5a45-603">Una segunda clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-603">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-604">Un delegado del tipo `D2`, cerrado a través de una instancia de `C`, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-604">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-605">Se invoca con cadenas diferentes, para mostrar que la instancia enlazada de `C` siempre se utiliza.</span><span class="sxs-lookup"><span data-stu-id="b5a45-605">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="b5a45-606">Un delegado del tipo `D1`, que representa un método de instancia abierta, se crea para el método de instancia `M1`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-606">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="b5a45-607">Cuando se invoca el delegado, se debe pasar una instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-607">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="b5a45-608">Un delegado del tipo `D2`, que representa un método estático abierto, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-608">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="b5a45-609">Por último, un delegado del tipo `D3`, cerrados a lo largo de una cadena, se crea para el método estático `M2`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-609">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="b5a45-610">El método se invoca para mostrar que utiliza la cadena enlazada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-610">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="b5a45-611">**Ejemplo 2**</span><span class="sxs-lookup"><span data-stu-id="b5a45-611">**Example 2**</span></span>  
  
 <span data-ttu-id="b5a45-612">En el ejemplo de código siguiente se muestra la compatibilidad de tipos de parámetro y tipos de valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-612">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-613">Este ejemplo de código utiliza el <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-613">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="b5a45-614">El uso de otras sobrecargas que toman <xref:System.Reflection.MethodInfo> es similar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-614">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="b5a45-615">El ejemplo de código define una clase base denominada `Base` y una clase denominada `Derived` que se deriva de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-615">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="b5a45-616">La clase derivada tiene una `static` (`Shared` en Visual Basic) método denominado `MyMethod` con un parámetro de tipo `Base` y un tipo de valor devuelto de `Derived`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-616">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="b5a45-617">El ejemplo de código también define un delegado denominado `Example` que tiene un parámetro de tipo `Derived` y un tipo de valor devuelto de `Base`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-617">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="b5a45-618">El ejemplo de código se muestra que el delegado denominado `Example` puede usarse para representar el método `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-618">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="b5a45-619">El método se puede enlazar al delegado porque:</span><span class="sxs-lookup"><span data-stu-id="b5a45-619">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="b5a45-620">El tipo de parámetro del delegado (`Derived`) es más restrictivo que el tipo de parámetro `MyMethod` (`Base`), de modo que siempre es seguro pasar el argumento del delegado para `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-620">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="b5a45-621">El tipo de valor devuelto de `MyMethod` (`Derived`) es más restrictivo que el tipo de parámetro del delegado (`Base`), de modo que siempre es seguro convertir el tipo de valor devuelto del método para el tipo de valor devuelto del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-621">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="b5a45-622">El ejemplo de código no genera ninguna salida.</span><span class="sxs-lookup"><span data-stu-id="b5a45-622">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="b5a45-623">**Ejemplo 3**</span><span class="sxs-lookup"><span data-stu-id="b5a45-623">**Example 3**</span></span>  
  
 <span data-ttu-id="b5a45-624">El ejemplo de código siguiente muestra todos los métodos que puede representar un tipo de delegado único.</span><span class="sxs-lookup"><span data-stu-id="b5a45-624">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-625">Hay dos sobrecargas de los <xref:System.Delegate.CreateDelegate%2A> método que especifique `firstArgument` y un <xref:System.Reflection.MethodInfo>; su funcionalidad es el mismo, salvo que uno le permite especificar si se debe producir el error al enlazar y el otro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-625">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="b5a45-626">Este ejemplo de código usa las dos sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="b5a45-626">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="b5a45-627">El ejemplo de código define dos clases, `C` y `F`y un tipo de delegado `D` con un argumento de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-627">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="b5a45-628">Las clases tienen coincidentes estáticos y métodos de instancia `M1`, `M3`, y `M4`y la clase `C` también tiene un método de instancia `M2` que no tiene ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-628">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="b5a45-629">Una tercera clase denominada `Example` contiene el código que crea los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-629">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-630">Los delegados se crean, por ejemplo, método `M1` de tipo `C` y tipo `F`; cada uno se cierra sobre una instancia del tipo correspondiente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-630">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="b5a45-631">Método `M1` typu `C` muestra el `ID` las propiedades de la instancia enlazada y del argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-631">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="b5a45-632">Se crea un delegado para método `M2` de tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-632">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="b5a45-633">Se trata de un delegado de la instancia abierta, en el que el argumento del delegado representa el primer argumento oculto en el método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-633">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="b5a45-634">El método no tiene ningún otro argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-634">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="b5a45-635">Se crean delegados para el método estático `M3` de tipo `C` y tipo `F`; estos son delegados estáticos abiertos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-635">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="b5a45-636">Por último, se crean los delegados de método estático `M4` typu `C` y tipo `F`; cada método tiene el tipo declarativo como primer argumento y se proporciona una instancia del tipo, por lo que los delegados se cierran en sus primeros argumentos .</span><span class="sxs-lookup"><span data-stu-id="b5a45-636">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="b5a45-637">Método `M4` typu `C` muestra el `ID` las propiedades de la instancia enlazada y del argumento.</span><span class="sxs-lookup"><span data-stu-id="b5a45-637">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-638">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-638"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-639">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-639">-or-</span></span> 
 <span data-ttu-id="b5a45-640">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-640"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-641"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-641"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-642">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-642">-or-</span></span> 
 <span data-ttu-id="b5a45-643"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-643"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-644">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-644">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-645">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-645">-or-</span></span> 
 <span data-ttu-id="b5a45-646"><paramref name="method" /> no se puede enlazar y <paramref name="throwOnBindFailure" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-646"><paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span>  
  
<span data-ttu-id="b5a45-647">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-647">-or-</span></span> 
 <span data-ttu-id="b5a45-648"><paramref name="method" /> no es un <see langword="RuntimeMethodInfo" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-648"><paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span></span> <span data-ttu-id="b5a45-649">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-649">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-650">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-650">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-651">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-651">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-652">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-652">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-653">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-653">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-654"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-654">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-655">Instancia de clase en la que se invoca a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-655">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-656">Nombre del método de instancia que el delegado va a representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-656">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b5a45-657">Valor booleano que indica si debe omitirse la distinción de mayúsculas y minúsculas al comparar el nombre del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-657">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="b5a45-658">Crea un delegado del tipo especificado que representa el método de instancia especificado que se va a invocar en la instancia de clase especificada con la distinción de mayúsculas y minúsculas que se haya especificado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-658">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="b5a45-659">Delegado del tipo especificado que representa el método de instancia especificado que se va a invocar en la instancia de clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-659">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-660">Este método crea a los delegados por métodos de instancia solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-660">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="b5a45-661">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-661">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="b5a45-662">Esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga del método, especifica `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-662">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-663">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-663">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-664">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-664">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-665">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-665">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-666">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-666"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-667">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-667">-or-</span></span> 
 <span data-ttu-id="b5a45-668">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-668"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-669">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-669">-or-</span></span> 
 <span data-ttu-id="b5a45-670">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-670"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-671"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-671"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-672">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-672">-or-</span></span> 
 <span data-ttu-id="b5a45-673"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-673"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-674">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-674">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-675">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-675">-or-</span></span> 
 <span data-ttu-id="b5a45-676"><paramref name="method" /> no es un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-676"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="b5a45-677">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-677">-or-</span></span> 
 <span data-ttu-id="b5a45-678"><paramref name="method" /> no se puede enlazar, por ejemplo, porque no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-678"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-679">El método <see langword="Invoke" /> de <paramref name="type" /> no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-679">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-680">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-680">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-681">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-681">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-682">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-682">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-683"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-683">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-684"><see cref="T:System.Type" /> que representa la clase que implementa <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-684">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-685">Nombre del método estático que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-685">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b5a45-686">Valor booleano que indica si debe omitirse la distinción de mayúsculas y minúsculas al comparar el nombre del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-686">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <summary><span data-ttu-id="b5a45-687">Crea un delegado del tipo especificado que representa el método estático determinado de la clase especificada, con la distinción de mayúsculas y minúsculas definida.</span><span class="sxs-lookup"><span data-stu-id="b5a45-687">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span></span></summary>
        <returns><span data-ttu-id="b5a45-688">Delegado del tipo especificado que representa el método estático especificado de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-688">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-689">Este método crea a los delegados para los métodos estáticos solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-689">This method creates delegates for static methods only.</span></span> <span data-ttu-id="b5a45-690">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-690">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="b5a45-691">Esta sobrecarga del método es equivalente a llamar a la <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> sobrecarga del método, especifica `true` para `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-691">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-692">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-692">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-693">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-693">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-694">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-694">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-695">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-695"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-696">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-696">-or-</span></span> 
 <span data-ttu-id="b5a45-697">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-697"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-698">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-698">-or-</span></span> 
 <span data-ttu-id="b5a45-699">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-699"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-700"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-700"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-701">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-701">-or-</span></span> 
 <span data-ttu-id="b5a45-702"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-702"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-703">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-703">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-704">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-704">-or-</span></span> 
 <span data-ttu-id="b5a45-705"><paramref name="target" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-705"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="b5a45-706">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-706">-or-</span></span> 
 <span data-ttu-id="b5a45-707"><paramref name="target" /> es un tipo genérico abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-707"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="b5a45-708">Es decir, su propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-708">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="b5a45-709">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-709">-or-</span></span> 
 <span data-ttu-id="b5a45-710"><paramref name="method" /> no es un método <see langword="static" /> (método <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-710"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="b5a45-711">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-711">-or-</span></span> 
 <span data-ttu-id="b5a45-712"><paramref name="method" /> no se puede enlazar, por ejemplo, porque no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-712"><paramref name="method" /> cannot be bound, for example because it cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-713">El método <see langword="Invoke" /> de <paramref name="type" /> no se encuentra.</span><span class="sxs-lookup"><span data-stu-id="b5a45-713">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-714">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-714">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-715">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-715">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-716">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-716">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-717"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-717">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-718">Instancia de clase en la que se invoca a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-718">The class instance on which <paramref name="method" /> is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-719">Nombre del método de instancia que el delegado va a representar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-719">The name of the instance method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b5a45-720">Valor booleano que indica si debe omitirse la distinción de mayúsculas y minúsculas al comparar el nombre del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-720">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="b5a45-721">Es <see langword="true" /> para iniciar una excepción si no se puede enlazar <paramref name="method" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-721"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-722">Crea un delegado del tipo especificado que representa el método de instancia determinado que se va a invocar en la instancia de clase especificada, con la distinción de mayúsculas y minúsculas y el comportamiento que se hayan concretado para cuando se produce un error al enlazar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-722">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="b5a45-723">Delegado del tipo especificado que representa el método de instancia especificado que se va a invocar en la instancia de clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-723">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-724">Este método crea a los delegados por métodos de instancia solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-724">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="b5a45-725">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-725">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-726">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-726">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-727">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-727">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-728">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-728">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-729">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-729"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-730">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-730">-or-</span></span> 
 <span data-ttu-id="b5a45-731">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-731"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-732">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-732">-or-</span></span> 
 <span data-ttu-id="b5a45-733">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-733"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-734"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-734"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-735">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-735">-or-</span></span> 
 <span data-ttu-id="b5a45-736"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-736"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-737">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-737">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-738">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-738">-or-</span></span> 
 <span data-ttu-id="b5a45-739"><paramref name="method" /> no es un método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-739"><paramref name="method" /> is not an instance method.</span></span>  
  
<span data-ttu-id="b5a45-740">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-740">-or-</span></span> 
 <span data-ttu-id="b5a45-741"><paramref name="method" /> no se puede enlazar (por ejemplo, porque no se encuentra) y <paramref name="throwOnBindFailure" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-741"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-742">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-742">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-743">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-743">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-744">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-744">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-745">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-745">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="b5a45-746"><see cref="T:System.Type" /> de delegado que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="b5a45-746">The <see cref="T:System.Type" /> of delegate to create.</span></span></param>
        <param name="target"><span data-ttu-id="b5a45-747"><see cref="T:System.Type" /> que representa la clase que implementa <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-747">The <see cref="T:System.Type" /> representing the class that implements <paramref name="method" />.</span></span></param>
        <param name="method"><span data-ttu-id="b5a45-748">Nombre del método estático que va a representar el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-748">The name of the static method that the delegate is to represent.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="b5a45-749">Valor booleano que indica si debe omitirse la distinción de mayúsculas y minúsculas al comparar el nombre del método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-749">A Boolean indicating whether to ignore the case when comparing the name of the method.</span></span></param>
        <param name="throwOnBindFailure"><span data-ttu-id="b5a45-750">Es <see langword="true" /> para iniciar una excepción si no se puede enlazar <paramref name="method" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-750"><see langword="true" /> to throw an exception if <paramref name="method" /> cannot be bound; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-751">Crea un delegado del tipo especificado que representa el método estático determinado de la clase especificada, con la distinción de mayúsculas y minúsculas definida y el comportamiento que se haya concretado para cuando se produce un error al enlazar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-751">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span></span></summary>
        <returns><span data-ttu-id="b5a45-752">Delegado del tipo especificado que representa el método estático especificado de la clase especificada.</span><span class="sxs-lookup"><span data-stu-id="b5a45-752">A delegate of the specified type that represents the specified static method of the specified class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-753">Este método crea a los delegados para los métodos estáticos solo.</span><span class="sxs-lookup"><span data-stu-id="b5a45-753">This method creates delegates for static methods only.</span></span> <span data-ttu-id="b5a45-754">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-754">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5a45-755">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a los métodos no públicos si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los métodos no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="b5a45-755">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="b5a45-756">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="b5a45-756">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="b5a45-757">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-757">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5a45-758">El valor de <paramref name="type" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-758"><paramref name="type" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-759">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-759">-or-</span></span> 
 <span data-ttu-id="b5a45-760">El valor de <paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-760"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-761">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-761">-or-</span></span> 
 <span data-ttu-id="b5a45-762">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-762"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-763"><paramref name="type" /> no hereda <see cref="T:System.MulticastDelegate" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-763"><paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span></span>  
  
<span data-ttu-id="b5a45-764">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-764">-or-</span></span> 
 <span data-ttu-id="b5a45-765"><paramref name="type" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-765"><paramref name="type" /> is not a <see langword="RuntimeType" />.</span></span> <span data-ttu-id="b5a45-766">Vea [Tipos de reflexión en tiempo de ejecución](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span><span class="sxs-lookup"><span data-stu-id="b5a45-766">See [Runtime Types in Reflection](https://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span></span>  
  
<span data-ttu-id="b5a45-767">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-767">-or-</span></span> 
 <span data-ttu-id="b5a45-768"><paramref name="target" /> no es un <see langword="RuntimeType" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-768"><paramref name="target" /> is not a <see langword="RuntimeType" />.</span></span>  
  
<span data-ttu-id="b5a45-769">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-769">-or-</span></span> 
 <span data-ttu-id="b5a45-770"><paramref name="target" /> es un tipo genérico abierto.</span><span class="sxs-lookup"><span data-stu-id="b5a45-770"><paramref name="target" /> is an open generic type.</span></span> <span data-ttu-id="b5a45-771">Es decir, su propiedad <see cref="P:System.Type.ContainsGenericParameters" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-771">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span></span>  
  
<span data-ttu-id="b5a45-772">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-772">-or-</span></span> 
 <span data-ttu-id="b5a45-773"><paramref name="method" /> no es un método <see langword="static" /> (método <see langword="Shared" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="b5a45-773"><paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span></span>  
  
<span data-ttu-id="b5a45-774">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-774">-or-</span></span> 
 <span data-ttu-id="b5a45-775"><paramref name="method" /> no se puede enlazar (por ejemplo, porque no se encuentra) y <paramref name="throwOnBindFailure" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-775"><paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="b5a45-776">No se encuentra el método <see langword="Invoke" /> de <paramref name="type" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-776">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="b5a45-777">El autor de la llamada no tiene los permisos necesarios para acceder a <paramref name="method" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-777">The caller does not have the permissions necessary to access <paramref name="method" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-778">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-778">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-779">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-779">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="b5a45-780">Matriz de objetos que son los argumentos que se van a pasar al método representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-780">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="b5a45-781">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-781">-or-</span></span> 
 <span data-ttu-id="b5a45-782"><see langword="null" />, si el método representado por el delegado actual no requiere argumentos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-782"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="b5a45-783">Invoca dinámicamente (en tiempo de ejecución) al método representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-783">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-784">Objeto devuelto por el método representado por el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-784">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-785">Este método llama al método <xref:System.Delegate.DynamicInvokeImpl%2A>.</span><span class="sxs-lookup"><span data-stu-id="b5a45-785">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-786">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-786">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="b5a45-787">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-787">-or-</span></span> 
<span data-ttu-id="b5a45-788">El número, orden o tipo de los parámetros enumerados en <paramref name="args" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-788">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-789">El método representado por el delegado se invoca en un objeto o en una clase que no lo admite.</span><span class="sxs-lookup"><span data-stu-id="b5a45-789">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="b5a45-790">El método representado por el delegado es un método de instancia y el objeto de destino es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-790">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-791">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-791">-or-</span></span> 
<span data-ttu-id="b5a45-792">Uno de los métodos encapsulados produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-792">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-793">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-793">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-794">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-794">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="b5a45-795">Matriz de objetos que son los argumentos que se van a pasar al método representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-795">An array of objects that are the arguments to pass to the method represented by the current delegate.</span></span>  
  
<span data-ttu-id="b5a45-796">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-796">-or-</span></span> 
 <span data-ttu-id="b5a45-797"><see langword="null" />, si el método representado por el delegado actual no requiere argumentos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-797"><see langword="null" />, if the method represented by the current delegate does not require arguments.</span></span></param>
        <summary><span data-ttu-id="b5a45-798">Invoca dinámicamente (en tiempo de ejecución) al método representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-798">Dynamically invokes (late-bound) the method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-799">Objeto devuelto por el método representado por el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-799">The object returned by the method represented by the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-800">Este método implementa el método <xref:System.Delegate.DynamicInvoke%2A> .</span><span class="sxs-lookup"><span data-stu-id="b5a45-800">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-801">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-801">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span>  
  
<span data-ttu-id="b5a45-802">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-802">-or-</span></span> 
<span data-ttu-id="b5a45-803">El número, orden o tipo de los parámetros enumerados en <paramref name="args" /> no es válido.</span><span class="sxs-lookup"><span data-stu-id="b5a45-803">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-804">El método representado por el delegado se invoca en un objeto o en una clase que no lo admite.</span><span class="sxs-lookup"><span data-stu-id="b5a45-804">The method represented by the delegate is invoked on an object or a class that does not support it.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="b5a45-805">El método representado por el delegado es un método de instancia y el objeto de destino es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-805">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span></span>  
  
<span data-ttu-id="b5a45-806">O bien</span><span class="sxs-lookup"><span data-stu-id="b5a45-806">-or-</span></span> 
<span data-ttu-id="b5a45-807">Uno de los métodos encapsulados produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b5a45-807">One of the encapsulated methods throws an exception.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-808">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-808">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-809">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-809">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b5a45-810">Objeto que se va a comparar con el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-810">The object to compare with the current delegate.</span></span></param>
        <summary><span data-ttu-id="b5a45-811">Determina si el objeto especificado y el delegado actual son del mismo tipo y comparten los mismos destinos, métodos y listas de invocaciones.</span><span class="sxs-lookup"><span data-stu-id="b5a45-811">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span></span></summary>
        <returns><span data-ttu-id="b5a45-812"><see langword="true" /> si <paramref name="obj" /> y el delegado actual tienen los mismos destinos, métodos y listas de invocaciones; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-812"><see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-813">Si los dos delegados no son del mismo tipo, no se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-813">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5a45-814">En la versión 1.0 y 1.1 de .NET Framework, dos delegados se consideran iguales si sus destinos, métodos y listas de invocaciones eran iguales, aunque los delegados sean de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-814">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="b5a45-815">Los métodos y los destinos se comparan la igualdad como sigue:</span><span class="sxs-lookup"><span data-stu-id="b5a45-815">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="b5a45-816">Si los dos métodos que se están comparados ambos son estáticos y el mismo método en la misma clase, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-816">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-817">Si los dos métodos que se comparan son métodos de instancia y el mismo método en el mismo objeto, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-817">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-818">En caso contrario, los métodos no se consideran iguales y los destinos no también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-818">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="b5a45-819">Dos listas de invocaciones se consideran idénticas si tienen el mismo orden y los elementos correspondientes de las dos listas representan el mismo método y destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-819">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-820">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-820">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-821">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-821">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-822">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-822">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5a45-823">Devuelve un código hash para el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-823">Returns a hash code for the delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-824">Código hash para el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-824">A hash code for the delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-825">El valor devuelto de este método no debe conservarse por dos motivos.</span><span class="sxs-lookup"><span data-stu-id="b5a45-825">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="b5a45-826">En primer lugar, es posible que se puede modificar la función hash de una clase para generar una mejor distribución inútil los valores de la antigua función hash.</span><span class="sxs-lookup"><span data-stu-id="b5a45-826">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="b5a45-827">En segundo lugar, la implementación predeterminada de esta clase no garantiza que se devolverá el mismo valor en instancias diferentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-827">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-828">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-828">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-829">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-829">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5a45-830">Devuelve la lista de invocaciones del delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-830">Returns the invocation list of the delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-831">Matriz de delegados que representa la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-831">An array of delegates representing the invocation list of the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-832">Cada delegado de la matriz representa exactamente un método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-832">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="b5a45-833">El orden de los delegados de la matriz es el mismo orden en que el delegado actual invoca los métodos que representan los delegados.</span><span class="sxs-lookup"><span data-stu-id="b5a45-833">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5a45-834">El ejemplo siguiente asigna los tres métodos a un delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-834">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="b5a45-835">A continuación, llama el <xref:System.Delegate.GetInvocationList%2A> método para obtener un recuento total de los métodos asignado al delegado para ejecutar los delegados en orden inverso y para ejecutar los métodos cuyo nombre no incluya la subcadena "File".</span><span class="sxs-lookup"><span data-stu-id="b5a45-835">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-836">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-836">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-837">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-837">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5a45-838">Obtiene el método estático representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-838">Gets the static method represented by the current delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-839"><see cref="T:System.Reflection.MethodInfo" /> que describe el método estático representado por el delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-839">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-840">Este método solo se aplica si el delegado actual representa un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-840">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-841">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-841">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-842">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-842">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-843">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-843">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="b5a45-844">No se admite.</span><span class="sxs-lookup"><span data-stu-id="b5a45-844">Not supported.</span></span></param>
        <param name="context"><span data-ttu-id="b5a45-845">No se admite.</span><span class="sxs-lookup"><span data-stu-id="b5a45-845">Not supported.</span></span></param>
        <summary><span data-ttu-id="b5a45-846">No se admite.</span><span class="sxs-lookup"><span data-stu-id="b5a45-846">Not supported.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b5a45-847">No se admite este método.</span><span class="sxs-lookup"><span data-stu-id="b5a45-847">This method is not supported.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="b5a45-848">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="b5a45-848">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="b5a45-849">Este miembro no se puede usar código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="b5a45-849">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5a45-850">Obtiene el método representado por el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-850">Gets the method represented by the delegate.</span></span></summary>
        <value><span data-ttu-id="b5a45-851"><see cref="T:System.Reflection.MethodInfo" /> que describe el método representado por el delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-851">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-852">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-852">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-853">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-853">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-854">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-854">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="b5a45-855">Primer delegado que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-855">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="b5a45-856">Segundo delegado que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-856">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="b5a45-857">Determina si los delegados especificados son iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-857">Determines whether the specified delegates are equal.</span></span></summary>
        <returns><span data-ttu-id="b5a45-858"><see langword="true" /> si <paramref name="d1" /> es igual a <paramref name="d2" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-858"><see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-859">Dos delegados del mismo tipo con los mismos destinos, métodos y listas de invocaciones se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-859">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="b5a45-860">Si los dos delegados no son del mismo tipo, no se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-860">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5a45-861">En la versión 1.0 y 1.1 de .NET Framework, dos delegados se consideran iguales si sus destinos, métodos y listas de invocaciones eran iguales, aunque los delegados sean de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-861">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="b5a45-862">Los métodos y los destinos se comparan la igualdad como sigue:</span><span class="sxs-lookup"><span data-stu-id="b5a45-862">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="b5a45-863">Si los dos métodos que se están comparados ambos son estáticos y el mismo método en la misma clase, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-863">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-864">Si los dos métodos que se comparan son métodos de instancia y el mismo método en el mismo objeto, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-864">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-865">En caso contrario, los métodos no se consideran iguales y los destinos no también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-865">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="b5a45-866">Dos listas de invocaciones se consideran idénticas si tienen el mismo orden y los elementos correspondientes de las dos listas representan el mismo método y destino.</span><span class="sxs-lookup"><span data-stu-id="b5a45-866">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="b5a45-867">Es el método equivalente para este operador <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b5a45-867">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-868">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-868">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-869">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-869">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1"><span data-ttu-id="b5a45-870">Primer delegado que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-870">The first delegate to compare.</span></span></param>
        <param name="d2"><span data-ttu-id="b5a45-871">Segundo delegado que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="b5a45-871">The second delegate to compare.</span></span></param>
        <summary><span data-ttu-id="b5a45-872">Determina si los delegados especificados no son iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-872">Determines whether the specified delegates are not equal.</span></span></summary>
        <returns><span data-ttu-id="b5a45-873">Es <see langword="true" /> si <paramref name="d1" /> no es igual a <paramref name="d2" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-873"><see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-874">Dos delegados se consideran iguales si son de tipos diferentes, o tienen métodos distintos, destinos distintos o listas de invocaciones diferentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-874">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="b5a45-875">Si los dos delegados no son del mismo tipo, no se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-875">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b5a45-876">En la versión 1.0 y 1.1 de .NET Framework, dos delegados se consideran iguales si sus destinos, métodos y listas de invocaciones eran iguales, aunque los delegados sean de tipos diferentes.</span><span class="sxs-lookup"><span data-stu-id="b5a45-876">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="b5a45-877">Los métodos y los destinos se comparan la igualdad como sigue:</span><span class="sxs-lookup"><span data-stu-id="b5a45-877">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="b5a45-878">Si los dos métodos que se están comparados ambos son estáticos y el mismo método en la misma clase, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-878">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-879">Si los dos métodos que se comparan son métodos de instancia y el mismo método en el mismo objeto, los métodos se consideran iguales y los destinos también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-879">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="b5a45-880">En caso contrario, los métodos no se consideran iguales y los destinos no también se consideran iguales.</span><span class="sxs-lookup"><span data-stu-id="b5a45-880">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="b5a45-881">Dos listas de invocación no son iguales si tienen tamaños diferentes, si se ordenan de forma diferente, o si al menos un elemento de una lista representa un método o destino diferente del representado por su elemento correspondiente en la lista de otros.</span><span class="sxs-lookup"><span data-stu-id="b5a45-881">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="b5a45-882">Es el método equivalente para este operador <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b5a45-882">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-883">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-883">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-884">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-884">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b5a45-885">Delegado del que se va a quitar la lista de invocaciones de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-885">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="b5a45-886">Delegado que proporciona la lista de invocaciones que se va a quitar de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-886">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-887">Quita la última aparición de la lista de invocaciones de un delegado de la lista de invocaciones de otro delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-887">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-888">Nuevo delegado con una lista de invocaciones creada tomando la lista de invocaciones de <paramref name="source" /> y quitando la última aparición de la lista de invocaciones de <paramref name="value" />, si la lista de invocaciones de <paramref name="value" /> se encuentra dentro de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-888">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="b5a45-889">Devuelve <paramref name="source" /> si <paramref name="value" /> es <see langword="null" /> o si la lista de invocaciones de <paramref name="value" /> no se encuentra dentro de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-889">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="b5a45-890">Devuelve una referencia nula si la lista de invocaciones de <paramref name="value" /> es igual a la lista de invocaciones de <paramref name="source" /> o si <paramref name="source" /> es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-890">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-891">Si la lista de invocaciones `value` coincide con un conjunto contiguo de elementos de la lista de invocaciones `source`, a continuación, la lista de invocaciones `value` se dice que se producen dentro de la lista de invocaciones `source`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-891">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="b5a45-892">Si la lista de invocaciones `value` aparece más de una vez en la lista de invocaciones `source`, se quita la última aparición.</span><span class="sxs-lookup"><span data-stu-id="b5a45-892">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-893">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-893">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-894">Los tipos de delegado no coinciden.</span><span class="sxs-lookup"><span data-stu-id="b5a45-894">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-895">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-895">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-896">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-896">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="b5a45-897">Delegado del que se va a quitar la lista de invocaciones de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-897">The delegate from which to remove the invocation list of <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="b5a45-898">Delegado que proporciona la lista de invocaciones que se va a quitar de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-898">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="b5a45-899">Quita todas las apariciones de la lista de invocaciones de un delegado de la lista de invocaciones de otro delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-899">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-900">Nuevo delegado con una lista de invocaciones creada tomando la lista de invocaciones de <paramref name="source" /> y quitando todas las apariciones de la lista de invocaciones de <paramref name="value" />, si la lista de invocaciones de <paramref name="value" /> se encuentra dentro de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-900">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="b5a45-901">Devuelve <paramref name="source" /> si <paramref name="value" /> es <see langword="null" /> o si la lista de invocaciones de <paramref name="value" /> no se encuentra dentro de la lista de invocaciones de <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-901">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span></span> <span data-ttu-id="b5a45-902">Devuelve una referencia nula si la lista de invocaciones de <paramref name="value" /> es igual a la de <paramref name="source" />, si <paramref name="source" /> contiene sólo una serie de listas de invocaciones que son iguales a la lista de invocaciones de <paramref name="value" />, o bien si <paramref name="source" /> es una referencia nula.</span><span class="sxs-lookup"><span data-stu-id="b5a45-902">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-903">Si la lista de invocaciones `value` coincide con un conjunto contiguo de elementos de la lista de invocaciones `source`, a continuación, la lista de invocaciones `value` se dice que se producen dentro de la lista de invocaciones `source`.</span><span class="sxs-lookup"><span data-stu-id="b5a45-903">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="b5a45-904">Si la lista de invocaciones `value` aparece más de una vez en la lista de invocaciones `source`, se quitan todas las apariciones.</span><span class="sxs-lookup"><span data-stu-id="b5a45-904">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-905">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-905">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5a45-906">Los tipos de delegado no coinciden.</span><span class="sxs-lookup"><span data-stu-id="b5a45-906">The delegate types do not match.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-907">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-907">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-908">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-908">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="b5a45-909">Delegado que proporciona la lista de invocaciones que se va a quitar de la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-909">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span></span></param>
        <summary><span data-ttu-id="b5a45-910">Quita la lista de invocaciones de un delegado de la lista de invocaciones de otro delegado.</span><span class="sxs-lookup"><span data-stu-id="b5a45-910">Removes the invocation list of a delegate from the invocation list of another delegate.</span></span></summary>
        <returns><span data-ttu-id="b5a45-911">Nuevo delegado con una lista de invocaciones creada tomando la lista de invocaciones del delegado actual y quitando la lista de invocaciones de <paramref name="value" />, si la lista de invocaciones de <paramref name="value" /> se encuentra dentro de la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-911">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span></span> <span data-ttu-id="b5a45-912">Devuelve el delegado actual si <paramref name="value" /> es <see langword="null" /> o si la lista de invocaciones de <paramref name="value" /> no se encuentra en la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-912">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span></span> <span data-ttu-id="b5a45-913">Devuelve <see langword="null" /> si la lista de invocaciones de <paramref name="value" /> es igual que la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-913">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-914">Si la lista de invocaciones `value` coincide con un conjunto contiguo de elementos de lista de invocaciones del delegado actual y, después, en la lista de invocaciones `value` se dice que se producen dentro de la lista de invocaciones del delegado actual.</span><span class="sxs-lookup"><span data-stu-id="b5a45-914">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="b5a45-915">Si la lista de invocaciones `value` aparece varias veces en la lista de invocaciones del delegado actual, se quita la última aparición.</span><span class="sxs-lookup"><span data-stu-id="b5a45-915">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="b5a45-916">El llamador no tiene acceso al método representado por el delegado (por ejemplo, si el método es privado).</span><span class="sxs-lookup"><span data-stu-id="b5a45-916">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-917">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-917">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-918">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-918">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5a45-919">Obtiene la instancia de clase donde el delegado actual invoca al método de instancia.</span><span class="sxs-lookup"><span data-stu-id="b5a45-919">Gets the class instance on which the current delegate invokes the instance method.</span></span></summary>
        <value><span data-ttu-id="b5a45-920">Objeto en el que el delegado actual invoca al método de instancia, en el caso de que el delegado represente un método de instancia; <see langword="null" /> si el delegado representa un método estático.</span><span class="sxs-lookup"><span data-stu-id="b5a45-920">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5a45-921">Un método de instancia es un método que está asociado a una instancia de una clase. un método estático es un método que está asociado a la propia clase.</span><span class="sxs-lookup"><span data-stu-id="b5a45-921">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="b5a45-922">Si el delegado invoca a uno o varios métodos de instancia, esta propiedad devuelve el destino de este último método de instancia en la lista de invocación.</span><span class="sxs-lookup"><span data-stu-id="b5a45-922">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="b5a45-923">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="b5a45-923">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="b5a45-924">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="b5a45-924">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>