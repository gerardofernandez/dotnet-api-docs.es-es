<Type Name="MathF" FullName="System.MathF">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b72284d390ede7fa9e0265550f568899dce9d8d" /><Meta Name="ms.sourcegitcommit" Value="a9b8eb12d69b131f7c0de74d471798e44e863282" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/04/2019" /><Meta Name="ms.locfileid" Value="66501878" /></Metadata><TypeSignature Language="C#" Value="public static class MathF" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MathF extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.MathF" />
  <TypeSignature Language="VB.NET" Value="Public Class MathF" />
  <TypeSignature Language="C++ CLI" Value="public ref class MathF abstract sealed" />
  <TypeSignature Language="F#" Value="type MathF = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="33527-101">Proporciona constantes y métodos estáticos para operaciones trigonométricas, logarítmicas y otras funciones matemáticas comunes.</span><span class="sxs-lookup"><span data-stu-id="33527-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="33527-102">Los campos y métodos estáticos de la `MathF` clase se corresponden con los de la <xref:System.Math> clase, excepto en que sus parámetros de tipo <xref:System.Single> en lugar de <xref:System.Double>, y devuelven <xref:System.Single> lugar <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="33527-102">The static fields and methods of the `MathF` class correspond to those of the <xref:System.Math> class, except that their parameters are of type <xref:System.Single> rather than <xref:System.Double>, and they return <xref:System.Single> rather than <xref:System.Double> values.</span></span>

         ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float x);" />
      <MemberSignature Language="F#" Value="static member Abs : single -&gt; single" Usage="System.MathF.Abs x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-103">Número mayor o igual que <see cref="F:System.Single.MinValue" />, pero menor o igual que <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33527-103">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="33527-104">Devuelve el valor absoluto de un número de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-104">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="33527-105">Número de punto flotante de precisión sencilla, x, de modo que 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="33527-105">A single-precision floating-point number, x, such that 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-106">El valor absoluto de un <xref:System.Single> es su valor numérico sin signo.</span><span class="sxs-lookup"><span data-stu-id="33527-106">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="33527-107">Por ejemplo, el valor absoluto de ambos 1.2e-03 y - 1.2e03 es 1.2e03.</span><span class="sxs-lookup"><span data-stu-id="33527-107">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="33527-108">Si `x` es igual a <xref:System.Single.NegativeInfinity> o <xref:System.Single.PositiveInfinity>, el valor devuelto es <xref:System.Single.PositiveInfinity>.</span><span class="sxs-lookup"><span data-stu-id="33527-108">If `x` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="33527-109">Si `x` es igual a <xref:System.Single.NaN>, el valor devuelto es <xref:System.Single.NaN>.</span><span class="sxs-lookup"><span data-stu-id="33527-109">If `x` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static float Acos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acos(float x);" />
      <MemberSignature Language="F#" Value="static member Acos : single -&gt; single" Usage="System.MathF.Acos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-110">Número que representa un coseno, donde <paramref name="x" /> debe ser mayor o igual que -1 y menor o igual que 1.</span><span class="sxs-lookup"><span data-stu-id="33527-110">A number representing a cosine, where <paramref name="x" /> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="33527-111">Devuelve el ángulo cuyo coseno es el número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-111">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-112">Ángulo, θ, medido en radianes, de modo que 0 ≤ θ ≤ π.</span><span class="sxs-lookup"><span data-stu-id="33527-112">An angle, θ, measured in radians, such that 0 ≤ θ ≤ π.</span></span>
  
<span data-ttu-id="33527-113">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-113">-or-</span></span> 
 <span data-ttu-id="33527-114"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-114"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> &lt; -1 or <paramref name="x" /> &gt; 1 or <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-115">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-115">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static float Acosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Acosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Acosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Acosh(float x);" />
      <MemberSignature Language="F#" Value="static member Acosh : single -&gt; single" Usage="System.MathF.Acosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-116">Número que representa un coseno hiperbólico, donde <paramref name="x" /> debe ser mayor o igual que 1 pero menor o igual que <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-116">A number representing a hyperbolic cosine, where <paramref name="x" /> must be greater than or equal to 1, but less than or equal to <see cref="F:System.Single.PositiveInfinity" />.</span></span></param>
        <summary><span data-ttu-id="33527-117">Devuelve el ángulo cuyo coseno hiperbólico es el número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-117">Returns the angle whose hyperbolic cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-118">Ángulo, θ, medido en radianes, como 0 ≤ θ ≤ ∞.</span><span class="sxs-lookup"><span data-stu-id="33527-118">An angle, θ, measured in radians, such that 0 ≤ θ ≤ ∞.</span></span>
  
<span data-ttu-id="33527-119">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-119">-or-</span></span> 
 <span data-ttu-id="33527-120"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-120"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> &lt; 1 or <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-121">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-121">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static float Asin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asin(float x);" />
      <MemberSignature Language="F#" Value="static member Asin : single -&gt; single" Usage="System.MathF.Asin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-122">Número que representa un seno, donde <paramref name="x" /> debe ser mayor o igual que -1 y menor o igual que 1.</span><span class="sxs-lookup"><span data-stu-id="33527-122">A number representing a sine, where <paramref name="x" /> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="33527-123">Devuelve el ángulo cuyo seno es el número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-123">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-124">Ángulo, θ, medido en radianes, de modo que -π/2 ≤ θ ≤ π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-124">An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.</span></span>
  
<span data-ttu-id="33527-125">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-125">-or-</span></span> 
 <span data-ttu-id="33527-126"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-126"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> &lt; -1 or <paramref name="x" /> &gt; 1 or <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-127">Un valor devuelto positivo representa un ángulo ascendente desde el eje x; un valor devuelto negativo representa un ángulo de las agujas del reloj.</span><span class="sxs-lookup"><span data-stu-id="33527-127">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="33527-128">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-128">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static float Asinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Asinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Asinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Asinh(float x);" />
      <MemberSignature Language="F#" Value="static member Asinh : single -&gt; single" Usage="System.MathF.Asinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-129">Número que representa un seno hiperbólico, donde <paramref name="x" /> debe ser mayor o igual que <see cref="F:System.Single.NegativeInfinity" /> pero menor o igual que <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-129">A number representing a hyperbolic sine, where <paramref name="x" /> must be greater than or equal to <see cref="F:System.Single.NegativeInfinity" />, but less than or equal to <see cref="F:System.Single.PositiveInfinity" />.</span></span></param>
        <summary><span data-ttu-id="33527-130">Devuelve el ángulo cuyo seno hiperbólico es el número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-130">Returns the angle whose hyperbolic sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-131">Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ ≤ -1 o 1 ≤ θ &lt; ∞.</span><span class="sxs-lookup"><span data-stu-id="33527-131">An angle, θ, measured in radians, such that -∞ &lt; θ ≤ -1, or 1 ≤ θ &lt; ∞.</span></span> 
  
<span data-ttu-id="33527-132">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-132">-or-</span></span> 
 <span data-ttu-id="33527-133"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-133"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-134">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-134">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static float Atan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan(float x);" />
      <MemberSignature Language="F#" Value="static member Atan : single -&gt; single" Usage="System.MathF.Atan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-135">Número que representa una tangente.</span><span class="sxs-lookup"><span data-stu-id="33527-135">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="33527-136">Devuelve el ángulo cuya tangente corresponde al número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-136">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-137">Ángulo, θ, medido en radianes, de modo que -π/2 ≤ θ ≤ π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-137">An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.</span></span>  
  
<span data-ttu-id="33527-138">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-138">-or-</span></span> 
 <span data-ttu-id="33527-139"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, -π/2 redondeado a precisión doble (-1,5707963267949) si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, o π/2 redondeado a precisión doble (1,5707963267949) si <paramref name="x" /> es igual a <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-139"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> equals <see cref="F:System.Single.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="x" /> equals <see cref="F:System.Single.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="x" /> equals <see cref="F:System.Single.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-140">Un valor devuelto positivo representa un ángulo ascendente desde el eje x; un valor devuelto negativo representa un ángulo de las agujas del reloj.</span><span class="sxs-lookup"><span data-stu-id="33527-140">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="33527-141">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-141">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static float Atan2 (float y, float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atan2(float32 y, float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atan2(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Single, x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atan2(float y, float x);" />
      <MemberSignature Language="F#" Value="static member Atan2 : single * single -&gt; single" Usage="System.MathF.Atan2 (y, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="33527-142">Coordenada Y de un punto.</span><span class="sxs-lookup"><span data-stu-id="33527-142">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="33527-143">Coordenada X de un punto.</span><span class="sxs-lookup"><span data-stu-id="33527-143">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="33527-144">Devuelve el ángulo cuya tangente es el cociente de dos números especificados.</span><span class="sxs-lookup"><span data-stu-id="33527-144">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="33527-145">Ángulo, θ, medido en radianes, de modo que -π ≤ θ ≤ π y tan(θ) = <paramref name="y" /> / <paramref name="x" />, donde (<paramref name="x" />, <paramref name="y" />) es un punto en el plano cartesiano.</span><span class="sxs-lookup"><span data-stu-id="33527-145">An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="33527-146">Observe lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="33527-146">Observe the following:</span></span> 
<span data-ttu-id="33527-147">-   Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 1, 0 &lt; θ &lt; π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-147">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
<span data-ttu-id="33527-148">-   Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 2, π/2 &lt; θ ≤ π.</span><span class="sxs-lookup"><span data-stu-id="33527-148">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ ≤ π.</span></span>  
  
<span data-ttu-id="33527-149">-   Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 3, -π &lt; θ &lt; -π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-149">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
<span data-ttu-id="33527-150">-   Para (<paramref name="x" />, <paramref name="y" />) en el cuadrante 4, -π/2 &lt; θ &lt; 0.</span><span class="sxs-lookup"><span data-stu-id="33527-150">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
<span data-ttu-id="33527-151">Para los puntos en los límites de los cuadrantes, el valor devuelto es el siguiente:</span><span class="sxs-lookup"><span data-stu-id="33527-151">For points on the boundaries of the quadrants, the return value is the following:</span></span> 
<span data-ttu-id="33527-152">-   Si y es 0 y x no es negativo, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="33527-152">-   If y is 0 and x is not negative, θ = 0.</span></span>  
  
<span data-ttu-id="33527-153">-   Si y es 0 y x es negativo, θ = π.</span><span class="sxs-lookup"><span data-stu-id="33527-153">-   If y is 0 and x is negative, θ = π.</span></span>  
  
<span data-ttu-id="33527-154">-   Si y es positivo y x es 0, θ = π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-154">-   If y is positive and x is 0, θ = π/2.</span></span>  
  
<span data-ttu-id="33527-155">-   Si y es negativo y el valor de x es 0, θ = -π/2.</span><span class="sxs-lookup"><span data-stu-id="33527-155">-   If y is negative and x is 0, θ = -π/2.</span></span>  
  
<span data-ttu-id="33527-156">-   Si y es 0 y x es 0, θ = 0.</span><span class="sxs-lookup"><span data-stu-id="33527-156">-   If y is 0 and x is 0, θ = 0.</span></span>  
  
<span data-ttu-id="33527-157">Si <paramref name="x" /> o <paramref name="y" /> es <see cref="F:System.Single.NaN" /> o si <paramref name="x" /> y <paramref name="y" /> son <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />, el método devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-157">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Single.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />, the method returns <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-158">El valor devuelto es el ángulo en el plano cartesiano formado por el eje x y un vector desde el origen (0,0) y termina en el punto, (x, y).</span><span class="sxs-lookup"><span data-stu-id="33527-158">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static float Atanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Atanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Atanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Atanh(float x);" />
      <MemberSignature Language="F#" Value="static member Atanh : single -&gt; single" Usage="System.MathF.Atanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-159">Número que representa una tangente hiperbólica, donde <paramref name="x" /> debe ser mayor o igual que -1 pero menor o igual que 1.</span><span class="sxs-lookup"><span data-stu-id="33527-159">A number representing a hyperbolic tangent, where <paramref name="x" /> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="33527-160">Devuelve el ángulo cuya tangente hiperbólica es el número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-160">Returns the angle whose hyperbolic tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-161">Ángulo, θ, medido en radianes, de modo que -∞ &lt; θ &lt;-1 o 1 &lt; θ &lt; ∞.</span><span class="sxs-lookup"><span data-stu-id="33527-161">An angle, θ, measured in radians, such that -∞ &lt; θ &lt;-1, or 1 &lt; θ &lt; ∞.</span></span>  
  
<span data-ttu-id="33527-162">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-162">-or-</span></span> 
 <span data-ttu-id="33527-163"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> &lt; -1 o <paramref name="x" /> &gt; 1 o <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-163"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> &lt; -1 or <paramref name="x" /> &gt; 1 or <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-164">Multiplique el valor devuelto por 180 /<xref:System.MathF.PI?displayProperty=nameWithType> para convertir de radianes en grados.</span><span class="sxs-lookup"><span data-stu-id="33527-164">Multiply the return value by 180/<xref:System.MathF.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitDecrement">
      <MemberSignature Language="C#" Value="public static float BitDecrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitDecrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitDecrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitDecrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitDecrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitDecrement : single -&gt; single" Usage="System.MathF.BitDecrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-165">Valor que se va a disminuir.</span><span class="sxs-lookup"><span data-stu-id="33527-165">The value to decrement.</span></span></param>
        <summary><span data-ttu-id="33527-166">Devuelve el siguiente valor más pequeño menor que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-166">Returns the next smallest value that compares less than <paramref name="x" />.</span></span></summary>
        <returns><span data-ttu-id="33527-167">Siguiente valor más pequeño menor que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-167">The next smallest value that compares less than <paramref name="x" />.</span></span>
  
<span data-ttu-id="33527-168">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-168">-or-</span></span> 
 <span data-ttu-id="33527-169"><see cref="F:System.Single.NegativeInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-169"><see cref="F:System.Single.NegativeInfinity" /> if <paramref name="x" /> is equals <see cref="F:System.Single.NegativeInfinity" />.</span></span>
  
<span data-ttu-id="33527-170">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-170">-or-</span></span> 
 <span data-ttu-id="33527-171"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-171"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="BitIncrement">
      <MemberSignature Language="C#" Value="public static float BitIncrement (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 BitIncrement(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.BitIncrement(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BitIncrement (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float BitIncrement(float x);" />
      <MemberSignature Language="F#" Value="static member BitIncrement : single -&gt; single" Usage="System.MathF.BitIncrement x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-172">Valor que se va a aumentar.</span><span class="sxs-lookup"><span data-stu-id="33527-172">The value to increment.</span></span></param>
        <summary><span data-ttu-id="33527-173">Devuelve el siguiente valor más grande mayor que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-173">Returns the next largest value that is greater than <paramref name="x" />.</span></span></summary>
        <returns><span data-ttu-id="33527-174">Siguiente valor más grande mayor que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-174">The next largest value that is greater than <paramref name="x" />.</span></span>
  
<span data-ttu-id="33527-175">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-175">-or-</span></span> 
 <span data-ttu-id="33527-176"><see cref="F:System.Single.PositiveInfinity" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-176"><see cref="F:System.Single.PositiveInfinity" /> if <paramref name="x" /> equals <see cref="F:System.Single.PositiveInfinity" />.</span></span>
  
<span data-ttu-id="33527-177">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-177">-or-</span></span> 
 <span data-ttu-id="33527-178"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-178"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> is equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static float Cbrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cbrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cbrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cbrt(float x);" />
      <MemberSignature Language="F#" Value="static member Cbrt : single -&gt; single" Usage="System.MathF.Cbrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-179">Número cuya raíz cúbica se va a calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-179">The number whose cube root is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-180">Devuelve la raíz cúbica de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-180">Returns the cube root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-181">Raíz cúbica de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-181">The cube root of <paramref name="x" />.</span></span>
  
<span data-ttu-id="33527-182">O bien</span><span class="sxs-lookup"><span data-stu-id="33527-182">-or-</span></span> 
 <span data-ttu-id="33527-183"><see cref="F:System.Single.NaN" /> si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-183"><see cref="F:System.Single.NaN" /> if <paramref name="x" /> is equals <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static float Ceiling (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Ceiling(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Ceiling(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Ceiling(float x);" />
      <MemberSignature Language="F#" Value="static member Ceiling : single -&gt; single" Usage="System.MathF.Ceiling x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-184">Número de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-184">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="33527-185">Devuelve el valor integral más pequeño que es mayor o igual que el número de punto flotante de precisión sencilla especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-185">Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="33527-186">Valor entero más pequeño que es mayor o igual que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-186">The smallest integral value that is greater than or equal to <paramref name="x" />.</span></span> <span data-ttu-id="33527-187">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor.</span><span class="sxs-lookup"><span data-stu-id="33527-187">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="33527-188">Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="33527-188">Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-189">El comportamiento de este método sigue el estándar IEEE 754, sección 4.</span><span class="sxs-lookup"><span data-stu-id="33527-189">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="33527-190">Este tipo de redondeo se denomina redondeo a infinito positivo.</span><span class="sxs-lookup"><span data-stu-id="33527-190">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="33527-191">En otras palabras, si `x` es positivo, la presencia de las causas de cualquier componente de fracción `x` se redondea al entero más alto siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-191">In other words, if `x` is positive, the presence of any fractional component causes `x` to be rounded to the next highest integer.</span></span> <span data-ttu-id="33527-192">Si `x` es negativo, la operación de redondeo hace que cualquier componente de fracción de `x` se descarten.</span><span class="sxs-lookup"><span data-stu-id="33527-192">If `x` is negative, the rounding operation causes any fractional component of `x` to be discarded.</span></span> <span data-ttu-id="33527-193">La operación de este método difiere el <xref:System.MathF.Floor%28System.Single%29> método, que es compatible con redondeo a infinito negativo.</span><span class="sxs-lookup"><span data-stu-id="33527-193">The operation of this method differs from the <xref:System.MathF.Floor%28System.Single%29> method, which supports rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="CopySign">
      <MemberSignature Language="C#" Value="public static float CopySign (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 CopySign(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.CopySign(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CopySign (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float CopySign(float x, float y);" />
      <MemberSignature Language="F#" Value="static member CopySign : single * single -&gt; single" Usage="System.MathF.CopySign (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-194">Número cuya magnitud se usa en el resultado.</span><span class="sxs-lookup"><span data-stu-id="33527-194">A number whose magnitude is used in the result.</span></span></param>
        <param name="y"><span data-ttu-id="33527-195">Número cuyo signo se usa en el resultado.</span><span class="sxs-lookup"><span data-stu-id="33527-195">A number whose sign is the used in the result.</span></span></param>
        <summary><span data-ttu-id="33527-196">Devuelve un valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="33527-196">Returns a value with the magnitude of <paramref name="x" /> and the sign of <paramref name="y" />.</span></span></summary>
        <returns><span data-ttu-id="33527-197">Valor con la magnitud de <paramref name="x" /> y el signo de <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="33527-197">A value with the magnitude of <paramref name="x" /> and the sign of <paramref name="y" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static float Cos (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cos(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cos(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cos(float x);" />
      <MemberSignature Language="F#" Value="static member Cos : single -&gt; single" Usage="System.MathF.Cos x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-198">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-198">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-199">Devuelve el coseno del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-199">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-200">Coseno de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-200">The cosine of <paramref name="x" />.</span></span> <span data-ttu-id="33527-201">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-201">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-202">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-202">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-203">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-203">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static float Cosh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Cosh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Cosh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Cosh(float x);" />
      <MemberSignature Language="F#" Value="static member Cosh : single -&gt; single" Usage="System.MathF.Cosh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-204">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-204">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-205">Devuelve el coseno hiperbólico del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-205">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-206">Coseno hiperbólico de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-206">The hyperbolic cosine of <paramref name="x" />.</span></span> <span data-ttu-id="33527-207">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-207">If <paramref name="x" /> is equal to <see cref="F:System.Single.NegativeInfinity" /> or <see cref="F:System.Single.PositiveInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="33527-208">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, se devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-208">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-209">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-209">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-210">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-210">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>    
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const float E = 2.718282;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 E = (2.718282)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Single  = 2.718282" />
      <MemberSignature Language="C++ CLI" Value="public: float E = 2.718282;" />
      <MemberSignature Language="F#" Value="val mutable E : single" Usage="System.MathF.E" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>2.718282</MemberValue>
      <Docs>
        <summary><span data-ttu-id="33527-211">Representa la base logarítmica natural, especificada por la constante, <see langword="e" />.</span><span class="sxs-lookup"><span data-stu-id="33527-211">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="33527-212">El valor de esta constante es 2.71828175.</span><span class="sxs-lookup"><span data-stu-id="33527-212">The value of this constant is 2.71828175.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static float Exp (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Exp(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Exp(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Exp(float x);" />
      <MemberSignature Language="F#" Value="static member Exp : single -&gt; single" Usage="System.MathF.Exp x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-213">Número que especifica una potencia.</span><span class="sxs-lookup"><span data-stu-id="33527-213">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="33527-214">Devuelve <see langword="e" /> elevado a la potencia especificada.</span><span class="sxs-lookup"><span data-stu-id="33527-214">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="33527-215">Número <see langword="e" /> elevado a la potencia <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-215">The number <see langword="e" /> raised to the power <paramref name="x" />.</span></span> <span data-ttu-id="33527-216">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor.</span><span class="sxs-lookup"><span data-stu-id="33527-216">If <paramref name="x" /> equals <see cref="F:System.Single.NaN" /> or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="33527-217">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NegativeInfinity" />, se devuelve 0.</span><span class="sxs-lookup"><span data-stu-id="33527-217">If <paramref name="x" /> equals <see cref="F:System.Single.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-218">`e` es una constante matemática cuyo valor es de aproximadamente 2,71828.</span><span class="sxs-lookup"><span data-stu-id="33527-218">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="33527-219">Use el <xref:System.MathF.Pow%2A> método para calcular potencias de otras bases.</span><span class="sxs-lookup"><span data-stu-id="33527-219">Use the <xref:System.MathF.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="33527-220"><xref:System.MathF.Exp%2A> es el inverso de <xref:System.MathF.Log%2A>.</span><span class="sxs-lookup"><span data-stu-id="33527-220"><xref:System.MathF.Exp%2A> is the inverse of <xref:System.MathF.Log%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
        <altmember cref="M:System.MathF.Log(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static float Floor (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Floor(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Floor(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Floor(float x);" />
      <MemberSignature Language="F#" Value="static member Floor : single -&gt; single" Usage="System.MathF.Floor x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-221">Número de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-221">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="33527-222">Devuelve el valor integral más grande menor o igual que el número de punto flotante de precisión sencilla especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-222">Returns the largest integral value less than or equal to the specified single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="33527-223">El mayor valor integral que es menor o igual que <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-223">The largest integral value less than or equal to <paramref name="x" />.</span></span> <span data-ttu-id="33527-224">Si <paramref name="x" /> es igual que <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, se devuelve ese valor.</span><span class="sxs-lookup"><span data-stu-id="33527-224">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-225">El comportamiento de este método sigue el estándar IEEE 754, sección 4.</span><span class="sxs-lookup"><span data-stu-id="33527-225">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="33527-226">Este tipo de redondeo se denomina redondeo a infinito negativo.</span><span class="sxs-lookup"><span data-stu-id="33527-226">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="33527-227">En otras palabras, si `x` es positivo, se trunca cualquier componente de fracción.</span><span class="sxs-lookup"><span data-stu-id="33527-227">In other words, if `x` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="33527-228">Si `x` es negativo, la presencia de cualquier componente fraccionario hace que se va a redondear al entero más pequeño.</span><span class="sxs-lookup"><span data-stu-id="33527-228">If `x` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="33527-229">La operación de este método difiere el <xref:System.MathF.Ceiling%2A> método, que es compatible con redondeo a infinito positivo.</span><span class="sxs-lookup"><span data-stu-id="33527-229">The operation of this method differs from the <xref:System.MathF.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="FusedMultiplyAdd">
      <MemberSignature Language="C#" Value="public static float FusedMultiplyAdd (float x, float y, float z);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 FusedMultiplyAdd(float32 x, float32 y, float32 z) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FusedMultiplyAdd (x As Single, y As Single, z As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float FusedMultiplyAdd(float x, float y, float z);" />
      <MemberSignature Language="F#" Value="static member FusedMultiplyAdd : single * single * single -&gt; single" Usage="System.MathF.FusedMultiplyAdd (x, y, z)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="z" Type="System.Single" Index="2" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-230">Número que se va a multiplicar con <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="33527-230">The number to be multiplied with <paramref name="y" />.</span></span></param>
        <param name="y"><span data-ttu-id="33527-231">Número que se va a multiplicar con <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-231">The number to be multiplied with <paramref name="x" />.</span></span></param>
        <param name="z"><span data-ttu-id="33527-232">Número que se va a agregar al resultado de <paramref name="x" /> multiplicado por <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="33527-232">The number to be added to the result of <paramref name="x" /> multiplied by <paramref name="y" />.</span></span></param>
        <summary><span data-ttu-id="33527-233">Devuelve (x \* y) + z, redondeado como una operación ternaria.</span><span class="sxs-lookup"><span data-stu-id="33527-233">Returns (x \* y) + z, rounded as one ternary operation.</span></span></summary>
        <returns><span data-ttu-id="33527-234">(x \* y) + z, redondeado como una operación ternaria.</span><span class="sxs-lookup"><span data-stu-id="33527-234">(x \* y) + z, rounded as one ternary operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-235">Esto calcula `(x * y)` como si se van a precisión infinita, agrega `z` a que como resultado que si con precisión infinita y, por último, se redondea a la más próximo al valor que se puede representar.</span><span class="sxs-lookup"><span data-stu-id="33527-235">This computes `(x * y)` as if to infinite precision, adds `z` to that result as if to infinite precision, and finally rounds to the nearest representable value.</span></span>
  
 <span data-ttu-id="33527-236">Esto difiere de la secuencia no combinados que calcula `(x * y)` como si se van a preicision infinito, redondear el resultado a la más próximo al valor que se puede representar, agregue "z" al resultado redondeado como si con precisión infinita y finalmente redondear al más cercano representable valor.</span><span class="sxs-lookup"><span data-stu-id="33527-236">This differs from the non-fused sequence which would compute `(x * y)` as if to infinite preicision, round the result to the nearest representable value, add 'z' to the rounded result as if to infinite precision, and finally round to the nearest representable value.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static float IEEERemainder (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 IEEERemainder(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.IEEERemainder(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float IEEERemainder(float x, float y);" />
      <MemberSignature Language="F#" Value="static member IEEERemainder : single * single -&gt; single" Usage="System.MathF.IEEERemainder (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-237">Dividendo.</span><span class="sxs-lookup"><span data-stu-id="33527-237">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="33527-238">Divisor.</span><span class="sxs-lookup"><span data-stu-id="33527-238">A divisor.</span></span></param>
        <summary><span data-ttu-id="33527-239">Devuelve el resto de la división de dos números especificados.</span><span class="sxs-lookup"><span data-stu-id="33527-239">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-240">Número igual a <paramref name="x" /> - (<paramref name="y" /> Q), donde Q es el cociente de <paramref name="x" /> / <paramref name="y" /> redondeado a su entero más próximo (si <paramref name="x" /> / <paramref name="y" /> se encuentra entre dos enteros, se devuelve el entero par).</span><span class="sxs-lookup"><span data-stu-id="33527-240">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
<span data-ttu-id="33527-241">Si <paramref name="x" /> - (<paramref name="y" /> Q) es cero, se devuelve el valor +0 si <paramref name="x" /> es positivo o -0 si <paramref name="x" /> es negativo.</span><span class="sxs-lookup"><span data-stu-id="33527-241">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
<span data-ttu-id="33527-242">Si <paramref name="y" /> = 0, se devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-242">If <paramref name="y" /> = 0, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-243">Esta operación cumple con la operación de resto definida en la sección 5.1 de ANSI/IEEE Std 754-1985; Estándar IEEE para aritmética binaria de punto flotante; Institute of Electrical and Electronics Engineers, Inc; 1985.</span><span class="sxs-lookup"><span data-stu-id="33527-243">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="33527-244">El <xref:System.MathF.IEEERemainder%2A> método no es igual que el [operador de resto](~/docs/csharp/language-reference/operators/remainder-operator.md).</span><span class="sxs-lookup"><span data-stu-id="33527-244">The <xref:System.MathF.IEEERemainder%2A> method is not the same as the [remainder operator](~/docs/csharp/language-reference/operators/remainder-operator.md).</span></span> <span data-ttu-id="33527-245">Aunque ambos devuelven el resto después de la división, las fórmulas que usan son diferentes.</span><span class="sxs-lookup"><span data-stu-id="33527-245">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="33527-246">La fórmula para el <xref:System.MathF.IEEERemainder%2A> método es:</span><span class="sxs-lookup"><span data-stu-id="33527-246">The formula for the <xref:System.MathF.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * MathF.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="33527-247">En cambio, la fórmula para el operador de resto es:</span><span class="sxs-lookup"><span data-stu-id="33527-247">In contrast, the formula for the remainder operator is:</span></span>  
  
```  
Remainder = (MathF.Abs(dividend) - (MathF.Abs(divisor) *   
            (MathF.Floor(MathF.Abs(dividend) / MathF.Abs(divisor))))) *   
            MathF.Sign(dividend)  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ILogB">
      <MemberSignature Language="C#" Value="public static int ILogB (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ILogB(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ILogB(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ILogB (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ILogB(float x);" />
      <MemberSignature Language="F#" Value="static member ILogB : single -&gt; int" Usage="System.MathF.ILogB x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-248">Número cuyo logaritmo se va a calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-248">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-249">Devuelve el logaritmo de entero en base 2 de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-249">Returns the base 2 integer logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-250">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-250">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term><span data-ttu-id="33527-251">Parámetro <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-251"><paramref name="x" /> parameter</span></span> 
 </term><description> <span data-ttu-id="33527-252">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-252">Return value</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-253">Default</span><span class="sxs-lookup"><span data-stu-id="33527-253">Default</span></span> 
 </term><description> <span data-ttu-id="33527-254">Logaritmo de entero en base 2 de <paramref name="x" />; es decir, (int)log2(<paramref name="x" />).</span><span class="sxs-lookup"><span data-stu-id="33527-254">The base 2 integer log of <paramref name="x" />; that is, (int)log2(<paramref name="x" />).</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-255">Cero</span><span class="sxs-lookup"><span data-stu-id="33527-255">Zero</span></span> 
 </term><description> <see cref="F:System.Int32.MinValue" />
  
 </description></item><item><term> <span data-ttu-id="33527-256">Igual que <see cref="F:System.Single.NaN" /> o <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />
  
 </span><span class="sxs-lookup"><span data-stu-id="33527-256">Equal to <see cref="F:System.Single.NaN" /> or <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />
  
 </span></span></term><description> <see cref="F:System.Int32.MaxValue" />
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-257">Parámetro `x` se especifica como un número en base 10.</span><span class="sxs-lookup"><span data-stu-id="33527-257">Parameter `x` is specified as a base 10 number.</span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x);" />
      <MemberSignature Language="F#" Value="static member Log : single -&gt; single" Usage="System.MathF.Log x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-258">Número cuyo logaritmo se va a calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-258">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-259">Devuelve el logaritmo natural (en base <see langword="e" />) de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-259">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-260">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-260">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term><span data-ttu-id="33527-261">Parámetro <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-261"><paramref name="x" /> parameter</span></span> 
 </term><description> <span data-ttu-id="33527-262">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-262">Return value</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-263">Positivo</span><span class="sxs-lookup"><span data-stu-id="33527-263">Positive</span></span> 
 </term><description> <span data-ttu-id="33527-264">El algoritmo natural de <paramref name="x" />; es decir, ln <paramref name="x" /> o log e <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-264">The natural logarithm of <paramref name="x" />; that is, ln <paramref name="x" />, or log e <paramref name="x" /></span></span></description></item><item><term> <span data-ttu-id="33527-265">Cero</span><span class="sxs-lookup"><span data-stu-id="33527-265">Zero</span></span> 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> <span data-ttu-id="33527-266">Negativo</span><span class="sxs-lookup"><span data-stu-id="33527-266">Negative</span></span> 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-267">Igual a <see cref="F:System.Single.NaN" /></span><span class="sxs-lookup"><span data-stu-id="33527-267">Equal to <see cref="F:System.Single.NaN" /></span></span></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-268">Igual a <see cref="F:System.Single.PositiveInfinity" /></span><span class="sxs-lookup"><span data-stu-id="33527-268">Equal to <see cref="F:System.Single.PositiveInfinity" /></span></span></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-269">Parámetro `x` se especifica como un número en base 10.</span><span class="sxs-lookup"><span data-stu-id="33527-269">Parameter `x` is specified as a base 10 number.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.MathF.E" />
        <altmember cref="M:System.MathF.Exp(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static float Log (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Log : single * single -&gt; single" Usage="System.MathF.Log (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-270">Número cuyo logaritmo se va a calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-270">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="33527-271">Base del logaritmo.</span><span class="sxs-lookup"><span data-stu-id="33527-271">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="33527-272">Devuelve el logaritmo de un número especificado en una base determinada.</span><span class="sxs-lookup"><span data-stu-id="33527-272">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="33527-273">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-273">One of the values in the following table.</span></span> <span data-ttu-id="33527-274">(+Infinito denota <see cref="F:System.Single.PositiveInfinity" />, -Infinito denota <see cref="F:System.Single.NegativeInfinity" /> y NaN denota <see cref="F:System.Single.NaN" />)</span><span class="sxs-lookup"><span data-stu-id="33527-274">(+Infinity denotes <see cref="F:System.Single.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Single.NegativeInfinity" />, and NaN denotes <see cref="F:System.Single.NaN" />.)</span></span> 
 <list type="table"><listheader><term><paramref name="x" /></term><description><paramref name="newBase" /></description><description> <span data-ttu-id="33527-275">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-275">Return value</span></span> 
 </description></listheader><item><term><span data-ttu-id="33527-276"><paramref name="x" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="33527-276"><paramref name="x" />&gt; 0</span></span> 
 </term><description> <span data-ttu-id="33527-277">(0 &lt;<paramref name="newBase" />&lt; 1) o (<paramref name="newBase" />&gt; 1)</span><span class="sxs-lookup"><span data-stu-id="33527-277">(0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span> 
 </description><description> <span data-ttu-id="33527-278">lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="33527-278">lognewBase(a)</span></span> 
 </description></item><item><term><span data-ttu-id="33527-279"><paramref name="x" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="33527-279"><paramref name="x" />&lt; 0</span></span> 
 </term><description> <span data-ttu-id="33527-280">(cualquier valor)</span><span class="sxs-lookup"><span data-stu-id="33527-280">(any value)</span></span> 
 </description><description> <span data-ttu-id="33527-281">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-281">NaN</span></span> 
 </description></item><item><term> <span data-ttu-id="33527-282">(cualquier valor)</span><span class="sxs-lookup"><span data-stu-id="33527-282">(any value)</span></span> 
 </term><description><span data-ttu-id="33527-283"><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="33527-283"><paramref name="newBase" />&lt; 0</span></span> 
 </description><description> <span data-ttu-id="33527-284">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-284">NaN</span></span> 
 </description></item><item><term><span data-ttu-id="33527-285"><paramref name="x" /> != 1</span><span class="sxs-lookup"><span data-stu-id="33527-285"><paramref name="x" /> != 1</span></span> 
 </term><description><span data-ttu-id="33527-286"><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="33527-286"><paramref name="newBase" /> = 0</span></span> 
 </description><description> <span data-ttu-id="33527-287">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-287">NaN</span></span> 
 </description></item><item><term><span data-ttu-id="33527-288"><paramref name="x" /> != 1</span><span class="sxs-lookup"><span data-stu-id="33527-288"><paramref name="x" /> != 1</span></span> 
 </term><description><span data-ttu-id="33527-289"><paramref name="newBase" /> = +Infinito</span><span class="sxs-lookup"><span data-stu-id="33527-289"><paramref name="newBase" /> = +Infinity</span></span> 
 </description><description> <span data-ttu-id="33527-290">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-290">NaN</span></span> 
 </description></item><item><term><span data-ttu-id="33527-291"><paramref name="x" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="33527-291"><paramref name="x" /> = NaN</span></span> 
 </term><description> <span data-ttu-id="33527-292">(cualquier valor)</span><span class="sxs-lookup"><span data-stu-id="33527-292">(any value)</span></span> 
 </description><description> <span data-ttu-id="33527-293">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-293">NaN</span></span> 
 </description></item><item><term> <span data-ttu-id="33527-294">(cualquier valor)</span><span class="sxs-lookup"><span data-stu-id="33527-294">(any value)</span></span> 
 </term><description><span data-ttu-id="33527-295"><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="33527-295"><paramref name="newBase" /> = NaN</span></span> 
 </description><description> <span data-ttu-id="33527-296">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-296">NaN</span></span> 
 </description></item><item><term> <span data-ttu-id="33527-297">(cualquier valor)</span><span class="sxs-lookup"><span data-stu-id="33527-297">(any value)</span></span> 
 </term><description><span data-ttu-id="33527-298"><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="33527-298"><paramref name="newBase" /> = 1</span></span> 
 </description><description> <span data-ttu-id="33527-299">NaN</span><span class="sxs-lookup"><span data-stu-id="33527-299">NaN</span></span> 
 </description></item><item><term><span data-ttu-id="33527-300"><paramref name="x" /> = 0</span><span class="sxs-lookup"><span data-stu-id="33527-300"><paramref name="x" /> = 0</span></span> 
 </term><description> <span data-ttu-id="33527-301">0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="33527-301">0 &lt;<paramref name="newBase" />&lt; 1</span></span> 
 </description><description> <span data-ttu-id="33527-302">+Infinito</span><span class="sxs-lookup"><span data-stu-id="33527-302">+Infinity</span></span> 
 </description></item><item><term><span data-ttu-id="33527-303"><paramref name="x" /> = 0</span><span class="sxs-lookup"><span data-stu-id="33527-303"><paramref name="x" /> = 0</span></span> 
 </term><description><span data-ttu-id="33527-304"><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="33527-304"><paramref name="newBase" />&gt; 1</span></span> 
 </description><description> <span data-ttu-id="33527-305">-Infinity</span><span class="sxs-lookup"><span data-stu-id="33527-305">-Infinity</span></span> 
 </description></item><item><term><span data-ttu-id="33527-306"><paramref name="x" /> =  +infinito</span><span class="sxs-lookup"><span data-stu-id="33527-306"><paramref name="x" /> =  +Infinity</span></span> 
 </term><description> <span data-ttu-id="33527-307">0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="33527-307">0 &lt;<paramref name="newBase" />&lt; 1</span></span> 
 </description><description> <span data-ttu-id="33527-308">-Infinity</span><span class="sxs-lookup"><span data-stu-id="33527-308">-Infinity</span></span> 
 </description></item><item><term><span data-ttu-id="33527-309"><paramref name="x" /> =  +infinito</span><span class="sxs-lookup"><span data-stu-id="33527-309"><paramref name="x" /> =  +Infinity</span></span> 
 </term><description><span data-ttu-id="33527-310"><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="33527-310"><paramref name="newBase" />&gt; 1</span></span> 
 </description><description> <span data-ttu-id="33527-311">+Infinito</span><span class="sxs-lookup"><span data-stu-id="33527-311">+Infinity</span></span> 
 </description></item><item><term><span data-ttu-id="33527-312"><paramref name="x" /> = 1</span><span class="sxs-lookup"><span data-stu-id="33527-312"><paramref name="x" /> = 1</span></span> 
 </term><description><span data-ttu-id="33527-313"><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="33527-313"><paramref name="newBase" /> = 0</span></span> 
 </description><description> <span data-ttu-id="33527-314">0</span><span class="sxs-lookup"><span data-stu-id="33527-314">0</span></span> 
 </description></item><item><term><span data-ttu-id="33527-315"><paramref name="x" /> = 1</span><span class="sxs-lookup"><span data-stu-id="33527-315"><paramref name="x" /> = 1</span></span> 
 </term><description><span data-ttu-id="33527-316"><paramref name="newBase" /> = +Infinito</span><span class="sxs-lookup"><span data-stu-id="33527-316"><paramref name="newBase" /> = +Infinity</span></span> 
 </description><description> <span data-ttu-id="33527-317">0</span><span class="sxs-lookup"><span data-stu-id="33527-317">0</span></span> 
 </description></item></list></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static float Log10 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log10(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log10(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log10(float x);" />
      <MemberSignature Language="F#" Value="static member Log10 : single -&gt; single" Usage="System.MathF.Log10 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-318">Número cuyo logaritmo hay que calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-318">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-319">Devuelve el logaritmo en base 10 de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-319">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-320">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-320">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term><span data-ttu-id="33527-321">Parámetro <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-321"><paramref name="x" /> parameter</span></span> 
 </term><description> <span data-ttu-id="33527-322">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-322">Return value</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-323">Positivo</span><span class="sxs-lookup"><span data-stu-id="33527-323">Positive</span></span> 
 </term><description> <span data-ttu-id="33527-324">Logaritmo en base 10 de <paramref name="x" />; es decir, log 10<paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-324">The base 10 log of <paramref name="x" />; that is, log 10<paramref name="x" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-325">Cero</span><span class="sxs-lookup"><span data-stu-id="33527-325">Zero</span></span> 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> <span data-ttu-id="33527-326">Negativo</span><span class="sxs-lookup"><span data-stu-id="33527-326">Negative</span></span> 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-327">Igual a <see cref="F:System.Single.NaN" /></span><span class="sxs-lookup"><span data-stu-id="33527-327">Equal to <see cref="F:System.Single.NaN" /></span></span></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-328">Igual a <see cref="F:System.Single.PositiveInfinity" /></span><span class="sxs-lookup"><span data-stu-id="33527-328">Equal to <see cref="F:System.Single.PositiveInfinity" /></span></span></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-329">Parámetro `x` se especifica como un número en base 10.</span><span class="sxs-lookup"><span data-stu-id="33527-329">Parameter `x` is specified as a base 10 number.</span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log2">
      <MemberSignature Language="C#" Value="public static float Log2 (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Log2(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Log2(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log2 (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Log2(float x);" />
      <MemberSignature Language="F#" Value="static member Log2 : single -&gt; single" Usage="System.MathF.Log2 x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-330">Número cuyo logaritmo hay que calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-330">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-331">Devuelve el logaritmo en base 2 de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-331">Returns the base 2 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-332">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-332">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term><span data-ttu-id="33527-333">Parámetro <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-333"><paramref name="x" /> parameter</span></span> 
 </term><description> <span data-ttu-id="33527-334">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-334">Return value</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-335">Positivo</span><span class="sxs-lookup"><span data-stu-id="33527-335">Positive</span></span> 
 </term><description> <span data-ttu-id="33527-336">Logaritmo en base 2 de <paramref name="x" />; es decir, log 2<paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-336">The base 2 log of <paramref name="x" />; that is, log 2<paramref name="x" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-337">Cero</span><span class="sxs-lookup"><span data-stu-id="33527-337">Zero</span></span> 
 </term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term> <span data-ttu-id="33527-338">Negativo</span><span class="sxs-lookup"><span data-stu-id="33527-338">Negative</span></span> 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-339">Igual a <see cref="F:System.Single.NaN" /></span><span class="sxs-lookup"><span data-stu-id="33527-339">Equal to <see cref="F:System.Single.NaN" /></span></span></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-340">Igual a <see cref="F:System.Single.PositiveInfinity" /></span><span class="sxs-lookup"><span data-stu-id="33527-340">Equal to <see cref="F:System.Single.PositiveInfinity" /></span></span></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-341">Parámetro `x` se especifica como un número en base 10.</span><span class="sxs-lookup"><span data-stu-id="33527-341">Parameter `x` is specified as a base 10 number.</span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Max : single * single -&gt; single" Usage="System.MathF.Max (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-342">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-342">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="y"><span data-ttu-id="33527-343">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-343">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="33527-344">Devuelve el mayor de dos números de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-344">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="33527-345">Parámetro <paramref name="x" /> o <paramref name="y" />, el que sea mayor.</span><span class="sxs-lookup"><span data-stu-id="33527-345">Parameter <paramref name="x" /> or <paramref name="y" />, whichever is larger.</span></span> <span data-ttu-id="33527-346">Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</span><span class="sxs-lookup"><span data-stu-id="33527-346">If <paramref name="x" />, or <paramref name="y" />, or both <paramref name="x" /> and <paramref name="y" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxMagnitude">
      <MemberSignature Language="C#" Value="public static float MaxMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MaxMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MaxMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MaxMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MaxMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MaxMagnitude : single * single -&gt; single" Usage="System.MathF.MaxMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-347">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-347">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="y"><span data-ttu-id="33527-348">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-348">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="33527-349">Devuelve la magnitud mayor de dos números de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-349">Returns the larger magnitude of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="33527-350">Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud mayor.</span><span class="sxs-lookup"><span data-stu-id="33527-350">Parameter <paramref name="x" /> or <paramref name="y" />, whichever has the larger magnitude.</span></span> <span data-ttu-id="33527-351">Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</span><span class="sxs-lookup"><span data-stu-id="33527-351">If <paramref name="x" />, or <paramref name="y" />, or both <paramref name="x" /> and <paramref name="y" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Min : single * single -&gt; single" Usage="System.MathF.Min (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-352">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-352">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="y"><span data-ttu-id="33527-353">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-353">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="33527-354">Devuelve el menor de dos números de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-354">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="33527-355">Parámetro <paramref name="x" /> o <paramref name="y" />, el que sea menor.</span><span class="sxs-lookup"><span data-stu-id="33527-355">Parameter <paramref name="x" /> or <paramref name="y" />, whichever is smaller.</span></span> <span data-ttu-id="33527-356">Si <paramref name="x" />, <paramref name="y" /> o ambos ( <paramref name="x" /> y <paramref name="y" />) son iguales que <see cref="F:System.Single.NaN" />, se devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-356">If <paramref name="x" />, <paramref name="y" />, or both <paramref name="x" /> and <paramref name="y" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MinMagnitude">
      <MemberSignature Language="C#" Value="public static float MinMagnitude (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 MinMagnitude(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.MinMagnitude(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MinMagnitude (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float MinMagnitude(float x, float y);" />
      <MemberSignature Language="F#" Value="static member MinMagnitude : single * single -&gt; single" Usage="System.MathF.MinMagnitude (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="y" Type="System.Single" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-357">Primer número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-357">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="y"><span data-ttu-id="33527-358">Segundo número de punto flotante de precisión sencilla de los dos que se van a comparar.</span><span class="sxs-lookup"><span data-stu-id="33527-358">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="33527-359">Devuelve la magnitud menor de dos números de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-359">Returns the smaller magnitude of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="33527-360">Parámetro <paramref name="x" /> o <paramref name="y" />, el que tenga la magnitud menor.</span><span class="sxs-lookup"><span data-stu-id="33527-360">Parameter <paramref name="x" /> or <paramref name="y" />, whichever has the smaller magnitude.</span></span> <span data-ttu-id="33527-361">Si <paramref name="x" /> o <paramref name="y" />, o ambos (<paramref name="x" /> y <paramref name="y" />) son iguales a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> se devuelve.</span><span class="sxs-lookup"><span data-stu-id="33527-361">If <paramref name="x" />, or <paramref name="y" />, or both <paramref name="x" /> and <paramref name="y" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const float PI = 3.141593;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PI = (3.141593)" />
      <MemberSignature Language="DocId" Value="F:System.MathF.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Single  = 3.141593" />
      <MemberSignature Language="C++ CLI" Value="public: float PI = 3.141593;" />
      <MemberSignature Language="F#" Value="val mutable PI : single" Usage="System.MathF.PI" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.141593</MemberValue>
      <Docs>
        <summary><span data-ttu-id="33527-362">Representa la proporción de la circunferencia de un círculo en relación con su diámetro, especificado por la constante π.</span><span class="sxs-lookup"><span data-stu-id="33527-362">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="33527-363">El valor de este campo es 3.14159274.</span><span class="sxs-lookup"><span data-stu-id="33527-363">The value of this field is 3.14159274.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static float Pow (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Pow(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Pow(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Single, y As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Pow(float x, float y);" />
      <MemberSignature Language="F#" Value="static member Pow : single * single -&gt; single" Usage="System.MathF.Pow (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-364">Número de punto flotante de precisión sencilla que se va a elevar a una potencia.</span><span class="sxs-lookup"><span data-stu-id="33527-364">A single-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="33527-365">Número de punto flotante de precisión sencilla que especifica una potencia.</span><span class="sxs-lookup"><span data-stu-id="33527-365">A single-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="33527-366">Devuelve un número especificado elevado a la potencia especificada.</span><span class="sxs-lookup"><span data-stu-id="33527-366">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="33527-367">Número <paramref name="x" /> elevado a la potencia <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="33527-367">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-368">En la tabla siguiente indica el valor devuelto cuando se especifican varios valores o intervalos de valores para el `x` y `y` parámetros.</span><span class="sxs-lookup"><span data-stu-id="33527-368">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="33527-369">Para obtener más información, vea <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> y <xref:System.Single.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-369">For more information, see <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="33527-370">Parámetros</span><span class="sxs-lookup"><span data-stu-id="33527-370">Parameters</span></span>|<span data-ttu-id="33527-371">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-371">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="33527-372">`x` o `y`  =  `NaN`.</span><span class="sxs-lookup"><span data-stu-id="33527-372">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="33527-373">`x` = Cualquier valor excepto `NaN`; `y` = 0.</span><span class="sxs-lookup"><span data-stu-id="33527-373">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="33527-374">1</span><span class="sxs-lookup"><span data-stu-id="33527-374">1</span></span>|  
|<span data-ttu-id="33527-375">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="33527-375">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="33527-376">0</span><span class="sxs-lookup"><span data-stu-id="33527-376">0</span></span>|  
|<span data-ttu-id="33527-377">`x` = `NegativeInfinity`; `y` es un entero impar positivo.</span><span class="sxs-lookup"><span data-stu-id="33527-377">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="33527-378">`x` = `NegativeInfinity`; `y` es positivo, pero no es un entero impar.</span><span class="sxs-lookup"><span data-stu-id="33527-378">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="33527-379">`x` < 0, pero no `NegativeInfinity`; `y` no es un entero, `NegativeInfinity`, o `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-379">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="33527-380">`x` = -1; `y`  =  `NegativeInfinity` o `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-380">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="33527-381">-1 < `x` < 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-381">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="33527-382">-1 < `x` < 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-382">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="33527-383">0</span><span class="sxs-lookup"><span data-stu-id="33527-383">0</span></span>|  
|<span data-ttu-id="33527-384">`x` < -1 o `x` > 1. `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-384">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="33527-385">0</span><span class="sxs-lookup"><span data-stu-id="33527-385">0</span></span>|  
|<span data-ttu-id="33527-386">`x` < -1 o `x` > 1. `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="33527-386">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="33527-387">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="33527-387">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="33527-388">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="33527-388">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="33527-389">0</span><span class="sxs-lookup"><span data-stu-id="33527-389">0</span></span>|  
|<span data-ttu-id="33527-390">`x` = 1; `y` es cualquier valor excepto `NaN`.</span><span class="sxs-lookup"><span data-stu-id="33527-390">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="33527-391">1</span><span class="sxs-lookup"><span data-stu-id="33527-391">1</span></span>|  
|<span data-ttu-id="33527-392">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="33527-392">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="33527-393">0</span><span class="sxs-lookup"><span data-stu-id="33527-393">0</span></span>|  
|<span data-ttu-id="33527-394">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="33527-394">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.MathF.Sqrt(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x);" />
      <MemberSignature Language="F#" Value="static member Round : single -&gt; single" Usage="System.MathF.Round x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-395">Número de punto flotante de precisión sencilla que se va a redondear.</span><span class="sxs-lookup"><span data-stu-id="33527-395">A single-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="33527-396">Redondea un valor de punto flotante de precisión sencilla al valor integral más cercano y los valores de punto medio al número par más cercano.</span><span class="sxs-lookup"><span data-stu-id="33527-396">Rounds a single-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number.</span></span></summary>
        <returns><span data-ttu-id="33527-397"><paramref name="x" /> entero más cercano.</span><span class="sxs-lookup"><span data-stu-id="33527-397">The integer nearest <paramref name="x" />.</span></span> <span data-ttu-id="33527-398">Si el componente fraccionario de <paramref name="x" /> se encuentra en medio del intervalo entre dos números, uno par y el otro impar, se devuelve el número impar.</span><span class="sxs-lookup"><span data-stu-id="33527-398">If the fractional component of <paramref name="x" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="33527-399">Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="33527-399">Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="33527-400">Este método utiliza la convención de redondeo predeterminado <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-400">This method uses the default rounding convention of <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>.</span></span>

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

<span data-ttu-id="33527-401">Si el valor de la `x` argumento es <xref:System.Single.NaN?displayProperty=nameWithType>, el método devuelve <xref:System.Single.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-401">If the value of the `x` argument is <xref:System.Single.NaN?displayProperty=nameWithType>, the method returns <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="33527-402">Si `x` es <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, el método devuelve <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="33527-402">If `x` is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="33527-403">Debido a la pérdida de precisión que puede obtenerse al que representa los valores decimales como números de punto flotante o efectuar operaciones aritméticas en valores de punto flotante, en algunos casos el <see cref="M:System.MathF.Round(System.Single)" /> no puede aparecer el método redondear los valores de punto medio en el entero par más próximo.</span><span class="sxs-lookup"><span data-stu-id="33527-403">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.MathF.Round(System.Single)" /> method may not appear to round midpoint values to the nearest even integer.</span></span></para></block>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits);" />
      <MemberSignature Language="F#" Value="static member Round : single * int -&gt; single" Usage="System.MathF.Round (x, digits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-404">Número de punto flotante de precisión sencilla que se va a redondear.</span><span class="sxs-lookup"><span data-stu-id="33527-404">A single-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="33527-405">Número de dígitos fraccionarios del valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="33527-405">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="33527-406">Redondea un valor de punto flotante de precisión sencilla a un número especificado de dígitos fraccionarios y los valores de punto medio al número par más cercano.</span><span class="sxs-lookup"><span data-stu-id="33527-406">Rounds a single-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number.</span></span></summary>
        <returns><span data-ttu-id="33527-407">Número más cercano a <paramref name="x" /> que contiene varios dígitos fraccionarios iguales a <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="33527-407">The number nearest to <paramref name="x" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="33527-408">El valor de la `digits` argumento puede oscilar entre 0 y 6.</span><span class="sxs-lookup"><span data-stu-id="33527-408">The value of the `digits` argument can range from 0 to 6.</span></span> <span data-ttu-id="33527-409">Tenga en cuenta que 6 es el número máximo de dígitos enteros y fraccionarios admitidos por el <xref:System.Single> tipo.</span><span class="sxs-lookup"><span data-stu-id="33527-409">Note that 6 is the maximum number of integral and fractional digits supported by the <xref:System.Single> type.</span></span>

<span data-ttu-id="33527-410">Este método utiliza la convención de redondeo predeterminado <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-410">This method uses the default rounding convention of <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>.</span></span> 

[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

<span data-ttu-id="33527-411">Si el valor de la `x` argumento es <xref:System.Single.NaN?displayProperty=nameWithType>, el método devuelve <xref:System.Single.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-411">If the value of the `x` argument is <xref:System.Single.NaN?displayProperty=nameWithType>, the method returns <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="33527-412">Si `x` es <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, el método devuelve <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="33527-412">If `x` is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="33527-413"><paramref name="digits" /> es menor que 0 o mayor que 6.</span><span class="sxs-lookup"><span data-stu-id="33527-413"><paramref name="digits" /> is less than 0 or greater than 6.</span></span></exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-414">Número de punto flotante de precisión sencilla que se va a redondear.</span><span class="sxs-lookup"><span data-stu-id="33527-414">A single-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="33527-415">Especificación sobre el redondeo de <paramref name="x" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</span><span class="sxs-lookup"><span data-stu-id="33527-415">Specification for how to round <paramref name="x" /> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="33527-416">Redondea un valor de punto flotante de precisión sencilla al entero más cercano y usa la convención de redondeo especificada para los valores de punto medio.</span><span class="sxs-lookup"><span data-stu-id="33527-416">Rounds a single-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values.</span></span></summary>
        <returns><span data-ttu-id="33527-417"><paramref name="x" /> entero más cercano.</span><span class="sxs-lookup"><span data-stu-id="33527-417">The integer nearest <paramref name="x" />.</span></span> <span data-ttu-id="33527-418">Si <paramref name="x" /> se encuentra a la mitad del intervalo entre dos enteros, uno par y el otro impar, <paramref name="mode" /> determina los dos números que se devuelven.</span><span class="sxs-lookup"><span data-stu-id="33527-418">If <paramref name="x" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span> <span data-ttu-id="33527-419">Tenga en cuenta que este método devuelve un valor <see cref="T:System.Single" /> en lugar de un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="33527-419">Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

<span data-ttu-id="33527-420">Si el valor de la `x` argumento es <xref:System.Single.NaN?displayProperty=nameWithType>, el método devuelve <xref:System.Single.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-420">If the value of the `x` argument is <xref:System.Single.NaN?displayProperty=nameWithType>, the method returns <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="33527-421">Si `x` es <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, el método devuelve <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="33527-421">If `x` is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="33527-422"><paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="33527-422"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static float Round (float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Round(float32 x, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (x As Single, digits As Integer, mode As MidpointRounding) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Round(float x, int digits, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : single * int * MidpointRounding -&gt; single" Usage="System.MathF.Round (x, digits, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-423">Número de punto flotante de precisión sencilla que se va a redondear.</span><span class="sxs-lookup"><span data-stu-id="33527-423">A single-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="33527-424">Número de dígitos fraccionarios del valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="33527-424">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="33527-425">Especificación sobre el redondeo de <paramref name="x" /> si se encuentra a la mitad del intervalo comprendido entre otros dos números.</span><span class="sxs-lookup"><span data-stu-id="33527-425">Specification for how to round <paramref name="x" /> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="33527-426">Redondea un valor de punto flotante de precisión sencilla a un número especificado de dígitos fraccionarios y usa la convención de redondeo especificada para los valores de punto medio.</span><span class="sxs-lookup"><span data-stu-id="33527-426">Rounds a single-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values.</span></span></summary>
        <returns><span data-ttu-id="33527-427">Número más cercano a <paramref name="x" /> que tiene varios dígitos fraccionarios iguales a <paramref name="digits" />.</span><span class="sxs-lookup"><span data-stu-id="33527-427">The number nearest to <paramref name="x" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="33527-428">Si <paramref name="x" /> tiene menos dígitos fraccionarios que <paramref name="digits" />, <paramref name="x" /> se devuelve sin modificar.</span><span class="sxs-lookup"><span data-stu-id="33527-428">If <paramref name="x" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="x" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="33527-429">El valor de la `digits` argumento puede oscilar entre 0 y 6.</span><span class="sxs-lookup"><span data-stu-id="33527-429">The value of the `digits` argument can range from 0 to 6.</span></span> <span data-ttu-id="33527-430">Tenga en cuenta que 6 es el número máximo de dígitos enteros y fraccionarios admitidos por el <xref:System.Single> tipo.</span><span class="sxs-lookup"><span data-stu-id="33527-430">Note that 6 is the maximum number of integral and fractional digits supported by the <xref:System.Single> type.</span></span>


[!INCLUDE[midpoint-rounding](~/includes/floating-point-equality.md)]

<span data-ttu-id="33527-431">Si el valor de la `x` argumento es <xref:System.Single.NaN?displayProperty=nameWithType>, el método devuelve <xref:System.Single.NaN?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="33527-431">If the value of the `x` argument is <xref:System.Single.NaN?displayProperty=nameWithType>, the method returns <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="33527-432">Si `x` es <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, el método devuelve <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> o <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="33527-432">If `x` is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="33527-433"><paramref name="digits" /> es menor que 0 o mayor que 6.</span><span class="sxs-lookup"><span data-stu-id="33527-433"><paramref name="digits" /> is less than 0 or greater than 6.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="33527-434"><paramref name="mode" /> no es un valor válido de <see cref="T:System.MidpointRounding" />.</span><span class="sxs-lookup"><span data-stu-id="33527-434"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleB">
      <MemberSignature Language="C#" Value="public static float ScaleB (float x, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ScaleB(float32 x, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.ScaleB(System.Single,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ScaleB (x As Single, n As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ScaleB(float x, int n);" />
      <MemberSignature Language="F#" Value="static member ScaleB : single * int -&gt; single" Usage="System.MathF.ScaleB (x, n)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="n" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-435">Número de punto flotante de precisión sencilla que especifica el valor base.</span><span class="sxs-lookup"><span data-stu-id="33527-435">A single-precision floating-point number that specifies the base value.</span></span></param>
        <param name="n"><span data-ttu-id="33527-436">Número de punto flotante de precisión sencilla que especifica la potencia.</span><span class="sxs-lookup"><span data-stu-id="33527-436">A single-precision floating-point number that specifies the power.</span></span></param>
        <summary><span data-ttu-id="33527-437">Devuelve x \* 2^n calculado de forma eficaz.</span><span class="sxs-lookup"><span data-stu-id="33527-437">Returns x \* 2^n computed efficiently.</span></span></summary>
        <returns><span data-ttu-id="33527-438">x \* 2^n calculado de forma eficaz.</span><span class="sxs-lookup"><span data-stu-id="33527-438">x \* 2^n computed efficiently.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (x As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float x);" />
      <MemberSignature Language="F#" Value="static member Sign : single -&gt; int" Usage="System.MathF.Sign x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-439">Número con signo.</span><span class="sxs-lookup"><span data-stu-id="33527-439">A signed number.</span></span></param>
        <summary><span data-ttu-id="33527-440">Devuelve un entero que indica el signo de un número de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="33527-440">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="33527-441">Número que indica el signo de <paramref name="x" />, como puede verse en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-441">A number that indicates the sign of <paramref name="x" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="33527-442">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-442">Return value</span></span> 
 </term><description> <span data-ttu-id="33527-443">Significado</span><span class="sxs-lookup"><span data-stu-id="33527-443">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-444">-1</span><span class="sxs-lookup"><span data-stu-id="33527-444">-1</span></span> 
 </term><description><span data-ttu-id="33527-445"><paramref name="x" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="33527-445"><paramref name="x" /> is less than zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-446">0</span><span class="sxs-lookup"><span data-stu-id="33527-446">0</span></span> 
 </term><description><span data-ttu-id="33527-447"><paramref name="x" /> es igual a cero.</span><span class="sxs-lookup"><span data-stu-id="33527-447"><paramref name="x" /> is equal to zero.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-448">1</span><span class="sxs-lookup"><span data-stu-id="33527-448">1</span></span> 
 </term><description><span data-ttu-id="33527-449"><paramref name="x" /> es mayor que cero.</span><span class="sxs-lookup"><span data-stu-id="33527-449"><paramref name="x" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks></remarks>
        <exception cref="T:System.ArithmeticException"><span data-ttu-id="33527-450"><paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-450"><paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static float Sin (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sin(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sin(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sin(float x);" />
      <MemberSignature Language="F#" Value="static member Sin : single -&gt; single" Usage="System.MathF.Sin x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-451">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-451">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-452">Devuelve el seno del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-452">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-453">Seno de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-453">The sine of <paramref name="x" />.</span></span> <span data-ttu-id="33527-454">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-454">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-455">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-455">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-456">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-456">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static float Sinh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sinh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sinh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sinh(float x);" />
      <MemberSignature Language="F#" Value="static member Sinh : single -&gt; single" Usage="System.MathF.Sinh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-457">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-457">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-458">Devuelve el seno hiperbólico del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-458">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-459">Seno hiperbólico de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-459">The hyperbolic sine of <paramref name="x" />.</span></span> <span data-ttu-id="33527-460">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NaN" />, este método devuelve <see cref="T:System.Single" /> igual a <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-460">If <paramref name="x" /> is equal to <see cref="F:System.Single.NegativeInfinity" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NaN" />, this method returns a <see cref="T:System.Single" /> equal to <paramref name="x" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-461">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-461">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-462">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-462">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static float Sqrt (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sqrt(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Sqrt(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Sqrt(float x);" />
      <MemberSignature Language="F#" Value="static member Sqrt : single -&gt; single" Usage="System.MathF.Sqrt x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-463">Número cuya raíz cuadrada se va a calcular.</span><span class="sxs-lookup"><span data-stu-id="33527-463">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="33527-464">Devuelve la raíz cuadrada de un número especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-464">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="33527-465">Uno de los valores de la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="33527-465">One of the values in the following table.</span></span>  
  
 <list type="table"><listheader><term><span data-ttu-id="33527-466">Parámetro <paramref name="x" /></span><span class="sxs-lookup"><span data-stu-id="33527-466"><paramref name="x" /> parameter</span></span> 
 </term><description> <span data-ttu-id="33527-467">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-467">Return value</span></span> 
 </description></listheader><item><term> <span data-ttu-id="33527-468">Cero o positivo</span><span class="sxs-lookup"><span data-stu-id="33527-468">Zero or positive</span></span> 
 </term><description> <span data-ttu-id="33527-469">Raíz cuadrada positiva de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-469">The positive square root of <paramref name="x" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="33527-470">Negativo</span><span class="sxs-lookup"><span data-stu-id="33527-470">Negative</span></span> 
 </term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-471">Es igual a <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-471">Equals <see cref="F:System.Single.NaN" /></span></span></term><description><see cref="F:System.Single.NaN" /></description></item><item><term> <span data-ttu-id="33527-472">Es igual a <see cref="F:System.Single.PositiveInfinity" />.</span><span class="sxs-lookup"><span data-stu-id="33527-472">Equals <see cref="F:System.Single.PositiveInfinity" /></span></span></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks></remarks>
        <altmember cref="M:System.MathF.Pow(System.Single,System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static float Tan (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tan(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tan(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tan(float x);" />
      <MemberSignature Language="F#" Value="static member Tan : single -&gt; single" Usage="System.MathF.Tan x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-473">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-473">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-474">Devuelve la tangente del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-474">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-475">Tangente de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-475">The tangent of <paramref name="x" />.</span></span> <span data-ttu-id="33527-476">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />, este método devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-476">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, this method returns <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-477">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-477">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-478">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-478">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static float Tanh (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Tanh(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Tanh(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Tanh(float x);" />
      <MemberSignature Language="F#" Value="static member Tanh : single -&gt; single" Usage="System.MathF.Tanh x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-479">Ángulo, medido en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-479">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="33527-480">Devuelve la tangente hiperbólica del ángulo especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-480">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="33527-481">Tangente hiperbólica de <paramref name="x" />.</span><span class="sxs-lookup"><span data-stu-id="33527-481">The hyperbolic tangent of <paramref name="x" />.</span></span> <span data-ttu-id="33527-482">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NegativeInfinity" />, este método devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="33527-482">If <paramref name="x" /> is equal to <see cref="F:System.Single.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="33527-483">Si el valor es igual a <see cref="F:System.Single.PositiveInfinity" />, este método devuelve 1.</span><span class="sxs-lookup"><span data-stu-id="33527-483">If value is equal to <see cref="F:System.Single.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="33527-484">Si <paramref name="x" /> es igual a <see cref="F:System.Single.NaN" />, este método devuelve <see cref="F:System.Single.NaN" />.</span><span class="sxs-lookup"><span data-stu-id="33527-484">If <paramref name="x" /> is equal to <see cref="F:System.Single.NaN" />, this method returns <see cref="F:System.Single.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33527-485">El ángulo, `x`, deben estar en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-485">The angle, `x`, must be in radians.</span></span> <span data-ttu-id="33527-486">Multiplicada por <xref:System.MathF.PI?displayProperty=nameWithType>/180 para convertir grados en radianes.</span><span class="sxs-lookup"><span data-stu-id="33527-486">Multiply by <xref:System.MathF.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static float Truncate (float x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Truncate(float32 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.MathF.Truncate(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (x As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Truncate(float x);" />
      <MemberSignature Language="F#" Value="static member Truncate : single -&gt; single" Usage="System.MathF.Truncate x" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="33527-487">Número que se va a truncar.</span><span class="sxs-lookup"><span data-stu-id="33527-487">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="33527-488">Calcula la parte entera de un número de punto flotante de precisión sencilla especificado.</span><span class="sxs-lookup"><span data-stu-id="33527-488">Calculates the integral part of a specified single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="33527-489">La parte entera de <paramref name="x" />, es decir, el número que permanece una vez descartado cualquier dígito fraccionario o uno de los valores enumerados en la siguiente tabla.</span><span class="sxs-lookup"><span data-stu-id="33527-489">The integral part of <paramref name="x" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <list type="table"><listheader><term><paramref name="x" /></term><description> <span data-ttu-id="33527-490">Valor devuelto</span><span class="sxs-lookup"><span data-stu-id="33527-490">Return value</span></span> 
 </description></listheader><item><term><see cref="F:System.Single.NaN" /></term><description><see cref="F:System.Single.NaN" /></description></item><item><term><see cref="F:System.Single.NegativeInfinity" /></term><description><see cref="F:System.Single.NegativeInfinity" /></description></item><item><term><see cref="F:System.Single.PositiveInfinity" /></term><description><see cref="F:System.Single.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="33527-491"><xref:System.MathF.Truncate%2A> redondea `x` al entero más próximo, hacia cero.</span><span class="sxs-lookup"><span data-stu-id="33527-491"><xref:System.MathF.Truncate%2A> rounds `x` to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.MathF.Round" />
        <altmember cref="M:System.MathF.Ceiling(System.Single)" />
        <altmember cref="M:System.MathF.Floor(System.Single)" />
      </Docs>
    </Member>
  </Members>
</Type>
