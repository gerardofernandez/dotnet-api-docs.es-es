<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99bb022affed551d601d1d09475d11521f717cf7" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52732620" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bd094-101">Admite la iteración en un objeto <see cref="T:System.String" /> y la lectura de sus caracteres individuales.</span><span class="sxs-lookup"><span data-stu-id="bd094-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="bd094-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="bd094-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-103">Un <xref:System.CharEnumerator> proporciona acceso de solo lectura a los caracteres de una referencia <xref:System.String> objeto.</span><span class="sxs-lookup"><span data-stu-id="bd094-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="bd094-104">Por ejemplo, el `foreach` instrucción de los lenguajes de programación de Microsoft Visual Basic y C#, que recorre en iteración los elementos de una colección, recupera un <xref:System.CharEnumerator> desde un <xref:System.String> objeto para recorrer en iteración los caracteres en el que objeto.</span><span class="sxs-lookup"><span data-stu-id="bd094-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="bd094-105">El `CharEnumerator` clase enumera individuales de 16 bits <xref:System.Char> instancias.</span><span class="sxs-lookup"><span data-stu-id="bd094-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="bd094-106">No tiene en cuenta graphemes (es decir, un carácter seguido de uno o varios caracteres combiding) o pares (es decir, los caracteres fuera del plano multilingüe básico de Unicode) suplentes como caracteres individuales.</span><span class="sxs-lookup"><span data-stu-id="bd094-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="bd094-107">Para un enumerador que controla estos tipos de caracteres como una sola unidad, use el <xref:System.Globalization.StringInfo> clase.</span><span class="sxs-lookup"><span data-stu-id="bd094-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="bd094-108">No hay ningún constructor público para <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd094-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="bd094-109">En su lugar, llame a un <xref:System.String> del objeto <xref:System.String.GetEnumerator%2A> método para obtener un <xref:System.CharEnumerator> que se inicializa para hacer referencia a la cadena.</span><span class="sxs-lookup"><span data-stu-id="bd094-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="bd094-110">Un <xref:System.CharEnumerator> mantiene un índice interno a los caracteres de la cadena de la <xref:System.CharEnumerator> referencias.</span><span class="sxs-lookup"><span data-stu-id="bd094-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="bd094-111">El estado del índice es válidos y no cuando hace referencia a una posición de carácter lógicamente delante del primer carácter o después del último carácter en la cadena cuando hace referencia a un carácter en la cadena.</span><span class="sxs-lookup"><span data-stu-id="bd094-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="bd094-112">El índice se inicializa en una posición situada lógicamente delante del primer carácter y se establece en una posición después del último carácter cuando se completa la iteración.</span><span class="sxs-lookup"><span data-stu-id="bd094-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="bd094-113">Se produce una excepción si intenta obtener acceso a un carácter mientras el índice no es válido.</span><span class="sxs-lookup"><span data-stu-id="bd094-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="bd094-114">El <xref:System.CharEnumerator.MoveNext%2A> método incrementa el índice en uno, por lo que se tiene acceso a su vez a los caracteres inicial y posteriores.</span><span class="sxs-lookup"><span data-stu-id="bd094-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="bd094-115">El <xref:System.CharEnumerator.Reset%2A> método establece el índice en una posición situada lógicamente delante del primer carácter.</span><span class="sxs-lookup"><span data-stu-id="bd094-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="bd094-116">El <xref:System.CharEnumerator.Current%2A> propiedad recupera el carácter al que hace referencia actualmente el índice.</span><span class="sxs-lookup"><span data-stu-id="bd094-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="bd094-117">El <xref:System.CharEnumerator.Clone%2A> método crea una copia de la <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd094-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd094-118">Varias instancias independientes de <xref:System.CharEnumerator> a través de uno o varios subprocesos pueden tener acceso a una única instancia de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="bd094-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="bd094-119">Esta clase se implementa para admitir la <xref:System.Collections.IEnumerator> interfaz.</span><span class="sxs-lookup"><span data-stu-id="bd094-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="bd094-120">Para obtener más información acerca del uso de un enumerador, vea el <xref:System.Collections.IEnumerator> tema.</span><span class="sxs-lookup"><span data-stu-id="bd094-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd094-121">En el ejemplo siguiente se usa el <xref:System.CharEnumerator> clase para enumerar los caracteres individuales de una cadena.</span><span class="sxs-lookup"><span data-stu-id="bd094-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="bd094-122">Crea una instancia de un <xref:System.CharEnumerator> objeto mediante una llamada a la <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, se desplaza de un carácter a la siguiente mediante una llamada a la <xref:System.CharEnumerator.MoveNext%2A> método y muestra el carácter actual al recuperar el valor de la <xref:System.CharEnumerator.Current%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="bd094-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="bd094-123">Sin embargo, tenga en cuenta que la misma operación puede realizarse un poco más intuitiva con `foreach` (en C#) o `For Each` (en Visual Basic), como en el ejemplo siguiente se muestra.</span><span class="sxs-lookup"><span data-stu-id="bd094-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd094-124">Crea una copia del objeto <see cref="T:System.CharEnumerator" /> actual.</span><span class="sxs-lookup"><span data-stu-id="bd094-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="bd094-125"><see cref="T:System.Object" /> que es una copia del objeto <see cref="T:System.CharEnumerator" /> actual.</span><span class="sxs-lookup"><span data-stu-id="bd094-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-126">El valor devuelto es una copia de esta instancia de <xref:System.CharEnumerator> y su estado actual.</span><span class="sxs-lookup"><span data-stu-id="bd094-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="bd094-127">Esto es útil para guardar su estado al recorrer un <xref:System.String> objeto.</span><span class="sxs-lookup"><span data-stu-id="bd094-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="bd094-128">Por ejemplo, suponga que la aplicación utiliza una instancia original de <xref:System.CharEnumerator> para iterar por cada carácter de un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="bd094-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="bd094-129">Cuando se detecta un carácter único, la aplicación detiene el procesamiento y se invoca el <xref:System.CharEnumerator.Clone%2A> método.</span><span class="sxs-lookup"><span data-stu-id="bd094-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="bd094-130">De hecho, esto ahorra la <xref:System.CharEnumerator> índice del objeto en el <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="bd094-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="bd094-131">La aplicación utiliza el duplicado para desplazarse a otra parte de la `String` para realizar un procesamiento auxiliar.</span><span class="sxs-lookup"><span data-stu-id="bd094-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="bd094-132">El inconveniente de esta navegación es que el clon pierde la pista de la posición donde se detuvo el procesamiento.</span><span class="sxs-lookup"><span data-stu-id="bd094-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="bd094-133">Sin embargo, cuando finalice el procesamiento auxiliar, la aplicación descarta el clon y usa el original <xref:System.CharEnumerator> instancia para reanudar el trabajo en el <xref:System.String> donde se detuvo el procesamiento original.</span><span class="sxs-lookup"><span data-stu-id="bd094-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd094-134">Este método se implementa para admitir la <xref:System.ICloneable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="bd094-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd094-135">Obtiene el carácter al que se hace referencia actualmente en la cadena enumerada por este objeto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="bd094-136">Carácter Unicode al que hace referencia actualmente este objeto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-137">El <xref:System.CharEnumerator> clase mantiene un índice interno a la cadena enumerada y el <xref:System.CharEnumerator.Current%2A> propiedad devuelve el carácter que se hace referencia actualmente por el índice.</span><span class="sxs-lookup"><span data-stu-id="bd094-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="bd094-138">Esta propiedad se debe invocar solo cuando el índice es válido; en caso contrario, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="bd094-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="bd094-139">El índice siempre es válido para una cadena vacía ("").</span><span class="sxs-lookup"><span data-stu-id="bd094-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="bd094-140">El índice también es válido después de la <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> o <xref:System.CharEnumerator.Reset%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="bd094-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="bd094-141">Cuando se llama a alguno de estos métodos, invocar el <xref:System.CharEnumerator.MoveNext%2A> método para ajustar el índice hasta el primer carácter de la cadena enumerada.</span><span class="sxs-lookup"><span data-stu-id="bd094-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="bd094-142">El índice es válido siempre que el <xref:System.CharEnumerator.MoveNext%2A> devuelve del método `true`.</span><span class="sxs-lookup"><span data-stu-id="bd094-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="bd094-143"><xref:System.CharEnumerator.Current%2A> no se mueve el índice y las llamadas consecutivas a <xref:System.CharEnumerator.Current%2A> devuelven el mismo carácter hasta que <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> se llama.</span><span class="sxs-lookup"><span data-stu-id="bd094-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd094-144">En el ejemplo siguiente se usa el <xref:System.CharEnumerator> clase para enumerar los caracteres individuales de una cadena.</span><span class="sxs-lookup"><span data-stu-id="bd094-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="bd094-145">Crea una instancia de un <xref:System.CharEnumerator> objeto mediante una llamada a la <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, se desplaza de un carácter a la siguiente mediante una llamada a la <xref:System.CharEnumerator.MoveNext%2A> método y muestra el carácter actual al recuperar el valor de la <xref:System.CharEnumerator.Current%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="bd094-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="bd094-146">Sin embargo, tenga en cuenta que la misma operación puede realizarse un poco más intuitiva con `foreach` (en C#) o `For Each` (en Visual Basic), como en el ejemplo siguiente se muestra.</span><span class="sxs-lookup"><span data-stu-id="bd094-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd094-147">El índice no es válido; es decir, está delante del primer carácter o detrás del último carácter de la cadena enumerada.</span><span class="sxs-lookup"><span data-stu-id="bd094-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd094-148">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-149">Llame a <xref:System.CharEnumerator.Dispose%2A> cuando haya terminado de usar <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd094-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="bd094-150">El método <xref:System.CharEnumerator.Dispose%2A> deja el <xref:System.CharEnumerator> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="bd094-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="bd094-151">Después de llamar a <xref:System.CharEnumerator.Dispose%2A>, debe liberar todas las referencias a la <xref:System.CharEnumerator> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.CharEnumerator> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="bd094-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="bd094-152">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="bd094-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bd094-153">Realice siempre una llamada a <xref:System.CharEnumerator.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd094-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="bd094-154">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.CharEnumerator> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="bd094-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd094-155">Incrementa el índice interno del objeto <see cref="T:System.CharEnumerator" /> actual hasta el siguiente carácter de la cadena enumerada.</span><span class="sxs-lookup"><span data-stu-id="bd094-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns><span data-ttu-id="bd094-156">Es <see langword="true" /> si el índice se incrementa correctamente y dentro de la cadena enumerada; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-156"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-157">El <xref:System.CharEnumerator> clase mantiene un índice interno a la cadena enumerada y el <xref:System.CharEnumerator.MoveNext%2A> método incrementa el índice en uno.</span><span class="sxs-lookup"><span data-stu-id="bd094-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="bd094-158">Llame a <xref:System.CharEnumerator.MoveNext%2A> después de llamar a <xref:System.String.GetEnumerator%2A> o <xref:System.CharEnumerator.Reset%2A> se incrementa la posición del carácter actual hasta el primer carácter de la cadena enumerada.</span><span class="sxs-lookup"><span data-stu-id="bd094-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="bd094-159">Compruebe que el valor devuelto es `true` para determinar que la posición del carácter actual es válida.</span><span class="sxs-lookup"><span data-stu-id="bd094-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="bd094-160">Si el índice ya está más allá del último carácter de la cadena enumerada, no se cambia el índice y `false` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="bd094-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="bd094-161">Tenga en cuenta que si la cadena enumerada está vacía (""), el estado de la <xref:System.CharEnumerator> siempre es válido.</span><span class="sxs-lookup"><span data-stu-id="bd094-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="bd094-162">Esto es porque el índice interno para el <xref:System.CharEnumerator> está inicialmente delante del primer carácter de la cadena enumerada y, por tanto, no es válido.</span><span class="sxs-lookup"><span data-stu-id="bd094-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="bd094-163"><xref:System.CharEnumerator.MoveNext%2A> lógicamente, Establece el índice después del último carácter (inexistente) de la cadena enumerada que tampoco es válido.</span><span class="sxs-lookup"><span data-stu-id="bd094-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd094-164">En el ejemplo siguiente se usa el <xref:System.CharEnumerator> clase para enumerar los caracteres individuales de una cadena.</span><span class="sxs-lookup"><span data-stu-id="bd094-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="bd094-165">Crea una instancia de un <xref:System.CharEnumerator> objeto mediante una llamada a la <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> método, se desplaza de un carácter a la siguiente mediante una llamada a la <xref:System.CharEnumerator.MoveNext%2A> método y muestra el carácter actual al recuperar el valor de la <xref:System.CharEnumerator.Current%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="bd094-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="bd094-166">Sin embargo, tenga en cuenta que la misma operación puede realizarse un poco más intuitiva con `foreach` (en C#) o `For Each` (en Visual Basic), como en el ejemplo siguiente se muestra.</span><span class="sxs-lookup"><span data-stu-id="bd094-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd094-167">Inicializa el índice en una posición situada lógicamente delante del primer carácter de la cadena enumerada.</span><span class="sxs-lookup"><span data-stu-id="bd094-167">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-168">El <xref:System.CharEnumerator> clase mantiene un índice interno a la cadena enumerada y el <xref:System.CharEnumerator.Reset%2A> método establece el índice en el estado no válido.</span><span class="sxs-lookup"><span data-stu-id="bd094-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd094-169">Obtiene el carácter al que se hace referencia actualmente en la cadena enumerada por este objeto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="bd094-170">Para obtener una descripción de este miembro, vea <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="bd094-171">Carácter Unicode al que se ha aplicado la conversión boxing y al que hace referencia actualmente este objeto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd094-172">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="bd094-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="bd094-173">Solo se puede utilizar cuando la instancia de <xref:System.CharEnumerator> se convierte en una interfaz <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="bd094-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bd094-174">La enumeración no se ha iniciado.</span><span class="sxs-lookup"><span data-stu-id="bd094-174">Enumeration has not started.</span></span>  
  
<span data-ttu-id="bd094-175">O bien</span><span class="sxs-lookup"><span data-stu-id="bd094-175">-or-</span></span> 
<span data-ttu-id="bd094-176">La enumeración ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="bd094-176">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bd094-177">Libera todos los recursos que usa la clase <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="bd094-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="bd094-178">Llamar a IDisposable.Dispose cuando haya terminado con el <xref:System.CharEnumerator> clase.</span><span class="sxs-lookup"><span data-stu-id="bd094-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="bd094-179">El método deja la <xref:System.CharEnumerator> clase en un estado inutilizable.</span><span class="sxs-lookup"><span data-stu-id="bd094-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="bd094-180">Después de llamar a él, debe liberar todas las referencias a la <xref:System.CharEnumerator> clase por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.CharEnumerator> ocupada por clase.</span><span class="sxs-lookup"><span data-stu-id="bd094-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="bd094-181">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="bd094-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="bd094-182">Llame siempre a IDisposable.Dispose antes de liberar la última referencia a la <xref:System.CharEnumerator> clase.</span><span class="sxs-lookup"><span data-stu-id="bd094-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="bd094-183">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.CharEnumerator> del objeto <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="bd094-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>