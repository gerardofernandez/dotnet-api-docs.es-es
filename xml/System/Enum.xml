<Type Name="Enum" FullName="System.Enum">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4922a1d1b0f0515d3bff5e3792f8a607712d05b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55328226" /></Metadata><TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="F#" Value="type Enum = class&#xA;    inherit ValueType&#xA;    interface IComparable&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c1f2b-101">Proporciona la clase base para las enumeraciones.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-102">Una enumeración es un conjunto de constantes con nombre cuyo tipo subyacente es cualquier tipo entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="c1f2b-103">Si no hay ningún tipo subyacente se declara explícitamente, <xref:System.Int32> se utiliza.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="c1f2b-104"><xref:System.Enum> es la clase base para todas las enumeraciones de .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="c1f2b-105">Tipos de enumeración se definen mediante la `enum` palabra clave en C# y el `Enum`... `End Enum` construir en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="c1f2b-106"><xref:System.Enum> Proporciona métodos para comparar instancias de esta clase, convertir el valor de una instancia en su representación de cadena, convertir la representación de cadena de un número a una instancia de esta clase y crear una instancia de una enumeración y valor especificados.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="c1f2b-107">También puede tratar una enumeración como un campo de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="c1f2b-108">Para obtener más información, consulte el [miembros no exclusiva y el atributo Flags](#Flags) sección y el <xref:System.FlagsAttribute> tema.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="c1f2b-109">En este tema:</span><span class="sxs-lookup"><span data-stu-id="c1f2b-109">In this topic:</span></span>  
  
 <span data-ttu-id="c1f2b-110">[Creación de un tipo de enumeración](#Creating) </span><span class="sxs-lookup"><span data-stu-id="c1f2b-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="c1f2b-111">[Crear una instancia de un tipo de enumeración](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="c1f2b-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="c1f2b-112">[Prácticas recomendadas de enumeración](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="c1f2b-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="c1f2b-113">[Realizar operaciones con enumeraciones](#Operations) </span><span class="sxs-lookup"><span data-stu-id="c1f2b-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="c1f2b-114">Realizar conversión</span><span class="sxs-lookup"><span data-stu-id="c1f2b-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="c1f2b-115">Análisis de los valores de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="c1f2b-116">Dar formato a valores de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="c1f2b-117">Recorrer en iteración los miembros de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="c1f2b-118">Los miembros no exclusiva y el atributo Flags</span><span class="sxs-lookup"><span data-stu-id="c1f2b-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="c1f2b-119">Adición de métodos de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-119">Adding enumeration methods</span></span>](#Methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="c1f2b-120">Creación de un tipo de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="c1f2b-121">Normalmente, los lenguajes de programación proporcionan sintaxis para declarar una enumeración que consta de un conjunto de constantes con nombre y sus valores.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="c1f2b-122">El ejemplo siguiente muestra la sintaxis que usa C# y Visual Basic para definir una enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="c1f2b-123">Crea una enumeración denominada `ArrivalStatus` que tiene tres miembros: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, y `ArrivalStatus.Late`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="c1f2b-124">Tenga en cuenta que en ambos casos, la enumeración no heredar explícitamente de <xref:System.Enum>; la relación de herencia se trata implícitamente por el compilador.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="c1f2b-125">Nunca se debe crear un tipo de enumeración cuyo tipo subyacente es que no sean enteros o <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="c1f2b-126">Aunque puede crear un tipo de enumeración de este tipo mediante la reflexión, las llamadas de método que usan el tipo resultante no son confiables y también pueden producir excepciones adicionales.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="c1f2b-127">Crear una instancia de un tipo de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="c1f2b-128">Puede crear instancias de un tipo de enumeración como crear una instancia de cualquier otro tipo de valor: declarando una variable y asignarle una de las constantes de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="c1f2b-129">El ejemplo siguiente crea un `ArrivalStatus` cuyo valor es `ArrivalStatus.OnTime`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="c1f2b-130">También puede crear una instancia de un valor de enumeración de las maneras siguientes:</span><span class="sxs-lookup"><span data-stu-id="c1f2b-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="c1f2b-131">Mediante el uso de las características de un lenguaje de programación determinado para convertir (como en C#) o convertir un valor entero (como en Visual Basic) a un valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="c1f2b-132">En el ejemplo siguiente se crea un `ArrivalStatus` objeto cuyo valor es `ArrivalStatus.Early` de esta manera.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="c1f2b-133">Mediante una llamada a su constructor predeterminado implícito.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="c1f2b-134">Como se muestra en el ejemplo siguiente, en este caso el valor subyacente de la instancia de enumeración es 0.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="c1f2b-135">Sin embargo, esto no es necesariamente el valor de una constante válida en la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="c1f2b-136">Mediante una llamada a la <xref:System.Enum.Parse%2A> o <xref:System.Enum.TryParse%2A> método para analizar una cadena que contiene el nombre de una constante de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="c1f2b-137">Para obtener más información, consulte el [analizar valores de enumeración](#parsing) sección.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="c1f2b-138">Mediante una llamada a la <xref:System.Enum.ToObject%2A> método para convertir un valor entero en un tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="c1f2b-139">Para obtener más información, consulte el [realizar conversiones](#conversions) sección.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="c1f2b-140">Prácticas recomendadas de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-140">Enumeration best practices</span></span>  
 <span data-ttu-id="c1f2b-141">Se recomienda usar los siguientes procedimientos recomendados al definir los tipos de enumeración:</span><span class="sxs-lookup"><span data-stu-id="c1f2b-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="c1f2b-142">Si no ha definido un miembro de enumeración cuyo valor es 0, considere la posibilidad de crear un `None` constante enumerada.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="c1f2b-143">De forma predeterminada, la memoria utilizada para la enumeración se inicializa en cero por common language runtime.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="c1f2b-144">Por lo tanto, si no se define una constante cuyo valor es cero, la enumeración contendrá un valor no válido cuando se crea.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="c1f2b-145">Si hay un caso predeterminado obvio que la aplicación tiene que representar, considere el uso de enumerado constante cuyo valor es cero para representarlo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="c1f2b-146">Si no hay ningún caso predeterminado, considere el uso de una constante enumerada cuyo valor es cero para especificar el caso de que no está representado por cualquiera de las otras constantes enumeradas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="c1f2b-147">No especifique constantes enumeradas que se reservan para uso futuro.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="c1f2b-148">Al definir un método o propiedad que toma una constante enumerada como un valor, considere la posibilidad de validar el valor.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="c1f2b-149">El motivo es que puede convertir un valor numérico para el tipo de enumeración, incluso si ese valor numérico no está definido en la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="c1f2b-150">Recomendaciones adicionales para tipos de enumeración cuyos constantes son campos de bits se muestran en el [miembros no exclusiva y el atributo Flags](#Flags) sección.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="c1f2b-151">Realizar operaciones con enumeraciones</span><span class="sxs-lookup"><span data-stu-id="c1f2b-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="c1f2b-152">No se puede definir nuevos métodos al crear una enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="c1f2b-153">Sin embargo, un tipo de enumeración hereda un conjunto completo de estático y los métodos de instancia desde la <xref:System.Enum> clase.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="c1f2b-154">La mayoría de estos métodos, además de otros métodos que se usan con frecuencia cuando se trabaja con valores de enumeración de la encuesta en las secciones siguientes.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="c1f2b-155">Realizar conversión</span><span class="sxs-lookup"><span data-stu-id="c1f2b-155">Performing conversions</span></span>  
 <span data-ttu-id="c1f2b-156">Puede convertir entre un miembro de enumeración y su tipo subyacente mediante una conversión (en C#) o el operador de conversión (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="c1f2b-157">El ejemplo siguiente utiliza los operadores de conversión o realizar las conversiones de entero a un valor de enumeración y de un valor de enumeración en un entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="c1f2b-158">El <xref:System.Enum> clase también incluye un <xref:System.Enum.ToObject%2A> método que convierte un valor de cualquier tipo entero a un valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="c1f2b-159">En el ejemplo siguiente se usa el <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> método para convertir un <xref:System.Int32> a un `ArrivalStatus` valor.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="c1f2b-160">Tenga en cuenta que, dado el <xref:System.Enum.ToObject%2A> devuelve un valor de tipo <xref:System.Object>, el uso de un operador de conversión puede seguir siendo necesario convertir el objeto en el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="c1f2b-161">Al convertir a un entero en un valor de enumeración, es posible asignar un valor que no es realmente un miembro de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="c1f2b-162">Para evitar esto, puede pasar el entero para el <xref:System.Enum.IsDefined%2A> método antes de realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="c1f2b-163">En el ejemplo siguiente se usa este método para determinar si se pueden convertir los elementos de una matriz de valores enteros en `ArrivalStatus` valores.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="c1f2b-164">Aunque el <xref:System.Enum> clase proporciona las implementaciones de interfaz explícita de la <xref:System.IConvertible> interfaz para convertir un valor de enumeración en un tipo entero, debe usar los métodos de la <xref:System.Convert> clase, como <xref:System.Convert.ToInt32%2A>, a realizar estas conversiones.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="c1f2b-165">El ejemplo siguiente muestra cómo puede usar el <xref:System.Enum.GetUnderlyingType%2A> método junto con el <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> método para convertir un valor de enumeración en su tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="c1f2b-166">Tenga en cuenta que este ejemplo no requiere el tipo subyacente de la enumeración que se conoce en tiempo de compilación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="c1f2b-167">Análisis de los valores de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="c1f2b-168">El <xref:System.Enum.Parse%2A> y <xref:System.Enum.TryParse%2A> métodos permiten convertir la representación de cadena de un valor de enumeración en ese valor.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="c1f2b-169">La representación de cadena puede ser el nombre o el valor subyacente de una constante de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="c1f2b-170">Tenga en cuenta que los métodos de análisis convertirá correctamente las representaciones de cadena de números que no son miembros de una enumeración determinado si las cadenas se pueden convertir en un valor de tipo subyacente de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="c1f2b-171">Para evitar esto, el <xref:System.Enum.IsDefined%2A> se puede llamar el método para asegurarse de que el resultado del método de análisis es un valor de enumeración válido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="c1f2b-172">En el ejemplo se muestra este enfoque y muestra las llamadas a ambos el <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> y <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="c1f2b-173">Tenga en cuenta que el método de análisis no genérica devuelve un objeto que es posible que deba convierta (en C#) o (en Visual Basic) para el tipo de enumeración adecuados.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="c1f2b-174">Dar formato a valores de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="c1f2b-175">Puede convertir los valores de enumeración en sus representaciones de cadena mediante una llamada a estático <xref:System.Enum.Format%2A> método, así como las sobrecargas de la instancia <xref:System.Enum.ToString%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="c1f2b-176">Puede usar una cadena de formato para controlar la manera precisa en el que un valor de enumeración se representa como una cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="c1f2b-177">Para obtener más información, consulte [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c1f2b-178">El ejemplo siguiente usa cada una de las cadenas de formato de enumeración admitidos ("G" o "g", "D" o "d", "X" o "x" y "F" o "f") para convertir un miembro de la `ArrivalStatus` enumeración en sus representaciones de cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="c1f2b-179">Recorrer en iteración los miembros de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="c1f2b-180">El <xref:System.Enum> tipo no implementa la <xref:System.Collections.IEnumerable> o <xref:System.Collections.Generic.IEnumerable%601> interfaz, que le permitirá recorrer en iteración los miembros de una colección mediante el uso de un `foreach` (en C#) o `For Each` (en Visual Basic) construir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="c1f2b-181">Sin embargo, puede enumerar a los miembros de dos maneras.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="c1f2b-182">Puede llamar a la <xref:System.Enum.GetNames%2A> método para recuperar una matriz de cadenas que contiene los nombres de los miembros de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="c1f2b-183">A continuación, para cada elemento de la matriz de cadenas, puede llamar a la <xref:System.Enum.Parse%2A> método para convertir la cadena en su valor de enumeración equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="c1f2b-184">En el ejemplo siguiente se muestra este enfoque.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="c1f2b-185">Puede llamar a la <xref:System.Enum.GetValues%2A> método para recuperar una matriz que contiene la base de los valores de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="c1f2b-186">A continuación, para cada elemento de la matriz, puede llamar a la <xref:System.Enum.ToObject%2A> método para convertir el entero en su valor de enumeración equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="c1f2b-187">En el ejemplo siguiente se muestra este enfoque.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="c1f2b-188">Los miembros no exclusiva y el atributo Flags</span><span class="sxs-lookup"><span data-stu-id="c1f2b-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="c1f2b-189">Un uso común de una enumeración que se va a representar un conjunto de valores mutuamente exclusivos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="c1f2b-190">Por ejemplo, un `ArrivalStatus` instancia puede tener un valor de `Early`, `OnTime`, o `Late`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="c1f2b-191">No tiene sentido para el valor de un `ArrivalStatus` instancia para reflejar más de una constante de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="c1f2b-192">Sin embargo, en otros casos, el valor de un objeto de enumeración puede incluir a varios miembros de enumeración y cada miembro representa un campo de bits en el valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="c1f2b-193">El <xref:System.FlagsAttribute> atributo se puede usar para indicar que la enumeración se compone de campos de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="c1f2b-194">Por ejemplo, una enumeración denominada `Pets` podría utilizarse para indicar los tipos de mascotas en una casa.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="c1f2b-195">Puede definirse como sigue.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="c1f2b-196">El `Pets` , a continuación, se puede usar la enumeración como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="c1f2b-197">Se deben usar los siguientes procedimientos recomendados al definir un bit a bit de enumeración y aplicar el <xref:System.FlagsAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="c1f2b-198">Use el <xref:System.FlagsAttribute> atributo personalizado para una enumeración solo si es una operación bit a bit (AND, OR exclusivo o) que se realizará en un valor numérico.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="c1f2b-199">Constantes de enumeración se definen en potencias de dos, es decir, 1, 2, 4, 8 y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="c1f2b-200">Esto significa que no se superponen las marcas individuales en constantes de enumeración combinadas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="c1f2b-201">Considere la posibilidad de crear una constante enumerada para combinaciones de marcadores usados.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="c1f2b-202">Por ejemplo, si tiene una enumeración que se usa para las operaciones de E/S de archivo que contiene las constantes enumeradas `Read = 1` y `Write = 2`, considere la posibilidad de crear la constante enumerada `ReadWrite = Read OR Write`, que combina el `Read` y `Write` marcas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="c1f2b-203">Además, la operación OR bit a bit utilizada para combinar las marcas podría considerarse un concepto avanzado en algunas circunstancias que no debería requerirse para tareas sencillas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="c1f2b-204">Tenga cuidado si define un número negativo como una constante enumerada marca porque muchas de las posiciones indicador pueden establecerse en 1, lo que podría hacer que el código confuso y animar a errores de codificación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="c1f2b-205">Una manera cómoda para comprobar si se establece una marca de un valor numérico es llamar a la instancia <xref:System.Enum.HasFlag%2A> método, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="c1f2b-206">Es equivalente a realizar una operación AND bit a bit entre el valor numérico y la constante enumerada de marca, que establece todos los bits del valor numérico de cero que no corresponden a la marca, y, a continuación, comprobar si el resultado de esa operación es igual a la constante enumerada del indicador.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="c1f2b-207">Esto se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="c1f2b-208">Use `None` como el nombre de la marca enumerada constante cuyo valor es cero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="c1f2b-209">No puede usar el `None` constante enumerada en una operación AND bit a bit para probar un marcador porque el resultado siempre es cero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="c1f2b-210">Sin embargo, puede realizar una operación lógica, no una comparación bit a bit, entre el valor numérico y el `None` constante enumerada para determinar si están establecidos los bits del valor numérico.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="c1f2b-211">Esto se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="c1f2b-212">No defina un valor de enumeración únicamente para reflejar el estado de la propia enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="c1f2b-213">Por ejemplo, no se define una constante enumerada que simplemente marca el final de la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="c1f2b-214">Si necesita determinar el último valor de la enumeración, comprobar explícitamente si ese valor.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="c1f2b-215">Además, puede realizar una comprobación de intervalo para la constante enumerada primera y última si todos los valores dentro del intervalo son válidos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="Methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="c1f2b-216">Adición de métodos de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="c1f2b-217">Dado que los tipos de enumeración se definen como estructuras de lenguaje, `enum` (C#) y `Enum` (Visual Basic), no se puede definir los métodos personalizados para un tipo de enumeración distinto de esos métodos heredados de la <xref:System.Enum> clase.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="c1f2b-218">Sin embargo, puede usar los métodos de extensión para agregar funcionalidad a un tipo de enumeración concreto.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="c1f2b-219">En el ejemplo siguiente, la enumeración `Grades` representa las posibles calificaciones con letras que un alumno puede recibir en una clase.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="c1f2b-220">Un método de extensión denominado `Passing` se agrega al tipo `Grades` para que cada instancia de ese tipo "sepa" ahora si representa una calificación de aprobado o no.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="c1f2b-221">La `Extensions` clase también contiene una variable de lectura y escritura estática que define la calificación de aprobado mínimo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="c1f2b-222">El valor devuelto de la `Passing` método de extensión refleja el valor actual de esa variable.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-223">El ejemplo siguiente se muestra cómo utilizar una enumeración para representar valores con nombre y otra enumeración para representar los campos de bits con nombre.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c1f2b-224">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1f2b-225">Inicializa una nueva instancia de la clase <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="enum.CompareTo target" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="c1f2b-226">Objeto que se va a comparar o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c1f2b-227">Compara esta instancia con un objeto especificado y devuelve una indicación de los valores relativos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-228">Número con signo que indica los valores relativos de esta instancia y <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="c1f2b-229">Valor</span><span class="sxs-lookup"><span data-stu-id="c1f2b-229">Value</span></span> 
 </term><description> <span data-ttu-id="c1f2b-230">Significado</span><span class="sxs-lookup"><span data-stu-id="c1f2b-230">Meaning</span></span> 
 </description></listheader><item><term> <span data-ttu-id="c1f2b-231">Menor que cero</span><span class="sxs-lookup"><span data-stu-id="c1f2b-231">Less than zero</span></span> 
 </term><description> <span data-ttu-id="c1f2b-232">El valor de esta instancia es menor que el valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-232">The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="c1f2b-233">Cero</span><span class="sxs-lookup"><span data-stu-id="c1f2b-233">Zero</span></span> 
 </term><description> <span data-ttu-id="c1f2b-234">El valor de esta instancia es igual al valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-234">The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="c1f2b-235">Mayor que cero</span><span class="sxs-lookup"><span data-stu-id="c1f2b-235">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="c1f2b-236">El valor de esta instancia es mayor que el valor de <paramref name="target" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-236">The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
<span data-ttu-id="c1f2b-237">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-237">-or-</span></span> 
 <span data-ttu-id="c1f2b-238"><paramref name="target" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c1f2b-239">El ejemplo siguiente muestra el uso de `CompareTo` en el contexto de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-240"><paramref name="target" /> y esta instancia no son del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-241">Esta instancia no es de tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> o <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="c1f2b-242">Esta instancia es nula.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-242">This instance is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="enum.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c1f2b-243">Objeto que se va a comparar con esta instancia o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-243">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c1f2b-244">Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-244">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-245"><see langword="true" /> si <paramref name="obj" /> es un valor de enumeración del mismo tipo y con el mismo valor subyacente que esta instancia; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-245"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-246">El <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> reemplazos de método <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> para definir cómo se evalúan los miembros de la enumeración de igualdad.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-246">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-247">En el ejemplo siguiente se muestra el uso del método <xref:System.Enum.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-247">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="c1f2b-248">El siguiente ejemplo define dos tipos de enumeración, `SledDog` y `WorkDog`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-248">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="c1f2b-249">El `SledDog` enumeración tiene dos miembros, `SledDog.AlaskanMalamute` y `SledDog.Malamute`, que tienen el mismo valor subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-249">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="c1f2b-250">La llamada a la <xref:System.Enum.Equals%2A> método indica que estos valores son iguales porque sus valores subyacentes son los mismos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-250">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="c1f2b-251">El `SledDog.Malamute` y `WorkDog.Newfoundland` los miembros tienen el mismo valor subyacente, aunque representan los tipos de enumeración diferentes.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-251">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="c1f2b-252">Una llamada a la <xref:System.Enum.Equals%2A> método indica que estos valores no son iguales.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-252">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberSignature Language="F#" Value="static member Format : Type * obj * string -&gt; string" Usage="System.Enum.Format (enumType, value, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-253">Tipo de enumeración del valor que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-253">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-254">Valor que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-254">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="c1f2b-255">Formato de resultados que se va a usar.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-255">The output format to use.</span></span></param>
        <summary><span data-ttu-id="c1f2b-256">Convierte el valor especificado de un tipo enumerado especificado en la representación de cadena equivalente de acuerdo con el formato especificado.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-256">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-257">Representación de cadena de <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-257">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-258">La siguiente tabla muestra los valores válidos para el `format` parámetro.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-258">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="c1f2b-259">Formato</span><span class="sxs-lookup"><span data-stu-id="c1f2b-259">Format</span></span>|<span data-ttu-id="c1f2b-260">Descripción</span><span class="sxs-lookup"><span data-stu-id="c1f2b-260">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="c1f2b-261">"G" o "g"</span><span class="sxs-lookup"><span data-stu-id="c1f2b-261">"G" or "g"</span></span>|<span data-ttu-id="c1f2b-262">Si `value` es igual a una constante enumerada con nombre, el nombre de esta constante es devuelta; de lo contrario, el valor decimal equivalente `value` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-262">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="c1f2b-263">Por ejemplo, supongamos que la única constante enumerada se denomina rojo y su valor es 1.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-263">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="c1f2b-264">Si `value` se especifica como 1, este formato devuelve "Red".</span><span class="sxs-lookup"><span data-stu-id="c1f2b-264">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="c1f2b-265">Sin embargo, si `value` se especifica como 2, este formato devuelve "2".</span><span class="sxs-lookup"><span data-stu-id="c1f2b-265">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="c1f2b-266">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-266">-or-</span></span><br /><br /> <span data-ttu-id="c1f2b-267">Si el <xref:System.FlagsAttribute> atributo personalizado se aplica a la enumeración, `value` se trata como un campo de bits que contiene uno o más marcadores que se componen de uno o más bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-267">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="c1f2b-268">Si `value` es igual a una combinación de nombre constantes enumeradas, se devuelve una lista separada por delimitador de los nombres de las constantes.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-268">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="c1f2b-269">`value` se buscan los indicadores, pasar de la marca con el valor máximo para el valor más pequeño.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-269">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="c1f2b-270">Para cada marca que corresponde a un campo de bits en `value`, el nombre de la constante se concatena a la lista separada por delimitador.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-270">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="c1f2b-271">El valor de esa marca, a continuación, se tendrán en cuenta aún más, y continúa la búsqueda de la siguiente marca.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-271">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="c1f2b-272">Si `value` no es igual a una combinación de constantes enumeradas, el valor decimal equivalente con nombre `value` se devuelve.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-272">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="c1f2b-273">"X" o "x"</span><span class="sxs-lookup"><span data-stu-id="c1f2b-273">"X" or "x"</span></span>|<span data-ttu-id="c1f2b-274">Representa `value` en formato hexadecimal sin un "0 x".</span><span class="sxs-lookup"><span data-stu-id="c1f2b-274">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="c1f2b-275">"D" o "d"</span><span class="sxs-lookup"><span data-stu-id="c1f2b-275">"D" or "d"</span></span>|<span data-ttu-id="c1f2b-276">Representa `value` en formato decimal.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-276">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="c1f2b-277">"F" o "f"</span><span class="sxs-lookup"><span data-stu-id="c1f2b-277">"F" or "f"</span></span>|<span data-ttu-id="c1f2b-278">Se comporta igual que "G" o "g", salvo que el <xref:System.FlagsAttribute> no debe estar presente en el <xref:System.Enum> declaración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-278">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-279">El ejemplo siguiente muestra el uso de `Format` en el contexto de `Enum`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-279">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-280">El <paramref name="enumType" />, <paramref name="value" /> o el parámetro <paramref name="format" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-280">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-281">El parámetro <paramref name="enumType" /> no es un tipo <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-281">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
<span data-ttu-id="c1f2b-282">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-282">-or-</span></span> 
<span data-ttu-id="c1f2b-283"><paramref name="value" /> procede de una enumeración que difiere en tipo de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-283">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="c1f2b-284">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-284">-or-</span></span> 
<span data-ttu-id="c1f2b-285">El tipo de <paramref name="value" /> no es un tipo subyacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-285">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c1f2b-286">El parámetro <paramref name="format" /> contiene un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-286">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-287"><paramref name="format" /> es igual a "X", pero se desconoce el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-287"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="c1f2b-288">Aplicar formato a tipos en .NET</span><span class="sxs-lookup"><span data-stu-id="c1f2b-288">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="c1f2b-289">Cadenas de formato de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-289">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="enum.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1f2b-290">Devuelve el código hash del valor de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-290">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-291">Código hash de un entero de 32 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-291">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetName : Type * obj -&gt; string" Usage="System.Enum.GetName (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-292">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-292">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-293">Valor de una constante enumerada concreta en términos de su tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-293">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="c1f2b-294">Recupera el nombre de la constante de la enumeración especificada que tiene el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-294">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-295">Cadena que contiene el nombre de la constante enumerada en <paramref name="enumType" /> cuyo valor es <paramref name="value" />; o bien, <see langword="null" /> si no se encuentra dicha constante.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-295">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-296">Si varios miembros de enumeración tienen el mismo valor subyacente, el <xref:System.Enum.GetName%2A> método garantiza que devolverá el nombre de uno de esos miembros de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-296">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="c1f2b-297">Sin embargo, no garantiza que siempre devolverá el nombre del mismo miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-297">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="c1f2b-298">Como resultado, cuando varios miembros de enumeración tienen el mismo valor, el código de aplicación nunca debe dependen del método que devuelve el nombre de un miembro determinado.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-298">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-299">El ejemplo siguiente muestra el uso de `GetName`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-299">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-300"><paramref name="enumType" /> o <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-300"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-301"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-301"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="c1f2b-302">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-302">-or-</span></span> 
 <span data-ttu-id="c1f2b-303"><paramref name="value" /> no es ni del tipo <paramref name="enumType" /> ni tiene el mismo tipo subyacente que <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-303"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetNames : Type -&gt; string[]" Usage="System.Enum.GetNames enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-304">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-304">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="c1f2b-305">Recupera una matriz con los nombres de las constantes de una enumeración especificada.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-305">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-306">Matriz de cadenas con los nombres de las constantes de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-306">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-307">Los elementos de la matriz de valores devueltos se ordenan por los valores binarios de las constantes enumeradas (es decir, su magnitud sin signo).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-307">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="c1f2b-308">En el ejemplo siguiente se proporciona muestra información acerca de la matriz devuelta por la <xref:System.Enum.GetNames%2A> método para una enumeración que incluye un valor negativo, cero y un valor positivo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-308">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="c1f2b-309">Si no hay constantes enumeradas con el mismo valor, se especifica el orden de los nombres correspondientes.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-309">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-310">En el ejemplo siguiente se muestra el uso del método <xref:System.Enum.GetNames%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-310">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-311"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-311"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-312">El parámetro <paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-312"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="enum.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1f2b-313">Devuelve el código de tipo del tipo subyacente de este miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-313">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-314">El código de tipo del tipo subyacente de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-314">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-315">Se desconoce el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-315">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetUnderlyingType : Type -&gt; Type" Usage="System.Enum.GetUnderlyingType enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-316">Enumeración cuyo tipo subyacente se recuperará.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-316">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="c1f2b-317">Devuelve el tipo subyacente de la enumeración especificada.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-317">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-318">Tipo subyacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-318">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-319">El <xref:System.Enum> estructura permite que los valores para representarse como constantes con nombre.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-319">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="c1f2b-320">El tipo de datos de valores de enumeración se conoce como su tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-320">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="c1f2b-321">Por ejemplo, el tipo subyacente de la <xref:System.DayOfWeek> enumeración, que consta de las constantes que representan cada día de la semana (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, y así sucesivamente), es <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-321">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-322">El ejemplo siguiente se llama el <xref:System.Enum.GetUnderlyingType%2A> método para mostrar el tipo subyacente de algunos miembros de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-322">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-323"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-323"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-324"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-324"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberSignature Language="F#" Value="static member GetValues : Type -&gt; Array" Usage="System.Enum.GetValues enumType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-325">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-325">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="c1f2b-326">Recupera una matriz con los valores de las constantes de una enumeración especificada.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-326">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-327">Matriz que contiene los valores de las constantes de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-327">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-328">Los elementos de la matriz se ordenan por los valores binarios de las constantes de enumeración (es decir, su magnitud sin signo).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-328">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="c1f2b-329">En el ejemplo siguiente se muestra información acerca de la matriz devuelta por la <xref:System.Enum.GetValues%2A> método para una enumeración que incluye un valor negativo, cero y un valor positivo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-329">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="c1f2b-330">El <xref:System.Enum.GetValues%2A> método devuelve una matriz que contiene un valor para cada miembro de la `enumType` enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-330">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="c1f2b-331">Si varios miembros tienen el mismo valor, la matriz devuelta incluye valores duplicados.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-331">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="c1f2b-332">En este caso, una llamada a la <xref:System.Enum.GetName%2A> método con cada valor de la matriz devuelta no restaura los nombres únicos asignados a los miembros que tienen valores duplicados.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-332">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="c1f2b-333">Para recuperar todos los nombres de miembros de enumeración correctamente, llame el <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-333">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-334">El <xref:System.Enum.GetValues%2A> no se puede invocar el método mediante el uso de reflexión en un contexto de solo reflexión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-334">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="c1f2b-335">En su lugar, puede recuperar el valor de todos los miembros de enumeración mediante el <xref:System.Type.GetFields%2A?displayProperty=nameWithType> método para obtener una matriz de <xref:System.Reflection.FieldInfo> objetos que representan los miembros de enumeración y, a continuación, llame a la <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> método en cada elemento de la matriz.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-335">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="c1f2b-336">El ejemplo siguiente ilustra esta técnica.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-336">The following example illustrates this technique.</span></span> <span data-ttu-id="c1f2b-337">Requiere que se defina la siguiente enumeración en un ensamblado denominado Enumerations.dll:</span><span class="sxs-lookup"><span data-stu-id="c1f2b-337">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="c1f2b-338">El ensamblado se carga en un contexto de solo reflexión, un <xref:System.Type> objeto que representa el `Pets` se crea una instancia de enumeración, una matriz de <xref:System.Reflection.FieldInfo> se recuperan los objetos y los valores de campo se muestran en la consola.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-338">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-339">El ejemplo siguiente muestra el uso de <xref:System.Enum.GetValues%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-339">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-340"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-340"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-341"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-341"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-342">El método se invoca por la reflexión en un contexto de solo reflexión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-342">The method is invoked by reflection in a reflection-only context,</span></span> 
<span data-ttu-id="c1f2b-343">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-343">-or-</span></span> 
 <span data-ttu-id="c1f2b-344"><paramref name="enumType" /> es un tipo de un ensamblado cargado en un contexto de solo reflexión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-344"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberSignature Language="F#" Value="member this.HasFlag : Enum -&gt; bool" Usage="enum.HasFlag flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="c1f2b-345">Valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-345">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="c1f2b-346">Determina si hay uno o varios campos de bits establecidos en la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-346">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-347"><see langword="true" /> si los campos de bits establecidos en <paramref name="flag" /> también están establecidos en la instancia actual; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-347"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-348">El <xref:System.Enum.HasFlag%2A> método devuelve el resultado de la siguiente expresión booleana.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-348">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="c1f2b-349">Si el valor subyacente de `flag` es cero, el método devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-349">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="c1f2b-350">Si este comportamiento no es deseable, puede usar el <xref:System.Enum.Equals%2A> método para comprobar la igualdad con cero y llamada <xref:System.Enum.HasFlag%2A> solo si el valor subyacente de `flag` es distinto de cero, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-350">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="c1f2b-351">El <xref:System.Enum.HasFlag%2A> método está diseñado para usarse con tipos de enumeración que se marcan con el <xref:System.FlagsAttribute> de atributo y puede usarse para determinar si se establecen varios campos de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-351">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="c1f2b-352">Para los tipos de enumeración que no están marcados con el <xref:System.FlagsAttribute> atributo, llame a la <xref:System.Enum.Equals%2A> método o la <xref:System.Enum.CompareTo%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-352">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-353">En el ejemplo siguiente se define un `ItemsOrdered` enumeración que refleja las categorías de elementos que un cliente puede ordenar en un restaurante.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-353">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="c1f2b-354">En el ejemplo se comprueba si el cliente ha solicitado una entrante y una bebida.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-354">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-355"><paramref name="flag" /> es un tipo diferente de la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-355"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDefined : Type * obj -&gt; bool" Usage="System.Enum.IsDefined (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-356">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-356">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-357">Valor o nombre de una constante de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-357">The value or name of a constant in <paramref name="enumType" />.</span></span></param>
        <summary><span data-ttu-id="c1f2b-358">Devuelve un booleano que indica si un valor integral especificado, o bien su nombre en forma de cadena, existe en una enumeración especifica.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-358">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-359"><see langword="true" /> si una constante de <paramref name="enumType" /> tiene un valor igual a <paramref name="value" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-359"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-360">El `value` parámetro puede ser cualquiera de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="c1f2b-360">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="c1f2b-361">Cualquier miembro del tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-361">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="c1f2b-362">Una variable cuyo valor es un miembro de enumeración de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-362">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="c1f2b-363">La representación de cadena del nombre de un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-363">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="c1f2b-364">Los caracteres de la cadena deben tener el mismo caso de que el nombre de miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-364">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="c1f2b-365">Un valor del tipo subyacente de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-365">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="c1f2b-366">Si las constantes de `enumType` definir un conjunto de campos de bits y `value` contiene los valores, los nombres o los valores subyacentes de varios campos de bits, el <xref:System.Enum.IsDefined%2A> devuelve del método `false`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-366">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="c1f2b-367">En otras palabras, para las enumeraciones que definen un conjunto de campos de bits, el método sólo determina si un campo de bits pertenece a la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-367">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="c1f2b-368">Para determinar si se establecen varios campos de bits en un tipo de enumeración que esté etiquetado con el <xref:System.FlagsAttribute> atributo, puede llamar a la <xref:System.Enum.HasFlag%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-368">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-369">En el ejemplo siguiente se define una enumeración denominada `PetType` que consta de campos de bits individuales.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-369">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="c1f2b-370">A continuación, llama el <xref:System.Enum.IsDefined%2A> método subyacente compuestos valores resultantes de la configuración de varios campos de bits, los nombres de cadena y valores de enumeración de posibles.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-370">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-371"><paramref name="enumType" /> o <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-371"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-372"><paramref name="enumType" /> no es un objeto <see langword="Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-372"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
<span data-ttu-id="c1f2b-373">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-373">-or-</span></span> 
<span data-ttu-id="c1f2b-374">El tipo de <paramref name="value" /> es una enumeración, pero no es una enumeración de tipo <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-374">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
<span data-ttu-id="c1f2b-375">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-375">-or-</span></span> 
<span data-ttu-id="c1f2b-376">El tipo de <paramref name="value" /> no es un tipo subyacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-376">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-377"><paramref name="value" /> no es del tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" /> o <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-377"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="c1f2b-378">Si <paramref name="enumType" /> es una enumeración que se define utilizando el <see cref="T:System.FlagsAttribute" /> de atributo, el método devuelve <see langword="false" /> si varios bits campos en <paramref name="value" /> se establecen pero <paramref name="value" /> no corresponde a un valor de enumeración compuesto, o si <paramref name="value" /> es una concatenación de cadenas de los nombres de varias marcas de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-378">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="c1f2b-379">En el ejemplo siguiente, un <c>mascotas</c> enumeración se define con el <see cref="T:System.FlagsAttribute" /> atributo.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-379">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="c1f2b-380">El <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> devuelve del método <see langword="false" /> cuando se pasa un valor de enumeración que tiene campos de dos bits (<c>Pets.Dog</c> y <c>Pets.Cat</c>) establecido, y cuando se pasa la representación de cadena de la que valor de enumeración ("perro, gato").</span><span class="sxs-lookup"><span data-stu-id="c1f2b-380">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
<span data-ttu-id="c1f2b-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="c1f2b-381">[!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)] [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]</span></span> 
<span data-ttu-id="c1f2b-382">Puede determinar si varios campos de bits se establecen mediante una llamada a la <see cref="M:System.Enum.HasFlag(System.Enum)" /> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-382">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para></block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1f2b-383">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-383">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string -&gt; obj" Usage="System.Enum.Parse (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-384">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-384">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-385">Cadena que contiene el nombre o valor que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-385">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="c1f2b-386">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-386">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-387">Objeto de tipo <paramref name="enumType" /> cuyo valor está representado por <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-387">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-388">El `value` parámetro contiene la representación de cadena del valor subyacente o la constante con nombre de un miembro de enumeración o una lista de denominado constantes delimitadas por comas (,).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-388">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="c1f2b-389">Uno o más espacios en blanco pueden ir precedidas o seguidas de cada valor, el nombre o por comas en `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-389">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c1f2b-390">Si `value` es una lista, el valor devuelto es el valor de los nombres especificados combinados con un bit a bit `OR` operación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-390">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="c1f2b-391">Si `value` es un nombre que no corresponde a una constante con nombre de `enumType`, el método produce una <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-391">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="c1f2b-392">Si `value` es la representación de cadena de un entero que no representa un valor subyacente de la `enumType` enumeración, el método devuelve un miembro de enumeración cuyo valor subyacente es `value` convertir a un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-392">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c1f2b-393">Si no desea este comportamiento, llame a la <xref:System.Enum.IsDefined%2A> método para asegurarse de que una representación de cadena concreta de un entero es realmente un miembro de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-393">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="c1f2b-394">En el ejemplo siguiente se define un `Colors` enumeración, llama el <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para convertir cadenas en sus correspondientes valores de enumeración y llama a la <xref:System.Enum.IsDefined%2A> valores del método para asegurarse de que determinados valores integrales son subyacentes en el `Colors` enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-394">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="c1f2b-395">Esta operación distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-395">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-396">En el ejemplo siguiente se usa el <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analizar una matriz de cadenas que se crean mediante una llamada a la <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-396">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="c1f2b-397">También usa el <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analizar un valor de enumeración que consta de un campo de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-397">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-398"><paramref name="enumType" /> o <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-398"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-399"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-399"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="c1f2b-400">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-400">-or-</span></span> 
 <span data-ttu-id="c1f2b-401"><paramref name="value" /> es una cadena vacía o solo contiene espacios en blanco.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-401"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
<span data-ttu-id="c1f2b-402">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-402">-or-</span></span> 
 <span data-ttu-id="c1f2b-403"><paramref name="value" /> es un nombre, pero no una de las constantes con nombre definidas para la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-403"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="c1f2b-404"><paramref name="value" /> está fuera del intervalo del tipo subyacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-404"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : Type * string * bool -&gt; obj" Usage="System.Enum.Parse (enumType, value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-405">Tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-405">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-406">Cadena que contiene el nombre o valor que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-406">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="c1f2b-407"><see langword="true" /> para no distinguir entre mayúsculas y minúsculas; <see langword="false" /> para tener en cuenta la distinción entre mayúsculas y minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-407"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="c1f2b-408">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-408">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c1f2b-409">Un parámetro especifica si la operación no distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-409">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-410">Objeto de tipo <paramref name="enumType" /> cuyo valor está representado por <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-410">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-411">El `value` parámetro contiene la representación de cadena del valor subyacente o la constante con nombre de un miembro de enumeración o una lista de denominado constantes delimitadas por comas (,).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-411">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="c1f2b-412">Uno o más espacios en blanco pueden ir precedidas o seguidas de cada valor, el nombre o por comas en `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-412">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c1f2b-413">Si `value` es una lista, el valor devuelto es el valor de los nombres especificados combinados con un bit a bit `OR` operación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-413">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="c1f2b-414">Si `value` es un nombre que no corresponde a una constante con nombre de `enumType`, el método produce una <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-414">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="c1f2b-415">Si `value` es la representación de cadena de un entero que no representa un valor subyacente de la `enumType` enumeración, el método devuelve un miembro de enumeración cuyo valor subyacente es `value` convertir a un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-415">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c1f2b-416">Si no desea este comportamiento, llame a la <xref:System.Enum.IsDefined%2A> método para asegurarse de que una representación de cadena concreta de un entero es realmente un miembro de `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-416">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="c1f2b-417">En el ejemplo siguiente se define un `Colors` enumeración, llama el <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método para convertir cadenas en sus correspondientes valores de enumeración y llama a la <xref:System.Enum.IsDefined%2A> valores del método para asegurarse de que determinados valores integrales son subyacentes en el `Colors` enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-417">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="c1f2b-418">El `ignoreCase` parámetro especifica si esta operación distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-418">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-419">En el ejemplo siguiente se usa el <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método para analizar una matriz de cadenas que se crean mediante una llamada a la <xref:System.Enum.GetNames%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-419">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="c1f2b-420">También usa el <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método para analizar un valor de enumeración que consta de un campo de bits.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-420">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-421"><paramref name="enumType" /> o <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-421"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-422"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-422"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="c1f2b-423">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-423">-or-</span></span> 
 <span data-ttu-id="c1f2b-424"><paramref name="value" /> es una cadena vacía ("") o solo contiene espacios en blanco.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-424"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
<span data-ttu-id="c1f2b-425">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-425">-or-</span></span> 
 <span data-ttu-id="c1f2b-426"><paramref name="value" /> es un nombre, pero no una de las constantes con nombre definidas para la enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-426"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="c1f2b-427"><paramref name="value" /> está fuera del intervalo del tipo subyacente de <paramref name="enumType" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-427"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; 'Enum (requires 'Enum : struct)" Usage="System.Enum.Parse (value, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-428">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-428">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-429">Convierte el valor actual en un valor booleano basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-429">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-430">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-430">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-431">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-431">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-432">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-432">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-433">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-433">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-434">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-435">Convierte el valor actual en un entero de 8 bits sin signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-435">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-436">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-436">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-437">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-437">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-438">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-438">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-439">Convierte el valor actual en un carácter Unicode basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-439">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-440">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-440">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-441">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-441">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-442">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-442">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-443">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-443">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-444">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-444">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-445">Convierte el valor actual en <see cref="T:System.DateTime" /> basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-445">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-446">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-446">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-447">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-447">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-448">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-448">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-449">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-449">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-450">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-450">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-451">Convierte el valor actual en <see cref="T:System.Decimal" /> basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-451">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-452">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-452">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-453">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-453">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-454">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-454">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-455">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-455">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-456">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-456">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-457">Convierte el valor actual en número de punto flotante de precisión doble basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-457">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-458">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-458">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-459">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-459">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-460">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-460">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-461">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-461">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-462">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-463">Convierte el valor actual en un entero de 16 bits con signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-463">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-464">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-465">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-466">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-467">Convierte el valor actual en un entero de 32 bits con signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-467">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-468">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-469">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-470">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-471">Convierte el valor actual en un entero de 64 bits con signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-471">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-472">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-473">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-474">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-475">Convierte el valor actual en un entero de 8 bits con signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-475">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-476">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-476">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-477">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-477">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-478">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-478">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-479">Convierte el valor actual en un número de punto flotante de precisión sencilla basándose en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-479">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-480">Este miembro siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-480">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-481">No implementado actualmente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-481">Currently not implemented.</span></span> <span data-ttu-id="c1f2b-482">Siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-482">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c1f2b-483">En todos los casos.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-483">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c1f2b-484">Tipo al que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-484">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="c1f2b-485">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-486">Convierte el valor actual en un tipo especificado basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-486">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-487">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-488">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-489">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-490">Convierte el valor actual en un entero de 16 bits sin signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-490">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-491">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-492">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-493">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-494">Convierte el valor actual en un entero de 32 bits sin signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-494">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-495">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-496">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-497">Objeto que proporciona información de formato específica de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-497">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c1f2b-498">Convierte el valor actual en un entero de 64 bits sin signo basado en el tipo subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-498">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-499">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-499">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-500">Usa <xref:System.Convert> para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-500">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="c1f2b-501">Especificación de formato.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-501">A format specification.</span></span></param>
        <param name="provider">To be added.</param>
        <summary><span data-ttu-id="c1f2b-502">Esta sobrecarga del método está en desuso; use <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-502">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-503">Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-503">The string representation of the value of this instance, as specified by <paramref name="format" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c1f2b-504"><paramref name="format" /> no contiene una especificación de formato válida.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-504"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-505"><paramref name="format" /> es igual a "X", pero se desconoce el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-505"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1f2b-506">Convierte un valor entero especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-506">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * byte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-507">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-507">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-508">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-508">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-509">Convierte el entero de 8 bits sin signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-509">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-510">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-510">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-511">El <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-511">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-512">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-512">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-513">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-513">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-514">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-514">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-515">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-515">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-516"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-516"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-517"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-517"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-518">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-518">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-519">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-519">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-520">Convierte el entero de 16 bits con signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-520">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-521">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-521">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-522">El <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-522">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-523">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-523">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-524">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-524">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-525">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-525">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-526">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-526">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-527"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-527"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-528"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-528"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-529">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-529">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-530">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-530">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-531">Convierte el entero de 32 bits con signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-531">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-532">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-532">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-533">El <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-533">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-534">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-534">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-535">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-535">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-536">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-536">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-537">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-537">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-538"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-538"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-539"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-539"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * int64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-540">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-540">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-541">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-541">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-542">Convierte el entero de 64 bits con signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-542">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-543">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-543">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-544">El <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-544">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-545">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-545">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-546">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-546">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-547">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-547">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-548">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-548">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-549"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-549"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-550"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-550"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * obj -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-551">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-551">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-552">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-552">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-553">Convierte el objeto especificado con un valor entero en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-553">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-554">Objeto de enumeración cuyo valor es <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-554">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-555">El <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> método convierte el valor entero `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-555">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-556">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-556">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-557">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-557">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-558">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-558">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-559">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-559">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-560"><paramref name="enumType" /> o <paramref name="value" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-560"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-561"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-561"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
<span data-ttu-id="c1f2b-562">O bien</span><span class="sxs-lookup"><span data-stu-id="c1f2b-562">-or-</span></span> 
 <span data-ttu-id="c1f2b-563"><paramref name="value" /> no es de tipo <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> o <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-563"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * sbyte -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-564">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-564">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-565">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-565">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-566">Convierte el valor entero de 8 bits con signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-566">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-567">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-567">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-568">El <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-568">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-569">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-569">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-570">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-570">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-571">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-571">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-572">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-572">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-573"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-573"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-574"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-574"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint16 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-575">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-575">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-576">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-576">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-577">Convierte el valor entero de 16 bits sin signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-577">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-578">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-578">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-579">El <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-579">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-580">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-580">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-581">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-581">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-582">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-582">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-583">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-583">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-584"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-584"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-585"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-585"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint32 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-586">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-586">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-587">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-587">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-588">Convierte el valor entero de 32 bits sin signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-588">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-589">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-589">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-590">El <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-590">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-591">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-591">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-592">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-592">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-593">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-593">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-594">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-594">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-595"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-595"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-596"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-596"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToObject : Type * uint64 -&gt; obj" Usage="System.Enum.ToObject (enumType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c1f2b-597">Tipo de enumeración que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-597">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c1f2b-598">Valor que se va a convertir en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-598">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c1f2b-599">Convierte el valor entero de 64 bits sin signo especificado en un miembro de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-599">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-600">Instancia de la enumeración establecida en <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-600">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-601">El <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> método convierte `value` a un miembro de enumeración cuyo valor subyacente es `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-601">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c1f2b-602">Tenga en cuenta que la conversión se realiza correctamente incluso si el valor está fuera de los límites `enumType` miembros.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-602">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c1f2b-603">Para asegurarse de que `value` es un valor subyacente válido de la `enumType` enumeración, páselo a la <xref:System.Enum.IsDefined%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-603">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c1f2b-604">Este método de conversión devuelve un valor de tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-604">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c1f2b-605">A continuación, puede convertirlo o convertirlo en un objeto de tipo `enumType`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-605">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c1f2b-606"><paramref name="enumType" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-606"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-607"><paramref name="enumType" /> no es un objeto <see cref="T:System.Enum" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-607"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1f2b-608">Convierte el valor de esta instancia en la representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-608">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="c1f2b-609">Cadenas de formato de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-609">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="enum.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c1f2b-610">Convierte el valor de esta instancia en la representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-610">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-611">Representación de cadena del valor de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-611">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-612">El valor devuelto se formatea con el especificador de formato general ("G").</span><span class="sxs-lookup"><span data-stu-id="c1f2b-612">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="c1f2b-613">Es decir, si la <xref:System.FlagsAttribute> no se aplica a este tipo enumerado y hay una constante con nombre igual al valor de esta instancia y, a continuación, el valor devuelto es una cadena que contiene el nombre de la constante.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-613">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="c1f2b-614">Si el <xref:System.FlagsAttribute> se aplica y hay una combinación de uno o más constantes con nombre igual al valor de esta instancia, entonces el valor devuelto es una cadena que contiene una lista separada por delimitador de los nombres de las constantes.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-614">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="c1f2b-615">En caso contrario, el valor devuelto es la representación de cadena del valor numérico de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-615">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="c1f2b-616">Para obtener más información sobre el formato de los valores de enumeración, vea [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-616">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c1f2b-617">Para obtener más información sobre el formato en general, consulte [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-617">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-618">En el ejemplo siguiente se muestra cómo convertir un valor enumerado en una cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-618">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="c1f2b-619">Si varios miembros de enumeración tienen el mismo valor subyacente e intenta recuperar la representación de cadena del nombre de un miembro de la enumeración basada en su valor subyacente, el código no debe hacer ninguna suposición sobre el nombre que el método devolverá.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-619">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="c1f2b-620">Por ejemplo, la siguiente enumeración define dos miembros, <c>Shade.Gray</c> y <c>Shade.Grey</c>, que tienen el mismo valor subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-620">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="c1f2b-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="c1f2b-621">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="c1f2b-622">La siguiente llamada de método intenta recuperar el nombre de un miembro de la <c>Shade</c> enumeración cuyo valor subyacente es 1.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-622">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="c1f2b-623">El método puede devolver "Gray" o "Grey" y el código no debe hacer ninguna suposición sobre la que se devolverá la cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-623">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="c1f2b-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="c1f2b-624">[!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)] [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="enum.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c1f2b-625">(obsoleto)</span><span class="sxs-lookup"><span data-stu-id="c1f2b-625">(obsolete)</span></span></param>
        <summary><span data-ttu-id="c1f2b-626">Esta sobrecarga del método está en desuso; use <see cref="M:System.Enum.ToString" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-626">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-627">Representación de cadena del valor de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-627">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="enum.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="c1f2b-628">Cadena de formato.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-628">A format string.</span></span></param>
        <summary><span data-ttu-id="c1f2b-629">Convierte el valor de esta instancia en la representación de cadena equivalente usando el formato especificado.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-629">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-630">Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-630">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-631">El `format` parámetro puede ser una de las cadenas de formato siguientes: "G" o "g", "D" o "d", "X" o "x" y "F" o "f" (la cadena de formato no distingue mayúsculas de minúsculas).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-631">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="c1f2b-632">Si `format` es `null` o una cadena vacía (""), se usa el especificador de formato general ("G").</span><span class="sxs-lookup"><span data-stu-id="c1f2b-632">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="c1f2b-633">Para obtener más información sobre las cadenas de formato de enumeración y el formato de los valores de enumeración, vea [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-633">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c1f2b-634">Para obtener más información sobre el formato en general, consulte [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-634">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-635">El ejemplo siguiente muestra cómo convertir un valor enumerado en una cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-635">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c1f2b-636"><paramref name="format" /> contiene una especificación no válida.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-636"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-637"><paramref name="format" /> es igual a "X", pero se desconoce el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-637"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="c1f2b-638">Si varios miembros de enumeración tienen el mismo valor subyacente e intenta recuperar la representación de cadena del nombre de un miembro de la enumeración basada en su valor subyacente, el código no debe hacer ninguna suposición sobre el nombre que el método devolverá.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-638">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="c1f2b-639">Por ejemplo, la siguiente enumeración define dos miembros, <c>Shade.Gray</c> y <c>Shade.Grey</c>, que tienen el mismo valor subyacente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-639">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
<span data-ttu-id="c1f2b-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="c1f2b-640">[!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)] [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]</span></span> 
<span data-ttu-id="c1f2b-641">La siguiente llamada de método intenta recuperar el nombre de un miembro de la <c>Shade</c> enumeración cuyo valor subyacente es 1.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-641">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="c1f2b-642">El método puede devolver "Gray" o "Grey" y el código no debe hacer ninguna suposición sobre la que se devolverá la cadena.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-642">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
<span data-ttu-id="c1f2b-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span><span class="sxs-lookup"><span data-stu-id="c1f2b-643">[!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)] [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</span></span></para></block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="c1f2b-644">Aplicar formato a tipos en .NET</span><span class="sxs-lookup"><span data-stu-id="c1f2b-644">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="c1f2b-645">Cadenas de formato de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-645">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="enum.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="c1f2b-646">Especificación de formato.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-646">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="c1f2b-647">(Obsoleto).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-647">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="c1f2b-648">Esta sobrecarga del método está en desuso; use <see cref="M:System.Enum.ToString(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-648">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-649">Representación en forma de cadena del valor de esta instancia, tal y como especifica <paramref name="format" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-649">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-650">El `format` parámetro puede ser una de las cadenas de formato siguientes: "G" o "g", "D" o "d", "X" o "x" y "F" o "f" (la cadena de formato no distingue mayúsculas de minúsculas).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-650">The `format` parameter can be one of the following format strings: "G" or "g", "D" or "d", "X" or "x", and "F" or "f" (the format string is not case-sensitive).</span></span> <span data-ttu-id="c1f2b-651">Si `format` es `null` o una cadena vacía (""), se usa el especificador de formato general ("G").</span><span class="sxs-lookup"><span data-stu-id="c1f2b-651">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="c1f2b-652">Para obtener más información sobre las cadenas de formato de enumeración y el formato de los valores de enumeración, vea [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-652">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c1f2b-653">Para obtener más información sobre el formato en general, consulte [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-653">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="c1f2b-654">Especifique solo `format`; el `provider` parámetro está obsoleto.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-654">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="c1f2b-655"><paramref name="format" /> no contiene una especificación de formato válida.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-655"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c1f2b-656"><paramref name="format" /> es igual a "X", pero se desconoce el tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-656"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="c1f2b-657">Aplicar formato a tipos en .NET</span><span class="sxs-lookup"><span data-stu-id="c1f2b-657">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="c1f2b-658">Cadenas de formato de enumeración</span><span class="sxs-lookup"><span data-stu-id="c1f2b-658">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c1f2b-659">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-659">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c1f2b-660">El valor devuelto indica si la conversión se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-660">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : Type * string * bool *  -&gt; bool" Usage="System.Enum.TryParse (enumType, value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="c1f2b-661">Tipo de enumeración al que se va a convertir <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-661">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c1f2b-662">Representación de cadena que distingue mayúsculas de minúsculas del nombre de enumeración o valor subyacente que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-662">The case-sensitive string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="c1f2b-663">Cuando este método devuelve un valor, <paramref name="result" /> contiene un objeto de tipo <c>TEnum</c> cuyo valor está representado por <paramref name="value" /> si la operación de análisis se realiza correctamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-663">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="c1f2b-664">Si se produce un error en la operación de análisis, <paramref name="result" /> contiene el valor predeterminado del tipo subyacente de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-664">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="c1f2b-665">Observe que este valor no tiene que ser un miembro de la enumeración <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-665">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="c1f2b-666">Este parámetro se pasa sin inicializar.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-666">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="c1f2b-667">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-667">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c1f2b-668">El valor devuelto indica si la conversión se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-668">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-669"><see langword="true" /> si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-669"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-670"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> es idéntica a la <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> método, salvo que en lugar de producir una excepción, devuelve `false` si se produce un error en la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-670"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="c1f2b-671">Elimina la necesidad de control de excepciones al analizar la representación de cadena de un valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-671">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="c1f2b-672">El `value` parámetro contiene la representación de cadena del valor subyacente o la constante con nombre de un miembro de enumeración o una lista de constantes con nombre o los valores subyacentes delimitados por comas (,).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-672">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="c1f2b-673">Si `value` incluye varios denominado constantes o valores, uno o más espacios en blanco pueden ir precedidas o seguidas de cada valor, el nombre o por comas en `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-673">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c1f2b-674">Si `value` es una lista, `result` refleja el valor de los nombres especificados o combinados con un bit a bit de los valores subyacentes `OR` operación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-674">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="c1f2b-675">Si `value` es la representación de cadena del nombre de un valor de enumeración, la comparación de `value` con enumeración nombres distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-675">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="c1f2b-676">Si `value` es un nombre que no corresponde a una constante con nombre de `TEnum`, el método devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-676">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="c1f2b-677">Si `value` es la representación de cadena de un entero que no representa un valor subyacente de la `TEnum` enumeración, el método devuelve un miembro de enumeración cuyo valor subyacente es `value` convertir a un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-677">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c1f2b-678">Si no desea este comportamiento, llame a la <xref:System.Enum.IsDefined%2A> método para asegurarse de que una representación de cadena concreta de un entero es realmente un miembro de `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-678">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-679">En el ejemplo siguiente se define un `Colors` enumeración, llama el <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> método para convertir cadenas en sus correspondientes valores de enumeración y llama a la <xref:System.Enum.IsDefined%2A> valores del método para asegurarse de que determinados valores integrales son subyacentes en el `Colors` enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-679">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-680"><paramref name="TEnum" /> no es un tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-680"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * bool *  -&gt; bool (requires 'Enum : struct)" Usage="System.Enum.TryParse (value, ignoreCase, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="c1f2b-681">Tipo de enumeración al que se va a convertir <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-681">The enumeration type to which to convert <paramref name="value" />.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c1f2b-682">Representación de cadena del nombre de enumeración o valor subyacente que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-682">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="c1f2b-683"><see langword="true" /> para no distinguir entre mayúsculas y minúsculas; <see langword="false" /> para tener en cuenta la distinción entre mayúsculas y minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-683"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="c1f2b-684">Cuando este método devuelve un valor, <paramref name="result" /> contiene un objeto de tipo <c>TEnum</c> cuyo valor está representado por <paramref name="value" /> si la operación de análisis se realiza correctamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-684">When this method returns, <paramref name="result" /> contains an object of type <c>TEnum</c> whose value is represented by <paramref name="value" /> if the parse operation succeeds.</span></span> <span data-ttu-id="c1f2b-685">Si se produce un error en la operación de análisis, <paramref name="result" /> contiene el valor predeterminado del tipo subyacente de <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-685">If the parse operation fails, <paramref name="result" /> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="c1f2b-686">Observe que este valor no tiene que ser un miembro de la enumeración <c>TEnum</c>.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-686">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="c1f2b-687">Este parámetro se pasa sin inicializar.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-687">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="c1f2b-688">Convierte la representación de cadena del nombre o valor numérico de una o varias constantes enumeradas en un objeto enumerado equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-688">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c1f2b-689">Un parámetro especifica si la operación distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-689">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="c1f2b-690">El valor devuelto indica si la conversión se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-690">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="c1f2b-691"><see langword="true" /> si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-691"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1f2b-692"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> es idéntica a la <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> método, salvo que en lugar de producir una excepción, devuelve `false` si se produce un error en la conversión.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-692"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="c1f2b-693">Elimina la necesidad de control de excepciones al analizar la representación de cadena de un valor de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-693">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="c1f2b-694">El `value` parámetro contiene la representación de cadena del valor subyacente o la constante con nombre de un miembro de enumeración o una lista de constantes con nombre o los valores subyacentes delimitados por comas (,).</span><span class="sxs-lookup"><span data-stu-id="c1f2b-694">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="c1f2b-695">Si `value` incluye varios denominado constantes o valores, uno o más espacios en blanco pueden ir precedidas o seguidas de cada valor, el nombre o por comas en `value`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-695">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c1f2b-696">Si `value` es una lista, `result` refleja el valor de los nombres especificados o combinados con un bit a bit de los valores subyacentes `OR` operación.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-696">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="c1f2b-697">Si `value` es la representación de cadena del nombre de un valor de enumeración, la comparación de `value` con enumeración nombres depende el `ignoreCase` parámetro.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-697">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="c1f2b-698">Si `true`, la comparación distingue mayúsculas de minúsculas; si `false`, distingue mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-698">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="c1f2b-699">Si `value` es un nombre que no corresponde a una constante con nombre de `TEnum`, el método devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-699">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="c1f2b-700">Si `value` es la representación de cadena de un entero que no representa un valor subyacente de la `TEnum` enumeración, el método devuelve un miembro de enumeración cuyo valor subyacente es `value` convertir a un tipo entero.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-700">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c1f2b-701">Si no desea este comportamiento, llame a la <xref:System.Enum.IsDefined%2A> método para asegurarse de que una representación de cadena concreta de un entero es realmente un miembro de `TEnum`.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-701">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1f2b-702">En el ejemplo siguiente se define un `Colors` enumeración, llama el <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> método para convertir cadenas en sus correspondientes valores de enumeración y llama a la <xref:System.Enum.IsDefined%2A> valores del método para asegurarse de que determinados valores integrales son subyacentes en el `Colors` enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-702">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="c1f2b-703">El <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> método utiliza la comparación entre mayúsculas y minúsculas al intentar convertir las representaciones de cadena de nombre constantes a sus valores de enumeración equivalente.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-703">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c1f2b-704"><paramref name="TEnum" /> no es un tipo de enumeración.</span><span class="sxs-lookup"><span data-stu-id="c1f2b-704"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>