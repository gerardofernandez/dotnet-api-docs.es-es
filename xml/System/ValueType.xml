<Type Name="ValueType" FullName="System.ValueType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7961a45dd5c909be4d66d64972923c01c6ef84f" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52589171" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7da89-101">Proporciona la clase base para los tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-101">Provides the base class for value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7da89-102"><xref:System.ValueType> invalida los métodos virtuales de <xref:System.Object> con implementaciones más apropiadas para los tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="7da89-103">Vea también <xref:System.Enum>, que hereda de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="7da89-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="7da89-104">Tipos de datos se dividen en tipos de valor y tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="7da89-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="7da89-105">Tipos de valor se asignan a la pila o asigna insertada en una estructura.</span><span class="sxs-lookup"><span data-stu-id="7da89-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="7da89-106">Tipos de referencia son asignados por montón.</span><span class="sxs-lookup"><span data-stu-id="7da89-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="7da89-107">Tipos de referencia y valor se derivan de la clase base fundamental <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="7da89-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="7da89-108">En casos donde es necesario para un tipo de valor que se comporten como un objeto, un contenedor que hace que el tipo de valor parezca un objeto de referencia se asigna en el montón y el valor del tipo de valor se copia en él.</span><span class="sxs-lookup"><span data-stu-id="7da89-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="7da89-109">El contenedor se marca para que el sistema sepa que contiene un tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="7da89-110">Este proceso se conoce como conversión boxing, y el proceso inverso se conoce como conversión unboxing.</span><span class="sxs-lookup"><span data-stu-id="7da89-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="7da89-111">Conversiones boxing y unboxing permite que cualquier tipo se trata como un objeto.</span><span class="sxs-lookup"><span data-stu-id="7da89-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="7da89-112">Aunque <xref:System.ValueType> es la clase base implícita para tipos de valor, no se puede crear una clase que hereda de <xref:System.ValueType> directamente.</span><span class="sxs-lookup"><span data-stu-id="7da89-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="7da89-113">En su lugar, los compiladores individuales proporcionan una palabra clave del lenguaje o construir (por ejemplo, `struct` en C# y `Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="7da89-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="7da89-114">en Visual Basic) para admitir la creación de tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="7da89-115">Aparte de servir como clase base para tipos de valor en .NET Framework, el <xref:System.ValueType> estructura no suelen usar directamente en el código.</span><span class="sxs-lookup"><span data-stu-id="7da89-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="7da89-116">Sin embargo, puede usarlo como un parámetro de llamadas de método para restringir los posibles argumentos a los tipos de valor en lugar de todos los objetos o para permitir que un método para controlar un número de tipos de valor diferente.</span><span class="sxs-lookup"><span data-stu-id="7da89-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="7da89-117">El ejemplo siguiente se muestra cómo <xref:System.ValueType> impide que los tipos de referencia que se pasan a métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="7da89-118">Define una clase denominada `Utility` que contiene cuatro métodos: `IsNumeric`, que indica si su argumento es un número; `IsInteger`, que indica si su argumento es un entero; `IsFloat`, que indica si su argumento es un número de punto flotante; y `Compare`, lo que indica la relación entre dos valores numéricos.</span><span class="sxs-lookup"><span data-stu-id="7da89-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="7da89-119">En cada caso, los parámetros del método son del tipo <xref:System.ValueType>, y se impide que se pasan a los métodos de tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="7da89-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="7da89-120">El ejemplo siguiente muestra las llamadas a los métodos de la `Utility` clase.</span><span class="sxs-lookup"><span data-stu-id="7da89-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7da89-121">Inicializa una nueva instancia de la clase <see cref="T:System.ValueType" />.</span><span class="sxs-lookup"><span data-stu-id="7da89-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7da89-122">Objeto que se va a comparar con la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="7da89-122">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="7da89-123">Indica si esta instancia y un objeto especificado son iguales.</span><span class="sxs-lookup"><span data-stu-id="7da89-123">Indicates whether this instance and a specified object are equal.</span></span></summary>
        <returns><span data-ttu-id="7da89-124"><see langword="true" /> si <paramref name="obj" /> y esta instancia son del mismo tipo y representan el mismo valor; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7da89-124"><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7da89-125">El <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> reemplazos de método <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> y proporciona la implementación predeterminada de igualdad de valores para todos los tipos de valor en .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="7da89-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="7da89-126">Si ninguno de los campos de la instancia actual y `obj` son tipos de referencia, el <xref:System.ValueType.Equals%2A> método realiza una comparación byte a byte de los dos objetos en memoria.</span><span class="sxs-lookup"><span data-stu-id="7da89-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="7da89-127">En caso contrario, usa la reflexión para comparar los campos correspondientes de `obj` y esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7da89-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="7da89-128">Especialmente si el tipo de valor contiene campos que son tipos de referencia, se debe reemplazar el <xref:System.ValueType.Equals%28System.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="7da89-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="7da89-129">Esto puede mejorar el rendimiento y permiten representar mejor el significado de igualdad para el tipo.</span><span class="sxs-lookup"><span data-stu-id="7da89-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="7da89-130">Notas de la [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="7da89-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="7da89-131">Cuando se llama a la <xref:System.ValueType.Equals%2A> método en un [!INCLUDE[wrt](~/includes/wrt-md.md)] estructura, proporciona el comportamiento predeterminado para los tipos de valor que no se invalidan <xref:System.ValueType.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="7da89-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="7da89-132">Esto forma parte de la compatibilidad que .NET Framework proporciona para el [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [soporte técnico para Windows Store aplicaciones de .NET Framework y Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="7da89-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="7da89-133">no se pueden invalidar las estructuras <xref:System.ValueType.Equals%2A>, incluso si se escriben con C# o Visual Basic, ya que no tienen métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-133">structures can't override <xref:System.ValueType.Equals%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="7da89-134">(Además, las estructuras en el [!INCLUDE[wrt](~/includes/wrt-md.md)] no heredar <xref:System.ValueType>.) Sin embargo, parece que tienen <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, y <xref:System.ValueType.GetHashCode%2A> métodos al usarlos en el código de C# o Visual Basic y .NET Framework proporciona el comportamiento predeterminado de estos métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7da89-135">En el ejemplo siguiente se muestra cómo el <xref:System.ValueType.Equals%2A> método puede reemplazarse por un tipo de valor derivado.</span><span class="sxs-lookup"><span data-stu-id="7da89-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7da89-136">Devuelve el código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7da89-136">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="7da89-137">Entero de 32 bits con signo, que es el código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7da89-137">A 32-bit signed integer that is the hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7da89-138">El <xref:System.ValueType.GetHashCode%2A> método se aplica a tipos derivados de <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="7da89-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="7da89-139">Uno o varios campos del tipo derivado se usa para calcular el valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="7da89-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="7da89-140">Si se llama el tipo derivado `GetHashCode` método, el valor devuelto no es probable que sea adecuado para su uso como una clave en una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="7da89-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="7da89-141">Además, si cambia el valor de uno o varios de esos campos, el valor devuelto puede volverse no es adecuado para su uso como una clave en una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="7da89-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="7da89-142">En cualquier caso, considere la posibilidad de escribir su propia implementación de la <xref:System.ValueType.GetHashCode%2A> método que mejor representa el concepto de un código hash para el tipo.</span><span class="sxs-lookup"><span data-stu-id="7da89-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="7da89-143">Para obtener más información, vea <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> y <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7da89-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="7da89-144">Notas de la [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="7da89-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="7da89-145">Cuando se llama a la <xref:System.ValueType.GetHashCode%2A> método en un [!INCLUDE[wrt](~/includes/wrt-md.md)] estructura, proporciona el comportamiento predeterminado para los tipos de valor que no se invalidan <xref:System.ValueType.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="7da89-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="7da89-146">Esto forma parte de la compatibilidad que .NET Framework proporciona para el [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [soporte técnico para Windows Store aplicaciones de .NET Framework y Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="7da89-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="7da89-147">no se pueden invalidar las estructuras <xref:System.ValueType.GetHashCode%2A>, incluso si se escriben con C# o Visual Basic, ya que no tienen métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-147">structures can't override <xref:System.ValueType.GetHashCode%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="7da89-148">(Además, las estructuras en el [!INCLUDE[wrt](~/includes/wrt-md.md)] no heredar <xref:System.ValueType>.) Sin embargo, parece que tienen <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, y <xref:System.ValueType.GetHashCode%2A> métodos al usarlos en el código de C# o Visual Basic y .NET Framework proporciona el comportamiento predeterminado de estos métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7da89-149">En el ejemplo siguiente se muestra cómo el <xref:System.ValueType.GetHashCode%2A> método puede reemplazarse por un tipo de valor derivado.</span><span class="sxs-lookup"><span data-stu-id="7da89-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7da89-150">Devuelve el nombre de tipo completo de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="7da89-150">Returns the fully qualified type name of this instance.</span></span></summary>
        <returns><span data-ttu-id="7da89-151">Nombre completo del tipo.</span><span class="sxs-lookup"><span data-stu-id="7da89-151">The fully qualified type name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7da89-152">El <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> reemplazos de método la <xref:System.Object.ToString%2A?displayProperty=nameWithType> método y proporciona la implementación predeterminada de la `ToString` método para tipos de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="7da89-153">(Tipos de valor son tipos definidos por el `struct` palabra clave en C# y por la `Structure`... `End Structure` construir en Visual Basic.) Funcionalmente, sin embargo, la implementación es es igual que <xref:System.Object.ToString%2A?displayProperty=nameWithType>: el método devuelve el nombre de tipo completo.</span><span class="sxs-lookup"><span data-stu-id="7da89-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="7da89-154">Valor de tipos definidos por el `struct` palabra clave en C# y el `Structure`... `End Structure` construcción en Visual Basic normalmente invalidar el <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método para proporcionar una representación de cadena más significativa del tipo de valor.</span><span class="sxs-lookup"><span data-stu-id="7da89-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="7da89-155">En el siguiente ejemplo se ilustra la diferencia.</span><span class="sxs-lookup"><span data-stu-id="7da89-155">The following example illustrates the difference.</span></span> <span data-ttu-id="7da89-156">Define dos tipos de valor, `EmployeeA` y `EmployeeB`, crea una instancia de cada uno y llama a su `ToString` método.</span><span class="sxs-lookup"><span data-stu-id="7da89-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="7da89-157">Dado que el `EmployeeA` estructura no invalida el <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> método, muestra solo el nombre de tipo completo.</span><span class="sxs-lookup"><span data-stu-id="7da89-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="7da89-158">El `EmployeeB.ToString` método, por otro lado, proporciona información significativa sobre el objeto.</span><span class="sxs-lookup"><span data-stu-id="7da89-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="7da89-159">Tenga en cuenta que, aunque los tipos de enumeración también son tipos de valor, derivan de la <xref:System.Enum> clase, lo que invalida <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7da89-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="7da89-160">Notas para el tiempo de ejecución de Windows</span><span class="sxs-lookup"><span data-stu-id="7da89-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="7da89-161">Cuando se llama a la <xref:System.ValueType.ToString%2A> método en un [!INCLUDE[wrt](~/includes/wrt-md.md)] estructura, proporciona el comportamiento predeterminado para los tipos de valor que no se invalidan <xref:System.ValueType.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="7da89-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don't override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="7da89-162">Esto forma parte de la compatibilidad que .NET Framework proporciona para el [!INCLUDE[wrt](~/includes/wrt-md.md)] (consulte [soporte técnico para Windows Store aplicaciones de .NET Framework y Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span><span class="sxs-lookup"><span data-stu-id="7da89-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)] <span data-ttu-id="7da89-163">no se pueden invalidar las estructuras <xref:System.ValueType.ToString%2A>, incluso si se escriben con C# o Visual Basic, ya que no tienen métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-163">structures can't override <xref:System.ValueType.ToString%2A>, even if they're written with C# or Visual Basic, because they can't have methods.</span></span> <span data-ttu-id="7da89-164">(Además, las estructuras en el [!INCLUDE[wrt](~/includes/wrt-md.md)] no heredar <xref:System.ValueType>.) Sin embargo, parece que tienen <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, y <xref:System.ValueType.GetHashCode%2A> métodos al usarlos en el código de C# o Visual Basic y .NET Framework proporciona el comportamiento predeterminado de estos métodos.</span><span class="sxs-lookup"><span data-stu-id="7da89-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don't inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>