<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1c8027deccbb0cbc33ff72a093a2af3b144d320f" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58559630" /></Metadata><TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="661d3-101">Tipo de datos de la tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="661d3-102">Representa una tabla para un tipo determinado en la base de datos subyacente.</span><span class="sxs-lookup"><span data-stu-id="661d3-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-103">Esta clase le permite consultar a través de la tabla y agregar, quitar y asociar los objetos.</span><span class="sxs-lookup"><span data-stu-id="661d3-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="661d3-104">Una aplicación puede tener acceso a un <xref:System.Data.Linq.Table%601> a través de la instancia <xref:System.Data.Linq.DataContext.GetTable%2A> o por medio de una propiedad fuertemente tipada para fuertemente tipado <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="661d3-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="661d3-105">Es decir, cuando el diseñador genera un objeto DataContext, genera las propiedades para representar cada tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="661d3-106">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="661d3-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="661d3-107">Para este DataContext fuertemente tipado, puede tener acceso a la propiedad de los usuarios para obtener `Table<User>`.</span><span class="sxs-lookup"><span data-stu-id="661d3-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="661d3-108">Adjunta una entidad a <see cref="T:System.Data.Linq.DataContext" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-109">Use la `Attach` métodos con entidades que se han creado en uno <xref:System.Data.Linq.DataContext>serializado en un cliente y, a continuación, deserializar (con la intención de realizar una actualización o la operación de eliminación).</span><span class="sxs-lookup"><span data-stu-id="661d3-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="661d3-110">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="661d3-111">No intente `Attach` una entidad que no se ha desasociado mediante la serialización.</span><span class="sxs-lookup"><span data-stu-id="661d3-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="661d3-112">Las entidades que no se han serializado mantienen asociaciones con cargadores diferidos que se pueden producir resultados inesperados si un segundo contexto de datos realiza un seguimiento de la entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="661d3-113">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-114">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-115">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="661d3-116">`Attach` asocia todas las entidades en el gráfico de objetos del objeto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="661d3-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="661d3-117">Por ejemplo, el siguiente código de C#:</span><span class="sxs-lookup"><span data-stu-id="661d3-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="661d3-118">El código de Visual Basic equivalente es:</span><span class="sxs-lookup"><span data-stu-id="661d3-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="661d3-119">Una llamada a `Attach` en `Employee` adjunta empleado, principal y secundario, porque el `Employee` tiene relaciones con la principal y secundario.</span><span class="sxs-lookup"><span data-stu-id="661d3-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="661d3-120">Debe llamar explícitamente a `InsertOnSubmit` cambiar el estado de adjunto a insertado.</span><span class="sxs-lookup"><span data-stu-id="661d3-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-121">Valores originales de la entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-121">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="661d3-122">Adjunta una entidad desconectada o "separada" a un nuevo objeto <see cref="T:System.Data.Linq.DataContext" /> cuando se requieren los valores originales para las comprobaciones de simultaneidad optimista.</span><span class="sxs-lookup"><span data-stu-id="661d3-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-123">Use la `Attach` métodos con entidades que se han creado en uno <xref:System.Data.Linq.DataContext>serializado en un cliente y, a continuación, deserializar atrás para realizar una actualización o la operación de eliminación.</span><span class="sxs-lookup"><span data-stu-id="661d3-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="661d3-124">Dado que el nuevo <xref:System.Data.Linq.DataContext> no tiene ninguna manera de seguimiento de cuáles fueron los valores originales de una entidad desconectada, el cliente es responsable de proporcionar esos valores.</span><span class="sxs-lookup"><span data-stu-id="661d3-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="661d3-125">En esta versión de <xref:System.Data.Linq.Table%601.Attach%2A>, se supone que la entidad esté en su estado original del valor.</span><span class="sxs-lookup"><span data-stu-id="661d3-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="661d3-126">Después de llamar a este método, puede, a continuación, actualizar sus campos, por ejemplo con datos adicionales enviados desde el cliente.</span><span class="sxs-lookup"><span data-stu-id="661d3-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="661d3-127">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-128">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-129">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="661d3-130">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="661d3-131">No intente `Attach` una entidad que no se ha desasociado mediante la serialización.</span><span class="sxs-lookup"><span data-stu-id="661d3-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="661d3-132">Las entidades que no se han serializado mantienen asociaciones con cargadores diferidos que se pueden producir resultados inesperados si un segundo contexto de datos realiza un seguimiento de la entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-133">Entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-133">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="661d3-134"><see langword="true" /> para adjuntar la entidad como modificada; <see langword="false" /> para adjuntar la entidad como sin modificar.</span><span class="sxs-lookup"><span data-stu-id="661d3-134"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="661d3-135">Adjunta una entidad a <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-136">Si se asocia *como modificada*, deberá declarar un miembro de la versión de la entidad o no debe participar en la comprobación de conflicto de actualización.</span><span class="sxs-lookup"><span data-stu-id="661d3-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="661d3-137">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-138">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-139">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-140">Entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-140">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="661d3-141">Instancia del mismo tipo de entidad con miembros de datos que contienen los valores originales.</span><span class="sxs-lookup"><span data-stu-id="661d3-141">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="661d3-142">Adjunta una entidad a <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado especificando la entidad y su estado original.</span><span class="sxs-lookup"><span data-stu-id="661d3-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-143">En el ejemplo siguiente, la `Customer` objeto ya está configurado correctamente.</span><span class="sxs-lookup"><span data-stu-id="661d3-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="661d3-144">Puede llamar a `Attach` sin tener que volver a reproducir las actualizaciones.</span><span class="sxs-lookup"><span data-stu-id="661d3-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="661d3-145">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-146">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-147">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="661d3-148">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-149">Si se asocia como modificada, la entidad deberá declarar a un miembro de versión o no debe participar en la comprobación de conflicto de actualización.</span><span class="sxs-lookup"><span data-stu-id="661d3-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="661d3-150">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-151">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-152">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="661d3-153">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="661d3-154">Tipo de entidades que van a asociarse.</span><span class="sxs-lookup"><span data-stu-id="661d3-154">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="661d3-155">Colección de entidades.</span><span class="sxs-lookup"><span data-stu-id="661d3-155">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="661d3-156">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-157">Este método asocia todas las entidades de una colección a un nuevo <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="661d3-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="661d3-158">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-159">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-160">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="661d3-161">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="661d3-162">Tipo de entidades que van a asociarse.</span><span class="sxs-lookup"><span data-stu-id="661d3-162">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="661d3-163">Colección de entidades.</span><span class="sxs-lookup"><span data-stu-id="661d3-163">The collection of entities.</span></span></param>
        <param name="asModified"><span data-ttu-id="661d3-164">Es <see langword="true" /> si el objeto tiene una marca de tiempo o un miembro RowVersion; es <see langword="false" /> si se usan los valores originales para la comprobación de simultaneidad optimista.</span><span class="sxs-lookup"><span data-stu-id="661d3-164"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="661d3-165">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-166">Este método asocia todas las entidades de una colección a la <xref:System.Data.Linq.DataContext> en cualquiera un *modificado* o *sin modificar* estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="661d3-167">Si se asocia como modificada, la entidad deberá declarar a un miembro de versión o no debe participar en la comprobación de conflicto de actualización.</span><span class="sxs-lookup"><span data-stu-id="661d3-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="661d3-168">Si la conexión como sin modificar, se supone que la entidad representa el valor original.</span><span class="sxs-lookup"><span data-stu-id="661d3-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="661d3-169">Después de llamar a este método, se pueden modificar los campos de entidad con otra información del cliente antes de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="661d3-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="661d3-170">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="661d3-171">Cuando se adjunta una entidad nueva, aplaza los cargadores de las colecciones secundarias (por ejemplo, `EntitySet` colecciones de entidades de tablas asociadas) se inicializan.</span><span class="sxs-lookup"><span data-stu-id="661d3-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="661d3-172">Cuando <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama, los miembros del elemento secundario colecciones se colocan en un `Unmodified` estado.</span><span class="sxs-lookup"><span data-stu-id="661d3-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="661d3-173">Para actualizar los miembros de una colección secundaria, debe llamar explícitamente `Attach` y especificar esa entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="661d3-174">El ejemplo siguiente muestra cómo actualizar un `Order` objeto en otro <xref:System.Data.Linq.DataContext> instancia.</span><span class="sxs-lookup"><span data-stu-id="661d3-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="661d3-175">El ejemplo se supone que tiene una conexión a una base de datos y ha realizado un [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] archivo para ella (en este caso, la base de datos de ejemplo Northwind).</span><span class="sxs-lookup"><span data-stu-id="661d3-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="661d3-176">En el ejemplo siguiente, un objeto de entidad que se adjuntará tiene una relación de clave externa con otro objeto y se almacenan en la memoria caché pero no asociado.</span><span class="sxs-lookup"><span data-stu-id="661d3-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="661d3-177">Cuando se llama a <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, `ChangeProcessor` agrega un `Insert` operación para todos los objetos de clave externos.</span><span class="sxs-lookup"><span data-stu-id="661d3-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="661d3-178">Esto es un efecto cuando una instancia de entidad se vuelve a usar en otra <xref:System.Data.Linq.DataContext> instancia.</span><span class="sxs-lookup"><span data-stu-id="661d3-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="661d3-179">Por este motivo, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] no admite la reutilización de los objetos.</span><span class="sxs-lookup"><span data-stu-id="661d3-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="661d3-180">El ejemplo siguiente muestra un escenario en el que un cliente ha cancelado todos los pedidos y clientes B ha asumido la titularidad de ellos.</span><span class="sxs-lookup"><span data-stu-id="661d3-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="661d3-181">Puede asociar todos los pedidos de un cliente al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="661d3-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-182">Obtiene el objeto <see cref="T:System.Data.Linq.DataContext" /> utilizado para recuperar este <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="661d3-183">Contexto de datos que se ha usado para recuperar esta tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-183">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="661d3-184">Tipo de los elementos que se van a eliminar.</span><span class="sxs-lookup"><span data-stu-id="661d3-184">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="661d3-185">Entidades que se van a eliminar.</span><span class="sxs-lookup"><span data-stu-id="661d3-185">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="661d3-186">Coloca todas las entidades de la colección en un estado <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-187">Las entidades que se colocan en el estado de eliminación pendiente con este método no desaparecen de resultados de la consulta hasta después de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="661d3-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="661d3-188">Las entidades desconectadas deben estar conectadas antes de que se pueden eliminar.</span><span class="sxs-lookup"><span data-stu-id="661d3-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="661d3-189">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="661d3-190">El siguiente fragmento de código C# muestra un uso de este método:</span><span class="sxs-lookup"><span data-stu-id="661d3-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="661d3-191">En Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="661d3-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-192">Entidad que se va a eliminar.</span><span class="sxs-lookup"><span data-stu-id="661d3-192">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="661d3-193">Coloca una entidad de esta tabla en un estado <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-194">La entidad quitada no desaparece en los resultados de consulta hasta después de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se llama.</span><span class="sxs-lookup"><span data-stu-id="661d3-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="661d3-195">Las entidades desconectadas en primer lugar deben asociarse antes de que se pueden eliminar.</span><span class="sxs-lookup"><span data-stu-id="661d3-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="661d3-196">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="661d3-197">no admite ni reconoce las operaciones de eliminación en cascada.</span><span class="sxs-lookup"><span data-stu-id="661d3-197">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="661d3-198">Si desea eliminar una fila en una tabla que tiene restricciones, deberá establecer el `ON DELETE CASCADE` de regla en la restricción de clave externa de la base de datos o utilizar su propio código para eliminar primero los objetos secundarios que impiden que el objeto primario que se elimine.</span><span class="sxs-lookup"><span data-stu-id="661d3-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="661d3-199">De lo contrario, se inicia una excepción.</span><span class="sxs-lookup"><span data-stu-id="661d3-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-200">Obtiene un enumerador que recorre en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-200">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="661d3-201">Enumerador que se puede utilizar para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-201">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-202">Entidad de la que se va a obtener la matriz.</span><span class="sxs-lookup"><span data-stu-id="661d3-202">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="661d3-203">Devuelve una matriz de los miembros modificados que contienen sus valores actuales y originales.</span><span class="sxs-lookup"><span data-stu-id="661d3-203">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="661d3-204">Matriz de los miembros modificados que contienen sus valores actuales y originales.</span><span class="sxs-lookup"><span data-stu-id="661d3-204">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-205">Crea una nueva lista para el enlace a un origen de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-205">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="661d3-206"><see cref="T:System.ComponentModel.IBindingList" /> nueva para el enlace a un origen de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-207">La lista devuelta admite operaciones estándares, como adiciones, eliminaciones, inserciones y actualizaciones, pero el programador debe administrar explícitamente la guarda.</span><span class="sxs-lookup"><span data-stu-id="661d3-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-208">Entidad cuyo estado original se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="661d3-208">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="661d3-209">Devuelve una instancia de <see cref="T:System.Data.Linq.Table`1" /> que contiene el estado original de la entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="661d3-210">Instancia de <see cref="T:System.Data.Linq.Table`1" /> que contiene el estado original de la entidad.</span><span class="sxs-lookup"><span data-stu-id="661d3-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-211">Este método devuelve el estado original de una entidad desde que se creó o se adjunta a la actual <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="661d3-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="661d3-212">El estado original de una entidad que se serializa y deserializa debe ser proporciona un mecanismo de seguimiento independiente y proporcionado cuando se adjunta la entidad a un nuevo <xref:System.Data.Linq.DataContext>.</span><span class="sxs-lookup"><span data-stu-id="661d3-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="661d3-213">Para obtener más información, consulte [recuperación de datos y operaciones CUD en aplicaciones de N niveles (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span><span class="sxs-lookup"><span data-stu-id="661d3-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="661d3-214">Tipo de elementos que van a insertarse.</span><span class="sxs-lookup"><span data-stu-id="661d3-214">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="661d3-215">Entidades que se van a agregar.</span><span class="sxs-lookup"><span data-stu-id="661d3-215">The entities to add.</span></span></param>
        <summary><span data-ttu-id="661d3-216">Agrega todas las entidades de una colección a <see cref="T:System.Data.Linq.DataContext" /> en un estado <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-217">Las entidades agregadas no estarán en los resultados de la consulta hasta después de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se ha llamado.</span><span class="sxs-lookup"><span data-stu-id="661d3-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-218">Entidad que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="661d3-218">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="661d3-219">Agrega una entidad en un estado <see langword="pending insert" /> a este <see cref="T:System.Data.Linq.Table`1" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-220">La entidad agregada no aparecerá en los resultados de la consulta de esta tabla hasta después de <xref:System.Data.Linq.DataContext.SubmitChanges%2A> se ha llamado.</span><span class="sxs-lookup"><span data-stu-id="661d3-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-221">Obtiene un valor que indica si el tipo de las entidades contenidas en esta instancia de <see cref="T:System.Data.Linq.Table`1" /> tiene una clave principal.</span><span class="sxs-lookup"><span data-stu-id="661d3-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value><span data-ttu-id="661d3-222"><see langword="true" /> si el tipo de entidad no tiene una clave principal; de lo contrario, devuelve <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-222"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-223">Devuelve un enumerador que procesa una iteración en la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="661d3-224">Enumerador que se puede utilizar para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-225">Devuelve un enumerador que procesa una iteración en la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-225">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="661d3-226">Enumerador que se puede utilizar para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="661d3-226">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-227">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-228">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="661d3-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-229">Obtiene un valor que indica si la colección contiene objetos <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value><span data-ttu-id="661d3-230"><see langword="true" /> si la colección es una colección de objetos <see cref="T:System.Collections.IList" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-230"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-231">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-232">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="661d3-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-233">Devuelve un <see cref="T:System.Collections.IList" /> que se puede enlazar a un origen de datos de un objeto que no implementa un <see cref="T:System.Collections.IList" /> por sí mismo.</span><span class="sxs-lookup"><span data-stu-id="661d3-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="661d3-234"><see cref="T:System.Collections.IList" /> que puede enlazarse a un origen de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-235">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-236">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.ComponentModel.IListSource>.</span><span class="sxs-lookup"><span data-stu-id="661d3-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="661d3-237">Permite asociar las entidades deserializadas a una nueva instancia de un objeto <see cref="T:System.Data.Linq.DataContext" /> de modo que se puedan actualizar o eliminar de la base de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-238">Entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-238">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="661d3-239">Asocia una entidad a <see cref="T:System.Data.Linq.DataContext" /> en un estado no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-240">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-241">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-242">Entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-242">The entity to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="661d3-243"><see langword="true" /> para adjuntar la entidad como modificada; <see langword="false" /> para adjuntar la entidad como sin modificar.</span><span class="sxs-lookup"><span data-stu-id="661d3-243"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="661d3-244">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-245">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-246">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-247">Entidad que se va a asociar.</span><span class="sxs-lookup"><span data-stu-id="661d3-247">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="661d3-248">Instancia del mismo tipo de entidad con miembros de datos que contienen los valores originales.</span><span class="sxs-lookup"><span data-stu-id="661d3-248">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="661d3-249">Adjunta una entidad a <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado especificando la entidad y su estado original.</span><span class="sxs-lookup"><span data-stu-id="661d3-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-250">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-251">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="661d3-252">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="661d3-253">Colección de entidades que se va a adjuntar.</span><span class="sxs-lookup"><span data-stu-id="661d3-253">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="661d3-254">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-255">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-256">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="661d3-257">Colección de entidades que se va a adjuntar.</span><span class="sxs-lookup"><span data-stu-id="661d3-257">The collection of entities to be attached.</span></span></param>
        <param name="asModified"><span data-ttu-id="661d3-258"><see langword="true" /> para adjuntar las entidades como modificadas; <see langword="false" /> para adjuntar las entidades como sin modificar.</span><span class="sxs-lookup"><span data-stu-id="661d3-258"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="661d3-259">Asocia todas las entidades de una colección al objeto <see cref="T:System.Data.Linq.DataContext" /> en un estado modificado o no modificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-260">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-261">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="661d3-262">Entidades que se van a quitar.</span><span class="sxs-lookup"><span data-stu-id="661d3-262">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="661d3-263">Coloca todas las entidades de la colección en un estado <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-264">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-265">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-266">Entidad que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="661d3-266">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="661d3-267">Coloca una entidad de esta tabla en un estado <see langword="pending delete" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-268">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-269">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] <span data-ttu-id="661d3-270">no admite ni reconoce las operaciones de eliminación en cascada.</span><span class="sxs-lookup"><span data-stu-id="661d3-270">does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="661d3-271">Si desea eliminar una fila en una tabla que tiene restricciones, deberá establecer el `ON DELETE CASCADE` de regla en la restricción de clave externa de la base de datos o utilizar su propio código para eliminar primero los objetos secundarios que impiden que el objeto primario que se elimine.</span><span class="sxs-lookup"><span data-stu-id="661d3-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="661d3-272">De lo contrario, se inicia una excepción.</span><span class="sxs-lookup"><span data-stu-id="661d3-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-273">Entidad de la que se van a obtener los miembros modificados.</span><span class="sxs-lookup"><span data-stu-id="661d3-273">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="661d3-274">Devuelve una matriz de los miembros modificados que contienen sus valores actuales y originales.</span><span class="sxs-lookup"><span data-stu-id="661d3-274">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="661d3-275">Matriz de miembros modificados.</span><span class="sxs-lookup"><span data-stu-id="661d3-275">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-276">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-277">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-278">Entidad a cuyo estado original va a obtenerse acceso.</span><span class="sxs-lookup"><span data-stu-id="661d3-278">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="661d3-279">Recupera los valores originales de una entidad determinada.</span><span class="sxs-lookup"><span data-stu-id="661d3-279">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="661d3-280">Copia de la entidad original.</span><span class="sxs-lookup"><span data-stu-id="661d3-280">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-281">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-282">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="661d3-283">Colección de entidades que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="661d3-283">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="661d3-284">Agrega todas las entidades de una colección a <see cref="T:System.Data.Linq.DataContext" /> en un estado <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-285">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-286">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="661d3-287">Entidad que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="661d3-287">The entity to add.</span></span></param>
        <summary><span data-ttu-id="661d3-288">Agrega a esta tabla una entidad en un estado <see langword="pending insert" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-289">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-290">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Data.Linq.ITable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Linq::IQueryable::ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-291">Obtiene el tipo de los elementos que se devuelven cuando se ejecuta el árbol de expresión asociado a este objeto.</span><span class="sxs-lookup"><span data-stu-id="661d3-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="661d3-292">Tipo de los elementos que se devuelven cuando se ejecuta el árbol de expresión asociado a este objeto.</span><span class="sxs-lookup"><span data-stu-id="661d3-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-293">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-294">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System::Linq::IQueryable::Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-295">Obtiene el árbol de expresión que está asociado a esta instancia de <see cref="T:System.Linq.IQueryable" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="661d3-296">Objeto <see cref="T:System.Linq.Expressions.Expression" /> que está asociado a esta instancia de <see cref="T:System.Linq.IQueryable" />.</span><span class="sxs-lookup"><span data-stu-id="661d3-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-297">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-298">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System::Linq::IQueryable::Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661d3-299">Obtiene el proveedor de consultas que está asociado a este origen de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-299">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="661d3-300">El objeto <see cref="T:System.Linq.IQueryProvider" /> que está asociado a este origen de datos.</span><span class="sxs-lookup"><span data-stu-id="661d3-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-301">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-302">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryable>.</span><span class="sxs-lookup"><span data-stu-id="661d3-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="661d3-303">La expresión de consulta desde la que se realiza la evaluación.</span><span class="sxs-lookup"><span data-stu-id="661d3-303">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="661d3-304">Construye un objeto <see cref="T:System.Linq.IQueryable" /> que puede evaluar la consulta representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="661d3-305"><see cref="T:System.Linq.IQueryable" /> que puede evaluar la consulta representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-306">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-307">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="661d3-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="661d3-308">Tipo de datos de la tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-308">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="661d3-309">La expresión de consulta desde la que se realiza la evaluación.</span><span class="sxs-lookup"><span data-stu-id="661d3-309">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="661d3-310">Construye un objeto <see cref="T:System.Linq.IQueryable`1" /> que puede evaluar la consulta representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="661d3-311"><see cref="T:System.Linq.IQueryable`1" /> que puede evaluar la consulta representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-312">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-313">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="661d3-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="661d3-314">Expresión de consulta que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="661d3-314">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="661d3-315">Ejecuta la consulta representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-315">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="661d3-316">Valor que es el resultado de ejecutar la consulta especificada.</span><span class="sxs-lookup"><span data-stu-id="661d3-316">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-317">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-318">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="661d3-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="661d3-319">Tipo de datos de la tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-319">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="661d3-320">Expresión de consulta que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="661d3-320">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="661d3-321">Ejecuta la consulta fuertemente tipada representada por el árbol de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="661d3-321">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="661d3-322">Valor que es el resultado de ejecutar la consulta especificada.</span><span class="sxs-lookup"><span data-stu-id="661d3-322">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661d3-323">Este miembro es una implementación explícita de un miembro de interfaz.</span><span class="sxs-lookup"><span data-stu-id="661d3-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661d3-324">Solo se puede utilizar cuando la instancia de <xref:System.Data.Linq.Table%601> se convierte en una interfaz <xref:System.Linq.IQueryProvider>.</span><span class="sxs-lookup"><span data-stu-id="661d3-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661d3-325">Devuelve una cadena que representa la tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-325">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="661d3-326">Representación de cadena de la tabla.</span><span class="sxs-lookup"><span data-stu-id="661d3-326">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>