<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68d7a106a236150ca9a1a8a2a5972fb7ae8eee39" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39833081" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="974c7-101">Proporciona la carga inmediata y el filtrado de los datos relacionados.</span><span class="sxs-lookup"><span data-stu-id="974c7-101">Provides for immediate loading and filtering of related data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a><span data-ttu-id="974c7-102">General</span><span class="sxs-lookup"><span data-stu-id="974c7-102">General</span></span>  
 <span data-ttu-id="974c7-103">Al consultar un objeto, en realidad se recupera únicamente el objeto solicitado.</span><span class="sxs-lookup"><span data-stu-id="974c7-103">When you query for an object, you actually retrieve only the object you requested.</span></span> <span data-ttu-id="974c7-104">El *relacionados* objetos no se capturan automáticamente al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="974c7-104">The *related* objects are not automatically fetched at the same time.</span></span> <span data-ttu-id="974c7-105">(Para obtener más información, consulte [consultas en varias relaciones](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span><span class="sxs-lookup"><span data-stu-id="974c7-105">(For more information, see [Querying Across Relationships](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)</span></span>  
  
 <span data-ttu-id="974c7-106">La <xref:System.Data.Linq.DataLoadOptions> clase proporciona dos métodos para lograr la carga inmediata de los datos relacionados especificados.</span><span class="sxs-lookup"><span data-stu-id="974c7-106">The <xref:System.Data.Linq.DataLoadOptions> class provides two methods to achieve immediate loading of specified related data.</span></span> <span data-ttu-id="974c7-107">El <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> método permite la carga inmediata de los datos relacionados con el destino principal.</span><span class="sxs-lookup"><span data-stu-id="974c7-107">The <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> method allows for immediate loading of data related to the main target.</span></span> <span data-ttu-id="974c7-108">El <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> método permite filtrar los objetos relacionados.</span><span class="sxs-lookup"><span data-stu-id="974c7-108">The <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> method allows for filtering related objects.</span></span>  
  
## <a name="rules"></a><span data-ttu-id="974c7-109">Reglas</span><span class="sxs-lookup"><span data-stu-id="974c7-109">Rules</span></span>  
 <span data-ttu-id="974c7-110">Tenga en cuenta las siguientes reglas sobre <xref:System.Data.Linq.DataLoadOptions> uso:</span><span class="sxs-lookup"><span data-stu-id="974c7-110">Note the following rules regarding <xref:System.Data.Linq.DataLoadOptions> usage:</span></span>  
  
-   <span data-ttu-id="974c7-111">Asignar un <xref:System.Data.Linq.DataLoadOptions> a un <xref:System.Data.Linq.DataContext> una vez ejecutada la primera consulta genera una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-111">Assigning a <xref:System.Data.Linq.DataLoadOptions> to a <xref:System.Data.Linq.DataContext> after the first query has been executed generates an exception.</span></span>  
  
-   <span data-ttu-id="974c7-112">Modificar un <xref:System.Data.Linq.DataLoadOptions> después de que se ha asignado a un <xref:System.Data.Linq.DataContext> genera una excepción</span><span class="sxs-lookup"><span data-stu-id="974c7-112">Modifying a <xref:System.Data.Linq.DataLoadOptions> after it has been assigned to a <xref:System.Data.Linq.DataContext> generates an exception</span></span>  
  
## <a name="cycle-handling"></a><span data-ttu-id="974c7-113">Control de ciclos</span><span class="sxs-lookup"><span data-stu-id="974c7-113">Cycle Handling</span></span>  
 <span data-ttu-id="974c7-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> y <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directivas no deben crear ciclos.</span><span class="sxs-lookup"><span data-stu-id="974c7-114"><xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> and <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directives must not create cycles.</span></span> <span data-ttu-id="974c7-115">El siguiente figuran algunos ejemplos de tales gráficos:</span><span class="sxs-lookup"><span data-stu-id="974c7-115">The following represent examples of such graphs:</span></span>  
  
-   <span data-ttu-id="974c7-116">Ejemplo 1: Self recursiva</span><span class="sxs-lookup"><span data-stu-id="974c7-116">Example 1: Self recursive</span></span>  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   <span data-ttu-id="974c7-117">Ejemplo 2: Punteros alternativos</span><span class="sxs-lookup"><span data-stu-id="974c7-117">Example 2: Back-pointers</span></span>  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   <span data-ttu-id="974c7-118">Ejemplo 3: Ciclos más largos</span><span class="sxs-lookup"><span data-stu-id="974c7-118">Example 3: Longer cycles</span></span>  
  
     <span data-ttu-id="974c7-119">Aunque esto no debería ocurrir en un modelo normalizado bien, es posible.</span><span class="sxs-lookup"><span data-stu-id="974c7-119">Although this should not occur in a well-normalized model, it is possible.</span></span>  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   <span data-ttu-id="974c7-120">: Ejemplo 4 subconsultas recursivas</span><span class="sxs-lookup"><span data-stu-id="974c7-120">Example 4: Self recursive subQueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   <span data-ttu-id="974c7-121">Ejemplo 5: Subconsultas recursivas más largas</span><span class="sxs-lookup"><span data-stu-id="974c7-121">Example 5: Longer recursive subqueries</span></span>  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 <span data-ttu-id="974c7-122">Las siguientes son algunas reglas generales que le ayudarán a comprender lo que ocurre en estos escenarios.</span><span class="sxs-lookup"><span data-stu-id="974c7-122">The following are some general rules that help you understand what occurs in these scenarios.</span></span>  
  
 <span data-ttu-id="974c7-123">**LoadWith** cada llamada a <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> comprueba si se han introducido ciclos en el gráfico.</span><span class="sxs-lookup"><span data-stu-id="974c7-123">**LoadWith** Each call to <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> checks whether cycles have been introduced into the graph.</span></span> <span data-ttu-id="974c7-124">Si hay, como en los ejemplos 1, 2 y 3, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-124">If there are, as in Examples 1, 2, and 3, an exception is thrown.</span></span>  
  
 <span data-ttu-id="974c7-125">**AssociateWith** el motor en tiempo de ejecución no se aplican las cláusulas de subconsulta existentes a la relación en la expresión.</span><span class="sxs-lookup"><span data-stu-id="974c7-125">**AssociateWith** The engine at run time does not apply the existing SubQuery clauses to the relationship inside the expression.</span></span>  
  
-   <span data-ttu-id="974c7-126">En el ejemplo 4, el `Where` cláusula se ejecuta en todos los `A`, no solo los Sub filtraron por la propia expresión de subconsulta (ya que sería recursivo)</span><span class="sxs-lookup"><span data-stu-id="974c7-126">In Example 4, the `Where` clause is executed against all `A`, not just the ones sub-filtered by the SubQuery expression itself (because that would be recursive)</span></span>  
  
-   <span data-ttu-id="974c7-127">En el ejemplo 5, la primera `Where` cláusula se aplica a todos los `B`s, incluso si hay subconsultas en `B`.</span><span class="sxs-lookup"><span data-stu-id="974c7-127">In Example 5, the first `Where` clause is applied to all the `B`s, even though there are subqueries on `B`.</span></span> <span data-ttu-id="974c7-128">El segundo `Where` cláusula se aplica a todos los `A`subconsultas s, aunque no exista en `A`.</span><span class="sxs-lookup"><span data-stu-id="974c7-128">The second `Where` clause is applied to all the `A`s even though there are subqueries on `A`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="974c7-129">Al recuperar `Customers` desde la base de datos de ejemplo Northwind, puede usar <xref:System.Data.Linq.DataLoadOptions> para especificar que `Orders` es también va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="974c7-129">When you retrieve `Customers` from the Northwind sample database, you can use <xref:System.Data.Linq.DataLoadOptions> to specify that `Orders` is also to be retrieved.</span></span> <span data-ttu-id="974c7-130">Incluso puede especificar qué subconjunto de `Orders` para recuperar.</span><span class="sxs-lookup"><span data-stu-id="974c7-130">You can even specify which subset of `Orders` to retrieve.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="974c7-131">Inicializa una nueva instancia de la clase <see cref="T:System.Data.Linq.DataLoadOptions" />.</span><span class="sxs-lookup"><span data-stu-id="974c7-131">Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="974c7-132">Identifica la consulta que se va a utilizar en una propiedad o un campo uno a varios determinado.</span><span class="sxs-lookup"><span data-stu-id="974c7-132">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="974c7-133">Tenga en cuenta lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="974c7-133">Note the following:</span></span> 
<span data-ttu-id="974c7-134">Si la expresión no se inicia con un campo o una propiedad que representa una relación uno a varios, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-134">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
<span data-ttu-id="974c7-135">Si en la expresión aparece un operador que no sea válido, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-135">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="974c7-136">Los operadores válidos son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="974c7-136">Valid operators are as follows:</span></span> 
<span data-ttu-id="974c7-137">Where</span><span class="sxs-lookup"><span data-stu-id="974c7-137">Where</span></span> 
<span data-ttu-id="974c7-138">OrderBy</span><span class="sxs-lookup"><span data-stu-id="974c7-138">OrderBy</span></span> 
<span data-ttu-id="974c7-139">ThenBy</span><span class="sxs-lookup"><span data-stu-id="974c7-139">ThenBy</span></span> 
<span data-ttu-id="974c7-140">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="974c7-140">OrderByDescending</span></span> 
<span data-ttu-id="974c7-141">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="974c7-141">ThenByDescending</span></span> 
<span data-ttu-id="974c7-142">Take</span><span class="sxs-lookup"><span data-stu-id="974c7-142">Take</span></span></param>
        <summary><span data-ttu-id="974c7-143">Filtra los objetos recuperados para una relación concreta.</span><span class="sxs-lookup"><span data-stu-id="974c7-143">Filters the objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="974c7-144">En el ejemplo siguiente, el bucle interior recorre en iteración los sólo `Orders` que no se han enviado hoy en día.</span><span class="sxs-lookup"><span data-stu-id="974c7-144">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="974c7-145">Tipo en el que se realizan las consultas.</span><span class="sxs-lookup"><span data-stu-id="974c7-145">The type that is queried against.</span></span>  
  
<span data-ttu-id="974c7-146">Si se trata de un tipo no asignado, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-146">If the type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="974c7-147">Identifica la consulta que se va a utilizar en una propiedad o un campo uno a varios determinado.</span><span class="sxs-lookup"><span data-stu-id="974c7-147">Identifies the query to be used on a particular one-to-many field or property.</span></span> <span data-ttu-id="974c7-148">Tenga en cuenta lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="974c7-148">Note the following:</span></span> 
<span data-ttu-id="974c7-149">Si la expresión no se inicia con un campo o una propiedad que representa una relación uno a varios, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-149">If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.</span></span>  
  
<span data-ttu-id="974c7-150">Si en la expresión aparece un operador que no sea válido, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-150">If an operator other than a valid operator appears in the expression, an exception is thrown.</span></span> <span data-ttu-id="974c7-151">Los operadores válidos son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="974c7-151">Valid operators are as follows:</span></span> 
<span data-ttu-id="974c7-152">Where</span><span class="sxs-lookup"><span data-stu-id="974c7-152">Where</span></span> 
<span data-ttu-id="974c7-153">OrderBy</span><span class="sxs-lookup"><span data-stu-id="974c7-153">OrderBy</span></span> 
<span data-ttu-id="974c7-154">ThenBy</span><span class="sxs-lookup"><span data-stu-id="974c7-154">ThenBy</span></span> 
<span data-ttu-id="974c7-155">OrderByDescending</span><span class="sxs-lookup"><span data-stu-id="974c7-155">OrderByDescending</span></span> 
<span data-ttu-id="974c7-156">ThenByDescending</span><span class="sxs-lookup"><span data-stu-id="974c7-156">ThenByDescending</span></span> 
<span data-ttu-id="974c7-157">Take</span><span class="sxs-lookup"><span data-stu-id="974c7-157">Take</span></span></param>
        <summary><span data-ttu-id="974c7-158">Filtra los objetos recuperados para una relación concreta.</span><span class="sxs-lookup"><span data-stu-id="974c7-158">Filters objects retrieved for a particular relationship.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="974c7-159">Para obtener información acerca de cómo evitar los ciclos, vea <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="974c7-159">For information about how to avoid cycles, see <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="974c7-160">En el ejemplo siguiente, el bucle interior recorre en iteración los sólo `Orders` que no se han enviado hoy en día.</span><span class="sxs-lookup"><span data-stu-id="974c7-160">In the following example, the inner loop iterates only over those `Orders` that have not been shipped today.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo *  -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="974c7-161">Expresión lambda que identifica el material relacionado.</span><span class="sxs-lookup"><span data-stu-id="974c7-161">A lambda expression that identifies the related material.</span></span></param>
        <summary><span data-ttu-id="974c7-162">Recupera los datos especificados que están relacionados con el destino principal utilizando una expresión lambda.</span><span class="sxs-lookup"><span data-stu-id="974c7-162">Retrieves specified data related to the main target by using a lambda expression.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="974c7-163">En el siguiente ejemplo, se recuperan todos los `Orders` de todos los `Customers` de Londres cuando se ejecuta la consulta.</span><span class="sxs-lookup"><span data-stu-id="974c7-163">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="974c7-164">En consecuencia, el acceso posterior a la propiedad `Orders` de un objeto `Customer` no desencadena una nueva consulta de base de datos.</span><span class="sxs-lookup"><span data-stu-id="974c7-164">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="974c7-165">Tipo en el que se realizan las consultas.</span><span class="sxs-lookup"><span data-stu-id="974c7-165">Type that is queried against.</span></span>  
  
<span data-ttu-id="974c7-166">Si se trata de un tipo no asignado, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-166">If this type is unmapped, an exception is thrown.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="974c7-167">Identifica el campo o la propiedad que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="974c7-167">Identifies the field or property to be retrieved.</span></span>  
  
<span data-ttu-id="974c7-168">Si la expresión no identifica un campo o una propiedad que represente una relación uno a uno o uno a varios, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="974c7-168">If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</span></span></param>
        <summary><span data-ttu-id="974c7-169">Especifica los subobjetos que se van a recuperar cuando se envíe una consulta para un objeto de tipo T.</span><span class="sxs-lookup"><span data-stu-id="974c7-169">Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="974c7-170">No se puede especificar la carga de dos niveles de relaciones (por ejemplo, `Orders.OrderDetails`).</span><span class="sxs-lookup"><span data-stu-id="974c7-170">You cannot specify the loading of two levels of relationships (for example, `Orders.OrderDetails`).</span></span> <span data-ttu-id="974c7-171">En estos escenarios, debe especificar dos <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="974c7-171">In these scenarios you must specify two separate <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> methods.</span></span>  
  
 <span data-ttu-id="974c7-172">Para evitar los ciclos, vea la sección comentarios en la sección <xref:System.Data.Linq.DataLoadOptions>.</span><span class="sxs-lookup"><span data-stu-id="974c7-172">To avoid cycling, see Remarks section in <xref:System.Data.Linq.DataLoadOptions>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="974c7-173">En el siguiente ejemplo, se recuperan todos los `Orders` de todos los `Customers` de Londres cuando se ejecuta la consulta.</span><span class="sxs-lookup"><span data-stu-id="974c7-173">In the following example, all the `Orders` for all the `Customers` who are located in London are retrieved when the query is executed.</span></span> <span data-ttu-id="974c7-174">En consecuencia, el acceso posterior a la propiedad `Orders` de un objeto `Customer` no desencadena una nueva consulta de base de datos.</span><span class="sxs-lookup"><span data-stu-id="974c7-174">As a result, successive access to the `Orders` property on a `Customer` object does not trigger a new database query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>