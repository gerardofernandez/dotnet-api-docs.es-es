<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9110597651512178c67edfe7320178c083861fad" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55344918" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="19161-101">Funciona en los Componentes en cola en el control anómalo de errores de reproducción del servidor y errores del mecanismo de entrega de Message Queuing del cliente.</span><span class="sxs-lookup"><span data-stu-id="19161-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19161-102">La clase de excepción definida para el componente en el catálogo COM + implementa tanto <xref:System.EnterpriseServices.IPlaybackControl> y la interfaz de la clase original.</span><span class="sxs-lookup"><span data-stu-id="19161-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="19161-103">Las implementaciones de método de la interfaz de clase original se usan para realizar el control de excepciones para los métodos con error en la propia clase.</span><span class="sxs-lookup"><span data-stu-id="19161-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="19161-104">Se llamará después <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> o <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> para procesar las excepciones del método llamado originalmente.</span><span class="sxs-lookup"><span data-stu-id="19161-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="19161-105">El Reproductor de componentes en cola llama a los métodos de <xref:System.EnterpriseServices.IPlaybackControl> para informar al objeto de controlador de excepciones que un mensaje que se va a colocar en la cola de mensajes no enviados.</span><span class="sxs-lookup"><span data-stu-id="19161-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="19161-106">El Reproductor de componentes en cola, a continuación, llame al mismo método en el objeto de controlador de excepciones que generó el error en la llamada al método original.</span><span class="sxs-lookup"><span data-stu-id="19161-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="19161-107">El objeto de controlador de excepciones puede implementar una alternativa, por ejemplo, recopilar información de diagnóstico o generar un objeto o un mensaje que informa al cliente del problema.</span><span class="sxs-lookup"><span data-stu-id="19161-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="19161-108">Si la aplicación no implementa <xref:System.EnterpriseServices.IPlaybackControl>, el mensaje dudoso se coloca en la cola de mensajes no enviados cuando el Reproductor de componentes en cola agota todos los reintentos.</span><span class="sxs-lookup"><span data-stu-id="19161-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="19161-109">Un mensaje dudoso es un mensaje que no se puede procesar por algún motivo, quizás debido a un problema con el servidor o el sistema de cola.</span><span class="sxs-lookup"><span data-stu-id="19161-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="19161-110">La transacción se revierte y deja el mensaje dudoso a la parte superior de la cola.</span><span class="sxs-lookup"><span data-stu-id="19161-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="19161-111">Cuando el mensaje se quita de la cola de nuevo, se produce la misma condición.</span><span class="sxs-lookup"><span data-stu-id="19161-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="19161-112">Este mensaje puede continuar indefinidamente hasta que algo se realiza para corregir el problema.</span><span class="sxs-lookup"><span data-stu-id="19161-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="19161-113">El servicio de componentes en cola controla el mensaje dudoso mediante el uso de una serie de reintentos.</span><span class="sxs-lookup"><span data-stu-id="19161-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="19161-114">Después de varios intentos incorrectos, el mensaje se mueve a una cola definitiva de almacenamiento.</span><span class="sxs-lookup"><span data-stu-id="19161-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="19161-115">Los mensajes dudosos permanecen en la cola de almacenamiento hasta que se mueve manualmente mediante la herramienta Mover mensajes de componentes en cola.</span><span class="sxs-lookup"><span data-stu-id="19161-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="19161-116">La situación de mensajes dudosos también se puede resolver mediante programación, con el <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> método, que informa al autor del componente de servidor que han fallado todos los intentos de reproducir una activación aplazada.</span><span class="sxs-lookup"><span data-stu-id="19161-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="19161-117">Si detecta un mensaje dudoso, es posible que poder resolver rápidamente la causa subyacente del problema.</span><span class="sxs-lookup"><span data-stu-id="19161-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="19161-118">Por ejemplo, si el servidor estaba desconectado por algún motivo, puede poner en conexión el servidor.</span><span class="sxs-lookup"><span data-stu-id="19161-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="19161-119">Si no se puede resolver el problema rápidamente, puede generar automáticamente otra transacción que se notifique al solicitante que no se ha producido la transacción.</span><span class="sxs-lookup"><span data-stu-id="19161-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="19161-120">El solicitante puede hacer que una transacción de compensación que invierte el efecto de una transacción que ya se ha confirmado.</span><span class="sxs-lookup"><span data-stu-id="19161-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19161-121">Informa al componente controlador de excepciones del cliente de que todos los intentos de Message Queuing por entregar el mensaje al servidor se han rechazado y el mensaje ha terminado en la cola de mensajes no enviados Xact del cliente.</span><span class="sxs-lookup"><span data-stu-id="19161-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19161-122">A medida que llegan mensajes en la cola de mensajes no enviados Xact, COM + intenta invocar un controlador de excepciones de lado cliente relacionadas con la clase de servidor para enviar esta notificación.</span><span class="sxs-lookup"><span data-stu-id="19161-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="19161-123">Para ello, la primera llamada <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, a continuación, llamar a la versión de control de excepciones del método con error en el objeto de controlador de excepciones.</span><span class="sxs-lookup"><span data-stu-id="19161-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="19161-124">Este método de excepción, a continuación, puede tomar una acción de excepción, como registrar el error, enviar un mensaje de correo electrónico al administrador o llevar a cabo acción de compensación del lado cliente (invertir el efecto de una transacción anterior).</span><span class="sxs-lookup"><span data-stu-id="19161-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="19161-125">Si el método de excepción no se realiza correctamente, el mensaje permanece en la cola de mensajes no enviados Xact.</span><span class="sxs-lookup"><span data-stu-id="19161-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="19161-126">La cola de mensajes no enviados Xact puede verse en el Explorador de Microsoft Message Queue (MSMQ).</span><span class="sxs-lookup"><span data-stu-id="19161-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19161-127">Informa a la implementación de la clase de excepción del servidor de que todos los intentos de reproducir una activación aplazada en el servidor han sido erróneos y el mensaje se va a mover a su cola definitiva de almacenamiento.</span><span class="sxs-lookup"><span data-stu-id="19161-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19161-128">A medida que llegan mensajes en la cola de mensajes no enviados Xact, COM + intenta invocar un controlador de excepciones de lado servidor relacionadas con la clase de servidor para enviar esta notificación.</span><span class="sxs-lookup"><span data-stu-id="19161-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="19161-129">Para ello, la primera llamada <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, a continuación, llamar a la versión del método en el objeto de controlador de excepción con error de control de excepciones.</span><span class="sxs-lookup"><span data-stu-id="19161-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="19161-130">Este método de excepción, a continuación, puede tomar una acción de excepción, como registrar el error, enviar un mensaje de correo electrónico al administrador o llevar a cabo acción de compensación del lado cliente (invertir el efecto de una transacción anterior).</span><span class="sxs-lookup"><span data-stu-id="19161-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="19161-131">El objeto de servidor debe esforzarse para completar correctamente esta transacción.</span><span class="sxs-lookup"><span data-stu-id="19161-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="19161-132">En caso contrario, se requiere intervención manual para volver a procesar el mensaje.</span><span class="sxs-lookup"><span data-stu-id="19161-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="19161-133">Si el método de excepción no se realiza correctamente, el mensaje se mueve a la cola definitiva de almacenamiento.</span><span class="sxs-lookup"><span data-stu-id="19161-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>