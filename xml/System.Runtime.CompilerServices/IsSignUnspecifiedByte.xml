<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47dbaea5744a3bb0b065a4afbb61b524826d8d86" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37639178" /></Metadata><TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <TypeSignature Language="F#" Value="type IsSignUnspecifiedByte = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="744a3-101">Indica que un modificador funciona con signo y sin signo.</span><span class="sxs-lookup"><span data-stu-id="744a3-101">Indicates that a modifier is neither signed nor unsigned.</span></span> <span data-ttu-id="744a3-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="744a3-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="744a3-103">Algunos lenguajes de programación, como C++, reconocen tres distintos `char` valores: `signed char`, `unsigned char`, y `char`.</span><span class="sxs-lookup"><span data-stu-id="744a3-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="744a3-104">Para distinguir el sin modificar `char` tipo de los demás, el compilador de Microsoft C++ agrega el <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificador a cada `char` tipo emitido a un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="744a3-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="744a3-105">Los compiladores emiten modificadores personalizados dentro de los metadatos para cambiar la forma en que el compilador de just-in-time (JIT) controla los valores cuando el comportamiento predeterminado no es adecuado.</span><span class="sxs-lookup"><span data-stu-id="744a3-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="744a3-106">Cuando el compilador JIT encuentra un modificador personalizado, controla el valor de la manera que especifica el modificador.</span><span class="sxs-lookup"><span data-stu-id="744a3-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="744a3-107">Los compiladores pueden modificadores personalizados se aplican a métodos, parámetros y valores devueltos.</span><span class="sxs-lookup"><span data-stu-id="744a3-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="744a3-108">El compilador JIT debe responder a los modificadores obligatorios, pero puede pasar por alto los modificadores opcionales.</span><span class="sxs-lookup"><span data-stu-id="744a3-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="744a3-109">Puede emitir modificadores personalizados en los metadatos mediante una de las técnicas siguientes:</span><span class="sxs-lookup"><span data-stu-id="744a3-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="744a3-110">Uso de métodos en el <xref:System.Reflection.Emit.TypeBuilder> como clase <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, y <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="744a3-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="744a3-111">Generar un archivo de instrucciones de lenguaje intermedio (MSIL) de Microsoft que contenga llamadas a `modopt` y `modreq`y el ensamblado en el archivo con el [Ilasm.exe (ensamblador de IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="744a3-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="744a3-112">Uso de la API de reflexión no administrada.</span><span class="sxs-lookup"><span data-stu-id="744a3-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="744a3-113">En el ejemplo de código siguiente se crea un ensamblado con clases en el <xref:System.Reflection.Emit> espacio de nombres y emite el <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificador en ese ensamblado.</span><span class="sxs-lookup"><span data-stu-id="744a3-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>