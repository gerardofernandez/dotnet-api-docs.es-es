<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="487d8f80afe19a48da2d943e861f20020a0daf20" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52196574" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="076f6-101">Proporciona un medio para ejecutar de forma sincrónica o asincrónica un delegado.</span><span class="sxs-lookup"><span data-stu-id="076f6-101">Provides a way to synchronously or asynchronously execute a delegate.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="076f6-102">El <xref:System.ComponentModel.ISynchronizeInvoke> interfaz proporciona comunicación sincrónica y asincrónica entre objetos sobre la aparición de un evento.</span><span class="sxs-lookup"><span data-stu-id="076f6-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="076f6-103">Los objetos que implementan esta interfaz pueden recibir una notificación que se ha producido un evento y pueden responder a las consultas sobre el evento.</span><span class="sxs-lookup"><span data-stu-id="076f6-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="076f6-104">De este modo, los clientes pueden asegurarse de que una solicitud se procesó antes de enviar una solicitud posterior que depende de finalización de la primera.</span><span class="sxs-lookup"><span data-stu-id="076f6-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="076f6-105">La <xref:System.ComponentModel.ISynchronizeInvoke> clase proporciona dos maneras de invocar un proceso:</span><span class="sxs-lookup"><span data-stu-id="076f6-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="076f6-106">De forma asincrónica, utilizando el <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="076f6-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="076f6-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> inicia un proceso y, a continuación, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="076f6-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="076f6-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> que esperar hasta que el proceso iniciado por <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> se complete.</span><span class="sxs-lookup"><span data-stu-id="076f6-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="076f6-109">De forma sincrónica, mediante el uso de la <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="076f6-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="076f6-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> inicia un proceso, espera hasta que se complete y, a continuación, devuelve.</span><span class="sxs-lookup"><span data-stu-id="076f6-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="076f6-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> cuando el control del principal subproceso es diferente del subproceso que realiza la llamada para calcular las referencias de la llamada al subproceso adecuado.</span><span class="sxs-lookup"><span data-stu-id="076f6-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="076f6-112">El <xref:System.Security.Permissions.HostProtectionAttribute> atributo aplicado a esta clase tiene las siguientes <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valor de propiedad: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span><span class="sxs-lookup"><span data-stu-id="076f6-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="076f6-113">El atributo <xref:System.Security.Permissions.HostProtectionAttribute> no afecta a las aplicaciones de escritorio (que normalmente se inician haciendo doble clic en un icono, escribiendo un comando o introduciendo una dirección URL en el explorador).</span><span class="sxs-lookup"><span data-stu-id="076f6-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="076f6-114">Para obtener más información, consulte el <xref:System.Security.Permissions.HostProtectionAttribute> clase o [programación de SQL Server y atributos de protección de Host](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="076f6-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="076f6-115"><see cref="T:System.Delegate" /> de un método que obtiene los parámetros del mismo número y tipo que los incluidos en <paramref name="args" />.</span><span class="sxs-lookup"><span data-stu-id="076f6-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <paramref name="args" />.</span></span></param>
        <param name="args"><span data-ttu-id="076f6-116">Matriz de tipo <see cref="T:System.Object" /> cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="076f6-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span></span> <span data-ttu-id="076f6-117">Puede ser <see langword="null" /> si no se necesita ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="076f6-117">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="076f6-118">De forma asincrónica ejecuta el delegado en el subproceso que creó este objeto.</span><span class="sxs-lookup"><span data-stu-id="076f6-118">Asynchronously executes the delegate on the thread that created this object.</span></span></summary>
        <returns><span data-ttu-id="076f6-119">Interfaz <see cref="T:System.IAsyncResult" /> que representa la operación asincrónica iniciada por la llamada a este método.</span><span class="sxs-lookup"><span data-stu-id="076f6-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="076f6-120">El `method` delegado se ejecuta en el subproceso que creó el objeto, en lugar del subproceso en el que <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> llamó.</span><span class="sxs-lookup"><span data-stu-id="076f6-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="076f6-121">Se llama al delegado de forma asincrónica, y este método vuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="076f6-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="076f6-122">Puede llamar a este método desde cualquier subproceso.</span><span class="sxs-lookup"><span data-stu-id="076f6-122">You can call this method from any thread.</span></span> <span data-ttu-id="076f6-123">Si tiene el valor devuelto de un proceso iniciado con este método, llame a <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> para obtener el valor.</span><span class="sxs-lookup"><span data-stu-id="076f6-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="076f6-124">Si necesita llamar al delegado de forma sincrónica, use el <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="076f6-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="076f6-125">Interfaz <see cref="T:System.IAsyncResult" /> que representa la operación asincrónica iniciada por la llamada a <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span><span class="sxs-lookup"><span data-stu-id="076f6-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span></span></param>
        <summary><span data-ttu-id="076f6-126">Espera a que finalice el proceso iniciado mediante la llamada a <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> y, a continuación, devuelve el valor generado por el proceso.</span><span class="sxs-lookup"><span data-stu-id="076f6-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span></span></summary>
        <returns><span data-ttu-id="076f6-127"><see cref="T:System.Object" /> que representa el valor devuelto generado por la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="076f6-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="076f6-128">Este método obtiene el valor devuelto de la operación asincrónica representada por el <xref:System.IAsyncResult> pasado por esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="076f6-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="076f6-129">Si no se ha completado la operación asincrónica, este método esperará hasta que el resultado está disponible.</span><span class="sxs-lookup"><span data-stu-id="076f6-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="076f6-130"><see cref="T:System.Delegate" /> que contiene una llamada a un método, en el contexto del subproceso del control.</span><span class="sxs-lookup"><span data-stu-id="076f6-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span></span></param>
        <param name="args"><span data-ttu-id="076f6-131">Matriz de tipo <see cref="T:System.Object" /> que representa los argumentos que se pasan al método especificado.</span><span class="sxs-lookup"><span data-stu-id="076f6-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span></span> <span data-ttu-id="076f6-132">Puede ser <see langword="null" /> si no se necesita ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="076f6-132">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="076f6-133">De forma sincrónica ejecuta el delegado en el subproceso que creó este objeto y calcula las referencias de la llamada en el subproceso de creación.</span><span class="sxs-lookup"><span data-stu-id="076f6-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span></span></summary>
        <returns><span data-ttu-id="076f6-134"><see cref="T:System.Object" /> que representa el valor devuelto por el delegado al que se ha invocado, o <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="076f6-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="076f6-135">A diferencia de <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, este método funciona de forma sincrónica, es decir, espera a que finalice el proceso antes de devolver.</span><span class="sxs-lookup"><span data-stu-id="076f6-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="076f6-136">Las excepciones producidas durante la llamada se propagan de vuelta al llamador.</span><span class="sxs-lookup"><span data-stu-id="076f6-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="076f6-137">Utilice este método cuando se llama a un método desde un subproceso diferente para calcular las referencias de la llamada al subproceso adecuado.</span><span class="sxs-lookup"><span data-stu-id="076f6-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="076f6-138">Obtiene un valor que indica si el elemento que realiza la llamada debe llamar a <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> cuando se llame a un objeto que implemente esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="076f6-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span></span></summary>
        <value><span data-ttu-id="076f6-139"><see langword="true" /> si el elemento que realiza la llamada llama a <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="076f6-139"><see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="076f6-140">Esta propiedad determina si el llamador debe llamar a <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> al realizar llamadas de método a un objeto que implementa esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="076f6-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="076f6-141">Estos objetos están enlazados a un subproceso específico y no son seguros para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="076f6-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="076f6-142">Si se llama a un método desde un subproceso diferente, debe usar el <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> método para calcular las referencias de la llamada al subproceso adecuado.</span><span class="sxs-lookup"><span data-stu-id="076f6-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>