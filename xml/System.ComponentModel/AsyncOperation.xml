<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1507e3ec3ce746db846a48b30d3ca22ba934549a" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734244" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="696f7-101">Realiza un seguimiento de la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="696f7-102">Cuando se implementa una clase conforme a la [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), es posible que deba realizar un seguimiento de la duración de cada operación asincrónica invocada en una instancia de la clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="696f7-103">La <xref:System.ComponentModel.AsyncOperation> clase proporciona métodos para realizar un seguimiento y notificar el progreso de una tarea asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="696f7-104">En la lista siguiente identifica las maneras de utilizar un <xref:System.ComponentModel.AsyncOperation> objeto:</span><span class="sxs-lookup"><span data-stu-id="696f7-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="696f7-105">Para informar del progreso y resultados provisionales al cliente, llame a <xref:System.ComponentModel.AsyncOperation.Post%2A> desde el código de trabajo asincrónico.</span><span class="sxs-lookup"><span data-stu-id="696f7-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="696f7-106">Para indicar que se ha completado una tarea asincrónica o cancelar una tarea asincrónica pendiente, llame a <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="696f7-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="696f7-107">La clase debe obtener un <xref:System.ComponentModel.AsyncOperation> objeto para cada tarea asincrónica mediante una llamada a <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> cuando se inicia cada tarea.</span><span class="sxs-lookup"><span data-stu-id="696f7-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="696f7-108">Para permitir al cliente distinguir las distintas tareas asincrónicas, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> toma un parámetro para un token único proporcionado por el cliente, que se convierte en el <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="696f7-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="696f7-109">A continuación, se puede usar código de cliente para identificar la tarea asincrónica determinada que está generando eventos de progreso o finalización.</span><span class="sxs-lookup"><span data-stu-id="696f7-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="696f7-110">En el ejemplo de código siguiente se muestra cómo utilizar un <xref:System.ComponentModel.AsyncOperation> objeto para realizar el seguimiento de la duración de las operaciones asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="696f7-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="696f7-111">Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="696f7-112">Para obtener una lista de código completo, vea [Cómo: implementar un componente que admita el modelo asincrónico basado en eventos](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="696f7-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="696f7-113">Para obtener una lista de código completo de un formulario de cliente, consulte [Cómo: implementar un cliente en el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="696f7-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="696f7-114">Los implementadores deben garantizar la <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> y <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> las llamadas son asincrónicas, por lo que no es necesario preocuparse por los proveedores de bibliotecas de clase desbordamientos de la pila potencial si adoptan el comportamiento asincrónico en una aplicación concreta modelo que resulta ser sincrónico.</span><span class="sxs-lookup"><span data-stu-id="696f7-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
<span data-ttu-id="696f7-115">Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="696f7-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="696f7-116">Procedimientos recomendados para el subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="696f7-116">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="696f7-117">Cómo: implementar un componente que admita el modelo asincrónico basado en eventos</span><span class="sxs-lookup"><span data-stu-id="696f7-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="696f7-118">Finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-118">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="696f7-119">Pone fin a la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-119">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="696f7-120">Llame a la <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> método para finalizar la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="696f7-121">Después de llama a este método para una tarea determinada, llama a sus correspondientes <xref:System.ComponentModel.AsyncOperation> , se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="696f7-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="696f7-122">Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</span><span class="sxs-lookup"><span data-stu-id="696f7-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="696f7-123">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</span><span class="sxs-lookup"><span data-stu-id="696f7-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="696f7-124">Argumento del delegado incluido en el parámetro <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-124">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="696f7-125">Invoca un delegado en el subproceso o contexto adecuado para el modelo de aplicaciones.</span><span class="sxs-lookup"><span data-stu-id="696f7-125">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="696f7-126">El <xref:System.ComponentModel.AsyncOperation.Post%2A> método invoca el delegado especificado por el `arg` parámetro sin tener que finalizar la duración de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="696f7-127">Puede llamar a la <xref:System.ComponentModel.AsyncOperation.Post%2A> tan a menudo como sea necesario mientras dure la operación asincrónica no ha finalizado llamando al método <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="696f7-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="696f7-128">Puede usar el método para notificar el progreso o los resultados provisionales volver a los clientes.</span><span class="sxs-lookup"><span data-stu-id="696f7-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="696f7-129">El `d` parámetro contiene el delegado llama cuando desea enviar una actualización sobre el estado de la tarea asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="696f7-130">La <xref:System.ComponentModel.AsyncOperation> objeto garantizará que el delegado se invoca en el subproceso o contexto adecuado para el modelo de aplicación.</span><span class="sxs-lookup"><span data-stu-id="696f7-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="696f7-131">El método, opcionalmente, puede generar un evento que notifica a los clientes de un cambio de estado, actualización de progreso o los resultados incrementales disponibles.</span><span class="sxs-lookup"><span data-stu-id="696f7-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="696f7-132">El `arg` parámetro debe usarse para pasar información de estado al delegado ajustado por el `d` parámetro.</span><span class="sxs-lookup"><span data-stu-id="696f7-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="696f7-133">Podría ser una referencia a un <xref:System.ComponentModel.AsyncOperation>, o puede que sea un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> objeto.</span><span class="sxs-lookup"><span data-stu-id="696f7-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="696f7-134">Puede ser conveniente derivar su propia clase de <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> para proporcionar almacenamiento de estado adicionales.</span><span class="sxs-lookup"><span data-stu-id="696f7-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="696f7-135">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.ComponentModel.AsyncOperation.Post%2A> método para informar del progreso y resultados incrementales de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="696f7-136">Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="696f7-137">Se ha llamado anteriormente al método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> para esta tarea.</span><span class="sxs-lookup"><span data-stu-id="696f7-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="696f7-138">El valor de <paramref name="d" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-138"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="696f7-139">Deben realizar los herederos el <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocación asincrónica, por lo que no es necesario preocuparse de pila posibles proveedores de bibliotecas de clase desborda si asumen la asincronía, pero un modelo de aplicación determinado resulta ser sincrónico.</span><span class="sxs-lookup"><span data-stu-id="696f7-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="696f7-140">Las aplicaciones de consola no sincronizan la ejecución de llamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="696f7-141">Esto puede provocar que se generen eventos <see langword="ProgressChanged" /> fuera de lugar.</span><span class="sxs-lookup"><span data-stu-id="696f7-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="696f7-142">Si desea serializar la ejecución de llamadas <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, implemente e instale una clase <see cref="T:System.Threading.SynchronizationContext" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="696f7-143">Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="696f7-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="696f7-144">Procedimientos recomendados para el subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="696f7-144">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="696f7-145">Cómo: implementar un componente que admita el modelo asincrónico basado en eventos</span><span class="sxs-lookup"><span data-stu-id="696f7-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="696f7-146">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</span><span class="sxs-lookup"><span data-stu-id="696f7-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="696f7-147">Argumento del delegado incluido en el parámetro <paramref name="d" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-147">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="696f7-148">Pone fin a la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-148">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="696f7-149">Llame a la <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para finalizar la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="696f7-150">Después de llama a este método para una tarea determinada, llama a sus correspondientes <xref:System.ComponentModel.AsyncOperation> objeto, producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="696f7-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="696f7-151">El `d` parámetro contiene el delegado de la clase que se va a llamar cuando la duración de la tarea finaliza debido a errores de la tarea, cancelación o finalización.</span><span class="sxs-lookup"><span data-stu-id="696f7-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="696f7-152">La <xref:System.ComponentModel.AsyncOperation> objeto garantizará que el delegado se invoca en el subproceso o contexto adecuado para el modelo de aplicación.</span><span class="sxs-lookup"><span data-stu-id="696f7-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="696f7-153">El delegado, opcionalmente, puede generar un evento que notifica a los clientes que ha finalizado la duración de la tarea asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="696f7-154">El `arg` parámetro se usa para pasar información de estado para el delegado de finalización `d`.</span><span class="sxs-lookup"><span data-stu-id="696f7-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="696f7-155">Puede usar un <xref:System.ComponentModel.AsyncOperation> objeto, o un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> objeto como el valor del parámetro.</span><span class="sxs-lookup"><span data-stu-id="696f7-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="696f7-156">Como alternativa, si desea proporcionar almacenamiento de información de estado adicional, puede usar una instancia de una clase se deriva de la <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="696f7-157">En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> método para finalizar la duración de una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="696f7-158">Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="696f7-159">Se ha llamado previamente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</span><span class="sxs-lookup"><span data-stu-id="696f7-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="696f7-160">El valor de <paramref name="d" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="696f7-160"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="696f7-161">Deben realizar los herederos el <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocación asincrónica, por lo que no es necesario preocuparse de pila posibles proveedores de bibliotecas de clase desborda si asumen la asincronía, pero un modelo de aplicación determinado resulta ser sincrónico.</span><span class="sxs-lookup"><span data-stu-id="696f7-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="696f7-162">El método debe interpretarse como una llamada "finalización de la duración", lo que significa que la implementación debe hacer lo que sea adecuado para el modelo de aplicación.</span><span class="sxs-lookup"><span data-stu-id="696f7-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="696f7-163">Por ejemplo, ASP.NET disminuye su recuento de operaciones asincrónicas pendientes.</span><span class="sxs-lookup"><span data-stu-id="696f7-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="696f7-164">Esto también debe colocar la operación en un estado de modo que las llamadas posteriores a la producirá un error, puesto que ya ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="696f7-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
<span data-ttu-id="696f7-165">Para obtener más información acerca de cómo implementar clases asincrónicas, vea [implementar el modelo asincrónico basado en eventos](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="696f7-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="696f7-166">Procedimientos recomendados para el subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="696f7-166">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="696f7-167">Cómo: implementar un componente que admita el modelo asincrónico basado en eventos</span><span class="sxs-lookup"><span data-stu-id="696f7-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="696f7-168">Obtiene el objeto <see cref="T:System.Threading.SynchronizationContext" /> que se pasó al constructor.</span><span class="sxs-lookup"><span data-stu-id="696f7-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="696f7-169">Objeto <see cref="T:System.Threading.SynchronizationContext" /> que se pasó al constructor.</span><span class="sxs-lookup"><span data-stu-id="696f7-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="696f7-170">Obtiene o establece un objeto que se usa para identificar de forma única una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="696f7-171">Objeto de estado que se pasó a la invocación al método asincrónico.</span><span class="sxs-lookup"><span data-stu-id="696f7-171">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="696f7-172">Si su clase admite varios métodos asincrónicos o varias invocaciones de un solo método asincrónico, los clientes necesitarán una forma de determinar qué tarea asincrónica está generando eventos.</span><span class="sxs-lookup"><span data-stu-id="696f7-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="696f7-173">Su `MethodNameAsync` método debe tomar un parámetro de tipo <xref:System.Object> que actuará como un identificador de tarea.</span><span class="sxs-lookup"><span data-stu-id="696f7-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="696f7-174">Usará este Id. de tarea cuando se llama a la <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, método y esto va a asociar Id. de tarea del cliente una determinada invocación de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="696f7-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="696f7-175">Esta tarea ID está disponible para su implementación a través de la <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="696f7-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="696f7-176">Código de cliente debe tener cuidado para proporcionar un valor único para el <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="696f7-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="696f7-177">Los identificadores de tarea no único pueden hacer que su implementación para informar del progreso y otros eventos de forma incorrecta.</span><span class="sxs-lookup"><span data-stu-id="696f7-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="696f7-178">El código debe buscar un identificador de tarea no es único y generar un <xref:System.ArgumentException> si se detecta una.</span><span class="sxs-lookup"><span data-stu-id="696f7-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="696f7-179">En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> para realizar el seguimiento de la duración de las operaciones asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="696f7-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="696f7-180">Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="696f7-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557"><span data-ttu-id="696f7-181">Procedimientos recomendados para el subprocesamiento administrado</span><span class="sxs-lookup"><span data-stu-id="696f7-181">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3"><span data-ttu-id="696f7-182">Información general sobre el modelo asincrónico basado en eventos</span><span class="sxs-lookup"><span data-stu-id="696f7-182">Event-based Asynchronous Pattern Overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>