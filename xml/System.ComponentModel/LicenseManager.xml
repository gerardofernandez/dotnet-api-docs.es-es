<Type Name="LicenseManager" FullName="System.ComponentModel.LicenseManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="705ca451681d5de4b8884a52b9914d9416b2f7b5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58686433" /></Metadata><TypeSignature Language="C#" Value="public sealed class LicenseManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LicenseManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicenseManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LicenseManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicenseManager sealed" />
  <TypeSignature Language="F#" Value="type LicenseManager = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3fb38-101">Proporciona propiedades y métodos para agregar una licencia a un componente y administrar un <see cref="T:System.ComponentModel.LicenseProvider" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-101">Provides properties and methods to add a license to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider" />.</span></span> <span data-ttu-id="3fb38-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="3fb38-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-103">El <xref:System.ComponentModel.LicenseManager> clase ofrece los siguiente `static` propiedades: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> y <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-103">The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span></span> <span data-ttu-id="3fb38-104">La clase también proporciona las siguientes `static` métodos: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, y <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-104">The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span></span>  
  
 <span data-ttu-id="3fb38-105">Cuando se crea un componente que desea asignar licencias, haga lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="3fb38-105">When you create a component that you want to license, you must do the following:</span></span>  
  
1.  <span data-ttu-id="3fb38-106">Especifique el <xref:System.ComponentModel.LicenseProvider> marcando el componente con un <xref:System.ComponentModel.LicenseProviderAttribute>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-106">Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.</span></span>  
  
2.  <span data-ttu-id="3fb38-107">Llame a <xref:System.ComponentModel.LicenseManager.Validate%2A> o <xref:System.ComponentModel.LicenseManager.IsValid%2A> en el constructor del componente.</span><span class="sxs-lookup"><span data-stu-id="3fb38-107">Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component.</span></span> <span data-ttu-id="3fb38-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> se produce un <xref:System.ComponentModel.LicenseException> cuando intenta crear una instancia sin una licencia válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license.</span></span> <span data-ttu-id="3fb38-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> no produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="3fb38-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.</span></span>  
  
3.  <span data-ttu-id="3fb38-110">Llamar a <xref:System.ComponentModel.License.Dispose%2A> en todas las licencias concedidas cuando se elimine o finalice el componente.</span><span class="sxs-lookup"><span data-stu-id="3fb38-110">Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.</span></span>  
  
 <span data-ttu-id="3fb38-111">Para obtener más información acerca de las licencias, consulte [Cómo: Licencias de componentes y controles](https://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="3fb38-111">For more information on licensing, see [How to: License Components and Controls](https://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3fb38-112">En el ejemplo de código siguiente se crea un control con licencia mediante el <xref:System.ComponentModel.LicenseManager.Validate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3fb38-112">The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="3fb38-113">Usa un <xref:System.ComponentModel.LicenseProvider> que se implementa mediante el <xref:System.ComponentModel.LicFileLicenseProvider> clase.</span><span class="sxs-lookup"><span data-stu-id="3fb38-113">It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateWithContext">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3fb38-114">Crea una instancia de un tipo de objeto con contexto de licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-114">Creates an instance of an object type with a license context.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-115"><see cref="T:System.Type" /> que representa el tipo que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="3fb38-115">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="3fb38-116"><see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar la instancia con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-116">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <summary><span data-ttu-id="3fb38-117">Crea una instancia del tipo especificado, dado un contexto en el que se puede usar la instancia con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-117">Creates an instance of the specified type, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="3fb38-118">Instancia del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-118">An instance of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-119">El <xref:System.ComponentModel.LicenseContext> especifica como el `creationContext` parámetro se utiliza como el <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> durante la vida de este <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-119">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="3fb38-120">El <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> método bloquea todos los demás subprocesos la <xref:System.AppDomain> modifiquen el <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, lo que permite <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> se comporte como una operación atómica.</span><span class="sxs-lookup"><span data-stu-id="3fb38-120">The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="3fb38-121">Para obtener acceso a los miembros de clase privada y metadatos.</span><span class="sxs-lookup"><span data-stu-id="3fb38-121">for access to private class members and metadata.</span></span> <span data-ttu-id="3fb38-122">Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="3fb38-122">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member CreateWithContext : Type * System.ComponentModel.LicenseContext * obj[] -&gt; obj" Usage="System.ComponentModel.LicenseManager.CreateWithContext (type, creationContext, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-123"><see cref="T:System.Type" /> que representa el tipo que se va a crear.</span><span class="sxs-lookup"><span data-stu-id="3fb38-123">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="3fb38-124"><see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar la instancia con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-124">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <param name="args"><span data-ttu-id="3fb38-125">Matriz de tipo <see cref="T:System.Object" /> que representa los argumentos correspondientes al tipo.</span><span class="sxs-lookup"><span data-stu-id="3fb38-125">An array of type <see cref="T:System.Object" /> that represents the arguments for the type.</span></span></param>
        <summary><span data-ttu-id="3fb38-126">Crea una instancia del tipo especificado con los argumentos especificados, dado un contexto en el que se puede usar la instancia con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-126">Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="3fb38-127">Instancia del tipo especificado con la matriz de argumentos especificada.</span><span class="sxs-lookup"><span data-stu-id="3fb38-127">An instance of the specified type with the given array of arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-128">El <xref:System.ComponentModel.LicenseContext> especifica como el `creationContext` parámetro se utiliza como el <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> durante la vida de este <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-128">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="3fb38-129">Este método bloquea todos los demás subprocesos la <xref:System.AppDomain> modifiquen el <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, lo que permite <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> se comporte como una operación atómica.</span><span class="sxs-lookup"><span data-stu-id="3fb38-129">This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseContext CurrentContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ComponentModel.LicenseContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentContext As LicenseContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseContext ^ CurrentContext { System::ComponentModel::LicenseContext ^ get(); void set(System::ComponentModel::LicenseContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : System.ComponentModel.LicenseContext with get, set" Usage="System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fb38-130">Obtiene o establece el actual <see cref="T:System.ComponentModel.LicenseContext" />, que especifica cuándo puede utilizarse el objeto con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-130">Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext" />, which specifies when you can use the licensed object.</span></span></summary>
        <value><span data-ttu-id="3fb38-131"><see cref="T:System.ComponentModel.LicenseContext" /> que especifica cuándo se puede utilizar el objeto con licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-131">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-132">Cuando el usuario solicita válido <xref:System.ComponentModel.License>, el usuario debe dar el contexto en el que el <xref:System.ComponentModel.License> es válido para el <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="3fb38-132">When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3fb38-133">El <xref:System.ComponentModel.LicenseContext> devuelto por esta propiedad se debe pasar a todos los <xref:System.ComponentModel.LicenseProvider> clases.</span><span class="sxs-lookup"><span data-stu-id="3fb38-133">The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3fb38-134">La propiedad <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> está bloqueada actualmente y no se puede modificar.</span><span class="sxs-lookup"><span data-stu-id="3fb38-134">The <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property is currently locked and cannot be changed.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsLicensed">
      <MemberSignature Language="C#" Value="public static bool IsLicensed (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLicensed(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLicensed(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsLicensed : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsLicensed type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-135"><see cref="T:System.Type" /> para el que se va a buscar una licencia válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-135">The <see cref="T:System.Type" /> to find a valid license for.</span></span></param>
        <summary><span data-ttu-id="3fb38-136">Devuelve si el tipo especificado tiene una licencia válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-136">Returns whether the given type has a valid license.</span></span></summary>
        <returns><span data-ttu-id="3fb38-137"><see langword="true" /> si el tipo especificado tiene licencia; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-137"><see langword="true" /> if the given type is licensed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsValid">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3fb38-138">Determina si se puede conceder una licencia válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-138">Determines whether a valid license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-139"><see cref="T:System.Type" /> que representa el tipo de objeto que solicita <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-139">A <see cref="T:System.Type" /> that represents the type of object that requests the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <summary><span data-ttu-id="3fb38-140">Determina si se puede conceder una licencia válida para el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-140">Determines whether a valid license can be granted for the specified type.</span></span></summary>
        <returns><span data-ttu-id="3fb38-141"><see langword="true" /> si se puede conceder una licencia válida; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-141"><see langword="true" /> if a valid license can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-142">El <xref:System.ComponentModel.LicenseManager.IsValid%2A> devuelve del método `true` cuando el tipo no tiene licencia o tiene licencia y la licencia es válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-142">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.</span></span>  
  
 <span data-ttu-id="3fb38-143">Este método no produce una <xref:System.ComponentModel.LicenseException> cuando no se puede conceder válido <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-143">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="3fb38-144">El <xref:System.ComponentModel.LicenseManager.Validate%2A> método produce excepciones.</span><span class="sxs-lookup"><span data-stu-id="3fb38-144">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type, object instance, [out] class System.ComponentModel.License&amp; license) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type, System::Object ^ instance, [Runtime::InteropServices::Out] System::ComponentModel::License ^ % license);" />
      <MemberSignature Language="F#" Value="static member IsValid : Type * obj *  -&gt; bool" Usage="System.ComponentModel.LicenseManager.IsValid (type, instance, license)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="license" Type="System.ComponentModel.License" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-145"><see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-145">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="3fb38-146">Objeto del tipo especificado o un tipo derivado del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-146">An object of the specified type or a type derived from the specified type.</span></span></param>
        <param name="license"><span data-ttu-id="3fb38-147"><see cref="T:System.ComponentModel.License" /> que es una licencia válida, o <see langword="null" /> si no se puede conceder una licencia válida.</span><span class="sxs-lookup"><span data-stu-id="3fb38-147">A <see cref="T:System.ComponentModel.License" /> that is a valid license, or <see langword="null" /> if a valid license cannot be granted.</span></span></param>
        <summary><span data-ttu-id="3fb38-148">Determina si se puede conceder una licencia válida para la instancia especificada del tipo.</span><span class="sxs-lookup"><span data-stu-id="3fb38-148">Determines whether a valid license can be granted for the specified instance of the type.</span></span> <span data-ttu-id="3fb38-149">Este método crea un <see cref="T:System.ComponentModel.License" /> válido.</span><span class="sxs-lookup"><span data-stu-id="3fb38-149">This method creates a valid <see cref="T:System.ComponentModel.License" />.</span></span></summary>
        <returns><span data-ttu-id="3fb38-150"><see langword="true" /> si se puede conceder un <see cref="T:System.ComponentModel.License" /> válido; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-150"><see langword="true" /> if a valid <see cref="T:System.ComponentModel.License" /> can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-151">El <xref:System.ComponentModel.LicenseManager.IsValid%2A> devuelve del método `true` cuando el `type` parámetro no tiene licencia o cuando se tiene licencia y la `license` parámetro es válido.</span><span class="sxs-lookup"><span data-stu-id="3fb38-151">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.</span></span>  
  
 <span data-ttu-id="3fb38-152">Este método no produce una <xref:System.ComponentModel.LicenseException> cuando no se puede conceder válido <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-152">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="3fb38-153">El <xref:System.ComponentModel.LicenseManager.Validate%2A> método produce excepciones.</span><span class="sxs-lookup"><span data-stu-id="3fb38-153">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 <span data-ttu-id="3fb38-154">Si el `license` parámetro no es `null` después de esta llamada, el objeto que pide un <xref:System.ComponentModel.License> debe deshacerse de la licencia mediante una llamada a la <xref:System.ComponentModel.License.Dispose%2A> método cuando el objeto se elimina o se finaliza.</span><span class="sxs-lookup"><span data-stu-id="3fb38-154">If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="LockContext">
      <MemberSignature Language="C#" Value="public static void LockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member LockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.LockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="3fb38-155">Objeto cuyo contexto actual se desea bloquear.</span><span class="sxs-lookup"><span data-stu-id="3fb38-155">The object whose current context you want to lock.</span></span></param>
        <summary><span data-ttu-id="3fb38-156">Impide que se realicen cambios en el <see cref="T:System.ComponentModel.LicenseContext" /> actual del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-156">Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-157">Use la <xref:System.ComponentModel.LicenseContext> para obtener el <xref:System.ComponentModel.License> de un objeto.</span><span class="sxs-lookup"><span data-stu-id="3fb38-157">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="3fb38-158">Este método bloquea el <xref:System.ComponentModel.LicenseContext>, lo que impide que el <xref:System.ComponentModel.License> desde que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3fb38-158">This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3fb38-159">El contexto ya está bloqueado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-159">The context is already locked.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockContext">
      <MemberSignature Language="C#" Value="public static void UnlockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnlockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnlockContext(System::Object ^ contextUser);" />
      <MemberSignature Language="F#" Value="static member UnlockContext : obj -&gt; unit" Usage="System.ComponentModel.LicenseManager.UnlockContext contextUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="3fb38-160">Objeto cuyo contexto actual se desea desbloquear.</span><span class="sxs-lookup"><span data-stu-id="3fb38-160">The object whose current context you want to unlock.</span></span></param>
        <summary><span data-ttu-id="3fb38-161">Permite que se realicen cambios en el <see cref="T:System.ComponentModel.LicenseContext" /> actual del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-161">Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-162">Use la <xref:System.ComponentModel.LicenseContext> para obtener el <xref:System.ComponentModel.License> de un objeto.</span><span class="sxs-lookup"><span data-stu-id="3fb38-162">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="3fb38-163">Este método desbloquea la <xref:System.ComponentModel.LicenseContext>, lo que permite el <xref:System.ComponentModel.License> va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3fb38-163">This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3fb38-164"><paramref name="contextUser" /> representa un usuario diferente del especificado en una llamada anterior al método <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-164"><paramref name="contextUser" /> represents a different user than the one specified in a previous call to <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UsageMode">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseUsageMode UsageMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ComponentModel.LicenseUsageMode UsageMode" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.UsageMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UsageMode As LicenseUsageMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseUsageMode UsageMode { System::ComponentModel::LicenseUsageMode get(); };" />
      <MemberSignature Language="F#" Value="member this.UsageMode : System.ComponentModel.LicenseUsageMode" Usage="System.ComponentModel.LicenseManager.UsageMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseUsageMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3fb38-165">Obtiene <see cref="T:System.ComponentModel.LicenseUsageMode" /> que especifica cuándo se puede utilizar el objeto con licencia para <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-165">Gets the <see cref="T:System.ComponentModel.LicenseUsageMode" /> which specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span></span></summary>
        <value><span data-ttu-id="3fb38-166">Uno de los valores de <see cref="T:System.ComponentModel.LicenseUsageMode" />, tal como se especifica en la propiedad <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-166">One of the <see cref="T:System.ComponentModel.LicenseUsageMode" /> values, as specified in the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-167">Si esta propiedad no se puede encontrar un <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, devuelve <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span><span class="sxs-lookup"><span data-stu-id="3fb38-167">If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.LicenseManager.CurrentContext" />
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3fb38-168">Determina si se puede conceder una licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-168">Determines whether a license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Validate(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Validate : Type -&gt; unit" Usage="System.ComponentModel.LicenseManager.Validate type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-169"><see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-169">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <summary><span data-ttu-id="3fb38-170">Determina si se puede conceder una licencia para el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-170">Determines whether a license can be granted for the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-171">Este método produce una <xref:System.ComponentModel.LicenseException> cuando válido <xref:System.ComponentModel.License> no se puede conceder.</span><span class="sxs-lookup"><span data-stu-id="3fb38-171">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="3fb38-172">El <xref:System.ComponentModel.LicenseManager.IsValid%2A> método no produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="3fb38-172">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="3fb38-173">No se puede conceder un <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-173">A <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.License Validate (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.License Validate(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::License ^ Validate(Type ^ type, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Validate : Type * obj -&gt; System.ComponentModel.License" Usage="System.ComponentModel.LicenseManager.Validate (type, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3fb38-174"><see cref="T:System.Type" /> que representa el tipo de objeto que solicita la licencia.</span><span class="sxs-lookup"><span data-stu-id="3fb38-174">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="3fb38-175"><see cref="T:System.Object" /> del tipo especificado o un tipo derivado del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-175">An <see cref="T:System.Object" /> of the specified type or a type derived from the specified type.</span></span></param>
        <summary><span data-ttu-id="3fb38-176">Determina si se puede conceder una licencia para la instancia del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="3fb38-176">Determines whether a license can be granted for the instance of the specified type.</span></span></summary>
        <returns><span data-ttu-id="3fb38-177"><see cref="T:System.ComponentModel.License" /> válido.</span><span class="sxs-lookup"><span data-stu-id="3fb38-177">A valid <see cref="T:System.ComponentModel.License" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3fb38-178">Este método produce una <xref:System.ComponentModel.LicenseException> cuando válido <xref:System.ComponentModel.License> no se puede conceder.</span><span class="sxs-lookup"><span data-stu-id="3fb38-178">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="3fb38-179">El <xref:System.ComponentModel.LicenseManager.IsValid%2A> método no produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="3fb38-179">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 <span data-ttu-id="3fb38-180">Todos los objetos que piden un <xref:System.ComponentModel.License> debe deshacerse de la licencia mediante una llamada a la <xref:System.ComponentModel.License.Dispose%2A> método cuando el objeto se elimina o se finaliza.</span><span class="sxs-lookup"><span data-stu-id="3fb38-180">All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="3fb38-181">El tipo tiene licencia pero no se puede conceder una <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="3fb38-181">The type is licensed, but a <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>