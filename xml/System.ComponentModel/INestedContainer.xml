<Type Name="INestedContainer" FullName="System.ComponentModel.INestedContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff0f65452bcbb199e88e5693fd7dec10ef6cdccf" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58705920" /></Metadata><TypeSignature Language="C#" Value="public interface INestedContainer : IDisposable, System.ComponentModel.IContainer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INestedContainer implements class System.ComponentModel.IContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : IDisposable, System::ComponentModel::IContainer" />
  <TypeSignature Language="F#" Value="type INestedContainer = interface&#xA;    interface IContainer&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7418a-101">Proporciona funcionalidad para contenedores anidados que, desde el punto de vista lógico, contienen cero o varios componentes y son propiedad de un componente primario.</span><span class="sxs-lookup"><span data-stu-id="7418a-101">Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7418a-102">El <xref:System.ComponentModel.INestedContainer> interfaz agrega el concepto de un componente propietario para el <xref:System.ComponentModel.IContainer> interfaz.</span><span class="sxs-lookup"><span data-stu-id="7418a-102">The <xref:System.ComponentModel.INestedContainer> interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface.</span></span> <span data-ttu-id="7418a-103">Un contenedor anidado es un objeto que, lógicamente, pero no necesariamente visualmente, contiene cero o más componentes secundarios y es propiedad de algún componente primario.</span><span class="sxs-lookup"><span data-stu-id="7418a-103">A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</span></span> <span data-ttu-id="7418a-104">Para la contención visual, el componente propietario suele ser otro contenedor.</span><span class="sxs-lookup"><span data-stu-id="7418a-104">For visual containment, the owning component is often another container.</span></span>  
  
 <span data-ttu-id="7418a-105">Contenedores anidados permiten las secciones de un control se pueden diseñar, sin necesidad de una variable miembro serializada explícita o un serializador personalizado para cada subcontrol.</span><span class="sxs-lookup"><span data-stu-id="7418a-105">Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</span></span> <span data-ttu-id="7418a-106">En su lugar, el Diseñador de formularios mantiene un contenedor maestro de componentes.</span><span class="sxs-lookup"><span data-stu-id="7418a-106">Instead, the form designer maintains one master container of components.</span></span> <span data-ttu-id="7418a-107">Sitio de cada componente puede tener un contenedor anidado que proporciona un lugar para colocar componentes adicionales.</span><span class="sxs-lookup"><span data-stu-id="7418a-107">Each component's site may have a nested container that provides a place to put extra components.</span></span> <span data-ttu-id="7418a-108">Cuando un componente está ubicado en un contenedor anidado, el nombre que recibe es una combinación de su propio nombre y el nombre del componente de su propietario.</span><span class="sxs-lookup"><span data-stu-id="7418a-108">When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component's name.</span></span> <span data-ttu-id="7418a-109">Además, los componentes agregados a un contenedor anidado tienen acceso completo a los servicios del contenedor primario y el contenedor anidado proporciona el mismo comportamiento del elemento primario con respecto a la adición de nuevos componentes.</span><span class="sxs-lookup"><span data-stu-id="7418a-109">Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</span></span> <span data-ttu-id="7418a-110">El contenedor anidado creará el diseñador para cada componente que contiene, lo que permite la compatibilidad en tiempo de diseño.</span><span class="sxs-lookup"><span data-stu-id="7418a-110">The nested container will create the designer for each component it contains, thereby enabling design-time support.</span></span> <span data-ttu-id="7418a-111">Dado que los serializadores de código estándar no examina los contenedores anidados, estos componentes sólo se serializan si puede obtenerse una ruta de acceso a ellos recorriendo los componentes en el contenedor principal.</span><span class="sxs-lookup"><span data-stu-id="7418a-111">Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</span></span>  
  
 <span data-ttu-id="7418a-112">Contenedores anidados se pueden encontrar consultando el sitio de un componente de servicios de tipo <xref:System.ComponentModel.INestedContainer>.</span><span class="sxs-lookup"><span data-stu-id="7418a-112">Nested containers can be found by querying a component's site for services of type <xref:System.ComponentModel.INestedContainer>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.NestedContainer" />
    <altmember cref="T:System.ComponentModel.ContainerFilterService" />
    <altmember cref="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
  </Docs>
  <Members>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.INestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.INestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7418a-113">Obtiene el componente propietario del contenedor anidado.</span><span class="sxs-lookup"><span data-stu-id="7418a-113">Gets the owning component for the nested container.</span></span></summary>
        <value><span data-ttu-id="7418a-114">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que posee el contenedor anidado.</span><span class="sxs-lookup"><span data-stu-id="7418a-114">The <see cref="T:System.ComponentModel.IComponent" /> that owns the nested container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7418a-115">El componente propietario es la característica que diferencia los contenedores anidados de los contenedores normales.</span><span class="sxs-lookup"><span data-stu-id="7418a-115">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.NestedContainer.Owner" />
      </Docs>
    </Member>
  </Members>
</Type>