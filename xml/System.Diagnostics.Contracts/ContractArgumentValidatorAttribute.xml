<Type Name="ContractArgumentValidatorAttribute" FullName="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21cc69951a3548dcaacee2ee4c85eb8d6f96cbfe" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394248" /></Metadata><TypeSignature Language="C#" Value="public sealed class ContractArgumentValidatorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContractArgumentValidatorAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ContractArgumentValidatorAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContractArgumentValidatorAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ContractArgumentValidatorAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.Diagnostics.Conditional("CONTRACTS_FULL")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e06af-101">Habilita la factorización de código <see langword="if-then-throw" /> heredado en métodos independientes para su reutilización, y proporciona el control completo sobre los argumentos y excepciones producidas.</span><span class="sxs-lookup"><span data-stu-id="e06af-101">Enables the factoring of legacy <see langword="if-then-throw" /> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e06af-102">Si el código usa explícita `if-then-throw` código para validar los parámetros, que emplee métodos auxiliares que realizan comprobaciones y producen excepciones concretas en caso de error, tal como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="e06af-102">If your code uses explicit `if-then-throw` code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow1.cs#1)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow1.vb#1)]  
  
 <span data-ttu-id="e06af-103">En este ejemplo, `Execute` tiene un error de condición previa electivos especifica que el valor del parámetro no debe ser `null`.</span><span class="sxs-lookup"><span data-stu-id="e06af-103">In this example, `Execute` has an elective precondition specifying that the parameter value should not be `null`.</span></span> <span data-ttu-id="e06af-104">Para habilitar las herramientas de contrato para reconocer que la llamada a `ValidationHelper.NotNull` representa un contrato, puede marcar el método llamado con la <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="e06af-104">To enable the contract tools to recognize that the call to `ValidationHelper.NotNull` represents a contract, you can mark the called method with the  <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute> attribute.</span></span> <span data-ttu-id="e06af-105">El <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> llamada al método se debe usar para habilitar las herramientas extraer las especificaciones adecuadas para la generación de documentos y comprobación estática, como se indica a continuación.</span><span class="sxs-lookup"><span data-stu-id="e06af-105">The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow2.cs#2)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow2.vb#2)]  
  
 <span data-ttu-id="e06af-106">Además `if-then-throw` instrucciones, la sección de contrato de los métodos de validación del contrato pueden contener llamadas a otros métodos de control de validación del contrato.</span><span class="sxs-lookup"><span data-stu-id="e06af-106">In addition to `if-then-throw` statements, the contract section of contract validator methods may contain calls to other contract validator methods.</span></span> <span data-ttu-id="e06af-107">Sin embargo, ningún otro contrato (como <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>, o <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) se permiten.</span><span class="sxs-lookup"><span data-stu-id="e06af-107">However, no other contracts (such as <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>, or <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType>) are allowed.</span></span> <span data-ttu-id="e06af-108">Código que sigue el <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> llamada omite todas las herramientas de contrato.</span><span class="sxs-lookup"><span data-stu-id="e06af-108">Code that follows the <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=nameWithType> call is ignored by all contract tools.</span></span>  
  
 <span data-ttu-id="e06af-109">El ejemplo siguiente muestra un validador de argumento de intervalo en términos de una existente `NotNull` método validador.</span><span class="sxs-lookup"><span data-stu-id="e06af-109">The following example shows a range argument validator written in terms of an existing `NotNull` validator method.</span></span>  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow3.cs#3)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow3.vb#3)]  
  
 <span data-ttu-id="e06af-110">Desde un punto de vista de especificación, el `Execute` método tiene los siguientes tres contratos:</span><span class="sxs-lookup"><span data-stu-id="e06af-110">From a specification point of view, the `Execute` method has the following three contracts:</span></span>  
  
```  
Contract.Requires<ArgumentNullException>(data != null);  
Contract.Requires<ArgumentOutOfRangeException>(position >= 0);  
Contract.Requires<ArgumentOutOfRangeException>(position < data.Length);  
  
```  
  
 <span data-ttu-id="e06af-111">En los métodos estándares, las llamadas a métodos de validación del contrato pueden libremente mezclarse con otros contratos como <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e06af-111">In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=nameWithType> or <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContractArgumentValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContractArgumentValidatorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e06af-112">Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="e06af-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>