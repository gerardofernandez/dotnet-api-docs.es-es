<Type Name="BinaryExpression" FullName="System.Linq.Expressions.BinaryExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99babf412f6590060f4b0e66f1e4742b34872426" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48601326" /></Metadata><TypeSignature Language="C#" Value="public class BinaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.BinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryExpression : System::Linq::Expressions::Expression" />
  <TypeSignature Language="F#" Value="type BinaryExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/BinaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="23827-101">Representa una expresión que tiene un operador binario.</span><span class="sxs-lookup"><span data-stu-id="23827-101">Represents an expression that has a binary operator.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-102">Las tablas siguientes resumen los métodos de generador que pueden usarse para crear un <xref:System.Linq.Expressions.BinaryExpression> que tiene un tipo de nodo específico, representado por la <xref:System.Linq.Expressions.Expression.NodeType%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="23827-102">The following tables summarize the factory methods that can be used to create a <xref:System.Linq.Expressions.BinaryExpression> that has a specific node type, represented by the <xref:System.Linq.Expressions.Expression.NodeType%2A> property.</span></span> <span data-ttu-id="23827-103">Cada tabla contiene información para una clase específica de operaciones, como operaciones aritméticas o bit a bit.</span><span class="sxs-lookup"><span data-stu-id="23827-103">Each table contains information for a specific class of operations such as arithmetic or bitwise.</span></span>  
  
## <a name="binary-arithmetic-operations"></a><span data-ttu-id="23827-104">Operaciones aritméticas binarias</span><span class="sxs-lookup"><span data-stu-id="23827-104">Binary Arithmetic Operations</span></span>  
  
|<span data-ttu-id="23827-105">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-105">Node Type</span></span>|<span data-ttu-id="23827-106">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-106">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Add>|<xref:System.Linq.Expressions.Expression.Add%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.AddChecked>|<xref:System.Linq.Expressions.Expression.AddChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Divide>|<xref:System.Linq.Expressions.Expression.Divide%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Modulo>|<xref:System.Linq.Expressions.Expression.Modulo%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Multiply>|<xref:System.Linq.Expressions.Expression.Multiply%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.MultiplyChecked>|<xref:System.Linq.Expressions.Expression.MultiplyChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Power>|<xref:System.Linq.Expressions.Expression.Power%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Subtract>|<xref:System.Linq.Expressions.Expression.Subtract%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.SubtractChecked>|<xref:System.Linq.Expressions.Expression.SubtractChecked%2A>|  
  
## <a name="bitwise-operations"></a><span data-ttu-id="23827-107">Operaciones bit a bit</span><span class="sxs-lookup"><span data-stu-id="23827-107">Bitwise Operations</span></span>  
  
|<span data-ttu-id="23827-108">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-108">Node Type</span></span>|<span data-ttu-id="23827-109">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-109">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.And>|<xref:System.Linq.Expressions.Expression.And%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Or>|<xref:System.Linq.Expressions.Expression.Or%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.ExclusiveOr>|<xref:System.Linq.Expressions.Expression.ExclusiveOr%2A>|  
  
## <a name="shift-operations"></a><span data-ttu-id="23827-110">Operaciones de desplazamiento</span><span class="sxs-lookup"><span data-stu-id="23827-110">Shift Operations</span></span>  
  
|<span data-ttu-id="23827-111">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-111">Node Type</span></span>|<span data-ttu-id="23827-112">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-112">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.LeftShift>|<xref:System.Linq.Expressions.Expression.LeftShift%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.RightShift>|<xref:System.Linq.Expressions.Expression.RightShift%2A>|  
  
## <a name="conditional-boolean-operations"></a><span data-ttu-id="23827-113">Operaciones booleanas condicionales</span><span class="sxs-lookup"><span data-stu-id="23827-113">Conditional Boolean Operations</span></span>  
  
|<span data-ttu-id="23827-114">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-114">Node Type</span></span>|<span data-ttu-id="23827-115">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-115">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.AndAlso>|<xref:System.Linq.Expressions.Expression.AndAlso%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.OrElse>|<xref:System.Linq.Expressions.Expression.OrElse%2A>|  
  
## <a name="comparison-operations"></a><span data-ttu-id="23827-116">Operaciones de comparación</span><span class="sxs-lookup"><span data-stu-id="23827-116">Comparison Operations</span></span>  
  
|<span data-ttu-id="23827-117">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-117">Node Type</span></span>|<span data-ttu-id="23827-118">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-118">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Equal>|<xref:System.Linq.Expressions.Expression.Equal%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.NotEqual>|<xref:System.Linq.Expressions.Expression.NotEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual>|<xref:System.Linq.Expressions.Expression.GreaterThanOrEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThan>|<xref:System.Linq.Expressions.Expression.GreaterThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThan>|<xref:System.Linq.Expressions.Expression.LessThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThanOrEqual>|<xref:System.Linq.Expressions.Expression.LessThanOrEqual%2A>|  
  
## <a name="coalescing-operations"></a><span data-ttu-id="23827-119">Operaciones de fusión</span><span class="sxs-lookup"><span data-stu-id="23827-119">Coalescing Operations</span></span>  
  
|<span data-ttu-id="23827-120">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-120">Node Type</span></span>|<span data-ttu-id="23827-121">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-121">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Coalesce>|<xref:System.Linq.Expressions.Expression.Coalesce%2A>|  
  
## <a name="array-indexing-operations"></a><span data-ttu-id="23827-122">Operaciones de indización de matriz</span><span class="sxs-lookup"><span data-stu-id="23827-122">Array Indexing Operations</span></span>  
  
|<span data-ttu-id="23827-123">Tipo de nodo</span><span class="sxs-lookup"><span data-stu-id="23827-123">Node Type</span></span>|<span data-ttu-id="23827-124">Método de fábrica</span><span class="sxs-lookup"><span data-stu-id="23827-124">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.ArrayIndex>|<xref:System.Linq.Expressions.Expression.ArrayIndex%2A>|  
  
 <span data-ttu-id="23827-125">Además, el <xref:System.Linq.Expressions.Expression.MakeBinary%2A> métodos también se pueden usar para crear un <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="23827-125">In addition, the <xref:System.Linq.Expressions.Expression.MakeBinary%2A> methods can also be used to create a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="23827-126">Se pueden usar estos métodos de generador para crear un <xref:System.Linq.Expressions.BinaryExpression> de cualquier tipo de nodo que representa una operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-126">These factory methods can be used to create a <xref:System.Linq.Expressions.BinaryExpression> of any node type that represents a binary operation.</span></span> <span data-ttu-id="23827-127">El parámetro de estos métodos que es de tipo <xref:System.Linq.Expressions.Expression.NodeType%2A> especifica el tipo de nodo deseado.</span><span class="sxs-lookup"><span data-stu-id="23827-127">The parameter of these methods that is of type <xref:System.Linq.Expressions.Expression.NodeType%2A> specifies the desired node type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23827-128">En el ejemplo siguiente se crea un <xref:System.Linq.Expressions.BinaryExpression> objeto que representa el resultado de restar un número de otro.</span><span class="sxs-lookup"><span data-stu-id="23827-128">The following example creates a <xref:System.Linq.Expressions.BinaryExpression> object that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="23827-129">Visitante con el que se va a visitar este nodo.</span><span class="sxs-lookup"><span data-stu-id="23827-129">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="23827-130">Envía la expresión al método de visita específico de este tipo de nodo.</span><span class="sxs-lookup"><span data-stu-id="23827-130">Dispatches to the specific visit method for this node type.</span></span> <span data-ttu-id="23827-131">Por ejemplo, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> llama a <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span><span class="sxs-lookup"><span data-stu-id="23827-131">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span></span></summary>
        <returns><span data-ttu-id="23827-132">Resultado de visitar este nodo.</span><span class="sxs-lookup"><span data-stu-id="23827-132">The result of visiting this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-133">Esta implementación predeterminada para <xref:System.Linq.Expressions.ExpressionType.Extension> llamadas nodos <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="23827-133">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="23827-134">Invalide este método para llamar a un método más específico en una clase derivada de visitante de la <xref:System.Linq.Expressions.ExpressionVisitor> clase.</span><span class="sxs-lookup"><span data-stu-id="23827-134">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="23827-135">Sin embargo, todavía debe admitir a los visitantes desconocidos mediante una llamada a <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="23827-135">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-136">Obtiene un valor que indica si el nodo del árbol de expresión se puede reducir.</span><span class="sxs-lookup"><span data-stu-id="23827-136">Gets a value that indicates whether the expression tree node can be reduced.</span></span></summary>
        <value><span data-ttu-id="23827-137">Es true si se puede reducir el nodo del árbol de expresión; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="23827-137">True if the expression tree node can be reduced, otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conversion">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression Conversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression Conversion" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conversion As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LambdaExpression ^ Conversion { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Conversion : System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-138">Obtiene la función de conversión de tipos utilizada por una operación de uso combinado o una operación de asignación compuesta.</span><span class="sxs-lookup"><span data-stu-id="23827-138">Gets the type conversion function that is used by a coalescing or compound assignment operation.</span></span></summary>
        <value><span data-ttu-id="23827-139"><see cref="T:System.Linq.Expressions.LambdaExpression" /> que representa una función de conversión de tipos.</span><span class="sxs-lookup"><span data-stu-id="23827-139">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-140">El <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> propiedad es `null` para cualquier <xref:System.Linq.Expressions.BinaryExpression> cuyo <xref:System.Linq.Expressions.Expression.NodeType%2A> propiedad no es <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span><span class="sxs-lookup"><span data-stu-id="23827-140">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null` for any <xref:System.Linq.Expressions.BinaryExpression> whose <xref:System.Linq.Expressions.Expression.NodeType%2A> property is not <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLifted : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-141">Obtiene un valor que indica si el nodo del árbol de expresión representa una llamada *elevada* a un operador.</span><span class="sxs-lookup"><span data-stu-id="23827-141">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator.</span></span></summary>
        <value><span data-ttu-id="23827-142">Es <see langword="true" /> si el nodo representa una llamada elevada; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23827-142"><see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-143">Una llamada del operador se eleva si el operador espera operandos que no aceptan valores NULL pero operandos que aceptan valores NULL se pasan a él.</span><span class="sxs-lookup"><span data-stu-id="23827-143">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftedToNull">
      <MemberSignature Language="C#" Value="public bool IsLiftedToNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftedToNull" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiftedToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiftedToNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLiftedToNull : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-144">Obtiene un valor que indica si el nodo del árbol de expresión representa una llamada *elevada* a un operador cuyo tipo de valor devuelto se eleva a un tipo que acepta valores null.</span><span class="sxs-lookup"><span data-stu-id="23827-144">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator whose return type is lifted to a nullable type.</span></span></summary>
        <value><span data-ttu-id="23827-145">Es <see langword="true" /> si el tipo de valor devuelto del operador se eleva a un tipo que acepta valores null; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23827-145"><see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-146">Una llamada del operador se eleva si el operador espera operandos que no aceptan valores NULL pero operandos que aceptan valores NULL se pasan a él.</span><span class="sxs-lookup"><span data-stu-id="23827-146">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span> <span data-ttu-id="23827-147">Si el valor de <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> es `true`, el operador devuelve un tipo que acepta valores NULL, y si un operando que acepta valores NULL se evalúa como `null`, el operador devuelve `null`.</span><span class="sxs-lookup"><span data-stu-id="23827-147">If the value of <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> is `true`, the operator returns a nullable type, and if a nullable operand evaluates to `null`, the operator returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Left" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Left { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-148">Obtiene el operando izquierdo de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-148">Gets the left operand of the binary operation.</span></span></summary>
        <value><span data-ttu-id="23827-149"><see cref="T:System.Linq.Expressions.Expression" /> que representa el operando izquierdo de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-149">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Linq.Expressions.BinaryExpression.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-150">Obtiene el método de implementación para la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-150">Gets the implementing method for the binary operation.</span></span></summary>
        <value><span data-ttu-id="23827-151"><see cref="T:System.Reflection.MethodInfo" /> que representa el método de implementación.</span><span class="sxs-lookup"><span data-stu-id="23827-151">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-152">Si un <xref:System.Linq.Expressions.BinaryExpression> representa una operación que utiliza un operador predefinido, el <xref:System.Linq.Expressions.BinaryExpression.Method%2A> propiedad es `null`.</span><span class="sxs-lookup"><span data-stu-id="23827-152">If a <xref:System.Linq.Expressions.BinaryExpression> represents an operation that uses a predefined operator, the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23827-153">Reduce el nodo de expresión binario a una expresión más sencilla.</span><span class="sxs-lookup"><span data-stu-id="23827-153">Reduces the binary expression node to a simpler expression.</span></span></summary>
        <returns><span data-ttu-id="23827-154">Expresión reducida.</span><span class="sxs-lookup"><span data-stu-id="23827-154">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23827-155">Si CanReduce devuelve true, debería devolver una expresión válida.</span><span class="sxs-lookup"><span data-stu-id="23827-155">If CanReduce returns true, this should return a valid expression.</span></span>  
  
 <span data-ttu-id="23827-156">Este método puede devolver otro nodo que se debe reducir a su vez.</span><span class="sxs-lookup"><span data-stu-id="23827-156">This method can return another node which itself must be reduced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Right" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Right { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23827-157">Obtiene el operando derecho de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-157">Gets the right operand of the binary operation.</span></span></summary>
        <value><span data-ttu-id="23827-158"><see cref="T:System.Linq.Expressions.Expression" /> que representa el operando derecho de la operación binaria.</span><span class="sxs-lookup"><span data-stu-id="23827-158">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.BinaryExpression Update (System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.BinaryExpression Update(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.LambdaExpression conversion, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (left As Expression, conversion As LambdaExpression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::BinaryExpression ^ Update(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::LambdaExpression ^ conversion, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="binaryExpression.Update (left, conversion, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="23827-159">La propiedad <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> del resultado.</span><span class="sxs-lookup"><span data-stu-id="23827-159">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</span></span></param>
        <param name="conversion"><span data-ttu-id="23827-160">La propiedad <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> del resultado.</span><span class="sxs-lookup"><span data-stu-id="23827-160">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</span></span></param>
        <param name="right"><span data-ttu-id="23827-161">La propiedad <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> del resultado.</span><span class="sxs-lookup"><span data-stu-id="23827-161">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="23827-162">Crea una nueva expresión que es como esta, pero usa el elemento secundario proporcionado.</span><span class="sxs-lookup"><span data-stu-id="23827-162">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="23827-163">Si todos los elementos secundarios son iguales, devolverá esta expresión.</span><span class="sxs-lookup"><span data-stu-id="23827-163">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="23827-164">Esta expresión si no se cambió ningún elemento secundario o una expresión con los elementos secundarios actualizados.</span><span class="sxs-lookup"><span data-stu-id="23827-164">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>