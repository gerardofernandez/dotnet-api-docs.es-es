<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="38c4eab0e639ebd833986852806a70ffa6a1dbc3" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51902883" /></Metadata><TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <TypeSignature Language="F#" Value="type Expression&lt;'Delegate&gt; = class&#xA;    inherit LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate"><span data-ttu-id="3e562-101">Tipo de delegado que <see cref="T:System.Linq.Expressions.Expression`1" /> representa.</span><span class="sxs-lookup"><span data-stu-id="3e562-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span></span></typeparam>
    <summary><span data-ttu-id="3e562-102">Representa una expresión lambda fuertemente tipada como una estructura de datos con el formato de un árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span></span> <span data-ttu-id="3e562-103">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="3e562-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e562-104">Cuando se asigna una expresión lambda a una variable, campo o parámetro cuyo tipo es <xref:System.Linq.Expressions.Expression%601>, el compilador emite instrucciones sobre cómo crear un árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3e562-105">Una conversión de una expresión lambda al tipo `Expression<D>` (`Expression(Of D)` en Visual Basic) si una conversión de la expresión lambda a un delegado de tipo existe `D` existe.</span><span class="sxs-lookup"><span data-stu-id="3e562-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="3e562-106">Sin embargo, la conversión puede producir un error, por ejemplo, si el cuerpo de la expresión lambda es un bloque.</span><span class="sxs-lookup"><span data-stu-id="3e562-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="3e562-107">Esto significa que los delegados y árboles de expresión se comportan de forma similar con respecto a la resolución de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="3e562-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="3e562-108">El árbol de expresión es una representación de datos en memoria de la expresión lambda.</span><span class="sxs-lookup"><span data-stu-id="3e562-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="3e562-109">El árbol de expresión hace que la estructura de la expresión lambda transparente y explícita.</span><span class="sxs-lookup"><span data-stu-id="3e562-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="3e562-110">Puede interactuar con los datos en el árbol de expresión se puede hacer con cualquier otra estructura de datos.</span><span class="sxs-lookup"><span data-stu-id="3e562-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="3e562-111">La capacidad de tratar las expresiones como estructuras de datos permite a las API recibir el código de usuario en un formato que se puede inspeccionar, transforman y procesan de forma personalizada.</span><span class="sxs-lookup"><span data-stu-id="3e562-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="3e562-112">Por ejemplo, el [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] implementación de acceso de datos usa esta utilidad para traducir los árboles de expresión para las instrucciones de Transact-SQL que se pueden evaluar la base de datos.</span><span class="sxs-lookup"><span data-stu-id="3e562-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="3e562-113">Muchos operadores de consulta estándar definidos en el <xref:System.Linq.Queryable> clase tiene uno o más parámetros de tipo <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="3e562-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="3e562-114">El <xref:System.Linq.Expressions.Expression.NodeType%2A> de un <xref:System.Linq.Expressions.Expression%601> es <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span><span class="sxs-lookup"><span data-stu-id="3e562-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="3e562-115">Use la <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> o <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> método para crear un <xref:System.Linq.Expressions.Expression%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="3e562-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e562-116">En el ejemplo de código siguiente se muestra cómo representar una expresión lambda como código ejecutable en forma de un delegado y como datos en forma de un árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="3e562-117">También se muestra cómo activar el árbol de expresión en el código ejecutable mediante el <xref:System.Linq.Expressions.Expression%601.Compile%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3e562-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="3e562-118">Expresiones lambda (Guía de programación de C#)</span><span class="sxs-lookup"><span data-stu-id="3e562-118">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b"><span data-ttu-id="3e562-119">Expression Trees</span><span class="sxs-lookup"><span data-stu-id="3e562-119">Expression Trees</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberSignature Language="F#" Value="override this.Compile : unit -&gt; 'Delegate" Usage="expression.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e562-120">Compila la expresión lambda descrita por el árbol de la expresión en el código ejecutable y genera un delegado que representa la expresión lambda.</span><span class="sxs-lookup"><span data-stu-id="3e562-120">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="3e562-121">Un delegado de tipo <paramref name="TDelegate" /> que representa la expresión lambda compilada descrita por <see cref="T:System.Linq.Expressions.Expression`1" />.</span><span class="sxs-lookup"><span data-stu-id="3e562-121">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e562-122">El <xref:System.Linq.Expressions.Expression%601.Compile%2A> método genera un delegado del tipo `TDelegate` en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="3e562-122">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="3e562-123">Cuando se ejecuta el delegado, tiene el comportamiento descrito por la semántica de la <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="3e562-123">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="3e562-124">El <xref:System.Linq.Expressions.Expression%601.Compile%2A> método puede utilizarse para obtener el valor de cualquier árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-124">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="3e562-125">En primer lugar, cree una expresión lambda que tiene la expresión como su cuerpo mediante el <xref:System.Linq.Expressions.Expression.Lambda%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3e562-125">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="3e562-126">A continuación, llame a <xref:System.Linq.Expressions.Expression%601.Compile%2A> para obtener un delegado y ejecutar el delegado para obtener el valor de la expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-126">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e562-127">En el ejemplo de código siguiente se muestra cómo <xref:System.Linq.Expressions.Expression%601.Compile%2A> se usa para ejecutar un árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-127">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberSignature Language="F#" Value="override this.Compile : bool -&gt; 'Delegate" Usage="expression.Compile preferInterpretation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation"><span data-ttu-id="3e562-128"><see langword="true" /> para indicar que la expresión se debe compilar en un formulario interpretado, si está disponible; <see langword="false" /> en caso contrario.</span><span class="sxs-lookup"><span data-stu-id="3e562-128"><see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="3e562-129">Compila la expresión lambda descrita por el árbol de expresión en el código interpretado o compilado y genera a un delegado que representa la expresión lambda.</span><span class="sxs-lookup"><span data-stu-id="3e562-129">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="3e562-130">Delegado que representa la expresión lambda compilada descrita por el elemento <see cref="T:System.Linq.Expressions.Expression`1" />.</span><span class="sxs-lookup"><span data-stu-id="3e562-130">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberSignature Language="F#" Value="override this.Compile : System.Runtime.CompilerServices.DebugInfoGenerator -&gt; 'Delegate" Usage="expression.Compile debugInfoGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator"><span data-ttu-id="3e562-131">Generador de información de depuración usado por el compilador para marcar puntos de secuencia y anotar variables locales.</span><span class="sxs-lookup"><span data-stu-id="3e562-131">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span></span></param>
        <summary><span data-ttu-id="3e562-132">Genera un delegado que representa la expresión lambda.</span><span class="sxs-lookup"><span data-stu-id="3e562-132">Produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="3e562-133">Delegado que contiene la versión compilada del lambda.</span><span class="sxs-lookup"><span data-stu-id="3e562-133">A delegate containing the compiled version of the lambda.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="expression.Update (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="3e562-134">La propiedad <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> del resultado.</span><span class="sxs-lookup"><span data-stu-id="3e562-134">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span></span></param>
        <param name="parameters"><span data-ttu-id="3e562-135">La propiedad <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> del resultado.</span><span class="sxs-lookup"><span data-stu-id="3e562-135">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="3e562-136">Crea una nueva expresión que es como esta, pero usa el elemento secundario proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3e562-136">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="3e562-137">Si todos los elementos secundarios son iguales, devolverá esta expresión.</span><span class="sxs-lookup"><span data-stu-id="3e562-137">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="3e562-138">Esta expresión si no se cambió ningún elemento secundario o una expresión con los elementos secundarios actualizados.</span><span class="sxs-lookup"><span data-stu-id="3e562-138">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>