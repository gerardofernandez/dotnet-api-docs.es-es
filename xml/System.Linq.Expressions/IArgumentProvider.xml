<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abd0b0508fdc62e37d2117e5823a54dfc7dfdce" /><Meta Name="ms.sourcegitcommit" Value="d3dcd8c426adcf1bbe5ff78a76dee13bd8ad6efd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/28/2019" /><Meta Name="ms.locfileid" Value="66251528" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="07bcb-101">Proporciona una interfaz interna para acceder a los argumentos de varios nodos de árbol (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e IndexExpression).</span><span class="sxs-lookup"><span data-stu-id="07bcb-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).</span></span>  <span data-ttu-id="07bcb-102">Esta API es solo para uso interno.</span><span class="sxs-lookup"><span data-stu-id="07bcb-102">This API is for internal use only.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

<span data-ttu-id="07bcb-103">Esta API no debe usarse.</span><span class="sxs-lookup"><span data-stu-id="07bcb-103">You should not use this API.</span></span>  <span data-ttu-id="07bcb-104">Es pública solo debido a la refactorización del ensamblado, y existe únicamente para optimizaciones de rendimiento interno.</span><span class="sxs-lookup"><span data-stu-id="07bcb-104">It is public only due to assembly refactoring, and it exists only for internal performance optimizations.</span></span> <span data-ttu-id="07bcb-105">Permite dos optimizaciones que reducen el tamaño de los árboles:</span><span class="sxs-lookup"><span data-stu-id="07bcb-105">It enables two optimizations that reduce the size of the trees:</span></span>
  
1. <span data-ttu-id="07bcb-106">Permite a los nodos retener una <xref:System.Collections.Generic.IList%601> en lugar de un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-106">It enables the nodes to hold onto an <xref:System.Collections.Generic.IList%601> instead of a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>  <span data-ttu-id="07bcb-107">Esto ahorra el costo de asignar la colección de solo lectura para cada nodo.</span><span class="sxs-lookup"><span data-stu-id="07bcb-107">This saves the cost of allocating the read-only collection for each node.</span></span>
  
2. <span data-ttu-id="07bcb-108">Permite que las subclases especializadas que se crearán suspensión en a un número específico de argumentos (por ejemplo, `Block2`, `Block2`, `Block4`).</span><span class="sxs-lookup"><span data-stu-id="07bcb-108">It enables specialized subclasses to be created that hold on to a specific number of arguments (for example, `Block2`, `Block2`, `Block4`).</span></span>  <span data-ttu-id="07bcb-109">Por lo tanto, estos nodos evitan asignar ambos un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> y una matriz para almacenar sus elementos, ahorrando así 32 bytes por nodo.</span><span class="sxs-lookup"><span data-stu-id="07bcb-109">Therefore, these nodes avoid allocating both a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> and an array for storing their elements, thus saving 32 bytes per node.</span></span>  <span data-ttu-id="07bcb-110">Esta técnica se usa en varios nodos, incluidos <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, y <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-110">This technique is used by various nodes, including <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, and <xref:System.Linq.Expressions.MethodCallExpression>.</span></span>
            
<span data-ttu-id="07bcb-111">Siguen exponiendo las propiedades LINQ originales de los nodos de árbol de expresión <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="07bcb-111">The expression tree nodes continue to expose the original LINQ properties of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objects.</span></span> <span data-ttu-id="07bcb-112">Para hacerlo mediante la reutilización de un campo para almacenar la matriz o un elemento que normalmente se almacenaría en la matriz.</span><span class="sxs-lookup"><span data-stu-id="07bcb-112">They do this by reusing a field for storing both the array or an element that would normally be stored in the array.</span></span>
            
<span data-ttu-id="07bcb-113">El caso de la matriz, la colección se asigna a tipo <xref:System.Collections.Generic.IList%601> en lugar de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-113">For the array case, the collection is typed to <xref:System.Collections.Generic.IList%601> instead of <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="07bcb-114">Cuando el nodo se construye inicialmente, es una matriz.</span><span class="sxs-lookup"><span data-stu-id="07bcb-114">When the node is initially constructed, it is an array.</span></span>  <span data-ttu-id="07bcb-115">El compilador o utilidades de esta biblioteca de acceso a los elementos a través de esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="07bcb-115">The compiler or utilities in this library access the elements through this interface.</span></span> <span data-ttu-id="07bcb-116">Obtener acceso a los elementos de matriz promueve la matriz a un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-116">Accessing array elements promotes the array to a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="07bcb-117">Para el caso del objeto, el primer argumento se almacena en un campo con tipo de <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-117">For the object case, the first argument is stored in a field typed to <xref:System.Object>.</span></span> <span data-ttu-id="07bcb-118">Cuando el nodo se construye inicialmente, este campo contiene el <xref:System.Linq.Expressions.Expression> del primer argumento.</span><span class="sxs-lookup"><span data-stu-id="07bcb-118">When the node is initially constructed, this field holds the <xref:System.Linq.Expressions.Expression> of the first argument.</span></span>  <span data-ttu-id="07bcb-119">Cuando el compilador y las utilidades de esta biblioteca, tener acceso a los argumentos, vuelva a usar esta interfaz y el descriptor de acceso para el primer argumento usa interno `Expression.ReturnObject<T>(System.Object)` método auxiliar para devolver el objeto que controla el <xref:System.Linq.Expressions.Expression> o <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> caso.</span><span class="sxs-lookup"><span data-stu-id="07bcb-119">When the compiler and utilities in this library access the arguments, they again use this interface, and the accessor for the first argument uses the internal `Expression.ReturnObject<T>(System.Object)` helper method to return the object that handles the <xref:System.Linq.Expressions.Expression> or <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> case.</span></span> <span data-ttu-id="07bcb-120">Cuando el usuario tiene acceso a la <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, se actualiza el campo de objeto para retener directamente el <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-120">When the user accesses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, the object field is updated to hold directly onto the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span>
            
<span data-ttu-id="07bcb-121">Es importante que <xref:System.Linq.Expressions.Expression> propiedades devuelven sistemáticamente la misma <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span><span class="sxs-lookup"><span data-stu-id="07bcb-121">It is important that <xref:System.Linq.Expressions.Expression> properties consistently return the same <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.</span></span> <span data-ttu-id="07bcb-122">En caso contrario, se interrumpirá el Rastreador del árbol de un sistema de reescritura utilizado por los visitantes de expresiones.</span><span class="sxs-lookup"><span data-stu-id="07bcb-122">Otherwise, the rewriter tree walker used by expression visitors will break.</span></span> <span data-ttu-id="07bcb-123">Es un cambio importante respecto a LINQ v1 devolver diferentes <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> desde la misma <xref:System.Linq.Expressions.Expression> nodo.</span><span class="sxs-lookup"><span data-stu-id="07bcb-123">It is a breaking change from LINQ v1 to return different <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> from the same <xref:System.Linq.Expressions.Expression> node.</span></span> <span data-ttu-id="07bcb-124">Actualmente, los usuarios pueden basarse en la identidad del objeto para indicar si el nodo se ha cambiado.</span><span class="sxs-lookup"><span data-stu-id="07bcb-124">Currently, users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="07bcb-125">Almacenar el <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> en un campo sobrecargado ambos reduce el uso de memoria y se mantiene la compatibilidad con la API pública.</span><span class="sxs-lookup"><span data-stu-id="07bcb-125">Storing the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span>

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="07bcb-126">Devuelve el número de argumentos al nodo de árbol de expresión.</span><span class="sxs-lookup"><span data-stu-id="07bcb-126">Returns the number of arguments to the expression tree node.</span></span> <span data-ttu-id="07bcb-127">Esta API es solo para uso interno.</span><span class="sxs-lookup"><span data-stu-id="07bcb-127">This API is for internal use only.</span></span></summary>
        <value><span data-ttu-id="07bcb-128">Número de argumentos al nodo de árbol de expresión como <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="07bcb-128">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks><span data-ttu-id="07bcb-129">Esta API no debe usarse.</span><span class="sxs-lookup"><span data-stu-id="07bcb-129">You should not use this API.</span></span> <span data-ttu-id="07bcb-130">Es pública solo debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="07bcb-130">It is public only due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="07bcb-131">Índice del argumento.</span><span class="sxs-lookup"><span data-stu-id="07bcb-131">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="07bcb-132">Devuelve el argumento en <paramref name="index" />, y se iniciará una excepción si <paramref name="index" /> está fuera de los límites.</span><span class="sxs-lookup"><span data-stu-id="07bcb-132">Returns the argument at <paramref name="index" />, throwing if <paramref name="index" /> is out of bounds.</span></span> <span data-ttu-id="07bcb-133">Esta API es solo para uso interno.</span><span class="sxs-lookup"><span data-stu-id="07bcb-133">This API is for internal use only.</span></span></summary>
        <returns><span data-ttu-id="07bcb-134">El argumento en el índice.</span><span class="sxs-lookup"><span data-stu-id="07bcb-134">The argument at index.</span></span></returns>
        <remarks><span data-ttu-id="07bcb-135">Esta API no debe usarse.</span><span class="sxs-lookup"><span data-stu-id="07bcb-135">You should not use this API.</span></span>  <span data-ttu-id="07bcb-136">Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="07bcb-136">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
