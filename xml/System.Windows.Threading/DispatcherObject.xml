<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f23a2cca058df7d454b43f189c89fe7a283dcb6" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55423243" /></Metadata><TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8bba7-101">Representa un objeto asociado a <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-101">Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bba7-102">Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.</span><span class="sxs-lookup"><span data-stu-id="8bba7-102">Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.</span></span>  <span data-ttu-id="8bba7-103">Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> el <xref:System.Windows.Threading.DispatcherObject> está asociado.</span><span class="sxs-lookup"><span data-stu-id="8bba7-103">To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.</span></span>  
  
 <span data-ttu-id="8bba7-104">Las subclases de <xref:System.Windows.Threading.DispatcherObject> que necesita para aplicar el subproceso de seguridad puede hacerlo mediante una llamada a <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> en todos los métodos públicos.</span><span class="sxs-lookup"><span data-stu-id="8bba7-104">Subclasses of <xref:System.Windows.Threading.DispatcherObject> that need to enforce thread safety can do so by calling <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> on all public methods.</span></span>  <span data-ttu-id="8bba7-105">Esto garantiza que el subproceso que realiza la llamada es el subproceso que la <xref:System.Windows.Threading.DispatcherObject> se creó.</span><span class="sxs-lookup"><span data-stu-id="8bba7-105">This guarantees the calling thread is the thread that the <xref:System.Windows.Threading.DispatcherObject> was created on.</span></span>  
  
 <span data-ttu-id="8bba7-106">Un <xref:System.Windows.Threading.DispatcherObject> no pueden crearse instancias por separado; es decir, se protegen todos los constructores.</span><span class="sxs-lookup"><span data-stu-id="8bba7-106">A <xref:System.Windows.Threading.DispatcherObject> cannot be independently instantiated; that is, all constructors are protected.</span></span>  
  
 <span data-ttu-id="8bba7-107">Objetos que derivan de <xref:System.Windows.Threading.DispatcherObject> tienen afinidad de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="8bba7-107">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="8bba7-108">Objetos que derivan de <xref:System.Windows.Freezable> quedan libres del subproceso cuando se inmovilizan.</span><span class="sxs-lookup"><span data-stu-id="8bba7-108">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="8bba7-109">Para más información, consulte [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md) (Información general sobre objetos Freezable).</span><span class="sxs-lookup"><span data-stu-id="8bba7-109">For more information, see the [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8bba7-110">Todos los miembros públicos <see langword="static" /> miembros de este tipo son seguros para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="8bba7-110">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="8bba7-111">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="8bba7-111">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="8bba7-112">Este objeto puede tener acceso solo desde el subproceso donde se creó.</span><span class="sxs-lookup"><span data-stu-id="8bba7-112">This object can be accessed only from the thread on which it was created.</span></span> <span data-ttu-id="8bba7-113">Intenta acceder a él desde otros subprocesos se iniciará un <see cref="T:System.InvalidOperationException" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-113">Attempts to access it from other threads will throw an <see cref="T:System.InvalidOperationException" />.</span></span> <span data-ttu-id="8bba7-114"><see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> o <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> proporcionan compatibilidad para serializar el trabajo en el subproceso correcto.</span><span class="sxs-lookup"><span data-stu-id="8bba7-114"><see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> or <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> provide support for marshalling work to the correct thread.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bba7-115">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-115">Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bba7-116">Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-116">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></summary>
        <returns><span data-ttu-id="8bba7-117"><see langword="true" /> si el subproceso de la llamada tiene acceso a este objeto; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-117"><see langword="true" /> if the calling thread has access to this object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bba7-118">Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-118">Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="8bba7-119">Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-119">Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="8bba7-120">La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso de llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso de llamada no tiene acceso a la Esto <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-120">The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="8bba7-121">Llamar a este método es idéntico a llamar a <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> en asociado <xref:System.Windows.Threading.Dispatcher> objeto.</span><span class="sxs-lookup"><span data-stu-id="8bba7-121">Calling this method is identical to calling <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> on the associated <xref:System.Windows.Threading.Dispatcher> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bba7-122">En el ejemplo siguiente se usa <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se creó.</span><span class="sxs-lookup"><span data-stu-id="8bba7-122">The following example uses <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="8bba7-123">El <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> método en el <xref:System.Windows.Controls.Button> se llama para comprobar el acceso al subproceso.</span><span class="sxs-lookup"><span data-stu-id="8bba7-123">The <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="8bba7-124">Si el subproceso de llamada tiene acceso, el <xref:System.Windows.Controls.Button> se actualiza mediante el acceso solo a los miembros de la <xref:System.Windows.Controls.Button>; en caso contrario, un delegado, que acepta un <xref:System.Windows.Controls.Button> como argumento, se registra en el <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-124">If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8bba7-125">Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> al que está asociado <see cref="T:System.Windows.Threading.DispatcherObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-125">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> this <see cref="T:System.Windows.Threading.DispatcherObject" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="8bba7-126">El distribuidor.</span><span class="sxs-lookup"><span data-stu-id="8bba7-126">The dispatcher.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bba7-127">Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.</span><span class="sxs-lookup"><span data-stu-id="8bba7-127">Only the thread that the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject> directly.</span></span>  <span data-ttu-id="8bba7-128">Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> el <xref:System.Windows.Threading.DispatcherObject> está asociado.</span><span class="sxs-lookup"><span data-stu-id="8bba7-128">To access a <xref:System.Windows.Threading.DispatcherObject> from a thread other than the thread the <xref:System.Windows.Threading.DispatcherObject> was created on, call <xref:System.Windows.Threading.Dispatcher.Invoke%2A> and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> on the <xref:System.Windows.Threading.Dispatcher> the <xref:System.Windows.Threading.DispatcherObject> is associated with.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8bba7-129">Exige que el subproceso de la llamada tenga acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-129">Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8bba7-130">Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-130">Only the thread the <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> was created on may access the <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="8bba7-131">Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-131">Any thread can check to see whether it has access to this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
 <span data-ttu-id="8bba7-132">La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso de llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso de llamada no tiene acceso a la Esto <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="8bba7-132">The difference between <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> is that <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> returns a Boolean that specifies whether the calling thread has access to this <xref:System.Windows.Threading.DispatcherObject> and <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> throws an exception if the calling thread does not have access to the this <xref:System.Windows.Threading.DispatcherObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8bba7-133">En el ejemplo siguiente se usa <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se creó.</span><span class="sxs-lookup"><span data-stu-id="8bba7-133">The following example uses <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="8bba7-134">Si el subproceso de llamada no tiene acceso, un <xref:System.InvalidOperationException> se produce.</span><span class="sxs-lookup"><span data-stu-id="8bba7-134">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8bba7-135">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</span><span class="sxs-lookup"><span data-stu-id="8bba7-135">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>