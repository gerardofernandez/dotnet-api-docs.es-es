<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d486d574a6809448fc2fa2979413fc2f42880f3" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52199928" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4c6bc-101">Proporciona los servicios para administrar la cola de elementos de trabajo de un subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-102">El <xref:System.Windows.Threading.Dispatcher> mantiene una cola con prioridades de los elementos de trabajo para un subproceso concreto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="4c6bc-103">Cuando un <xref:System.Windows.Threading.Dispatcher> se crea en un subproceso, pasa a ser el único <xref:System.Windows.Threading.Dispatcher> que pueden asociarse con el subproceso, incluso si la <xref:System.Windows.Threading.Dispatcher> se apaga.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="4c6bc-104">Si se intenta obtener el <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> para el subproceso actual y un <xref:System.Windows.Threading.Dispatcher> no está asociado con el subproceso, un <xref:System.Windows.Threading.Dispatcher> se creará.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="4c6bc-105">Un <xref:System.Windows.Threading.Dispatcher> también se crea cuando se crea un <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="4c6bc-106">Si creas un <xref:System.Windows.Threading.Dispatcher> en un subproceso en segundo plano, asegúrese de cerrar el distribuidor antes de salir del subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="4c6bc-107">Si un <xref:System.Windows.Threading.Dispatcher> se apague, no se puede reiniciar.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="4c6bc-108">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], un <xref:System.Windows.Threading.DispatcherObject> sólo puede tener acceso el <xref:System.Windows.Threading.Dispatcher> está asociado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="4c6bc-109">Por ejemplo, un subproceso en segundo plano no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que está asociado con el <xref:System.Windows.Threading.Dispatcher> en el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="4c6bc-110">En orden para el subproceso en segundo plano tener acceso a la <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado con el [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="4c6bc-111">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-113">La operación se agrega a la cola de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-114">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="4c6bc-115">Todos los métodos en <xref:System.Windows.Threading.Dispatcher>, con la excepción de <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, son de subprocesamiento libre.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="4c6bc-116">Objetos que derivan de <xref:System.Windows.Threading.DispatcherObject> tienen afinidad de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="4c6bc-117">Objetos que derivan de <xref:System.Windows.Freezable> quedan libres del subproceso cuando se inmovilizan.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="4c6bc-118">Para obtener más información, consulte [Información general sobre objetos Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="4c6bc-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-119">El ejemplo siguiente muestra cómo colocar una operación en un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="4c6bc-120">Para el código fuente completo de este ejemplo, vea [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="4c6bc-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="4c6bc-121">En primer lugar, se crea un delegado que no acepta argumentos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="4c6bc-122">A continuación, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> se llama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="4c6bc-123">Esta llamada a <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> toma dos parámetros: la prioridad, que se establece en <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>y la devolución de llamada, que se pasa a través de una instancia del delegado `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="4c6bc-124">Single-Threaded Application with Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="4c6bc-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c6bc-125">Ejecuta asincrónicamente un delegado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-126">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-127">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-128">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-129">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-131">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Devuelve un <xref:System.Windows.Threading.DispatcherOperation> objeto que puede usarse para interactuar con el delegado al que el delegado de eventos cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="4c6bc-134">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-135">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-136">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-137">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-138">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-139">Si hay varios <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> las llamadas se realizan al mismo tiempo <xref:System.Windows.Threading.DispatcherPriority>, se ejecutará en el orden en que se realizaron las llamadas.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="4c6bc-140">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-141">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-142">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-143">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-144">Ejecuta de forma asincrónica el delegado especificado con los argumentos especificados en el subproceso en el que se creó el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-145">Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-146">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-147">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-148">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-149">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-150">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-152">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-153">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-154">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-155">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-157">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-158">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-159">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-160">El delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="4c6bc-161">Ejecuta asincrónicamente el delegado especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-162">Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-163">Si hay varios <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> las llamadas se realizan al mismo tiempo <xref:System.Windows.Threading.DispatcherPriority>, se ejecutará en el orden en que se realizaron las llamadas.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="4c6bc-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Devuelve un <xref:System.Windows.Threading.DispatcherOperation> objeto que puede usarse para interactuar con el delegado al que el delegado de eventos cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="4c6bc-165">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-166">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-167">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-168">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-169">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-171">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-172">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-173">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-174">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-176">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-177">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-178">El ejemplo siguiente muestra cómo colocar una operación en un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="4c6bc-179">Para el código fuente completo de este ejemplo, vea [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="4c6bc-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="4c6bc-180">En primer lugar, se crea un delegado que no acepta argumentos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="4c6bc-181">A continuación, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> se llama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="4c6bc-182">Porque cada <xref:System.Windows.Threading.DispatcherObject> tiene una propiedad que devuelve el <xref:System.Windows.Threading.Dispatcher> está asociado, deseado <xref:System.Windows.Threading.Dispatcher> se obtiene consultando la <xref:System.Windows.Threading.DispatcherObject>, en este caso un <xref:System.Windows.Controls.Button> denominado `startStopButton`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="4c6bc-183">La llamada a <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> toma dos parámetros: la prioridad, que se establece en <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>y la devolución de llamada, que se pasa a través de una instancia del delegado `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-184">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-185"><paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="4c6bc-186">Single-Threaded Application with Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="4c6bc-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-187">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-188">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-189">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-190">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-191">Ejecuta de forma asincrónica el delegado especificado, con la prioridad indicada y los argumentos especificados, en el subproceso en el que se creó el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-192">Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-193">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-194">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-195">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-196">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-197">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-199">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-200">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-201">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-202">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-204">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-205">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-206">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-207">Delegado a un método que toma un argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-208">Objeto que se va a pasar como argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="4c6bc-209">Ejecuta asincrónicamente el delegado especificado en la prioridad indicada y con el argumento especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-210">Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-211">`Arg` puede ser `null` si se necesita ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="4c6bc-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Devuelve un <xref:System.Windows.Threading.DispatcherOperation> objeto que puede usarse para interactuar con el delegado al que el delegado de eventos cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="4c6bc-213">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-214">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-215">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-216">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-217">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-219">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-220">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-221">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-222">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-224">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-225">Si hay varios <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> las llamadas se realizan al mismo tiempo <xref:System.Windows.Threading.DispatcherPriority>, se ejecutará en el orden en que se realizaron las llamadas.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="4c6bc-226">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-227">El ejemplo siguiente muestra cómo colocar una operación en un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="4c6bc-228">En primer lugar, se crea un delegado que acepta un argumento, en este caso una cadena.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="4c6bc-229">A continuación, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> se llama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="4c6bc-230">Porque cada <xref:System.Windows.Threading.DispatcherObject> tiene una propiedad que devuelve el <xref:System.Windows.Threading.Dispatcher> está asociado, deseado <xref:System.Windows.Threading.Dispatcher> se obtiene consultando la <xref:System.Windows.Threading.DispatcherObject>, en este caso un <xref:System.Windows.Controls.Grid> denominado `tomorrowsWeather`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="4c6bc-231">La llamada a <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> toma tres parámetros: la prioridad, que se establece en <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; la devolución de llamada, que se pasa a través de una instancia del delegado `OneArgDelegate`; y una cadena denominada `weather`, que es el argumento de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-232">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-233"><paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="4c6bc-234">Single-Threaded Application with Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="4c6bc-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-235">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-236">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-237">Objeto que se va a pasar como argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-238">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="4c6bc-239">Ejecuta asincrónicamente el delegado especificado en la prioridad indicada y con la matriz de argumentos indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-240">Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-241">El `arg` parámetro puede ser `null` si se necesita ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="4c6bc-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Devuelve un <xref:System.Windows.Threading.DispatcherOperation> objeto que puede usarse para interactuar con el delegado al que el delegado de eventos cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="4c6bc-243">El <xref:System.Windows.Threading.DispatcherOperation> objeto devuelto por <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se puede usar de varias formas para interactuar con el delegado especificado, como:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="4c6bc-244">Cambiar el <xref:System.Windows.Threading.DispatcherPriority> del delegado porque lo está pendiente la ejecución en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-245">Quitando al delegado de la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="4c6bc-246">Esperando a que el delegado que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="4c6bc-247">Obtener el valor que devuelve el delegado después de se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="4c6bc-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica; por lo tanto, control vuelve inmediatamente al objeto que realiza la llamada después de que se llame.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="4c6bc-249">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-250">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-251">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-252">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-254">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-255">Si hay varios <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> las llamadas se realizan al mismo tiempo <xref:System.Windows.Threading.DispatcherPriority>, se ejecutará en el orden en que se realizaron las llamadas.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="4c6bc-256">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> se llama en un <xref:System.Windows.Threading.Dispatcher> que se ha cerrado, la propiedad estado devuelto del <xref:System.Windows.Threading.DispatcherOperation> está establecido en <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-257">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> no es una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="4c6bc-259">Single-Threaded Application with Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="4c6bc-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-260">Prioridad en la que empezar a cerrar el distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="4c6bc-261">Inicia asincrónicamente el cierre de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demandas no restringido los permisos de la interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="4c6bc-263">Cuando el <xref:System.Windows.Threading.Dispatcher> empieza a cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-264">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-265">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-266">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-267">para cerrar el distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="4c6bc-268">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-269">Determina si el subproceso de la llamada es el subproceso asociado a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-270">Es <see langword="true" /> si el subproceso de la llamada es el subproceso asociado a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-271">Solo el <xref:System.Windows.Threading.Dispatcher> que un <xref:System.Windows.Threading.DispatcherObject> se crea en puede tener acceso al objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="4c6bc-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> para tener acceso al objeto desde un subproceso diferente.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="4c6bc-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> se puede llamar desde cualquier subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="4c6bc-274">La diferencia entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> y <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> es <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> devuelve un valor booleano que indica si el subproceso de llamada tiene acceso a la <xref:System.Windows.Threading.Dispatcher> y <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-275">En el ejemplo siguiente se usa <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> para determinar si un subproceso tiene acceso a un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="4c6bc-276">El <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> método en el <xref:System.Windows.Threading.Dispatcher> asociado con el <xref:System.Windows.Controls.Button> se llama para comprobar el acceso al subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="4c6bc-277">Si el subproceso de llamada tiene acceso a la <xref:System.Windows.Threading.Dispatcher>, el <xref:System.Windows.Controls.Button> se actualiza mediante el acceso a los miembros de la <xref:System.Windows.Controls.Button>; en caso contrario, un delegado, que acepta un <xref:System.Windows.Controls.Button> como argumento, se coloca en el <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="4c6bc-278">El <xref:System.Windows.Threading.Dispatcher> delegará el trabajo de actualización de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-279">Obtiene <see cref="T:System.Windows.Threading.Dispatcher" /> del subproceso que se ejecuta actualmente y crea un nuevo objeto <see cref="T:System.Windows.Threading.Dispatcher" /> si aún no hay ninguno asociado al subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="4c6bc-280">Distribuidor asociado al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-281">Si un <xref:System.Windows.Threading.Dispatcher> no está asociado con el subproceso actual, un nuevo <xref:System.Windows.Threading.Dispatcher> se creará.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="4c6bc-282">Esto no sucede así con el método <xref:System.Windows.Threading.Dispatcher.FromThread%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="4c6bc-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> devolverá `null` si no hay un distribuidor asociado al subproceso especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-284">Deshabilita el procesamiento de la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-285">Estructura usada para volver a habilitar el procesamiento del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-286">Deshabilite el procesamiento del distribuidor es un método avanzado que está pensado para eliminar la posibilidad de reentrada no relacionada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="4c6bc-287">Los efectos de deshabilitar el procesamiento son los siguientes:</span><span class="sxs-lookup"><span data-stu-id="4c6bc-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="4c6bc-288">Bloqueos CLR no extrae los mensajes internamente.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="4c6bc-289"><xref:System.Windows.Threading.DispatcherFrame> no se permiten objetos que se van a insertar.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="4c6bc-290">No se permite el procesamiento de mensajes.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="4c6bc-291">El <xref:System.Windows.Threading.DispatcherProcessingDisabled> estructura que <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> devuelve cuando se llama puede utilizarse para volver a habilitar el procesamiento del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="4c6bc-292">Una llamada a <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> en el <xref:System.Windows.Threading.DispatcherProcessingDisabled> estructura vuelve a habilita el procesamiento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="4c6bc-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> solo se puede llamar en el subproceso de la <xref:System.Windows.Threading.Dispatcher> está asociado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-294">El ejemplo siguiente muestra cómo deshabilitar el procesamiento del distribuidor y volver a habilitar el procesamiento del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="4c6bc-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> se llama en un **mediante** instrucción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="4c6bc-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> Devuelve un <xref:System.Windows.Threading.DispatcherProcessingDisabled> estructura que se usa como el objeto se elimina cuando el **mediante** bloquear finaliza.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="4c6bc-297">Cuando <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> se llama en el <xref:System.Windows.Threading.DispatcherProcessingDisabled> estructura, el procesamiento del distribuidor se vuelve a habilitar.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-298">Solicita que todos salgan los fotogramas, incluidos los fotogramas anidados.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-299">para llamar a este método.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-299">for calling this method.</span></span> <span data-ttu-id="4c6bc-300">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="4c6bc-301">Subproceso del que se va a obtener <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="4c6bc-302">Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> del subproceso especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-303">Distribuidor de <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-304">Si no está disponible para el subproceso especificado, un distribuidor `null` se devolverá.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="4c6bc-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> no se crea un <xref:System.Windows.Threading.Dispatcher> en un subproceso que no tiene un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="4c6bc-306">Un nuevo <xref:System.Windows.Threading.Dispatcher> se crea en un subproceso que no tenga ya una <xref:System.Windows.Threading.Dispatcher> al intentar obtener el <xref:System.Windows.Threading.Dispatcher> utilizando el <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-307">Determina si <see cref="T:System.Windows.Threading.Dispatcher" /> ha terminado de cerrarse.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="4c6bc-308">Es <see langword="true" /> si el distribuidor ha terminado de cerrarse; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-309">Cuando el <xref:System.Windows.Threading.Dispatcher> empieza a cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-310">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-311">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-312">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-313">Determina si <see cref="T:System.Windows.Threading.Dispatcher" /> se está cerrando.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="4c6bc-314">Es <see langword="true" /> si <see cref="T:System.Windows.Threading.Dispatcher" /> se ha empezado a cerrar; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-315">Cuando el <xref:System.Windows.Threading.Dispatcher> empieza a cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-316">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-317">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-318">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-319">Obtiene la colección de enlaces que proporcionan la información de evento adicional sobre <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="4c6bc-320">Enlaces asociados a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-321">El <xref:System.Windows.Threading.DispatcherHooks> clase proporciona información de eventos adicional sobre el <xref:System.Windows.Threading.Dispatcher>, por ejemplo, cuando el <xref:System.Windows.Threading.Dispatcher> está inactivo o cuando se complete una operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-322">Para obtener esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-322">for getting this property.</span></span>  <span data-ttu-id="4c6bc-323">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c6bc-324">Ejecuta sincrónicamente el delegado especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-325">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-326">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-327">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-328">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-330">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-332">En el ejemplo siguiente se coloca un delegado en un <xref:System.Windows.Threading.Dispatcher> en <xref:System.Windows.Threading.DispatcherPriority.Normal> mediante <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-333">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="4c6bc-334">Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-335">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-336">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-337">Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-338">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-339">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-340">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-341">Ejecuta de forma sincrónica el delegado especificado con los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-342">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-343">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-344">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-345">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-346">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-348">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-350">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-351">Un delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="4c6bc-352">Ejecuta sincrónicamente el delegado especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-353">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-354">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-355">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-356">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-357">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-359">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-361">En el ejemplo siguiente se coloca un delegado en un <xref:System.Windows.Threading.Dispatcher> en <xref:System.Windows.Threading.DispatcherPriority.Normal> mediante <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c6bc-362"><paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-363"><paramref name="priority" /> no es una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-364">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-365">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-366">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-367">Un objeto que indica si cancelar la acción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="4c6bc-368">Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-369">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-370">Tiempo máximo que se esperará a que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-371">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-372">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-373">Ejecuta de forma sincrónica el delegado especificado dentro del intervalo de tiempo designado y con la prioridad y los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-374">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-375">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-376">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-377">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-378">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-380">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-382">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-383">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-384">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-385">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-386">Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-387">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-388">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-389">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-390">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-391">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-393">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-395">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-396">Delegado a un método que toma un argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-397">Objeto cuyos valores se pasan como argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="4c6bc-398">Ejecuta el delegado especificado en la prioridad indicada con el argumento especificado sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-399">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-400">`Arg` puede ser `null` si no se necesita un argumento</span><span class="sxs-lookup"><span data-stu-id="4c6bc-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="4c6bc-401">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-402">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-403">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-404">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-406">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c6bc-408"><paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-409"><paramref name="priority" /> no es una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-410">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-411">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-412">Tiempo máximo de espera para que finalice la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-413">El delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="4c6bc-414">Ejecuta sincrónicamente el delegado especificado en la prioridad indicada y con el valor de tiempo de espera especificado en el subproceso que creó <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-415">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-416">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-417">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-418">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-419">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-421">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-423">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-424">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-425">Un objeto que indica si cancelar la acción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-426">Tiempo mínimo que se esperará a que se inicie la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="4c6bc-427">Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4c6bc-428">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-429">Tiempo máximo que se esperará a que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-430">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-431">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="4c6bc-432">Puede ser <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-433">Ejecuta de forma sincrónica el delegado especificado dentro del intervalo de tiempo designado y con la prioridad y los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-434">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-435">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="4c6bc-436">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="4c6bc-437">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="4c6bc-438">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="4c6bc-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="4c6bc-440">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-442">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-443">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-444">Objeto cuyos valores se pasan como argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-445">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="4c6bc-446">Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-447">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-448">`Arg` puede ser `null` si no se necesita un argumento</span><span class="sxs-lookup"><span data-stu-id="4c6bc-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="4c6bc-449">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-450">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-451">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-452">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-454">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c6bc-456"><paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-457"><paramref name="priority" /> no es una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-458">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-459">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-460">Tiempo máximo de espera para que finalice la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-461">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-462">Objeto cuyos valores se pasan como argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="4c6bc-463">Puede ser <see langword="null" /> si no se necesita ningún argumento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="4c6bc-464">Ejecuta el delegado especificado en la prioridad indicada con el argumento especificado sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-465">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-466">`Arg` puede ser `null` si no se necesita un argumento</span><span class="sxs-lookup"><span data-stu-id="4c6bc-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="4c6bc-467">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-468">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-469">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-470">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-472">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c6bc-474"><paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-475"><paramref name="priority" /> no es una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-476">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-477">Prioridad, relativa a otras operaciones pendientes de la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />, con la que se invoca el método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-478">Tiempo máximo de espera para que finalice la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="4c6bc-479">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="4c6bc-480">Objeto que se va a pasar como un argumento al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="4c6bc-481">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="4c6bc-482">Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-483">Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-484">`Arg` puede ser `null` si no se necesita un argumento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="4c6bc-485">En [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], sólo el subproceso que creó un <xref:System.Windows.Threading.DispatcherObject> pueden tener acceso a ese objeto.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="4c6bc-486">Por ejemplo, un subproceso en segundo plano que se ponga en marcha del subproceso de interfaz de usuario principal no puede actualizar el contenido de un <xref:System.Windows.Controls.Button> que se creó en el subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="4c6bc-487">En orden para el subproceso en segundo plano tener acceso a la propiedad de contenido de la <xref:System.Windows.Controls.Button>, el subproceso en segundo plano debe delegar el trabajo en el <xref:System.Windows.Threading.Dispatcher> asociado al subproceso de interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="4c6bc-488">Esto se logra mediante el uso <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="4c6bc-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es sincrónico y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="4c6bc-490">La operación se agrega a la cola de eventos de la <xref:System.Windows.Threading.Dispatcher> en el índice especificado <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="4c6bc-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> es una operación sincrónica; por lo tanto, control no se devuelve al objeto que realiza la llamada hasta después de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c6bc-492"><paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-493"><paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-494">El valor de <paramref name="method" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-495">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-496">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="4c6bc-497">Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-498">El valor devuelto por `callback`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-499">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-500">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-501">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-502">Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-503">El valor devuelto por `callback`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-504">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-505">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-506">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-507">Un objeto que indica si cancelar la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4c6bc-508">Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-509">El valor devuelto por `callback`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-510">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-511">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-512">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-513">Un objeto que indica si cancelar la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="4c6bc-514">Tiempo mínimo que se esperará a que se inicie la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="4c6bc-515">Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-516">El valor devuelto por `callback`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c6bc-517">Ejecuta asincrónicamente el delegado especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-518">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="4c6bc-519">Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-520">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-521">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-522">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-523">Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-524">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="4c6bc-525">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-526">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-527">Un objeto que indica si cancelar la acción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="4c6bc-528">Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-529">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-530">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-531">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="4c6bc-532">Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-533">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-534">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-535">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-536">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="4c6bc-537">Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-538">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="4c6bc-539">Tipo del valor devuelto del delegado especificado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="4c6bc-540">Delegado para invocar a través del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="4c6bc-541">Prioridad que determina en qué orden se invoca la devolución de llamada especificada con respecto a las demás operaciones pendientes de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4c6bc-542">Un objeto que indica si cancelar la operación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4c6bc-543">Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-544">Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-545">Inicia sincrónicamente el proceso de cierre de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demandas no restringido los permisos de la interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="4c6bc-547">Cuando el <xref:System.Windows.Threading.Dispatcher> empieza a cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-548">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-549">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-550">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-551">para cerrar el distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="4c6bc-552">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="4c6bc-553">Fotograma del distribuidor que se va a procesar.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="4c6bc-554">Escribe un bucle de ejecución.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-555">Un <xref:System.Windows.Threading.DispatcherFrame> representa un bucle que procesa los elementos de trabajo pendiente.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="4c6bc-556">El distribuidor procese la cola de elementos de trabajo en un bucle.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="4c6bc-557">El bucle se conoce como una trama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="4c6bc-558">El bucle inicial suele ser iniciado por la aplicación mediante una llamada a <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="4c6bc-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> entra en un bucle representado por el parámetro `frame`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="4c6bc-560">En cada iteración del bucle, la <xref:System.Windows.Threading.Dispatcher> comprobará el <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propiedad en el <xref:System.Windows.Threading.DispatcherFrame> clase para determinar si el bucle debe continuar o si se detiene.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="4c6bc-561"><xref:System.Windows.Threading.DispatcherFrame> permite la <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propiedad debe establecerse explícitamente y se respeta el <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> propiedad en el <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="4c6bc-562">Esto significa que cuando el <xref:System.Windows.Threading.Dispatcher> empieza a cerrar, los marcos que use el valor predeterminado <xref:System.Windows.Threading.DispatcherFrame> implementación se cerrará, que permite a los fotogramas anidados salir.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-563">El ejemplo siguiente muestra cómo usar un <xref:System.Windows.Threading.DispatcherFrame> para lograr resultados similares como la [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c6bc-564">El valor de <paramref name="frame" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c6bc-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> es <see langword="true" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="4c6bc-566">O bien</span><span class="sxs-lookup"><span data-stu-id="4c6bc-566">-or-</span></span> 
 <span data-ttu-id="4c6bc-567"><paramref name="frame" /> se ejecuta en un objeto <see cref="T:System.Windows.Threading.Dispatcher" /> diferente.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="4c6bc-568">O bien</span><span class="sxs-lookup"><span data-stu-id="4c6bc-568">-or-</span></span> 
<span data-ttu-id="4c6bc-569">Se ha deshabilitado el procesamiento del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-570">Para insertar un fotograma de ejecución.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-570">for pushing an execution frame.</span></span>  <span data-ttu-id="4c6bc-571">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-572">Inserta el fotograma de ejecución principal en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-573">El <xref:System.Windows.Threading.Dispatcher> procesa la cola de eventos en un bucle.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="4c6bc-574">El bucle se conoce como una trama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="4c6bc-575">El bucle inicial suele ser iniciado por la aplicación mediante una llamada a <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="4c6bc-576">El marco de ejecución principal continuará hasta el <xref:System.Windows.Threading.Dispatcher> está apagada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-577">Se produce cuando <see cref="T:System.Windows.Threading.Dispatcher" /> termina de cerrarse.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-578">Cuando el proceso de cierre de un <xref:System.Windows.Threading.Dispatcher> se inicia, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-579">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-580">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-581">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-582">Se produce cuando <see cref="T:System.Windows.Threading.Dispatcher" /> empieza a cerrarse.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-583">Cuando el proceso de cierre de un <xref:System.Windows.Threading.Dispatcher> se inicia, el <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> provoca el evento y <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> está establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-584">El <xref:System.Windows.Threading.Dispatcher> no se apaga completamente hasta que se desenrede la cola de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="4c6bc-585">Cuando el distribuidor termina de cerrarse, el <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> provoca el evento y el <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="4c6bc-586">Una vez que comienza el proceso de cierre, trabajo pendiente se anulan los elementos de la cola.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-587">Obtiene el subproceso al que está asociado este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="4c6bc-588">Subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-589">Se produce cuando se produce y no se detecta una excepción de subproceso durante la ejecución de un delegado mediante los métodos <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> o <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-590">Este evento se desencadena cuando una excepción que se produjo durante la ejecución de un delegado por medio de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> es no detectadas.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="4c6bc-591">Un controlador puede marcar la excepción como controlado, que impedirá que el controlador de excepción interna que se llama.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="4c6bc-592">Controladores de eventos para este evento se deben escribir con cuidado para evitar crear excepciones secundarias y detectar cualquier usuario que se producen.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="4c6bc-593">Se recomienda evitar la asignación de memoria o realizar operaciones intensivas en el controlador de cualquier recurso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="4c6bc-594">El <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> eventos proporcionan un medio para que no produzca el <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="4c6bc-595">El <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento se produce en primer lugar y si <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> en el <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> está establecido en `false`, el <xref:System.Windows.Threading.Dispatcher.UnhandledException> no se producirá el evento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c6bc-596">Se produce cuando se produce y no se detecta una excepción de subproceso durante la ejecución de un delegado mediante los métodos <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> o <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> mientras se está en la fase de filtrado.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-597">Este evento se desencadena durante la fase de filtrado para una excepción producida durante la ejecución de un delegado por medio de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> y no detectada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="4c6bc-598">La pila de llamadas no se desenreda en este momento (excepciones de primera oportunidad).</span><span class="sxs-lookup"><span data-stu-id="4c6bc-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="4c6bc-599">Controladores de eventos para este evento se deben escribir con cuidado para evitar crear excepciones secundarias y detectar cualquier usuario que se producen.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="4c6bc-600">Se recomienda evitar la asignación de memoria o realizar operaciones intensivas en el controlador de cualquier recurso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="4c6bc-601">El <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> eventos proporcionan un medio para que no produzca el <xref:System.Windows.Threading.Dispatcher.UnhandledException> eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="4c6bc-602">El <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> evento se produce en primer lugar y si <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> en el <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> está establecido en `false`, el <xref:System.Windows.Threading.Dispatcher.UnhandledException> no se producirá el evento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="4c6bc-603">Para agregar o quitar un controlador para este evento.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="4c6bc-604">Enumeraciones asociadas:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="4c6bc-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-605">Prioridad que se va a comprobar.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="4c6bc-606">Cadena que devolverá la excepción que se produce si la prioridad no es válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="4c6bc-607">Determina si el objeto <see cref="T:System.Windows.Threading.DispatcherPriority" /> especificado tiene una prioridad válida.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="4c6bc-608"><paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-609">Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-610">Solo el subproceso de la <xref:System.Windows.Threading.Dispatcher> se crea en pueden tener acceso a la <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="4c6bc-611">Este método es público. por lo tanto, cualquier subproceso puede comprobar si tiene acceso a la <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="4c6bc-612">La diferencia entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> y <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> es <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> devuelve un valor booleano si el subproceso de llamada no tiene acceso a la <xref:System.Windows.Threading.Dispatcher> y <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c6bc-613">En el ejemplo siguiente se usa <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se creó.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="4c6bc-614">El método toma un objeto como argumento, que se convierte en un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="4c6bc-615">El <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> método en el <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button> se llama para comprobar el acceso al subproceso.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="4c6bc-616">Si el subproceso de llamada tiene acceso a la <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> se actualiza mediante el acceso solo a los miembros de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="4c6bc-617">Si el subproceso de llamada no tiene acceso, un <xref:System.InvalidOperationException> se produce.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="4c6bc-618">En este ejemplo detecta la excepción e inserta un delegado, que acepta un <xref:System.Windows.Controls.Button> como argumento, en el <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="4c6bc-619">Esto <xref:System.Windows.Threading.Dispatcher> realizará el trabajo de actualización de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c6bc-620">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c6bc-621">Crea un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c6bc-622">Crea un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-623">Objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-624">Este método proporciona una manera de liberar temporalmente el control de ejecución para el distribuidor actual para que pueda hacer otro trabajo, como procesar otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="4c6bc-625">Use la `await`, o `Await` en Visual Basic, operador en el valor devuelto para devolver el control al distribuidor actual.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="4c6bc-626">Utilice este método si desea dar una oportunidad para procesar los eventos mientras la aplicación realiza mucho trabajo en el subproceso de interfaz de usuario de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="4c6bc-627">Por ejemplo, puede usar este método en un bucle de ejecución prolongada que actualiza un control.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="4c6bc-628">Este método es equivalente a llamar a la <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> método y pasando <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="4c6bc-629">Prioridad con la que se programa la continuación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="4c6bc-630">Crea un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="4c6bc-631">El trabajo que se produce cuando el control vuelve al código que espera el resultado de este método se programa con la prioridad especificada.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="4c6bc-632">Objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c6bc-633">Este método proporciona una manera de liberar temporalmente el control de ejecución para el distribuidor actual para que pueda hacer otro trabajo, como procesar otros eventos.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="4c6bc-634">Use la `await`, o `Await` en Visual Basic, operador en el valor devuelto para devolver el control al distribuidor actual.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="4c6bc-635">Utilice este método si desea dar una oportunidad para procesar los eventos mientras la aplicación realiza mucho trabajo en el subproceso de interfaz de usuario de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="4c6bc-636">Por ejemplo, puede usar este método en un bucle de ejecución prolongada que actualiza un control.</span><span class="sxs-lookup"><span data-stu-id="4c6bc-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>