<Type Name="ISoapUtility" FullName="System.EnterpriseServices.Internal.ISoapUtility">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e224ced53329b7ede72a5bb12c3172d69b400d67" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55391198" /></Metadata><TypeSignature Language="C#" Value="public interface ISoapUtility" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISoapUtility" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.ISoapUtility" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISoapUtility" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISoapUtility" />
  <TypeSignature Language="F#" Value="type ISoapUtility = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("5AC4CB7E-F89F-429b-926B-C7F940936BF4")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ae55d-101">Proporciona utilidades que admiten que el servidor exporte servidores proxy de aplicación COM+ con SOAP habilitado y el cliente los importe.</span><span class="sxs-lookup"><span data-stu-id="ae55d-101">Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae55d-102">Funciones de la utilidad <xref:System.EnterpriseServices.Internal.ISoapUtility> proporciona se llaman desde varias ubicaciones dentro de COM +; sin embargo, su objetivo principal es admitir la exportación e importación de los servidores proxy de cliente.</span><span class="sxs-lookup"><span data-stu-id="ae55d-102">The utility functions that <xref:System.EnterpriseServices.Internal.ISoapUtility> provides are called from numerous locations within COM+; however, their primary purpose is to support the export and import of client proxies.</span></span>  
  
 <span data-ttu-id="ae55d-103">Consulte <xref:System.EnterpriseServices.Internal.SoapUtility> para la implementación predeterminada.</span><span class="sxs-lookup"><span data-stu-id="ae55d-103">See <xref:System.EnterpriseServices.Internal.SoapUtility> for the default implementation.</span></span>  
  
 <span data-ttu-id="ae55d-104"><xref:System.EnterpriseServices.Internal.ISoapUtility> se usa internamente por .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="ae55d-104"><xref:System.EnterpriseServices.Internal.ISoapUtility> is used internally by the .NET Framework.</span></span> <span data-ttu-id="ae55d-105">No es necesario usarlo directamente en el código.</span><span class="sxs-lookup"><span data-stu-id="ae55d-105">You do not need to use it directly in your code.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetServerBinPath">
      <MemberSignature Language="C#" Value="public void GetServerBinPath (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string binPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetServerBinPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, [out] string&amp; binPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerBinPath(System.String,System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetServerBinPath (rootWebServer As String, inBaseUrl As String, inVirtualRoot As String, ByRef binPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetServerBinPath(System::String ^ rootWebServer, System::String ^ inBaseUrl, System::String ^ inVirtualRoot, [Runtime::InteropServices::Out] System::String ^ % binPath);" />
      <MemberSignature Language="F#" Value="abstract member GetServerBinPath : string * string * string *  -&gt; unit" Usage="iSoapUtility.GetServerBinPath (rootWebServer, inBaseUrl, inVirtualRoot, binPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="binPath" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer"><span data-ttu-id="ae55d-106">Servidor Web raíz.</span><span class="sxs-lookup"><span data-stu-id="ae55d-106">The root Web server.</span></span></param>
        <param name="inBaseUrl"><span data-ttu-id="ae55d-107">Dirección URL base.</span><span class="sxs-lookup"><span data-stu-id="ae55d-107">The base URL address.</span></span></param>
        <param name="inVirtualRoot"><span data-ttu-id="ae55d-108">Nombre de la raíz virtual.</span><span class="sxs-lookup"><span data-stu-id="ae55d-108">The name of the virtual root.</span></span></param>
        <param name="binPath"><span data-ttu-id="ae55d-109">El parámetro que devuelve este método contiene la ruta de acceso de archivo del directorio bin de la raíz virtual SOAP.</span><span class="sxs-lookup"><span data-stu-id="ae55d-109">When this method returns, this parameter contains the file path for the SOAP virtual root bin directory.</span></span></param>
        <summary><span data-ttu-id="ae55d-110">Devuelve la ruta de acceso del directorio bin de la raíz virtual SOAP.</span><span class="sxs-lookup"><span data-stu-id="ae55d-110">Returns the path for the SOAP virtual root bin directory.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="ae55d-111">Un llamador de la cadena de llamadas no tiene permiso para obtener acceso al código no administrado.</span><span class="sxs-lookup"><span data-stu-id="ae55d-111">A caller in the call chain does not have permission to access unmanaged code.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ae55d-112">La utilidad SOAP no está disponible.</span><span class="sxs-lookup"><span data-stu-id="ae55d-112">The SOAP utility is not available.</span></span></exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException"><span data-ttu-id="ae55d-113">La llamada para obtener el directorio de sistema no se ha realizado correctamente.</span><span class="sxs-lookup"><span data-stu-id="ae55d-113">The call to get the system directory failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerPhysicalPath">
      <MemberSignature Language="C#" Value="public void GetServerPhysicalPath (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string physicalPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetServerPhysicalPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, [out] string&amp; physicalPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapUtility.GetServerPhysicalPath(System.String,System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetServerPhysicalPath (rootWebServer As String, inBaseUrl As String, inVirtualRoot As String, ByRef physicalPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetServerPhysicalPath(System::String ^ rootWebServer, System::String ^ inBaseUrl, System::String ^ inVirtualRoot, [Runtime::InteropServices::Out] System::String ^ % physicalPath);" />
      <MemberSignature Language="F#" Value="abstract member GetServerPhysicalPath : string * string * string *  -&gt; unit" Usage="iSoapUtility.GetServerPhysicalPath (rootWebServer, inBaseUrl, inVirtualRoot, physicalPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer"><span data-ttu-id="ae55d-114">Servidor Web raíz.</span><span class="sxs-lookup"><span data-stu-id="ae55d-114">The root Web server.</span></span></param>
        <param name="inBaseUrl"><span data-ttu-id="ae55d-115">Dirección URL base.</span><span class="sxs-lookup"><span data-stu-id="ae55d-115">The base URL address.</span></span></param>
        <param name="inVirtualRoot"><span data-ttu-id="ae55d-116">Nombre de la raíz virtual.</span><span class="sxs-lookup"><span data-stu-id="ae55d-116">The name of the virtual root.</span></span></param>
        <param name="physicalPath"><span data-ttu-id="ae55d-117">El parámetro que devuelve este método contiene la ruta de acceso de archivo de la raíz virtual SOAP.</span><span class="sxs-lookup"><span data-stu-id="ae55d-117">When this method returns, this parameter contains the file path for the SOAP virtual root.</span></span></param>
        <summary><span data-ttu-id="ae55d-118">Devuelve la ruta de acceso de la raíz virtual SOAP.</span><span class="sxs-lookup"><span data-stu-id="ae55d-118">Returns the path for the SOAP virtual root.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="ae55d-119">Un llamador de la cadena de llamadas no tiene permiso para obtener acceso al código no administrado.</span><span class="sxs-lookup"><span data-stu-id="ae55d-119">A caller in the call chain does not have permission to access unmanaged code.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ae55d-120">La utilidad SOAP no está disponible.</span><span class="sxs-lookup"><span data-stu-id="ae55d-120">The SOAP utility is not available.</span></span></exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException"><span data-ttu-id="ae55d-121">La llamada para obtener el directorio de sistema no se ha realizado correctamente.</span><span class="sxs-lookup"><span data-stu-id="ae55d-121">The call to get the system directory failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Present">
      <MemberSignature Language="C#" Value="public void Present ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Present() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapUtility.Present" />
      <MemberSignature Language="VB.NET" Value="Public Sub Present ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Present();" />
      <MemberSignature Language="F#" Value="abstract member Present : unit -&gt; unit" Usage="iSoapUtility.Present " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ae55d-122">Determina si existen interfaces SOAP autenticadas y cifradas.</span><span class="sxs-lookup"><span data-stu-id="ae55d-122">Determines whether authenticated, encrypted SOAP interfaces are present.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="ae55d-123">Un llamador de la cadena de llamadas no tiene permiso para obtener acceso al código no administrado.</span><span class="sxs-lookup"><span data-stu-id="ae55d-123">A caller in the call chain does not have permission to access unmanaged code.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="ae55d-124">La utilidad SOAP no está disponible.</span><span class="sxs-lookup"><span data-stu-id="ae55d-124">The SOAP utility is not available.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>