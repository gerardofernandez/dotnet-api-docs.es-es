<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996706" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c367d-101">Representa un universo de objetos de tipo cargado de solo inspección cerrado.</span><span class="sxs-lookup"><span data-stu-id="c367d-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="c367d-102">Cada MetadataLoadContext puede tener sus propias reglas de enlace y está aislada de todas las demás MetadataLoadContexts.</span><span class="sxs-lookup"><span data-stu-id="c367d-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="c367d-103">Un `MetadataLoadContext` actúa como un diccionario que se enlaza a los nombres de ensamblado <xref:System.Reflection.Assembly> instancias que se cargaron previamente en el contexto o la necesidad de que se cargue.</span><span class="sxs-lookup"><span data-stu-id="c367d-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="c367d-104">Los ensamblados se tratan estrictamente como metadatos.</span><span class="sxs-lookup"><span data-stu-id="c367d-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="c367d-105">No hay ninguna restricción sobre la carga de ensamblados en función de la plataforma de destino, la arquitectura de CPU o el tamaño del puntero.</span><span class="sxs-lookup"><span data-stu-id="c367d-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="c367d-106">No hay ninguna restricción en el ensamblado que se designa como el ensamblado principal (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="c367d-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="c367d-107">Instancia de <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="c367d-108">El nombre del ensamblado que contiene los tipos principales como <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="c367d-109">Normalmente, esto sería "mscorlib".</span><span class="sxs-lookup"><span data-stu-id="c367d-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="c367d-110">Crea un nuevo objeto <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c367d-111">Obtiene o establece el ensamblado que indica el ensamblado del sistema"" que aloja los tipos conocidos, como <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="c367d-112">Instancia de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="c367d-113">El ensamblado principal se trata de manera diferente a otros ensamblados porque las referencias a estos tipos conocidos no incluyen la referencia de ensamblado, a diferencia de los tipos normales.</span><span class="sxs-lookup"><span data-stu-id="c367d-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="c367d-114">Normalmente, este ensamblado se denomina "mscorlib" o "netstandard".</span><span class="sxs-lookup"><span data-stu-id="c367d-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="c367d-115">Si no se encuentra el ensamblado principal, el valor será `null`, y muchos otros métodos de reflexión, incluidas aquellas que analizan las firmas de método, se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="c367d-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="c367d-116">El `CoreAssembly` viene determinada por pasar la `coreAssemblyName` parámetro pasado a la <xref:System.Reflection.MetadataAssemblyResolver> constructor a la <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="c367d-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="c367d-117">Si no hay ningún `coreAssemblyName` argumento se especificó en el constructor de <xref:System.Reflection.MetadataLoadContext>, a continuación, se usan los valores predeterminados, como "mscorlib", "System.Runtime" y "netstandard".</span><span class="sxs-lookup"><span data-stu-id="c367d-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="c367d-118">No es necesario que el ensamblado principal designado contienen directamente los tipos principales.</span><span class="sxs-lookup"><span data-stu-id="c367d-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="c367d-119">Puede escribirlas reenvía a otros ensamblados.</span><span class="sxs-lookup"><span data-stu-id="c367d-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="c367d-120">Por lo tanto, es perfectamente admisible que se usará la fachada mscorlib como el ensamblado principal designado.</span><span class="sxs-lookup"><span data-stu-id="c367d-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="c367d-121">Tenga en cuenta que <xref:System.Runtime> no es un ensamblado de core ideal porque excluye algunos de los tipos de atributos personalizados de pseudo relacionadas con la interoperabilidad, como <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="c367d-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="c367d-122">Sin embargo, se puede utilizar si no tiene ningún interés en esos atributos.</span><span class="sxs-lookup"><span data-stu-id="c367d-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="c367d-123">La API CustomAttributes omitirá estos atributos si el ensamblado principal no incluye los tipos necesarios.</span><span class="sxs-lookup"><span data-stu-id="c367d-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="c367d-124">No se carga el ensamblado principal hasta que sea necesario.</span><span class="sxs-lookup"><span data-stu-id="c367d-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="c367d-125">Las siguientes API no desencadenan la búsqueda para el ensamblado principal:</span><span class="sxs-lookup"><span data-stu-id="c367d-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <span data-ttu-id="c367d-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="c367d-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span></span>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="c367d-134">Si no se encuentra un ensamblado principal o si el ensamblado principal no tiene tipos, esto afectará el comportamiento de la <xref:System.Reflection.MetadataLoadContext> como sigue:</span><span class="sxs-lookup"><span data-stu-id="c367d-134">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="c367d-135">Las API que necesitan para analizar las firmas o TypeSpec y devolver los resultados como <xref:System.Type> objetos iniciará una excepción.</span><span class="sxs-lookup"><span data-stu-id="c367d-135">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="c367d-136">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="c367d-136">For example:</span></span>

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * <span data-ttu-id="c367d-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="c367d-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span></span>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* <span data-ttu-id="c367d-138">Las API que necesitan comparar tipos a tipos conocidos principales no iniciará una excepción y la comparación se evaluará como `false`.</span><span class="sxs-lookup"><span data-stu-id="c367d-138">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="c367d-139">Por ejemplo, si no especifica un ensamblado principal, <xref:System.Type.IsPrimitive> devolverá `false` para todo, incluso tipos denominados <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="c367d-139">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="c367d-140">De forma similar, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> devolverá <xref:System.TypeCode.Object> para todo.</span><span class="sxs-lookup"><span data-stu-id="c367d-140">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="c367d-141">Si una entidad de metadatos establece marcas que se muestran como un atributo personalizado pseudo-nombre, y el ensamblado principal no contiene el tipo de atributo personalizado pseudo-nombre, el constructor es necesario o cualquiera de los tipos de parámetro del constructor, el <xref:System.Reflection.MetadataLoadContext> no se iniciará.</span><span class="sxs-lookup"><span data-stu-id="c367d-141">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="c367d-142">Omitirá el atributo personalizado desarrollado en la lista de atributos devueltos.</span><span class="sxs-lookup"><span data-stu-id="c367d-142">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c367d-143">Libera los recursos nativos (por ejemplo, bloqueos de archivos en archivos de ensamblado).</span><span class="sxs-lookup"><span data-stu-id="c367d-143">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c367d-144">Tras la eliminación, no es seguro usar cualquiera <xref:System.Reflection.Assembly> objetos dispensados por la <xref:System.Reflection.MetadataLoadContext> o todos los objetos de reflexión dispensar aquellos <xref:System.Reflection.Assembly> objetos.</span><span class="sxs-lookup"><span data-stu-id="c367d-144">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="c367d-145">Aunque los objetos proporcionan por el <xref:System.Reflection.MetadataLoadContext> esforzarse producir una <xref:System.ObjectDisposedException>, esto no está garantizado.</span><span class="sxs-lookup"><span data-stu-id="c367d-145">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="c367d-146">Algunas API puede devolver fija o de datos anteriormente almacenados en caché.</span><span class="sxs-lookup"><span data-stu-id="c367d-146">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="c367d-147">Obtener acceso a objetos *durante* un <xref:System.Reflection.MetadataLoadContext.Dispose%2A> llamada al método puede provocar una infracción de acceso no administrado y failfast.</span><span class="sxs-lookup"><span data-stu-id="c367d-147">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c367d-148">Devuelve una instantánea de los ensamblados que se han cargado en atómica el <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-148">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="c367d-149">Una colección enumerable de <see xref="T:System.Reflection.Assembly" /> objetos.</span><span class="sxs-lookup"><span data-stu-id="c367d-149">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="c367d-150">Instancia de <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-150">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="c367d-151">Resuelve el nombre del ensamblado proporcionado a un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-151">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="c367d-152">Si un ensamblado previamente enlazado a este nombre, se devuelve ese ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-152">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="c367d-153">En caso contrario, el <see cref="T:System.Reflection.MetadataLoadContext" /> llama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-153">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="c367d-154">Instancia de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-154">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="c367d-155">Tenga en cuenta que el comportamiento de este método coincide con el comportamiento de la <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> solucionar el evento, pero no coincide con el comportamiento de <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c367d-155">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c367d-156">(Este último interrumpe sin generar su evento resolve.)</span><span class="sxs-lookup"><span data-stu-id="c367d-156">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c367d-157">Devuelve la resolución <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-157">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="c367d-158">Un <see cref="T:System.String" /> que representa el nombre del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-158">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="c367d-159">Resuelve el nombre del ensamblado proporcionado a un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-159">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="c367d-160">Si un ensamblado previamente enlazado a este nombre, se devuelve ese ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-160">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="c367d-161">En caso contrario, el <see cref="T:System.Reflection.MetadataLoadContext" /> llama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-161">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="c367d-162">Instancia de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-162">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="c367d-163">Tenga en cuenta que el comportamiento de este método coincide con el comportamiento de <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> solucionar el evento, pero no coincide con el comportamiento de < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >.</span><span class="sxs-lookup"><span data-stu-id="c367d-163">Note that the behavior of this method matches the behavior of <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c367d-164">(Este último interrumpe sin generar su evento resolve.)</span><span class="sxs-lookup"><span data-stu-id="c367d-164">(The latter gives up without raising its resolve event.)</span></span>
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c367d-165">Devuelve la resolución <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-165">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="c367d-166">Un <see cref="T:System.String" /> que representa la ruta de acceso al ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-166">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="c367d-167">Carga un ensamblado desde una ruta de acceso específica en el disco y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-167">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="c367d-168">Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</span><span class="sxs-lookup"><span data-stu-id="c367d-168">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="c367d-169">Instancia de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-169">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="c367d-170">Los dos ensamblados no tienen el mismo Mvid.</span><span class="sxs-lookup"><span data-stu-id="c367d-170">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="c367d-171">Un <see cref="T:System.Byte[]" /> que contiene un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-171">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="c367d-172">Carga un ensamblado desde una matriz de bytes y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-172">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="c367d-173">Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</span><span class="sxs-lookup"><span data-stu-id="c367d-173">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="c367d-174">Instancia de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-174">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="c367d-175">Los dos ensamblados no tienen el mismo Mvid.</span><span class="sxs-lookup"><span data-stu-id="c367d-175">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="c367d-176">Un <see cref="T:System.IO.Stream" /> que contiene un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="c367d-176">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="c367d-177">Carga un ensamblado desde una secuencia y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="c367d-177">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="c367d-178">Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</span><span class="sxs-lookup"><span data-stu-id="c367d-178">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="c367d-179">El <xref:System.Reflection.MetadataLoadContext> toma posesión de la <xref:System.IO.Stream> pasan a este método.</span><span class="sxs-lookup"><span data-stu-id="c367d-179">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="c367d-180">El propietario original no debe mutar su posición, desechar el <xref:System.IO.Stream>, o se supone que su posición permanecerá sin cambios.</span><span class="sxs-lookup"><span data-stu-id="c367d-180">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="c367d-181">Los dos ensamblados no tienen el mismo Mvid.</span><span class="sxs-lookup"><span data-stu-id="c367d-181">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>