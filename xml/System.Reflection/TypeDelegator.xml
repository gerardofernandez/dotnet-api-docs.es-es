<Type Name="TypeDelegator" FullName="System.Reflection.TypeDelegator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e90cf203b6e98554c17a81ba51e794e058714a3" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52370709" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TypeDelegator : System.Reflection.TypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TypeDelegator extends System.Reflection.TypeInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TypeDelegator" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeDelegator&#xA;Inherits TypeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDelegator : System::Reflection::TypeInfo" />
  <TypeSignature Language="F#" Value="type TypeDelegator = class&#xA;    inherit TypeInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Type</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="372ab-101">Engloba un objeto <see cref="T:System.Type" /> y delega los métodos en ese <see langword="Type" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="372ab-101">Wraps a <see cref="T:System.Type" /> object and delegates methods to that <see langword="Type" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-102">Derivan de este tipo y reemplazar solo aquellos miembros que tienen para proporcionar personalización, además de los miembros que son requeridos por el programa y aún no está implementados por <xref:System.Reflection.TypeDelegator>.</span><span class="sxs-lookup"><span data-stu-id="372ab-102">Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.</span></span>  
  
 <span data-ttu-id="372ab-103"><xref:System.Reflection.TypeDelegator> se deriva de <xref:System.Type?displayProperty=nameWithType> e implementa la mayoría de las propiedades y métodos de <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="372ab-103"><xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=nameWithType> and implements most of the properties and methods of <xref:System.Type>.</span></span> <span data-ttu-id="372ab-104">Para cada miembro implementa, <xref:System.Reflection.TypeDelegator> automáticamente delega en el miembro correspondiente de una instancia interna <xref:System.Type> objeto, que se proporciona como un argumento al constructor.</span><span class="sxs-lookup"><span data-stu-id="372ab-104">For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor.</span></span> <span data-ttu-id="372ab-105">Este interno <xref:System.Type> objeto se expone al derivar clases mediante el `protected` <xref:System.Reflection.TypeDelegator.typeImpl> campo.</span><span class="sxs-lookup"><span data-stu-id="372ab-105">This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="372ab-106">Algunos miembros de <xref:System.Reflection.TypeDelegator> tienen implementaciones, aunque los propios miembros se heredan simplemente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="372ab-106">Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>.</span></span> <span data-ttu-id="372ab-107">En estos casos, la implementación se proporciona mediante un invalidado `protected` método que tiene un nombre que termine en "Impl".</span><span class="sxs-lookup"><span data-stu-id="372ab-107">In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in "Impl".</span></span> <span data-ttu-id="372ab-108">Por ejemplo, la implementación de todas las sobrecargas de los <xref:System.Reflection.TypeDelegator.GetMethods%2A> método se proporciona por invalidado <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="372ab-108">For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethods%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method.</span></span> <span data-ttu-id="372ab-109">La implementación para las propiedades heredadas, como <xref:System.Type.IsPublic%2A> y <xref:System.Type.IsNestedAssembly%2A> se proporciona por invalidado <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> método.</span><span class="sxs-lookup"><span data-stu-id="372ab-109">The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.</span></span>  
  
 <span data-ttu-id="372ab-110">Las clases derivadas pueden proporcionar un constructor público que toma un <xref:System.Type> objeto como parámetro y simplemente pasa ese objeto a la <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, o bien puede establecer interno <xref:System.Type> objeto de alguna otra manera.</span><span class="sxs-lookup"><span data-stu-id="372ab-110">Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.</span></span>  
  
 <span data-ttu-id="372ab-111">Si una clase derivada usa un miembro que no implementa <xref:System.Reflection.TypeDelegator>, debe invalidar ese miembro y proporcionar una implementación.</span><span class="sxs-lookup"><span data-stu-id="372ab-111">If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation.</span></span> <span data-ttu-id="372ab-112">La implementación más sencilla consiste en llamar al miembro correspondiente en el interno <xref:System.Type> objeto expuesto por el <xref:System.Reflection.TypeDelegator.typeImpl> campo, pero puede proporcionar cualquier implementación de la aplicación requiere.</span><span class="sxs-lookup"><span data-stu-id="372ab-112">The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires.</span></span> <span data-ttu-id="372ab-113">No es necesario reemplazar estos miembros, si no se usa la aplicación o biblioteca de funciones de la aplicación llama (por ejemplo, si la <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> constructor).</span><span class="sxs-lookup"><span data-stu-id="372ab-113">It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType> constructor).</span></span>  
  
 <span data-ttu-id="372ab-114">Los siguientes métodos virtuales (`Overridable` métodos en Visual Basic) de <xref:System.Type> no se implementan mediante <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A> , <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span><span class="sxs-lookup"><span data-stu-id="372ab-114">The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.</span></span>  
  
 <span data-ttu-id="372ab-115">Las siguientes propiedades virtuales (`Overridable` propiedades en Visual Basic) de <xref:System.Type> no se implementan mediante <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A> , <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span><span class="sxs-lookup"><span data-stu-id="372ab-115">The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-116">Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-116">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDelegator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDelegator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-117">Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.TypeDelegator" /> con propiedades predeterminadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-117">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeDelegator (Type delegatingType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type delegatingType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (delegatingType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeDelegator(Type ^ delegatingType);" />
      <MemberSignature Language="F#" Value="new System.Reflection.TypeDelegator : Type -&gt; System.Reflection.TypeDelegator" Usage="new System.Reflection.TypeDelegator delegatingType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="delegatingType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegatingType">
          <span data-ttu-id="372ab-118">Instancia de la clase <see cref="T:System.Type" /> que encapsula la llamada al método de un objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-118">The instance of the class <see cref="T:System.Type" /> that encapsulates the call to the method of an object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-119">Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.TypeDelegator" /> especificando la instancia de encapsulamiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-119">Initializes a new instance of the <see cref="T:System.Reflection.TypeDelegator" /> class specifying the encapsulating instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-120">Este constructor se llama desde una clase para generar un delegado basado en el `Type` objeto para la clase que define el método.</span><span class="sxs-lookup"><span data-stu-id="372ab-120">This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-121">El valor de <paramref name="delegatingType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-121">
              <paramref name="delegatingType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Reflection.TypeDelegator.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-122">Obtiene el ensamblado del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-122">Gets the assembly of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-123">Objeto <see cref="T:System.Reflection.Assembly" /> que representa al ensamblado del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-123">An <see cref="T:System.Reflection.Assembly" /> object representing the assembly of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-124">Los ensamblados son las unidades de implementación en common language runtime.</span><span class="sxs-lookup"><span data-stu-id="372ab-124">Assemblies are the deployment units in the common language runtime.</span></span> <span data-ttu-id="372ab-125">Los ensamblados establecen el espacio de nombres para resolver las solicitudes y determinan qué recursos se exponen externamente y que son accesibles desde dentro del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="372ab-125">Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</span></span> <span data-ttu-id="372ab-126">Common language runtime puede determinar y ubicar el ensamblado de cualquier objeto en ejecución.</span><span class="sxs-lookup"><span data-stu-id="372ab-126">The common language runtime can determine and locate the assembly for any running object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Reflection.TypeDelegator.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-127">Obtiene el nombre completo del ensamblado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-127">Gets the assembly's fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-128">
            <see langword="String" /> contiene el nombre completo del ensamblado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-128">A <see langword="String" /> containing the assembly's fully qualified name.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Reflection.TypeDelegator.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-129">Obtiene el tipo base para el tipo actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-129">Gets the base type for the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-130">Tipo base para un tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-130">The base type for a type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-131">El tipo base es el tipo del que este tipo hereda directamente.</span><span class="sxs-lookup"><span data-stu-id="372ab-131">The base type is the type from which this type directly inherits.</span></span> <span data-ttu-id="372ab-132">Puesto que el <xref:System.Object> tipo de clase es la clase base fundamental de todos los demás tipos, es el único tipo que no tiene un tipo base.</span><span class="sxs-lookup"><span data-stu-id="372ab-132">Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</span></span> <span data-ttu-id="372ab-133">En este caso, `null` se devuelve como el tipo base de la `Object` tipo.</span><span class="sxs-lookup"><span data-stu-id="372ab-133">In this case, `null` is returned as the base type of the `Object` type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.TypeDelegator.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-134">Obtiene el nombre completo del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-134">Gets the fully qualified name of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-135">
            <see langword="String" /> contiene el nombre completo del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-135">A <see langword="String" /> containing the type's fully qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-136">Una cadena que contiene el nombre completo del elemento actual `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="372ab-136">A string containing the fully qualified name of the current `TypeDelegator`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="override this.GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="typeDelegator.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-137">Obtiene los atributos asignados al <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-137">Gets the attributes assigned to the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-138">Objeto <see langword="TypeAttributes" /> que representa a las marcas del atributo de implementación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-138">A <see langword="TypeAttributes" /> object representing the implementation attribute flags.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-139">Este método puede usarse para determinar si la `TypeDelegator` es abstracto, público y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="372ab-139">This method can be used to determine if the `TypeDelegator` is abstract, public, and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="typeDelegator.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-140">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-140">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-141">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-141">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="372ab-142">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <see langword="MemberInfo" /> mediante la reflexión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-142">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="372ab-143">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-143">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="372ab-144">Convenciones de llamadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-144">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="372ab-145">Matriz de tipo <see langword="Type" /> que contiene una lista del número, el orden y los tipos de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-145">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="372ab-146">Los tipos no pueden ser <see langword="null" />; utilice un método <see langword="GetMethod" /> apropiado o una matriz vacía para buscar un método sin parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-146">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="372ab-147">Matriz de tipo <see langword="ParameterModifier" /> que tiene la misma longitud que la matriz <paramref name="types" /> cuyos elementos representan a los atributos asociados a los parámetros del método que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-147">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-148">Obtiene el constructor que implementó el <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-148">Gets the constructor that implemented the <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-149">Objeto <see langword="ConstructorInfo" /> para el método que coincide con los criterios especificados, o <see langword="null" /> si no se encuentra ninguna coincidencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-149">A <see langword="ConstructorInfo" /> object for the method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-150">El `callConvention` parámetro indica la convención de llamada para el punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="372ab-150">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="372ab-151">Si no se especifica ninguna convención de llamada, un valor predeterminado <xref:System.Reflection.CallingConventions> valor `Standard` se utiliza.</span><span class="sxs-lookup"><span data-stu-id="372ab-151">If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="typeDelegator.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-152">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-152">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-153">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-153">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-154">Devuelve una matriz de objetos <see cref="T:System.Reflection.ConstructorInfo" /> que representan los constructores definidos para el tipo englobado por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-154">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing constructors defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-155">Una matriz de tipo <see langword="ConstructorInfo" /> contiene los constructores especificados definidos para esta clase.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-155">An array of type <see langword="ConstructorInfo" /> containing the specified constructors defined for this class.</span>
          </span>
          <span data-ttu-id="372ab-156">Si no se definen constructores, se devuelve una matriz vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-156">If no constructors are defined, an empty array is returned.</span>
          </span>
          <span data-ttu-id="372ab-157">Dependiendo del valor del parámetro especificado, se devolverán sólo los constructores públicos o bien tanto los públicos como los no públicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-157">Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-158">Inicializadores de clase están disponibles solo a través de `GetMember`, `GetMembers`, `FindMembers`, y `GetConstructors`.</span><span class="sxs-lookup"><span data-stu-id="372ab-158">Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-159">Devuelve todos los atributos personalizados definidos para este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-159">Returns all the custom attributes defined for this type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="typeDelegator.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="372ab-160">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-160">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-161">Devuelve todos los atributos personalizados definidos para este tipo, indicando si se debe buscar la cadena de herencia del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-161">Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-162">Matriz de objetos que contiene todos los atributos personalizados definidos para este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-162">An array of objects containing all the custom attributes defined for this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="372ab-163">No se puede cargar un tipo de atributo personalizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-163">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="typeDelegator.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="372ab-164">Matriz de atributos personalizados identificados según el tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-164">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="372ab-165">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-165">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-166">Devuelve una matriz de atributos personalizados identificados según el tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-166">Returns an array of custom attributes identified by type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-167">Matriz de objetos que contiene los atributos personalizados definidos en este tipo y que coinciden con el parámetro <paramref name="attributeType" />, indicando si se debe buscar la cadena de herencia del tipo o <see langword="null" /> si no se definen atributos personalizados en este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-167">An array of objects containing the custom attributes defined in this type that match the <paramref name="attributeType" /> parameter, specifying whether to search the type's inheritance chain, or <see langword="null" /> if no custom attributes are defined on this type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="372ab-168">El valor de <paramref name="attributeType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-168">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="372ab-169">No se puede cargar un tipo de atributo personalizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-169">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="override this.GetElementType : unit -&gt; Type" Usage="typeDelegator.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-170">Devuelve el <see cref="T:System.Type" /> del objeto englobado o al que hace referencia la matriz, el puntero o la ByRef actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-170">Returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-171">
            <see cref="T:System.Type" /> del objeto englobado o al que se hace referencia según la matriz, puntero o <see langword="ByRef" /> actual, o <see langword="null" /> si el <see cref="T:System.Type" /> actual no es una matriz, un puntero o un <see langword="ByRef" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-171">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or <see langword="ByRef" />, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array, a pointer or a <see langword="ByRef" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="typeDelegator.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-172">Nombre del evento que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-172">The name of the event to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-173">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-173">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-174">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-174">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-175">Devuelve el evento especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-175">Returns the specified event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-176">Objeto <see cref="T:System.Reflection.EventInfo" /> que representa al evento declarado o heredado por este tipo con el nombre especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-176">An <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name.</span>
          </span>
          <span data-ttu-id="372ab-177">Este método devuelve <see langword="null" /> si no se encuentra tal evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-177">This method returns <see langword="null" /> if no such event is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-178">Si `bindingAttr` es <xref:System.Reflection.BindingFlags>.`IgnoreCase`, el caso de los `name` se omite el parámetro.</span><span class="sxs-lookup"><span data-stu-id="372ab-178">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-179">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-179">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-180">Devuelve una matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representa a los eventos públicos declarados o heredados por el <see langword="TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-180">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="typeDelegator.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-181">Devuelve una matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representa a los eventos públicos declarados o heredados por el <see langword="TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-181">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-182">Devuelve una matriz de tipo <see langword="EventInfo" /> que contiene todos los eventos declarados o heredados por el tipo actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-182">Returns an array of type <see langword="EventInfo" /> containing all the events declared or inherited by the current type.</span>
          </span>
          <span data-ttu-id="372ab-183">Si no existe ningún evento, se devolverá una matriz vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-183">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="typeDelegator.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-184">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-184">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-185">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-185">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-186">Devuelve todos los eventos especificados en <paramref name="bindingAttr" /> que son declarados o heredados por el objeto <see langword="TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-186">Returns the events specified in <paramref name="bindingAttr" /> that are declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-187">Matriz de tipo <see langword="EventInfo" /> que contiene los eventos especificados en <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-187">An array of type <see langword="EventInfo" /> containing the events specified in <paramref name="bindingAttr" />.</span>
          </span>
          <span data-ttu-id="372ab-188">Si no existe ningún evento, se devolverá una matriz vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-188">If there are no events, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="typeDelegator.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-189">Nombre del campo para buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-189">The name of the field to find.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-190">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-190">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-191">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-191">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-192">Devuelve un objeto <see cref="T:System.Reflection.FieldInfo" /> que representa al campo con el nombre especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-192">Returns a <see cref="T:System.Reflection.FieldInfo" /> object representing the field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-193">Objeto <see langword="FieldInfo" /> que representa el campo declarado o heredado por este <see langword="TypeDelegator" /> con el nombre especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-193">A <see langword="FieldInfo" /> object representing the field declared or inherited by this <see langword="TypeDelegator" /> with the specified name.</span>
          </span>
          <span data-ttu-id="372ab-194">Devuelve <see langword="null" /> si no se encuentra tal campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-194">Returns <see langword="null" /> if no such field is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-195">Use un `bindingAttr` de <xref:System.Reflection.BindingFlags>. NonPublic para devolver todos los campos públicos y no públicos.</span><span class="sxs-lookup"><span data-stu-id="372ab-195">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span> <span data-ttu-id="372ab-196">Use `BindingFlags.IgnoreCase` para omitir el caso de los campos, como la búsqueda distingue entre mayúsculas y minúsculas de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="372ab-196">Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-197">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-197">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="typeDelegator.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-198">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-198">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-199">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-199">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-200">Devuelve una matriz de objetos <see cref="T:System.Reflection.FieldInfo" /> que representan los campos de datos definidos para el tipo englobado por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-200">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the data fields defined for the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-201">Matriz de tipo <see langword="FieldInfo" /> que contiene los campos declarados o heredados por el <see langword="TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-201">An array of type <see langword="FieldInfo" /> containing the fields declared or inherited by the current <see langword="TypeDelegator" />.</span>
          </span>
          <span data-ttu-id="372ab-202">Si los campos no coinciden, se devuelve una matriz vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-202">An empty array is returned if there are no matched fields.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-203">El <xref:System.Reflection.TypeDelegator.GetFields%2A> método no devuelve los campos en un orden concreto, como alfabético o el orden de declaración.</span><span class="sxs-lookup"><span data-stu-id="372ab-203">The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="372ab-204">El código no debe depender del orden en que se devuelven los campos, porque ese orden puede variar.</span><span class="sxs-lookup"><span data-stu-id="372ab-204">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 <span data-ttu-id="372ab-205">Use un `bindingAttr` de <xref:System.Reflection.BindingFlags>. NonPublic para devolver todos los campos públicos y no públicos.</span><span class="sxs-lookup"><span data-stu-id="372ab-205">Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetInterface : string * bool -&gt; Type" Usage="typeDelegator.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-206">Nombre completo de la interfaz implementada por la clase actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-206">The fully qualified name of the interface implemented by the current class.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="372ab-207">
            <see langword="true" /> si el caso se va a omitir; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-207">
              <see langword="true" /> if the case is to be ignored; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-208">Devuelve la interfaz especificada implementada por el tipo englobado por el <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-208">Returns the specified interface implemented by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-209">Objeto <see langword="Type" /> que representa a la interfaz implementada por la clase actual (directa o indirectamente) con el nombre completo que coincide con el nombre especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-209">A <see langword="Type" /> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</span>
          </span>
          <span data-ttu-id="372ab-210">Si no se encuentra ninguna interfaz cuyo nombre coincida, se devuelve null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-210">If no interface that matches name is found, null is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-211">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-211">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="typeDelegator.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="372ab-212">
            <see cref="T:System.Type" /> de la interfaz de la que se va a recuperar una asignación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-212">The <see cref="T:System.Type" /> of the interface to retrieve a mapping of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-213">Devuelve una asignación de interfaz para el tipo de interfaz especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-213">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-214">Objeto <see cref="T:System.Reflection.InterfaceMapping" /> que representa la asignación de interfaz de <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-214">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-215">El mapa de interfaz indica cómo se asigna una interfaz a los métodos reales en una clase que implementa esa interfaz.</span><span class="sxs-lookup"><span data-stu-id="372ab-215">The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="override this.GetInterfaces : unit -&gt; Type[]" Usage="typeDelegator.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-216">Devuelve todas las interfaces implementadas en la clase actual y sus clases base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-216">Returns all the interfaces implemented on the current class and its base classes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-217">Matriz de tipo <see langword="Type" /> que contiene todas las interfaces implementadas en la clase actual y sus clases base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-217">An array of type <see langword="Type" /> containing all the interfaces implemented on the current class and its base classes.</span>
          </span>
          <span data-ttu-id="372ab-218">Si no hay ninguna definida, se devuelve una matriz vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-218">If none are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeDelegator.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-219">Nombre del miembro que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-219">The name of the member to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="372ab-220">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-220">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-221">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-221">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-222">Tipo de miembros que se van a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-222">The type of members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-223">Devuelve miembros (propiedades, métodos, constructores, campos, eventos y tipos anidados) especificados por los <paramref name="name" />, <paramref name="type" /> y <paramref name="bindingAttr" /> dados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-223">Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <paramref name="name" />, <paramref name="type" />, and <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-224">Matriz de tipo <see langword="MemberInfo" /> que contiene todos los miembros de la clase actual y su clase base, cumpliendo con los criterios especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-224">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base class meeting the specified criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-225">Si `bindingAttr` es <xref:System.Reflection.BindingFlags>. NonPublic, se considerarán todos los miembros.</span><span class="sxs-lookup"><span data-stu-id="372ab-225">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="372ab-226">Si no hay ninguna coincidencia, se devuelve una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="372ab-226">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-227">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-227">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="typeDelegator.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-228">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-228">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-229">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-229">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-230">Devuelve miembros especificados por <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-230">Returns members specified by <paramref name="bindingAttr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-231">Matriz de tipo <see langword="MemberInfo" /> que contiene todos los miembros de la clase actual y sus clases base que cuentan con el filtro <paramref name="bindingAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-231">An array of type <see langword="MemberInfo" /> containing all the members of the current class and its base classes that meet the <paramref name="bindingAttr" /> filter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-232">Si `bindingAttr` es <xref:System.Reflection.BindingFlags>. NonPublic, se considerarán todos los miembros.</span><span class="sxs-lookup"><span data-stu-id="372ab-232">If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered.</span></span> <span data-ttu-id="372ab-233">Si no hay ninguna coincidencia, se devuelve una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="372ab-233">If there are no matches, an empty array is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="typeDelegator.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-234">El nombre del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-234">The method name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-235">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-235">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-236">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-236">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="372ab-237">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <see langword="MemberInfo" /> mediante la reflexión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-237">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="372ab-238">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-238">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="372ab-239">Convenciones de llamadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-239">The calling conventions.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="372ab-240">Matriz de tipo <see langword="Type" /> que contiene una lista del número, el orden y los tipos de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-240">An array of type <see langword="Type" /> containing a list of the parameter number, order, and types.</span>
          </span>
          <span data-ttu-id="372ab-241">Los tipos no pueden ser <see langword="null" />; utilice un método <see langword="GetMethod" /> apropiado o una matriz vacía para buscar un método sin parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-241">Types cannot be <see langword="null" />; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="372ab-242">Matriz de tipo <see langword="ParameterModifier" /> que tiene la misma longitud que la matriz <paramref name="types" /> cuyos elementos representan a los atributos asociados a los parámetros del método que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-242">An array of type <see langword="ParameterModifier" /> having the same length as the <paramref name="types" /> array, whose elements represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-243">Busca el método especificado cuyos parámetros coincidan con los tipos y modificadores de argumentos especificados, usando las restricciones de enlace indicadas y la convención de llamada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-243">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-244">Objeto <see langword="MethodInfoInfo" /> para el método de implementación que coincide con los criterios especificados o <see langword="null" /> si no se encuentra ninguna coincidencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-244">A <see langword="MethodInfoInfo" /> object for the implementation method that matches the specified criteria, or <see langword="null" /> if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-245">El `callConvention` parámetro indica la convención de llamada para el punto de entrada.</span><span class="sxs-lookup"><span data-stu-id="372ab-245">The `callConvention` parameter indicates the calling convention for the entry point.</span></span> <span data-ttu-id="372ab-246">Si no hay ningún <xref:System.Reflection.CallingConventions> se especifica, valor predeterminado es `CallingConventions` valor `Standard` se utiliza.</span><span class="sxs-lookup"><span data-stu-id="372ab-246">If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="typeDelegator.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-247">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-247">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-248">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-248">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-249">Devuelve una matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> que representan métodos especificados del tipo englobado por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-249">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing specified methods of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-250">Matriz de objetos <see langword="MethodInfo" /> que representa a los métodos definidos en este <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-250">An array of <see langword="MethodInfo" /> objects representing the methods defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="typeDelegator.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-251">Nombre del tipo anidado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-251">The nested type's name.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-252">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-252">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-253">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-253">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-254">Devuelve un tipo anidado especificado por <paramref name="name" /> y en <paramref name="bindingAttr" /> que son declarados o heredados por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-254">Returns a nested type specified by <paramref name="name" /> and in <paramref name="bindingAttr" /> that are declared or inherited by the type represented by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-255">Objeto <see langword="Type" /> que representa al tipo anidado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-255">A <see langword="Type" /> object representing the nested type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="372ab-256">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-256">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="typeDelegator.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-257">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-257">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-258">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-258">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-259">Devuelve todos los tipos anidados especificados en <paramref name="bindingAttr" /> que son declarados o heredados por el tipo englobado por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-259">Returns the nested types specified in <paramref name="bindingAttr" /> that are declared or inherited by the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-260">Matriz de tipo <see langword="Type" /> que contiene los tipos anidados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-260">An array of type <see langword="Type" /> containing the nested types.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="override this.GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="typeDelegator.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-261">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-261">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-262">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-262">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-263">Devuelve una matriz de objetos <see cref="T:System.Reflection.PropertyInfo" /> que representan propiedades del tipo englobado por el objeto <see cref="T:System.Reflection.TypeDelegator" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-263">Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing properties of the type wrapped by the current <see cref="T:System.Reflection.TypeDelegator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-264">Matriz de objetos <see langword="PropertyInfo" /> que representa a las propiedades definidas en este <see langword="TypeDelegator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-264">An array of <see langword="PropertyInfo" /> objects representing properties defined on this <see langword="TypeDelegator" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="typeDelegator.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-265">Propiedad que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-265">The property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="372ab-266">Máscara de bits que afecta al modo de realizar la búsqueda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-266">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="372ab-267">El valor es una combinación de cero o más marcas de bits de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-267">The value is a combination of zero or more bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="372ab-268">Objeto que habilita el enlace, la conversión de tipos de argumentos, las llamadas a miembros y la recuperación de objetos <see langword="MemberInfo" /> mediante reflexión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-268">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="372ab-269">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-269">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="372ab-270">Vea <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-270">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="372ab-271">Tipo de valor devuelto de la propiedad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-271">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="372ab-272">Lista de tipos de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-272">A list of parameter types.</span>
          </span>
          <span data-ttu-id="372ab-273">La lista representa el número, la orden y los tipos de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-273">The list represents the number, order, and types of the parameters.</span>
          </span>
          <span data-ttu-id="372ab-274">Los tipos no pueden ser null; utilice un método <see langword="GetMethod" /> apropiado o una matriz vacía para buscar un método sin parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-274">Types cannot be null; use an appropriate <see langword="GetMethod" /> method or an empty array to search for a method without parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="372ab-275">Matriz de la misma longitud que los tipos con elementos que representan a los atributos asociados a los parámetros del método que se va a obtener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-275">An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-276">Cuando se invalida en una clase derivada, busca la propiedad especificada cuyos parámetros coincidan con los tipos y modificadores de argumentos especificados, usando las restricciones de enlace especificadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-276">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-277">Objeto <see cref="T:System.Reflection.PropertyInfo" /> para la propiedad que coincide con los criterios especificados o null si no se encuentra ninguna coincidencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-277">A <see cref="T:System.Reflection.PropertyInfo" /> object for the property that matches the specified criteria, or null if a match cannot be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Reflection.TypeDelegator.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-278">Obtiene el GUID (identificador global único) del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-278">Gets the GUID (globally unique identifier) of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-279">Un GUID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-279">A GUID.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-280">El GUID (identificador único global) es una cadena de identificación única de 128 bits utilizada para identificar una clase o una interfaz.</span><span class="sxs-lookup"><span data-stu-id="372ab-280">The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</span></span> <span data-ttu-id="372ab-281">Resulta útil principalmente para la interoperabilidad entre Microsoft .NET Framework y COM.</span><span class="sxs-lookup"><span data-stu-id="372ab-281">It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.HasElementTypeImpl : unit -&gt; bool" Usage="typeDelegator.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-282">Obtiene un valor que indica si el objeto <see cref="T:System.Type" /> actual engloba o hace referencia a otro tipo; es decir, si el objeto <see cref="T:System.Type" /> actual es una matriz, un puntero o un ByRef.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-282">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer or a ByRef.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-283">Es <see langword="true" /> si <see cref="T:System.Type" /> es una matriz, un puntero o un ByRef; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-283">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer or a ByRef; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="typeDelegator.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="372ab-284">Nombre del miembro que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-284">The name of the member to invoke.</span>
          </span>
          <span data-ttu-id="372ab-285">Este puede ser un constructor, método, propiedad o campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-285">This may be a constructor, method, property, or field.</span>
          </span>
          <span data-ttu-id="372ab-286">Si se pasa una cadena vacía (""), se invoca al miembro predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-286">If an empty string ("") is passed, the default member is invoked.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="372ab-287">Atributo de invocación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-287">The invocation attribute.</span>
          </span>
          <span data-ttu-id="372ab-288">Debe ser uno de los valores siguientes: <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-288">This must be one of the following <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="372ab-289">Debe especificarse un atributo de invocación apropiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-289">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="372ab-290">Si se va a invocar a un miembro estático, se debe establecer la marca <see langword="Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-290">If a static member is to be invoked, the <see langword="Static" /> flag must be set.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="372ab-291">Objeto que habilita el enlace, la conversión de tipos de argumentos, las llamadas a miembros y la recuperación de objetos <see langword="MemberInfo" /> mediante reflexión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-291">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="372ab-292">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-292">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="372ab-293">Vea <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-293">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="372ab-294">Objeto donde debe invocarse al miembro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-294">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="372ab-295">Esta matriz de tipo <see langword="Object" /> contiene el número, orden y tipo de los parámetros del miembro al que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-295">An array of type <see langword="Object" /> that contains the number, order, and type of the parameters of the member to be invoked.</span>
          </span>
          <span data-ttu-id="372ab-296">Si <paramref name="args" /> contiene un objeto <see langword="Object" /> no inicializado, se tratará como vacío, el cual, junto con el enlazador predeterminado, puede ensancharse hasta llegar a 0, 0.0 ó a una cadena.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-296">If <paramref name="args" /> contains an uninitialized <see langword="Object" />, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="372ab-297">Matriz de tipo <see langword="ParameterModifer" /> que tiene la misma longitud que <paramref name="args" /> con elementos que representan a los atributos asociados a los argumentos del miembro al que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-297">An array of type <see langword="ParameterModifer" /> that is the same length as <paramref name="args" />, with elements that represent the attributes associated with the arguments of the member to be invoked.</span>
          </span>
          <span data-ttu-id="372ab-298">Un parámetro tiene atributos asociados a él en la firma del miembro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-298">A parameter has attributes associated with it in the member's signature.</span>
          </span>
          <span data-ttu-id="372ab-299">Para ByRef, utilice <see langword="ParameterModifer.ByRef" />, y para ninguno, utilice <see langword="ParameterModifer.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-299">For ByRef, use <see langword="ParameterModifer.ByRef" />, and for none, use <see langword="ParameterModifer.None" />.</span>
          </span>
          <span data-ttu-id="372ab-300">El enlazador predeterminado hace que ambos coincidan exactamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-300">The default binder does exact matching on these.</span>
          </span>
          <span data-ttu-id="372ab-301">Los atributos como <see langword="In" /> y <see langword="InOut" /> no se utilizan para enlazar y se pueden ver mediante <see langword="ParameterInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-301">Attributes such as <see langword="In" /> and <see langword="InOut" /> are not used in binding, and can be viewed using <see langword="ParameterInfo" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="372ab-302">Instancia de <see langword="CultureInfo" /> usada para regir la conversión de tipos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-302">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="372ab-303">Esto es necesario, por ejemplo, para convertir una cadena que representa 1000 en un valor <see langword="Double" />, puesto que 1000 se representa de forma diferente en distintas referencias culturales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-303">This is necessary, for example, to convert a string that represents 1000 to a <see langword="Double" /> value, since 1000 is represented differently by different cultures.</span>
          </span>
          <span data-ttu-id="372ab-304">Si <paramref name="culture" /> es <see langword="null" />, se utiliza <see langword="CultureInfo" /> para el <see langword="CultureInfo" /> del subproceso actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-304">If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread's <see langword="CultureInfo" /> is used.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="372ab-305">Matriz de tipo <see langword="String" /> que contiene nombres de parámetro que coinciden, a partir del elemento cero, con la matriz <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-305">An array of type <see langword="String" /> containing parameter names that match up, starting at element zero, with the <paramref name="args" /> array.</span>
          </span>
          <span data-ttu-id="372ab-306">No debe haber lagunas en la matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-306">There must be no holes in the array.</span>
          </span>
          <span data-ttu-id="372ab-307">Si <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-307">If <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="372ab-308">
            <see langword="Length" /> es mayor que <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-308">
              <see langword="Length" /> is greater than <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="372ab-309">
            <see langword="Length" />, el resto de parámetros se rellenan en orden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-309">
              <see langword="Length" />, the remaining parameters are filled in order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-310">Invoca el miembro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-310">Invokes the specified member.</span>
          </span>
          <span data-ttu-id="372ab-311">El método que se va a invocar debe ser accesible y proporcionar la coincidencia más específica con la lista de argumentos dada, bajo las restricciones del enlazador y los atributos de invocación indicados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-311">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-312">
            <see langword="Object" /> que representa el valor devuelto del miembro invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-312">An <see langword="Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-313">Un método se invocará si se cumplen las dos condiciones siguientes:</span><span class="sxs-lookup"><span data-stu-id="372ab-313">A method will be invoked if both the following conditions are true:</span></span>  
  
-   <span data-ttu-id="372ab-314">El número de parámetros en la declaración del método es igual al número de argumentos de la lista de argumentos especificada (a menos que los argumentos predeterminados se definen en el miembro).</span><span class="sxs-lookup"><span data-stu-id="372ab-314">The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</span></span>  
  
-   <span data-ttu-id="372ab-315">El tipo de cada argumento se puede convertir el enlazador para el tipo del parámetro.</span><span class="sxs-lookup"><span data-stu-id="372ab-315">The type of each arguments can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="372ab-316">El enlazador encontrará todos los métodos de coincidencia.</span><span class="sxs-lookup"><span data-stu-id="372ab-316">The binder will find all the matching methods.</span></span> <span data-ttu-id="372ab-317">Estos métodos se encuentran en función del tipo de enlace solicitado (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, y así sucesivamente).</span><span class="sxs-lookup"><span data-stu-id="372ab-317">These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on).</span></span> <span data-ttu-id="372ab-318">El conjunto de métodos se filtra por el nombre, número de argumentos y un conjunto de modificadores de búsqueda definidos en el enlazador.</span><span class="sxs-lookup"><span data-stu-id="372ab-318">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="372ab-319">Después de selecciona el método, se invocará.</span><span class="sxs-lookup"><span data-stu-id="372ab-319">After the method is selected, it will be invoked.</span></span> <span data-ttu-id="372ab-320">En ese momento se comprueba la accesibilidad.</span><span class="sxs-lookup"><span data-stu-id="372ab-320">Accessibility is checked at that point.</span></span> <span data-ttu-id="372ab-321">La búsqueda puede controlar qué conjunto de métodos se buscan en función del atributo de accesibilidad asociado al método.</span><span class="sxs-lookup"><span data-stu-id="372ab-321">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="372ab-322">El <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> método es responsable de seleccionar el método que se debe invocar.</span><span class="sxs-lookup"><span data-stu-id="372ab-322">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="372ab-323">El enlazador predeterminado, selecciona a la coincidencia más específica.</span><span class="sxs-lookup"><span data-stu-id="372ab-323">The default binder selects the most specific match.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="372ab-324">Se omiten las restricciones de acceso para el código de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="372ab-324">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="372ab-325">Es decir, las propiedades, métodos, campos y constructores privados se pueden tener acceso e invocan mediante reflexión, siempre que el código es de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="372ab-325">That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="372ab-326">Actualmente, `InvokeMember` realiza la semántica de reflexión de Microsoft .NET Framework para cada tipo de objeto.</span><span class="sxs-lookup"><span data-stu-id="372ab-326">Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object.</span></span>  
  
 <span data-ttu-id="372ab-327">Si el miembro especificado por su nombre es una matriz y el `BindingFlags.GetField` marca se establece en `invokeAttr`, el `args` matriz especifica los elementos cuyos valores se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="372ab-327">If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned.</span></span> <span data-ttu-id="372ab-328">Por ejemplo, la siguiente llamada a través de `Type` objeto `t` devuelve el valor del primer elemento de la matriz de cadena MyArray, que es un miembro del objeto que realiza la llamada:</span><span class="sxs-lookup"><span data-stu-id="372ab-328">For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:</span></span>  
  
 `String ret = (String) t.InvokeMember ("MyArray", BindingFlags.GetField, null, this, new Variant[]{0});`  
  
 <span data-ttu-id="372ab-329">Puede usar `InvokeMember` para establecer uno o más elementos de una matriz de miembros.</span><span class="sxs-lookup"><span data-stu-id="372ab-329">You can use `InvokeMember` to set one or more elements of a member array.</span></span> <span data-ttu-id="372ab-330">Todos los elementos se establecen en el mismo valor.</span><span class="sxs-lookup"><span data-stu-id="372ab-330">All elements are set to the same value.</span></span> <span data-ttu-id="372ab-331">El `args` matriz debe tener el formato siguiente:</span><span class="sxs-lookup"><span data-stu-id="372ab-331">The `args` array must be formatted as follows:</span></span>  
  
```  
{index1,  
    index2,, value}  
```  
  
 <span data-ttu-id="372ab-332">Por ejemplo, para establecer al primer miembro de MyArray del ejemplo anterior, la sintaxis es como sigue:</span><span class="sxs-lookup"><span data-stu-id="372ab-332">For example, to set the first member of MyArray from the previous example, the syntax is as follows:</span></span>  
  
```csharp  
t.InvokeMember ("MyArray", BindingFlags.SetField, null, this, new  
    Variant[]{0,"Updated"});  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="override this.IsArrayImpl : unit -&gt; bool" Usage="typeDelegator.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-333">Devuelve un valor que indica si <see cref="T:System.Type" /> es una matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-333">Returns a value that indicates whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-334">Es <see langword="true" /> si <see cref="T:System.Type" /> es una matriz; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-334">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberSignature Language="F#" Value="override this.IsAssignableFrom : System.Reflection.TypeInfo -&gt; bool" Usage="typeDelegator.IsAssignableFrom typeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="372ab-335">Tipo que se va a comprobar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-335">The type to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-336">Devuelve un valor que indica si el tipo especificado se puede asignar a este tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-336">Returns a value that indicates whether the specified type can be assigned to this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-337">
            <see langword="true" /> si el tipo especificado puede asignarse a este tipo; si no, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-337">
              <see langword="true" /> if the specified type can be assigned to this type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="override this.IsByRefImpl : unit -&gt; bool" Usage="typeDelegator.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-338">Devuelve un valor que indica si <see cref="T:System.Type" /> se pasa por referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-338">Returns a value that indicates whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-339">Es <see langword="true" /> si <see cref="T:System.Type" /> se pasa por referencia; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-339">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Reflection.TypeDelegator.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="override this.IsCOMObjectImpl : unit -&gt; bool" Usage="typeDelegator.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-340">Devuelve un valor que indica si <see cref="T:System.Type" /> es un objeto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-340">Returns a value that indicates whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-341">Es <see langword="true" /> si <see cref="T:System.Type" /> es un objeto COM; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-341">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Reflection.TypeDelegator.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-342">Obtiene un valor que indica si este objeto representa un tipo genérico construido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-342">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-343">
            <see langword="true" /> si este objeto representa una definición de tipo genérico construido; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-343">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="typeDelegator.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="372ab-344">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-344">Specifies whether to search this type's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="372ab-345">Matriz de atributos personalizados identificados según el tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-345">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="372ab-346">Indica si se ha definido un atributo personalizado identificado mediante el objeto <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-346">Indicates whether a custom attribute identified by <paramref name="attributeType" /> is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-347">
            <see langword="true" /> si está definido el atributo personalizado identificado por el <paramref name="attributeType" />; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-347">
              <see langword="true" /> if a custom attribute identified by <paramref name="attributeType" /> is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="372ab-348">El valor de <paramref name="attributeType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-348">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">
          <span data-ttu-id="372ab-349">No se puede cargar el tipo de atributo personalizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-349">The custom attribute type cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Reflection.TypeDelegator.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Reflection.TypeDelegator.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPointerImpl : unit -&gt; bool" Usage="typeDelegator.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-350">Devuelve un valor que indica si <see cref="T:System.Type" /> es un puntero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-350">Returns a value that indicates whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-351">Es <see langword="true" /> si <see cref="T:System.Type" /> es un puntero; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-351">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="override this.IsPrimitiveImpl : unit -&gt; bool" Usage="typeDelegator.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-352">Devuelve un valor que indica si <see cref="T:System.Type" /> es uno de los tipos primitivos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-352">Returns a value that indicates whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-353">Es <see langword="true" /> si <see cref="T:System.Type" /> es uno de los tipos primitivos; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-353">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Reflection.TypeDelegator.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Reflection.TypeDelegator.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.TypeDelegator.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="override this.IsValueTypeImpl : unit -&gt; bool" Usage="typeDelegator.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="372ab-354">Devuelve un valor que indica si el tipo es un tipo de valor; es decir, ni una clase ni una interfaz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-354">Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="372ab-355">Es <see langword="true" /> si el tipo es un tipo de valor; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-355">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Reflection.TypeDelegator.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public override int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataToken : int" Usage="System.Reflection.TypeDelegator.MetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-356">Obtiene un valor que identifica esta entidad en metadatos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-356">Gets a value that identifies this entity in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-357">Un valor que, en combinación con el módulo, identifica de manera única esta entidad en metadatos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-357">A value which, in combination with the module, uniquely identifies this entity in metadata.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-358">Los tokens obtenidos mediante esta propiedad se pueden pasar a la API de reflexión no administrada.</span><span class="sxs-lookup"><span data-stu-id="372ab-358">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="372ab-359">Para obtener más información, consulte [API de reflexión no administrada](https://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span><span class="sxs-lookup"><span data-stu-id="372ab-359">For more information, see [Unmanaged Reflection API](https://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.TypeDelegator.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-360">Obtiene el módulo que contiene el tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-360">Gets the module that contains the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-361">Objeto <see cref="T:System.Reflection.Module" /> que representa al módulo del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-361">A <see cref="T:System.Reflection.Module" /> object representing the module of the implemented type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-362">Un módulo es una unidad cargable que puede contener declaraciones de tipos y las implementaciones.</span><span class="sxs-lookup"><span data-stu-id="372ab-362">A module is a loadable unit that can contain type declarations and implementations.</span></span> <span data-ttu-id="372ab-363">Los módulos contienen información suficiente para habilitar common language runtime buscar todos los bits de implementación cuando se carga el módulo.</span><span class="sxs-lookup"><span data-stu-id="372ab-363">Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.TypeDelegator.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-364">Obtiene el nombre del tipo implementado, sin la ruta de acceso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-364">Gets the name of the implemented type, with the path removed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-365">
            <see langword="String" /> contiene el nombre no completo del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-365">A <see langword="String" /> containing the type's non-qualified name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-366">Cadena que contiene el nombre del objeto `TypeDelegator` actual.</span><span class="sxs-lookup"><span data-stu-id="372ab-366">A string containing the name of the current `TypeDelegator`.</span></span> <span data-ttu-id="372ab-367">Se devuelve solo el nombre sencillo, no el nombre completo.</span><span class="sxs-lookup"><span data-stu-id="372ab-367">Only the simple name, not the fully qualified name, is returned.</span></span> <span data-ttu-id="372ab-368">Para obtener el nombre y la ruta de acceso, use <xref:System.Reflection.TypeDelegator.FullName%2A>.</span><span class="sxs-lookup"><span data-stu-id="372ab-368">To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Reflection.TypeDelegator.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-369">Obtiene el espacio de nombres del tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-369">Gets the namespace of the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-370">
            <see langword="String" /> contiene el espacio de nombres del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-370">A <see langword="String" /> containing the type's namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-371">Esta propiedad obtiene una cadena que contiene el espacio de nombres del elemento actual `TypeDelegator`.</span><span class="sxs-lookup"><span data-stu-id="372ab-371">This property gets a string containing the namespace of the current `TypeDelegator`.</span></span> <span data-ttu-id="372ab-372">Por ejemplo, si la `TypeDelegator` es <xref:System.Reflection.TypeFilter>, el espacio de nombres devuelto es <xref:System.Reflection>.</span><span class="sxs-lookup"><span data-stu-id="372ab-372">For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Reflection.TypeDelegator.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-373">Obtiene un identificador para la representación de metadatos interna de un tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-373">Gets a handle to the internal metadata representation of an implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-374">Un objeto <see langword="RuntimeTypeHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-374">A <see langword="RuntimeTypeHandle" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="372ab-375">Un identificador de tipo es un valor entero único asociado a cada tipo.</span><span class="sxs-lookup"><span data-stu-id="372ab-375">A type handle is a unique integer value associated with each type.</span></span> <span data-ttu-id="372ab-376">El identificador es único durante el tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="372ab-376">The handle is unique during the runtime.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.RuntimeTypeHandle" />
      </Docs>
    </Member>
    <Member MemberName="typeImpl">
      <MemberSignature Language="C#" Value="protected Type typeImpl;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type typeImpl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.TypeDelegator.typeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected typeImpl As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ typeImpl;" />
      <MemberSignature Language="F#" Value="val mutable typeImpl : Type" Usage="System.Reflection.TypeDelegator.typeImpl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-377">Valor que indica información acerca del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-377">A value indicating type information.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.TypeDelegator.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Reflection.TypeDelegator.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="372ab-378">Obtiene el <see cref="T:System.Type" /> subyacente que representa al tipo implementado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-378">Gets the underlying <see cref="T:System.Type" /> that represents the implemented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="372ab-379">Tipo subyacente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="372ab-379">The underlying type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>