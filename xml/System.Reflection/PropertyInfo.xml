<Type Name="PropertyInfo" FullName="System.Reflection.PropertyInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d4d295c3e203775c62a6da9a20099ea9d809e65d" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53233372" /></Metadata><TypeSignature Language="C#" Value="public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit PropertyInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyInfo&#xA;Inherits MemberInfo&#xA;Implements _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_PropertyInfo" />
  <TypeSignature Language="F#" Value="type PropertyInfo = class&#xA;    inherit MemberInfo&#xA;    interface _PropertyInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a092c-101">Detecta los atributos de una propiedad y proporciona acceso a sus metadatos.</span><span class="sxs-lookup"><span data-stu-id="a092c-101">Discovers the attributes of a property and provides access to property metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-102">Propiedades lógicamente son los mismos que los campos.</span><span class="sxs-lookup"><span data-stu-id="a092c-102">Properties are logically the same as fields.</span></span> <span data-ttu-id="a092c-103">Una propiedad es un aspecto con nombre del estado de un objeto cuyo valor es normalmente accesible a través de `get` y `set` descriptores de acceso.</span><span class="sxs-lookup"><span data-stu-id="a092c-103">A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors.</span></span> <span data-ttu-id="a092c-104">Propiedades pueden ser de solo lectura, en cuyo caso no se admite una rutina de conjunto.</span><span class="sxs-lookup"><span data-stu-id="a092c-104">Properties may be read-only, in which case a set routine is not supported.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-105">Para determinar si es una propiedad `static`, debe obtener el <xref:System.Reflection.MethodInfo> para el `get` o `set` descriptor de acceso, mediante una llamada a la <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> o <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> método y examine su <xref:System.Reflection.MethodBase.IsStatic%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-105">To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.</span></span>  
  
 <span data-ttu-id="a092c-106">Varios métodos de esta clase asume que el `get` descriptor de acceso y `set` métodos de descriptor de acceso de una propiedad tienen un formato determinado.</span><span class="sxs-lookup"><span data-stu-id="a092c-106">Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats.</span></span> <span data-ttu-id="a092c-107">Las firmas de los `get` y `set` métodos deben coincidir con la convención siguiente:</span><span class="sxs-lookup"><span data-stu-id="a092c-107">The signatures of the `get` and `set` methods must match the following convention:</span></span>  
  
-   <span data-ttu-id="a092c-108">El tipo de valor devuelto de la `get` método y el último argumento de la `set` método debe ser idéntico.</span><span class="sxs-lookup"><span data-stu-id="a092c-108">The return type of the `get` method and the last argument of the `set` method must be identical.</span></span> <span data-ttu-id="a092c-109">Este es el tipo de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-109">This is the type of the property.</span></span>  
  
-   <span data-ttu-id="a092c-110">El `get` y `set` métodos deben tener el mismo número, tipo y orden de índices.</span><span class="sxs-lookup"><span data-stu-id="a092c-110">The `get` and `set` methods must have the same number, type, and order of indices.</span></span>  
  
 <span data-ttu-id="a092c-111">Si no sigue este formato, el comportamiento de la `GetValue` y `SetValue` métodos es indefinido.</span><span class="sxs-lookup"><span data-stu-id="a092c-111">If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.</span></span>  
  
 <span data-ttu-id="a092c-112">Una llamada a <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> en `PropertyInfo` cuando el `inherit` parámetro de `GetCustomAttributes` es `true` , no se recorre la jerarquía de tipos.</span><span class="sxs-lookup"><span data-stu-id="a092c-112">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="a092c-113">Use <xref:System.Attribute?displayProperty=nameWithType> para heredar los atributos personalizados.</span><span class="sxs-lookup"><span data-stu-id="a092c-113">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-114">En este ejemplo se muestra cómo usar varias clases de reflexión para analizar los metadatos contenidos en un ensamblado.</span><span class="sxs-lookup"><span data-stu-id="a092c-114">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-115">En este ejemplo genera aproximadamente 55.000 líneas de datos, que se pueden redirigir a un archivo de texto en el símbolo del sistema, como sigue: **example.exe > infopropiedad.txt**</span><span class="sxs-lookup"><span data-stu-id="a092c-115">This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="a092c-116">para plena confianza para los herederos.</span><span class="sxs-lookup"><span data-stu-id="a092c-116">for full trust for inheritors.</span></span> <span data-ttu-id="a092c-117">No se puede heredar esta clase por código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="a092c-117">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="a092c-118">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a092c-118">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="a092c-119">Al heredar de <see cref="T:System.Reflection.PropertyInfo" />, debe reemplazar los miembros siguientes: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, y <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-119">When you inherit from <see cref="T:System.Reflection.PropertyInfo" />, you must override the following members: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, and <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-120">Inicializa una nueva instancia de la clase <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-121">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-121">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-122">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-122">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Reflection.PropertyInfo.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-123">Obtiene los atributos de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-123">Gets the attributes for this property.</span></span></summary>
        <value><span data-ttu-id="a092c-124">Atributos de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-124">The attributes of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-125">El <xref:System.Reflection.PropertyInfo.Attributes%2A> propiedad devuelve los atributos asociados con la propiedad representada por este <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-125">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.</span></span>  <span data-ttu-id="a092c-126">Los atributos son principalmente los modificadores que se aplica mediante un compilador al crear una propiedad; indican si una propiedad es la propiedad predeterminada, un `SpecialName` propiedad y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="a092c-126">The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on.</span></span> <span data-ttu-id="a092c-127">Tenga en cuenta que, para casi todas las propiedades que se encuentra en tipos en la biblioteca de clases de .NET Framework, el valor de la <xref:System.Reflection.PropertyInfo.Attributes%2A> propiedad es <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a092c-127">Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="a092c-128">En la mayoría de los casos, probablemente desee recuperar los atributos personalizados asociados con una propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-128">In most cases, you probably want to retrieve the custom attributes associated with a property.</span></span> <span data-ttu-id="a092c-129">Para ello, recupere el valor de la <xref:System.Reflection.MemberInfo.CustomAttributes%2A> propiedad o llamada a una de las sobrecargas de los <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-129">To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="a092c-130">Para obtener el <xref:System.Reflection.PropertyInfo.Attributes%2A> propiedad:</span><span class="sxs-lookup"><span data-stu-id="a092c-130">To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:</span></span>  
  
1.  <span data-ttu-id="a092c-131">Obtener un <xref:System.Type> objeto que representa el tipo al que pertenece la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-131">Get a <xref:System.Type> object that represents the type to which the property belongs.</span></span>  
  
2.  <span data-ttu-id="a092c-132">Obtener el <xref:System.Reflection.PropertyInfo> objeto mediante una llamada a una sobrecarga de la <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-132">Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method.</span></span>  
  
3.  <span data-ttu-id="a092c-133">Recuperar los atributos de la propiedad de la <xref:System.Reflection.PropertyInfo.Attributes%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-133">Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.</span></span>  
  
 <span data-ttu-id="a092c-134">Puede definir los atributos de una propiedad para un tipo creado dinámicamente mediante la reflexión emite mediante una llamada a una sobrecarga de la <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> método y proporciona un valor para el `attributes` argumento.</span><span class="sxs-lookup"><span data-stu-id="a092c-134">You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MemberInfo.CustomAttributes" />
        <altmember cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Reflection.PropertyInfo.CanRead" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-135">Obtiene un valor que indica si se puede leer la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-135">Gets a value indicating whether the property can be read.</span></span></summary>
        <value><span data-ttu-id="a092c-136">Es <see langword="true" /> si se puede leer esta propiedad; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-136"><see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-137">Si la propiedad no tiene un `get` descriptor de acceso, no se puede leer.</span><span class="sxs-lookup"><span data-stu-id="a092c-137">If the property does not have a `get` accessor, it cannot be read.</span></span>  
  
 <span data-ttu-id="a092c-138">Para obtener el `CanRead` propiedad, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-138">To get the `CanRead` property, first get the class `Type`.</span></span> <span data-ttu-id="a092c-139">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-139">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-140">Desde el `PropertyInfo`, obtener el `CanRead` valor.</span><span class="sxs-lookup"><span data-stu-id="a092c-140">From the `PropertyInfo`, get the `CanRead` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-141">El siguiente ejemplo define dos propiedades.</span><span class="sxs-lookup"><span data-stu-id="a092c-141">The following example defines two properties.</span></span> <span data-ttu-id="a092c-142">La primera propiedad es legible y `CanRead` propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="a092c-142">The first property is readable and the `CanRead` property is `true`.</span></span> <span data-ttu-id="a092c-143">La segunda propiedad no es legible (no hay ningún descriptor de acceso get) y el `CanRead` propiedad es `false`.</span><span class="sxs-lookup"><span data-stu-id="a092c-143">The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Reflection.PropertyInfo.CanWrite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-144">Obtiene un valor que indica si se puede escribir en la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-144">Gets a value indicating whether the property can be written to.</span></span></summary>
        <value><span data-ttu-id="a092c-145">Es <see langword="true" /> si se puede escribir en esta propiedad; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-145"><see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> Devuelve `true` si la propiedad tiene un `set` descriptor de acceso, incluso si el descriptor de acceso es `private`, `internal` (o `Friend` en Visual Basic), o `protected`.</span><span class="sxs-lookup"><span data-stu-id="a092c-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.</span></span>   <span data-ttu-id="a092c-147">Si la propiedad no tiene un `set` descriptor de acceso, el método devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="a092c-147">If the property does not have a `set` accessor, the method returns `false`.</span></span>  
  
 <span data-ttu-id="a092c-148">Para obtener el valor de la <xref:System.Reflection.PropertyInfo.CanWrite%2A> propiedad:</span><span class="sxs-lookup"><span data-stu-id="a092c-148">To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:</span></span>  
  
1.  <span data-ttu-id="a092c-149">Obtener el <xref:System.Type> objeto del tipo que incluye la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-149">Get the <xref:System.Type> object of the type that includes the property.</span></span>  
  
2.  <span data-ttu-id="a092c-150">Llame a la <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> para obtener el <xref:System.Reflection.PropertyInfo> objeto que representa la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-150">Call the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.</span></span>  
  
3.  <span data-ttu-id="a092c-151">Recuperar el valor de la <xref:System.Reflection.PropertyInfo.CanWrite%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-151">Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-152">El siguiente ejemplo define dos propiedades.</span><span class="sxs-lookup"><span data-stu-id="a092c-152">The following example defines two properties.</span></span> <span data-ttu-id="a092c-153">La primera propiedad es grabable y `CanWrite` propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="a092c-153">The first property is writable and the `CanWrite` property is `true`.</span></span> <span data-ttu-id="a092c-154">La segunda propiedad no es modificable (no hay ningún `set` descriptor de acceso) y el `CanWrite` propiedad es `false`.</span><span class="sxs-lookup"><span data-stu-id="a092c-154">The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="propertyInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-155">Objeto que se va a comparar con esta instancia o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-155">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a092c-156">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-156">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="a092c-157">Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-157"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a092c-158">Devuelve una matriz de los descriptores de acceso <see langword="get" /> y <see langword="set" /> en esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetAccessors : unit -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-159">Devuelve una matriz cuyos elementos reflejan los descriptores de acceso públicos <see langword="get" /> y <see langword="set" /> de la propiedad que refleja la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="a092c-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="a092c-160">Matriz de objetos <see cref="T:System.Reflection.MethodInfo" /> que refleja los descriptores de acceso públicos <see langword="get" /> y <see langword="set" /> de la propiedad que refleja la instancia actual, si se encuentran; en caso contrario, este método devuelve una matriz con cero (0) elementos.</span><span class="sxs-lookup"><span data-stu-id="a092c-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-161">Para llamar a la <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método:</span><span class="sxs-lookup"><span data-stu-id="a092c-161">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="a092c-162">Obtener un <xref:System.Type> objeto que representa la clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-162">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="a092c-163">Desde el <xref:System.Type> de objeto, obtener el <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-163">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="a092c-164">Desde el <xref:System.Reflection.PropertyInfo> de objeto, llame a la <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-164">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-165">En el ejemplo siguiente se recuperan los descriptores de acceso públicos de la `ClassWithProperty.Caption` propiedad y muestra información sobre ellos.</span><span class="sxs-lookup"><span data-stu-id="a092c-165">The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="a092c-166">También llama a la <xref:System.Reflection.MethodBase.Invoke%2A> método Get para recuperar el valor de propiedad y el establecedor para establecer el valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-166">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-167">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-167">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-168">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-168">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="propertyInfo.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a092c-169">Indica si se deben devolver métodos no públicos en la matriz devuelta.</span><span class="sxs-lookup"><span data-stu-id="a092c-169">Indicates whether non-public methods should be returned in the returned array.</span></span> <span data-ttu-id="a092c-170"><see langword="true" /> si los métodos no públicos deben incluirse; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-170"><see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a092c-171">Devuelve una matriz cuyos elementos reflejan los descriptores de acceso públicos y, si se especifica, no públicos, <see langword="get" /> y <see langword="set" /> de la propiedad que refleja la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="a092c-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="a092c-172">Matriz cuyos elementos reflejan los descriptores de acceso <see langword="get" /> y <see langword="set" /> de la propiedad que refleja la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="a092c-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span> <span data-ttu-id="a092c-173">Si <paramref name="nonPublic" /> es <see langword="true" />, esta matriz contiene los descriptores de acceso públicos y no públicos <see langword="get" /> y <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="a092c-174">Si <paramref name="nonPublic" /> es <see langword="false" />, esta matriz contiene solo los descriptores de acceso públicos <see langword="get" /> y <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="a092c-175">Si no se encuentran descriptores de acceso con la visibilidad especificada, este método devuelve una matriz con cero (0) elementos.</span><span class="sxs-lookup"><span data-stu-id="a092c-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-176">Para llamar a la <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método:</span><span class="sxs-lookup"><span data-stu-id="a092c-176">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="a092c-177">Obtener un <xref:System.Type> objeto que representa la clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-177">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="a092c-178">Desde el <xref:System.Type> de objeto, obtener el <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-178">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="a092c-179">Desde el <xref:System.Reflection.PropertyInfo> de objeto, llame a la <xref:System.Reflection.PropertyInfo.GetAccessors%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-179">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-180">En el ejemplo siguiente se recuperan los descriptores de acceso de la `ClassWithProperty.Caption` propiedad y muestra información sobre ellos.</span><span class="sxs-lookup"><span data-stu-id="a092c-180">The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="a092c-181">También llama a la <xref:System.Reflection.MethodBase.Invoke%2A> método Get para recuperar el valor de propiedad y el establecedor para establecer el valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-181">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-182">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-182">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-183">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetConstantValue : unit -&gt; obj&#xA;override this.GetConstantValue : unit -&gt; obj" Usage="propertyInfo.GetConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-184">Devuelve un valor literal asociado a la propiedad mediante un compilador.</span><span class="sxs-lookup"><span data-stu-id="a092c-184">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="a092c-185"><see cref="T:System.Object" /> que contiene el valor literal asociado a la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="a092c-186">Si el valor literal es un tipo de clase con un valor de elemento de cero, el valor devuelto es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-187">Este método se proporciona para los diseñadores de compiladores administrados y analizadores de código.</span><span class="sxs-lookup"><span data-stu-id="a092c-187">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-188">No utilice este método en el contexto de solo reflexión, puesto que podría provocar la ejecución de código.</span><span class="sxs-lookup"><span data-stu-id="a092c-188">Do not use this method in the reflection-only context, because it might cause code to execute.</span></span> <span data-ttu-id="a092c-189">Use el método <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="a092c-189">Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.</span></span>  
  
 <span data-ttu-id="a092c-190">En los metadatos no administrados, la tabla de constantes se utiliza para almacenar valores constantes para los campos, parámetros y propiedades.</span><span class="sxs-lookup"><span data-stu-id="a092c-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="a092c-191">Constante de información no afecta directamente al comportamiento en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="a092c-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="a092c-192">Los compiladores inspeccionan esta información en tiempo de compilación, al importar los metadatos.</span><span class="sxs-lookup"><span data-stu-id="a092c-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="a092c-193">Si se utiliza, el valor de una constante se incrusta en la secuencia del lenguaje intermedio (MSIL) de Microsoft que el compilador emite.</span><span class="sxs-lookup"><span data-stu-id="a092c-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="a092c-194">No hay ninguna instrucción MSIL que se puede usar para tener acceso a la tabla de constantes en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="a092c-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-195">Para obtener más información sobre valores constantes y la tabla de constantes, consulte la documentación de ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="a092c-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="a092c-196">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="a092c-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a092c-197">La tabla de constantes de metadatos no administrados no contiene un valor de constante para la propiedad actual.</span><span class="sxs-lookup"><span data-stu-id="a092c-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="a092c-198">El tipo del valor no es uno de los tipos permitidos por la Common Language Specification (CLS).</span><span class="sxs-lookup"><span data-stu-id="a092c-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="a092c-199">Consulte la especificación de ECMA Partition II, metadatos.</span><span class="sxs-lookup"><span data-stu-id="a092c-199">See the ECMA Partition II specification, Metadata.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a092c-200">Devuelve <see langword="MethodInfo" /> que representa el descriptor de acceso <see langword="get" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetGetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-201">Devuelve el descriptor de acceso <see langword="get" /> público de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-201">Returns the public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="a092c-202">Objeto <see langword="MethodInfo" /> que representa el descriptor de acceso <see langword="get" /> público de esta propiedad, o <see langword="null" /> si el descriptor de acceso <see langword="get" /> no es público o no existe.</span><span class="sxs-lookup"><span data-stu-id="a092c-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-203">Se trata de un método de conveniencia que proporciona una implementación abstracta `GetGetMethod` método con el `nonPublic` parámetro establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="a092c-203">This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="a092c-204">Para usar el `GetGetMethod` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-204">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-205">Desde el `Type`, obtener el <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="a092c-205">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="a092c-206">Desde el <xref:System.Reflection.PropertyInfo>, utilice el `GetGetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-206">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-207">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-208">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a092c-209">Indica si un descriptor de acceso no público <see langword="get" /> se debe devolver.</span><span class="sxs-lookup"><span data-stu-id="a092c-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span></span> <span data-ttu-id="a092c-210"><see langword="true" /> si se debe devolver un descriptor de acceso no público; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-210"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a092c-211">Cuando se reemplaza en una clase derivada, devuelve el descriptor de acceso <see langword="get" /> público o no público de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="a092c-212">Objeto <see langword="MethodInfo" /> que representa el descriptor de acceso <see langword="get" /> de esta propiedad si <paramref name="nonPublic" /> es <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span></span> <span data-ttu-id="a092c-213">Devuelve <see langword="null" /> si <paramref name="nonPublic" /> es <see langword="false" /> y el descriptor de acceso <see langword="get" /> es no público, o si <paramref name="nonPublic" /> es <see langword="true" /> pero no existe ningún descriptor de acceso <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-214">Esta propiedad es el <xref:System.Reflection.MethodInfo> que representa el descriptor de acceso get.</span><span class="sxs-lookup"><span data-stu-id="a092c-214">This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.</span></span>  
  
 <span data-ttu-id="a092c-215">Para usar el `GetGetMethod` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-215">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-216">Desde el `Type`, obtener el <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="a092c-216">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="a092c-217">Desde el <xref:System.Reflection.PropertyInfo>, utilice el `GetGetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-217">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-218">El ejemplo siguiente muestra el público o no público `get` descriptor de acceso para la propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="a092c-218">The following example displays the public or non-public `get` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a092c-219">El método solicitado no es público y el autor de llamada no tiene <see cref="T:System.Security.Permissions.ReflectionPermission" /> para reflejar en este método no público.</span><span class="sxs-lookup"><span data-stu-id="a092c-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-220">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-220">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-221">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-221">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="propertyInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-222">Devuelve el código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="a092c-222">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="a092c-223">Código hash de un entero de 32 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="a092c-223">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="propertyInfo.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-224">Cuando se reemplaza en una clase derivada, devuelve una matriz de todos los parámetros de índice de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span></span></summary>
        <returns><span data-ttu-id="a092c-225">Matriz de tipo <see langword="ParameterInfo" /> que contiene los parámetros de los índices.</span><span class="sxs-lookup"><span data-stu-id="a092c-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span></span> <span data-ttu-id="a092c-226">Si la propiedad no se indiza, la matriz tiene 0 (cero) elementos.</span><span class="sxs-lookup"><span data-stu-id="a092c-226">If the property is not indexed, the array has 0 (zero) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-227">Extraer toda la información necesaria de parámetros de la matriz devuelta.</span><span class="sxs-lookup"><span data-stu-id="a092c-227">Extract any required parameter information from the returned array.</span></span>  
  
 <span data-ttu-id="a092c-228">Para usar el `GetIndexParameters` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-228">To use the `GetIndexParameters` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-229">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-229">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-230">Desde el `PropertyInfo`, utilice el `GetIndexParameters` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-230">From the `PropertyInfo`, use the `GetIndexParameters` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-231">El ejemplo siguiente muestra los parámetros de índice de la propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="a092c-231">The following example displays the index parameters of the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-232">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-233">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo GetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.GetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ GetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.GetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-234">Obtiene el descriptor de acceso <see langword="get" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-234">Gets the <see langword="get" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="a092c-235">Descriptor de acceso <see langword="get" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-235">The <see langword="get" /> accessor for this property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetOptionalCustomModifiers : unit -&gt; Type[]&#xA;override this.GetOptionalCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetOptionalCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-236">Devuelve una matriz de tipos que representan los modificadores personalizados opcionales de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-236">Returns an array of types representing the optional custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="a092c-237">Matriz de objetos <see cref="T:System.Type" /> que identifican los modificadores personalizados opcionales de la propiedad actual, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-238">El <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> y <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> se proporcionan métodos para los diseñadores de compiladores administrados.</span><span class="sxs-lookup"><span data-stu-id="a092c-238">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="a092c-239">Para obtener más información sobre los modificadores personalizados, vea <xref:System.Runtime.CompilerServices.IsBoxed> y clases relacionadas del <xref:System.Runtime.CompilerServices> espacio de nombres y la especificación de metadatos en la documentación de ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="a092c-239">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="a092c-240">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="a092c-240">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberSignature Language="F#" Value="abstract member GetRawConstantValue : unit -&gt; obj&#xA;override this.GetRawConstantValue : unit -&gt; obj" Usage="propertyInfo.GetRawConstantValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-241">Devuelve un valor literal asociado a la propiedad mediante un compilador.</span><span class="sxs-lookup"><span data-stu-id="a092c-241">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="a092c-242"><see cref="T:System.Object" /> que contiene el valor literal asociado a la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="a092c-243">Si el valor literal es un tipo de clase con un valor de elemento de cero, el valor devuelto es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-244">Este método se proporciona para los diseñadores de compiladores administrados y analizadores de código.</span><span class="sxs-lookup"><span data-stu-id="a092c-244">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="a092c-245">Este método puede utilizarse en el contexto de ejecución y el contexto de solo reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-245">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="a092c-246">En los metadatos no administrados, la tabla de constantes se utiliza para almacenar valores constantes para los campos, parámetros y propiedades.</span><span class="sxs-lookup"><span data-stu-id="a092c-246">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="a092c-247">Constante de información no afecta directamente al comportamiento en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="a092c-247">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="a092c-248">Los compiladores inspeccionan esta información en tiempo de compilación, al importar los metadatos.</span><span class="sxs-lookup"><span data-stu-id="a092c-248">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="a092c-249">Si se utiliza, el valor de una constante se incrusta en la secuencia del lenguaje intermedio (MSIL) de Microsoft que el compilador emite.</span><span class="sxs-lookup"><span data-stu-id="a092c-249">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="a092c-250">No hay ninguna instrucción MSIL que se puede usar para tener acceso a la tabla de constantes en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="a092c-250">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-251">Para obtener más información sobre valores constantes y la tabla de constantes, consulte la documentación de ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="a092c-251">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="a092c-252">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="a092c-252">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a092c-253">La tabla de constantes de metadatos no administrados no contiene un valor de constante para la propiedad actual.</span><span class="sxs-lookup"><span data-stu-id="a092c-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="a092c-254">El tipo del valor no es uno de los tipos permitidos por la Common Language Specification (CLS).</span><span class="sxs-lookup"><span data-stu-id="a092c-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="a092c-255">Vea la especificación de ECMA Partition II Metadata Logical Format: Other Structures, Element Types used in Signatures (Formato lógico de metadatos: Otras estructuras, tipos de elementos usados en las firmas).</span><span class="sxs-lookup"><span data-stu-id="a092c-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberSignature Language="F#" Value="abstract member GetRequiredCustomModifiers : unit -&gt; Type[]&#xA;override this.GetRequiredCustomModifiers : unit -&gt; Type[]" Usage="propertyInfo.GetRequiredCustomModifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-256">Devuelve una matriz de tipos que representan los modificadores personalizados necesarios de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-256">Returns an array of types representing the required custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="a092c-257">Matriz de objetos <see cref="T:System.Type" /> que identifican los modificadores personalizados necesarios de la propiedad actual, como <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-258">El <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> y <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> se proporcionan métodos para los diseñadores de compiladores administrados.</span><span class="sxs-lookup"><span data-stu-id="a092c-258">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="a092c-259">Para obtener más información sobre los modificadores personalizados, vea <xref:System.Runtime.CompilerServices.IsBoxed> y clases relacionadas del <xref:System.Runtime.CompilerServices> espacio de nombres y la especificación de metadatos en la documentación de ECMA Partition II.</span><span class="sxs-lookup"><span data-stu-id="a092c-259">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="a092c-260">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="a092c-260">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a092c-261">Devuelve <see cref="T:System.Reflection.MethodInfo" /> que representa el descriptor de acceso <see langword="set" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetSetMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetSetMethod : unit -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-262">Devuelve el descriptor de acceso <see langword="set" /> público de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-262">Returns the public <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="a092c-263">Objeto <see langword="MethodInfo" /> que representa el método <see langword="Set" /> de esta propiedad si el descriptor de acceso <see langword="set" /> es público, o <see langword="null" /> si el descriptor de acceso <see langword="set" /> no es público.</span><span class="sxs-lookup"><span data-stu-id="a092c-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-264">Se trata de un método de conveniencia que proporciona una implementación abstracta `GetSetMethod` método con el `nonPublic` parámetro establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="a092c-264">This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="a092c-265">Para usar el `GetSetMethod` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-265">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-266">Desde el `Type`, obtener el <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="a092c-266">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="a092c-267">Desde el `PropertyInfo`, utilice el `GetSetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-267">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-268">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-268">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-269">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-269">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="abstract member GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyInfo.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="a092c-270">Indica si se debe devolver el descriptor de acceso si es no público.</span><span class="sxs-lookup"><span data-stu-id="a092c-270">Indicates whether the accessor should be returned if it is non-public.</span></span> <span data-ttu-id="a092c-271"><see langword="true" /> si se debe devolver un descriptor de acceso no público; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-271"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a092c-272">Cuando se reemplaza en una clase derivada, devuelve el descriptor de acceso <see langword="set" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="a092c-273">El método <see langword="Set" /> de esta propiedad, o <see langword="null" />, como se muestra en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="a092c-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="a092c-274">Valor</span><span class="sxs-lookup"><span data-stu-id="a092c-274">Value</span></span> 
 </term><description> <span data-ttu-id="a092c-275">Condición</span><span class="sxs-lookup"><span data-stu-id="a092c-275">Condition</span></span> 
 </description></listheader><item><term> <span data-ttu-id="a092c-276">El método <see langword="Set" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-276">The <see langword="Set" /> method for this property.</span></span>  
  
 </term><description> <span data-ttu-id="a092c-277">El descriptor de acceso <see langword="set" /> es público.</span><span class="sxs-lookup"><span data-stu-id="a092c-277">The <see langword="set" /> accessor is public.</span></span>  
  
<span data-ttu-id="a092c-278">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-278">-or-</span></span> 
 <span data-ttu-id="a092c-279">El valor de <paramref name="nonPublic" /> es <see langword="true" /> y el descriptor de acceso <see langword="set" /> no es público.</span><span class="sxs-lookup"><span data-stu-id="a092c-279"><paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
 </description></item><item><term><see langword="null" /></term><description><span data-ttu-id="a092c-280"><paramref name="nonPublic" /> es <see langword="true" />, pero la propiedad es de sólo lectura.</span><span class="sxs-lookup"><span data-stu-id="a092c-280"><paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.</span></span>  
  
<span data-ttu-id="a092c-281">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-281">-or-</span></span> 
 <span data-ttu-id="a092c-282">El valor de <paramref name="nonPublic" /> es <see langword="false" /> y el descriptor de acceso <see langword="set" /> no es público.</span><span class="sxs-lookup"><span data-stu-id="a092c-282"><paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
<span data-ttu-id="a092c-283">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-283">-or-</span></span> 
<span data-ttu-id="a092c-284">No hay descriptor de acceso <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-284">There is no <see langword="set" /> accessor.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-285">Para usar el `GetSetMethod` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-285">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-286">Desde el `Type`, obtener el <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="a092c-286">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="a092c-287">Desde el `PropertyInfo`, utilice el `GetSetMethod` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-287">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-288">El ejemplo siguiente se muestra el `set` descriptor de acceso para la propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="a092c-288">The following example displays the `set` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="a092c-289">El método solicitado no es público y el autor de llamada no tiene <see cref="T:System.Security.Permissions.ReflectionPermission" /> para reflejar en este método no público.</span><span class="sxs-lookup"><span data-stu-id="a092c-289">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-290">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-291">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="propertyInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a092c-292">Devuelve el valor de propiedad de un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-292">Returns the property value of a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.GetValue : obj -&gt; obj" Usage="propertyInfo.GetValue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-293">Objeto cuyo valor de propiedad se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="a092c-293">The object whose property value will be returned.</span></span></param>
        <summary><span data-ttu-id="a092c-294">Devuelve el valor de propiedad de un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-294">Returns the property value of a specified object.</span></span></summary>
        <returns><span data-ttu-id="a092c-295">Valor de propiedad del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-295">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-296">Se llama a la <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> sobrecarga para recuperar el valor de una propiedad no indizada; Si se intenta recuperar el valor de una propiedad indizada, el método produce una <xref:System.Reflection.TargetParameterCountException> excepción.</span><span class="sxs-lookup"><span data-stu-id="a092c-296">You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception.</span></span> <span data-ttu-id="a092c-297">Puede determinar si una propiedad está indizada, o no mediante una llamada a la <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-297">You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-298">Si la longitud de devuelto <xref:System.Reflection.ParameterInfo> matriz es cero, la propiedad no está indizada.</span><span class="sxs-lookup"><span data-stu-id="a092c-298">If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.</span></span>  
  
 <span data-ttu-id="a092c-299">Se trata de un método de conveniencia que proporciona una implementación abstracta <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método con el <xref:System.Reflection.BindingFlags> parámetro establecido en <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, el <xref:System.Reflection.Binder> establecido en `null`, la matriz de objetos de los valores de índice establecido en `null`, y el <xref:System.Globalization.CultureInfo> establecido en `null`.</span><span class="sxs-lookup"><span data-stu-id="a092c-299">This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-300">En el ejemplo siguiente se define un `Planet` clase que tiene dos propiedades: `Name`, el nombre del planeta; y `Distance`, distancia del planeta de tierra.</span><span class="sxs-lookup"><span data-stu-id="a092c-300">The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth.</span></span> <span data-ttu-id="a092c-301">El ejemplo crea un `Planet` objeto que representa el planeta Júpiter y lo pasa a un `GetPropertyValues` método que muestra información acerca de las propiedades y usa el <xref:System.Reflection.PropertyInfo.GetValue%2A> método para obtener el valor de cada `Planet` propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-301">The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * obj[] -&gt; obj&#xA;override this.GetValue : obj * obj[] -&gt; obj" Usage="propertyInfo.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-302">Objeto cuyo valor de propiedad se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="a092c-302">The object whose property value will be returned.</span></span></param>
        <param name="index"><span data-ttu-id="a092c-303">Valores de índice opcionales para propiedades indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-303">Optional index values for indexed properties.</span></span> <span data-ttu-id="a092c-304">Los índices de las propiedades indizadas son de base cero.</span><span class="sxs-lookup"><span data-stu-id="a092c-304">The indexes of indexed properties are zero-based.</span></span> <span data-ttu-id="a092c-305">Este valor debe ser <see langword="null" /> para propiedades no indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-305">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="a092c-306">Devuelve el valor de propiedad de un objeto especificado con valores de índice opcionales para las propiedades indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-306">Returns the property value of a specified object with optional index values for indexed properties.</span></span></summary>
        <returns><span data-ttu-id="a092c-307">Valor de propiedad del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-307">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-308">Para determinar si una propiedad está indizada, use el <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-308">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-309">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</span><span class="sxs-lookup"><span data-stu-id="a092c-309">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="a092c-310">Se trata de un método de conveniencia que proporciona una implementación abstracta `GetValue` método con un `BindingFlags` parámetro de `Default`, el `Binder` establecido en `null`y el `CultureInfo` establecido en `null`.</span><span class="sxs-lookup"><span data-stu-id="a092c-310">This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.</span></span>  
  
 <span data-ttu-id="a092c-311">Dado que las propiedades estáticas pertenecen al tipo, los objetos no individuales, obtener propiedades estáticas, pasando `null` como argumento del objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-311">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="a092c-312">Por ejemplo, use el código siguiente para obtener estático `CurrentCulture` propiedad de `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="a092c-312">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
    (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
    CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="a092c-313">Para usar el `GetValue` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-313">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-314">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-314">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-315">Desde el `PropertyInfo`, utilice el `GetValue` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-315">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-316">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a miembros no públicos, si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los miembros no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="a092c-316">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a092c-317">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a092c-317">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a092c-318">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="a092c-318">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-319">El ejemplo siguiente muestra cómo obtener el valor de una propiedad indizada.</span><span class="sxs-lookup"><span data-stu-id="a092c-319">The following example shows how to get the value of an indexed property.</span></span> <span data-ttu-id="a092c-320">El <xref:System.String.Chars%2A?displayProperty=nameWithType> es la propiedad predeterminada (el indizador en C#) de la <xref:System.String> clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-320">The <xref:System.String.Chars%2A?displayProperty=nameWithType> property is the default property (the indexer in C#) of the <xref:System.String> class.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a092c-321">La matriz <paramref name="index" /> no contiene el tipo de argumentos necesario.</span><span class="sxs-lookup"><span data-stu-id="a092c-321">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="a092c-322">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-322">-or-</span></span> 
<span data-ttu-id="a092c-323">No se encuentra el descriptor de acceso <see langword="get" /> de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-323">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-324">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture <see cref="T:System.Exception" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="a092c-324">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-325">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-325">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a092c-326">El número de parámetros de <paramref name="index" /> no coincide con el número de parámetros que toma la propiedad indexada.</span><span class="sxs-lookup"><span data-stu-id="a092c-326">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-327">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-327">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-328">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-328">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a092c-329">Error al recuperar el valor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-329">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="a092c-330">Por ejemplo, un valor de índice especificado para una propiedad indizada está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="a092c-330">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="a092c-331">La propiedad <see cref="P:System.Exception.InnerException" /> indica el motivo del error.</span><span class="sxs-lookup"><span data-stu-id="a092c-331">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-332">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-332">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-333">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="propertyInfo.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-334">Objeto cuyo valor de propiedad se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="a092c-334">The object whose property value will be returned.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="a092c-335">Una combinación bit a bit de los miembros de enumeración siguientes que especifican el atributo de invocación: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> y <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-335">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span></span> <span data-ttu-id="a092c-336">Debe especificarse un atributo de invocación apropiado.</span><span class="sxs-lookup"><span data-stu-id="a092c-336">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="a092c-337">Por ejemplo, para llamar a un miembro estático, establezca la marca <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-337">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="a092c-338">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-338">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="a092c-339">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span><span class="sxs-lookup"><span data-stu-id="a092c-339">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="a092c-340">Valores de índice opcionales para propiedades indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-340">Optional index values for indexed properties.</span></span> <span data-ttu-id="a092c-341">Este valor debe ser <see langword="null" /> para propiedades no indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-341">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="a092c-342">Referencia cultural para la que se va a localizar el recurso.</span><span class="sxs-lookup"><span data-stu-id="a092c-342">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="a092c-343">Si no se encuentra el recurso correspondiente a esta referencia cultural, se llamará sucesivamente a la propiedad <see cref="P:System.Globalization.CultureInfo.Parent" /> para buscar una coincidencia.</span><span class="sxs-lookup"><span data-stu-id="a092c-343">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="a092c-344">Si este valor es <see langword="null" />, la información específica de la referencia cultural se obtiene de la propiedad <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-344">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="a092c-345">Cuando se reemplaza en una clase derivada, devuelve el valor de propiedad de un objeto especificado que tiene el enlace, el índice y la información específica de la referencia cultural especificados.</span><span class="sxs-lookup"><span data-stu-id="a092c-345">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <returns><span data-ttu-id="a092c-346">Valor de propiedad del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-346">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-347">Para determinar si una propiedad está indizada, use el <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-347">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-348">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</span><span class="sxs-lookup"><span data-stu-id="a092c-348">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="a092c-349">Dado que las propiedades estáticas pertenecen al tipo, los objetos no individuales, obtener propiedades estáticas, pasando `null` como argumento del objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-349">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="a092c-350">Por ejemplo, use el código siguiente para obtener estático `CurrentCulture` propiedad de `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="a092c-350">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
       (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
       CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="a092c-351">Para usar el `GetValue` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-351">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-352">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-352">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-353">Desde el `PropertyInfo`, utilice el `GetValue` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-353">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-354">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a miembros no públicos, si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los miembros no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="a092c-354">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a092c-355">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a092c-355">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a092c-356">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="a092c-356">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a092c-357">La matriz <paramref name="index" /> no contiene el tipo de argumentos necesario.</span><span class="sxs-lookup"><span data-stu-id="a092c-357">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="a092c-358">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-358">-or-</span></span> 
<span data-ttu-id="a092c-359">No se encuentra el descriptor de acceso <see langword="get" /> de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-359">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="a092c-360">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-360">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a092c-361">El número de parámetros de <paramref name="index" /> no coincide con el número de parámetros que toma la propiedad indexada.</span><span class="sxs-lookup"><span data-stu-id="a092c-361">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a092c-362">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-362">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a092c-363">Error al recuperar el valor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-363">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="a092c-364">Por ejemplo, un valor de índice especificado para una propiedad indizada está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="a092c-364">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="a092c-365">La propiedad <see cref="P:System.Exception.InnerException" /> indica el motivo del error.</span><span class="sxs-lookup"><span data-stu-id="a092c-365">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-366">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-366">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-367">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-367">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-368">Obtiene un valor que indica si la propiedad es el nombre especial.</span><span class="sxs-lookup"><span data-stu-id="a092c-368">Gets a value indicating whether the property is the special name.</span></span></summary>
        <value><span data-ttu-id="a092c-369">Es <see langword="true" /> si esta propiedad es el nombre especial; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-369"><see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-370">El `SpecialName` bit se establece para marcar los miembros que se tratarán de una manera especial algunos compiladores (por ejemplo, los descriptores de acceso de propiedad y métodos de sobrecarga de operadores).</span><span class="sxs-lookup"><span data-stu-id="a092c-370">The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
 <span data-ttu-id="a092c-371">Para obtener el `IsSpecialName` propiedad, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-371">To get the `IsSpecialName` property, first get the class `Type`.</span></span> <span data-ttu-id="a092c-372">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-372">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-373">Desde el `PropertyInfo`, obtener el `IsSpecialName` valor.</span><span class="sxs-lookup"><span data-stu-id="a092c-373">From the `PropertyInfo`, get the `IsSpecialName` value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.PropertyInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-374">Obtiene un valor <see cref="T:System.Reflection.MemberTypes" /> que indica que este miembro es una propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-374">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></summary>
        <value><span data-ttu-id="a092c-375">Valor <see cref="T:System.Reflection.MemberTypes" /> que indica que este miembro es una propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-375">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-376">Esta propiedad invalida <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="a092c-376">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="a092c-377">Por lo tanto, cuando se examina un conjunto de <xref:System.Reflection.MemberInfo> objetos: por ejemplo, la matriz devuelta por <xref:System.Type.GetMembers%2A> : la <xref:System.Reflection.MemberInfo.MemberType%2A> propiedad devuelve <xref:System.Reflection.MemberTypes.Property> sólo cuando un miembro determinado es una propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-377">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.</span></span>  
  
 <span data-ttu-id="a092c-378">`MemberType` es una clase derivada de `MemberInfo` y especifica el tipo de miembro.</span><span class="sxs-lookup"><span data-stu-id="a092c-378">`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is.</span></span> <span data-ttu-id="a092c-379">Tipos de miembro son constructores, propiedades, campos y métodos.</span><span class="sxs-lookup"><span data-stu-id="a092c-379">Member types are constructors, properties, fields, and methods.</span></span> <span data-ttu-id="a092c-380">Puesto que se trata de un `PropertyInfo` , el tipo devuelto es una propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-380">Since this is a `PropertyInfo` property, the returned type is a property.</span></span>  
  
 <span data-ttu-id="a092c-381">Para obtener el `MemberType` propiedad, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-381">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="a092c-382">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-382">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-383">Desde el `PropertyInfo`, obtener el `MemberType` valor.</span><span class="sxs-lookup"><span data-stu-id="a092c-383">From the `PropertyInfo`, get the `MemberType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-384">El ejemplo siguiente muestra el tipo del miembro especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-384">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a092c-385">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="a092c-385">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a092c-386">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="a092c-386">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a092c-387">Indica si dos objetos <see cref="T:System.Reflection.PropertyInfo" /> son iguales.</span><span class="sxs-lookup"><span data-stu-id="a092c-387">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="a092c-388"><see langword="true" /> si <paramref name="left" /> es igual a <paramref name="right" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-388"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.PropertyInfo * System.Reflection.PropertyInfo -&gt; bool" Usage="System.Reflection.PropertyInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="a092c-389">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="a092c-389">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="a092c-390">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="a092c-390">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="a092c-391">Indica si dos objetos <see cref="T:System.Reflection.PropertyInfo" /> no son iguales.</span><span class="sxs-lookup"><span data-stu-id="a092c-391">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="a092c-392">Es <see langword="true" /> si <paramref name="left" /> no es igual a <paramref name="right" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-392"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Reflection.PropertyInfo.PropertyType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.PropertyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-393">Obtiene el tipo de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-393">Gets the type of this property.</span></span></summary>
        <value><span data-ttu-id="a092c-394">Tipo de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-394">The type of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-395">Para determinar el tipo de una propiedad determinada, realice lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="a092c-395">To determine the type of a particular property, do the following:</span></span>  
  
1.  <span data-ttu-id="a092c-396">Obtener un <xref:System.Type> objeto que representa el tipo (la clase o estructura) que contiene la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-396">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="a092c-397">Si está trabajando con un objeto (una instancia de un tipo), puede llamar a su <xref:System.Object.GetType%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-397">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="a092c-398">En caso contrario, se puede utilizar el operador de C# o el operador de Visual Basic, como en el ejemplo se muestra.</span><span class="sxs-lookup"><span data-stu-id="a092c-398">Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="a092c-399">Obtener un <xref:System.Reflection.PropertyInfo> objeto que representa la propiedad en el que está interesado.</span><span class="sxs-lookup"><span data-stu-id="a092c-399">Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested.</span></span> <span data-ttu-id="a092c-400">Puede hacerlo mediante la obtención de una matriz de todas las propiedades de la <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> método y, a continuación, recorrer en iteración los elementos de la matriz, o se pueden recuperar el <xref:System.Reflection.PropertyInfo> objeto que representa la propiedad directamente mediante una llamada a la <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> método y especificar el nombre de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-400">You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method and specifying the property name.</span></span>  
  
3.  <span data-ttu-id="a092c-401">Recuperar el valor de la <xref:System.Reflection.PropertyInfo.PropertyType%2A> propiedad desde la <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-401">Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-402">En el ejemplo siguiente se define un `Employee` clase que tiene cinco propiedades.</span><span class="sxs-lookup"><span data-stu-id="a092c-402">The following example defines an `Employee` class that has five properties.</span></span> <span data-ttu-id="a092c-403">, A continuación, usa recupera una matriz de <xref:System.Reflection.PropertyInfo> objetos que representan las propiedades y muestran el nombre y tipo de cada uno.</span><span class="sxs-lookup"><span data-stu-id="a092c-403">It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo SetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo SetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.SetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ SetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMethod : System.Reflection.MethodInfo" Usage="System.Reflection.PropertyInfo.SetMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a092c-404">Obtiene el descriptor de acceso <see langword="set" /> de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-404">Gets the <see langword="set" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="a092c-405">Descriptor de acceso <see langword="set" /> para esta propiedad o <see langword="null" /> si la propiedad es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="a092c-405">The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-406">Recuperar el valor de la <xref:System.Reflection.PropertyInfo.SetMethod%2A> propiedad es equivalente a llamar a la <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> método con un valor de `true` para el `nonPublic` argumento.</span><span class="sxs-lookup"><span data-stu-id="a092c-406">Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.PropertyInfo.GetMethod" />
        <altmember cref="P:System.Reflection.PropertyInfo.CanWrite" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a092c-407">Establece el valor de propiedad para un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-407">Sets the property value for a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * obj -&gt; unit" Usage="propertyInfo.SetValue (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-408">Objeto cuyo valor de propiedad se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="a092c-408">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="a092c-409">Nuevo valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-409">The new property value.</span></span></param>
        <summary><span data-ttu-id="a092c-410">Establece el valor de propiedad de un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a092c-410">Sets the property value of a specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-411">El <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> sobrecarga establece el valor de una propiedad no indizada.</span><span class="sxs-lookup"><span data-stu-id="a092c-411">The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property.</span></span> <span data-ttu-id="a092c-412">Para determinar si una propiedad está indizada, llame a la <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-412">To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-413">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</span><span class="sxs-lookup"><span data-stu-id="a092c-413">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span> <span data-ttu-id="a092c-414">Para establecer el valor de una propiedad indizada, llame a la <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="a092c-414">To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.</span></span>  
  
 <span data-ttu-id="a092c-415">Si la propiedad tipo de este <xref:System.Reflection.PropertyInfo> objeto es un tipo de valor y `value` es `null`, la propiedad se establecerá en el valor predeterminado para ese tipo.</span><span class="sxs-lookup"><span data-stu-id="a092c-415">If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="a092c-416">Se trata de un método de conveniencia que llama a la implementación en tiempo de ejecución del resumen <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método, especifica <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> para el `BindingFlags` parámetro, `null` para `Binder`, `null` para `Object[]`y `null` para `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-416">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="a092c-417">Para usar el <xref:System.Reflection.PropertyInfo.SetValue%2A> método, primero obtenga una <xref:System.Type> objeto que representa la clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-417">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="a092c-418">Desde el <xref:System.Type>, obtener el <xref:System.Reflection.PropertyInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-418">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="a092c-419">Desde el <xref:System.Reflection.PropertyInfo> de objeto, llame a la <xref:System.Reflection.PropertyInfo.SetValue%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-419">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-420">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a miembros no públicos, si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los miembros no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="a092c-420">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a092c-421">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a092c-421">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a092c-422">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="a092c-422">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-423">En el ejemplo siguiente se declara una clase denominada `Example` con uno `static` (`Shared` en Visual Basic) y la propiedad de una instancia.</span><span class="sxs-lookup"><span data-stu-id="a092c-423">The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property.</span></span> <span data-ttu-id="a092c-424">El ejemplo se usa el <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> método para cambiar la propiedad original y muestra los valores originales y finales.</span><span class="sxs-lookup"><span data-stu-id="a092c-424">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]
 [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]
 [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a092c-425">No se encuentra el descriptor de acceso <see langword="set" /> de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-425">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="a092c-426">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-426">-or-</span></span> 
 <span data-ttu-id="a092c-427"><paramref name="value" /> no se puede convertir al tipo de <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-427"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-428">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture <see cref="T:System.Exception" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="a092c-428">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-429">El tipo de <paramref name="obj" /> no coincide con el tipo de destino o una propiedad es una propiedad de instancia, pero <paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-429">The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-430">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-430">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-431">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-431">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a092c-432">Error al establecer el valor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-432">An error occurred while setting the property value.</span></span> <span data-ttu-id="a092c-433">La propiedad <see cref="P:System.Exception.InnerException" /> indica el motivo del error.</span><span class="sxs-lookup"><span data-stu-id="a092c-433">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-434">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-434">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-435">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-435">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * obj[] -&gt; unit&#xA;override this.SetValue : obj * obj * obj[] -&gt; unit" Usage="propertyInfo.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-436">Objeto cuyo valor de propiedad se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="a092c-436">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="a092c-437">Nuevo valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-437">The new property value.</span></span></param>
        <param name="index"><span data-ttu-id="a092c-438">Valores de índice opcionales para propiedades indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-438">Optional index values for indexed properties.</span></span> <span data-ttu-id="a092c-439">Este valor debe ser <see langword="null" /> para propiedades no indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-439">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="a092c-440">Establece el valor de propiedad de un objeto especificado con valores de índice opcionales para las propiedades del índice.</span><span class="sxs-lookup"><span data-stu-id="a092c-440">Sets the property value of a specified object with optional index values for index properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-441">Si este <xref:System.Reflection.PropertyInfo> objeto es un tipo de valor y `value` es `null`, la propiedad se establecerá en el valor predeterminado para ese tipo.</span><span class="sxs-lookup"><span data-stu-id="a092c-441">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="a092c-442">Para determinar si una propiedad está indizada, use el <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-442">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-443">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</span><span class="sxs-lookup"><span data-stu-id="a092c-443">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="a092c-444">Se trata de un método de conveniencia que llama a la implementación en tiempo de ejecución del resumen <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método, especifica <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> para el `BindingFlags` parámetro, `null` para `Binder`, y `null` para `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-444">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="a092c-445">Para usar el <xref:System.Reflection.PropertyInfo.SetValue%2A> método, primero obtenga una <xref:System.Type> objeto que representa la clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-445">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="a092c-446">Desde el <xref:System.Type>, obtener el <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="a092c-446">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="a092c-447">Desde el <xref:System.Reflection.PropertyInfo>, utilice el <xref:System.Reflection.PropertyInfo.SetValue%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-447">From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-448">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a miembros no públicos, si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los miembros no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="a092c-448">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a092c-449">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a092c-449">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a092c-450">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="a092c-450">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a092c-451">En el ejemplo siguiente se define una clase denominada `TestClass` que tiene una propiedad de lectura y escritura denominada `Caption`.</span><span class="sxs-lookup"><span data-stu-id="a092c-451">The following example defines a class named `TestClass` that has a read-write property named `Caption`.</span></span> <span data-ttu-id="a092c-452">Muestra el valor predeterminado de la `Caption` propiedad, llama el <xref:System.Reflection.PropertyInfo.SetValue%2A> método para cambiar el valor de propiedad y muestra el resultado.</span><span class="sxs-lookup"><span data-stu-id="a092c-452">It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a092c-453">Tenga en cuenta que, dado el `Caption` propiedad no es una matriz de parámetros, el `index` argumento es `null`.</span><span class="sxs-lookup"><span data-stu-id="a092c-453">Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.</span></span>  
  
 <span data-ttu-id="a092c-454">En el ejemplo siguiente se declara una clase denominada `Example` con tres propiedades: una `static` propiedad (`Shared` en Visual Basic), una propiedad de instancia y una propiedad de instancia indizada.</span><span class="sxs-lookup"><span data-stu-id="a092c-454">The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property.</span></span> <span data-ttu-id="a092c-455">El ejemplo se usa el <xref:System.Reflection.PropertyInfo.SetValue%2A> método para cambiar los valores predeterminados de las propiedades y muestra los valores originales y finales.</span><span class="sxs-lookup"><span data-stu-id="a092c-455">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.</span></span>  
  
 <span data-ttu-id="a092c-456">El nombre que se usa para buscar una propiedad de instancia indizada con reflexión es diferente según el idioma y de los atributos aplicados a la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-456">The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</span></span>  
  
-   <span data-ttu-id="a092c-457">En Visual Basic, el nombre de propiedad siempre se utiliza para buscar la propiedad con reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-457">In Visual Basic, the property name is always used to search for the property with reflection.</span></span> <span data-ttu-id="a092c-458">Puede usar el `Default` propiedad de la palabra clave para convertir un valor predeterminado de la propiedad indizada, en cuyo caso puede omitir el nombre al obtener acceso a la propiedad, como en este ejemplo.</span><span class="sxs-lookup"><span data-stu-id="a092c-458">You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</span></span> <span data-ttu-id="a092c-459">También puede usar el nombre de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-459">You can also use the property name.</span></span>  
  
-   <span data-ttu-id="a092c-460">En C#, la propiedad de instancia indizada es una propiedad predeterminada denominada indizador y el nombre nunca se usa al obtener acceso a la propiedad en el código.</span><span class="sxs-lookup"><span data-stu-id="a092c-460">In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</span></span> <span data-ttu-id="a092c-461">De forma predeterminada, el nombre de la propiedad es `Item`, y debe usar ese nombre cuando busque la propiedad con reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-461">By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection.</span></span> <span data-ttu-id="a092c-462">Puede usar el <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atributo para asignar un nombre diferente de indizador.</span><span class="sxs-lookup"><span data-stu-id="a092c-462">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name.</span></span> <span data-ttu-id="a092c-463">En este ejemplo, el nombre es `IndexedInstanceProperty`.</span><span class="sxs-lookup"><span data-stu-id="a092c-463">In this example, the name is `IndexedInstanceProperty`.</span></span>  
  
-   <span data-ttu-id="a092c-464">En C++, el `default` especificador puede usarse para convertir un valor predeterminado de una propiedad indizada (indizador de clase) de la propiedad indizada.</span><span class="sxs-lookup"><span data-stu-id="a092c-464">In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer).</span></span> <span data-ttu-id="a092c-465">En ese caso, el nombre de la propiedad predeterminada es `Item`, y debe usar ese nombre al realizar una búsqueda para la propiedad con reflexión, como en este ejemplo.</span><span class="sxs-lookup"><span data-stu-id="a092c-465">In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example.</span></span> <span data-ttu-id="a092c-466">Puede usar el <xref:System.Runtime.CompilerServices.IndexerNameAttribute> atributo para asignar un nombre diferente del indizador de clase en la reflexión, pero no se puede usar ese nombre para tener acceso a la propiedad en el código.</span><span class="sxs-lookup"><span data-stu-id="a092c-466">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</span></span> <span data-ttu-id="a092c-467">Se tiene acceso a una propiedad indizada que no es un indizador de clase utilizando su nombre tanto en el código en la reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-467">An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]
 [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]
 [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a092c-468">La matriz <paramref name="index" /> no contiene el tipo de argumentos necesario.</span><span class="sxs-lookup"><span data-stu-id="a092c-468">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="a092c-469">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-469">-or-</span></span> 
<span data-ttu-id="a092c-470">No se encuentra el descriptor de acceso <see langword="set" /> de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-470">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="a092c-471">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-471">-or-</span></span> 
 <span data-ttu-id="a092c-472"><paramref name="value" /> no se puede convertir al tipo de <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-472"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-473">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture <see cref="T:System.Exception" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="a092c-473">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-474">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-474">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a092c-475">El número de parámetros de <paramref name="index" /> no coincide con el número de parámetros que toma la propiedad indexada.</span><span class="sxs-lookup"><span data-stu-id="a092c-475">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="a092c-476">En <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET para aplicaciones de la Tienda Windows</see> o la <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Biblioteca de clases portable</see>, capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-476">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="a092c-477">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-477">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a092c-478">Error al configurar el valor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-478">An error occurred while setting the property value.</span></span> <span data-ttu-id="a092c-479">Por ejemplo, un valor de índice especificado para una propiedad indexada está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="a092c-479">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="a092c-480">La propiedad <see cref="P:System.Exception.InnerException" /> indica el motivo del error.</span><span class="sxs-lookup"><span data-stu-id="a092c-480">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-481">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-481">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-482">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-482">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="propertyInfo.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a092c-483">Objeto cuyo valor de propiedad se va a establecer.</span><span class="sxs-lookup"><span data-stu-id="a092c-483">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="a092c-484">Nuevo valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-484">The new property value.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="a092c-485">Una combinación bit a bit de los miembros de enumeración siguientes que especifican el atributo de invocación: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-485">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span> <span data-ttu-id="a092c-486">Debe especificarse un atributo de invocación apropiado.</span><span class="sxs-lookup"><span data-stu-id="a092c-486">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="a092c-487">Por ejemplo, para llamar a un miembro estático, establezca la marca <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-487">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="a092c-488">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión.</span><span class="sxs-lookup"><span data-stu-id="a092c-488">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="a092c-489">Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado.</span><span class="sxs-lookup"><span data-stu-id="a092c-489">If <paramref name="binder" /> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="a092c-490">Valores de índice opcionales para propiedades indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-490">Optional index values for indexed properties.</span></span> <span data-ttu-id="a092c-491">Este valor debe ser <see langword="null" /> para propiedades no indizadas.</span><span class="sxs-lookup"><span data-stu-id="a092c-491">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="a092c-492">Referencia cultural para la que se va a localizar el recurso.</span><span class="sxs-lookup"><span data-stu-id="a092c-492">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="a092c-493">Si no se encuentra el recurso correspondiente a esta referencia cultural, se llamará sucesivamente a la propiedad <see cref="P:System.Globalization.CultureInfo.Parent" /> para buscar una coincidencia.</span><span class="sxs-lookup"><span data-stu-id="a092c-493">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="a092c-494">Si este valor es <see langword="null" />, la información específica de la referencia cultural se obtiene de la propiedad <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-494">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="a092c-495">Cuando se reemplaza en una clase derivada, establece el valor de propiedad para un objeto especificado que tiene el enlace, el índice y la información específica de la referencia cultural especificados.</span><span class="sxs-lookup"><span data-stu-id="a092c-495">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-496">Si este <xref:System.Reflection.PropertyInfo> objeto es un tipo de valor y `value` es `null`, la propiedad se establecerá en el valor predeterminado para ese tipo.</span><span class="sxs-lookup"><span data-stu-id="a092c-496">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="a092c-497">Para determinar si una propiedad está indizada, use el <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a092c-497">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="a092c-498">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</span><span class="sxs-lookup"><span data-stu-id="a092c-498">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="a092c-499">Se omiten las restricciones de acceso para el código de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="a092c-499">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="a092c-500">Es decir, las propiedades, métodos, campos y constructores privados pueden tener acceso a e invoca a través de Reflection siempre que el código es de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="a092c-500">That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="a092c-501">Para usar el `SetValue` método, obtenga primero la clase `Type`.</span><span class="sxs-lookup"><span data-stu-id="a092c-501">To use the `SetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="a092c-502">Desde el `Type`, obtener el `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="a092c-502">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="a092c-503">Desde el `PropertyInfo`, utilice el `SetValue` método.</span><span class="sxs-lookup"><span data-stu-id="a092c-503">From the `PropertyInfo`, use the `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a092c-504">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método puede utilizarse para tener acceso a miembros no públicos, si el llamador tiene concedidos <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca y si el conjunto de permisos de los miembros no públicos se restringe al llamador conceder el conjunto o un subconjunto en ella.</span><span class="sxs-lookup"><span data-stu-id="a092c-504">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="a092c-505">(Consulte [consideraciones de seguridad para la reflexión](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="a092c-505">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="a092c-506">Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="a092c-506">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a092c-507">La matriz <paramref name="index" /> no contiene el tipo de argumentos necesario.</span><span class="sxs-lookup"><span data-stu-id="a092c-507">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
<span data-ttu-id="a092c-508">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-508">-or-</span></span> 
<span data-ttu-id="a092c-509">No se encuentra el descriptor de acceso <see langword="set" /> de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-509">The property's <see langword="set" /> accessor is not found.</span></span>  
  
<span data-ttu-id="a092c-510">O bien</span><span class="sxs-lookup"><span data-stu-id="a092c-510">-or-</span></span> 
 <span data-ttu-id="a092c-511"><paramref name="value" /> no se puede convertir al tipo de <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-511"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="a092c-512">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia, pero <paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-512">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="a092c-513">El número de parámetros de <paramref name="index" /> no coincide con el número de parámetros que toma la propiedad indexada.</span><span class="sxs-lookup"><span data-stu-id="a092c-513">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="a092c-514">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</span><span class="sxs-lookup"><span data-stu-id="a092c-514">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="a092c-515">Error al configurar el valor de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="a092c-515">An error occurred while setting the property value.</span></span> <span data-ttu-id="a092c-516">Por ejemplo, un valor de índice especificado para una propiedad indexada está fuera del intervalo.</span><span class="sxs-lookup"><span data-stu-id="a092c-516">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="a092c-517">La propiedad <see cref="P:System.Exception.InnerException" /> indica el motivo del error.</span><span class="sxs-lookup"><span data-stu-id="a092c-517">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="a092c-518">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-518">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="a092c-519">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-519">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="a092c-520">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="a092c-520">Reserved for future use.</span></span> <span data-ttu-id="a092c-521">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="a092c-521">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="a092c-522">Matriz que se pasa con los nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="a092c-522">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="a092c-523">Número de nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="a092c-523">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="a092c-524">Contexto de configuración regional en el que se van a interpretar los nombres.</span><span class="sxs-lookup"><span data-stu-id="a092c-524">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="a092c-525">Matriz asignada por el llamador que recibe los identificadores que corresponden a los nombres.</span><span class="sxs-lookup"><span data-stu-id="a092c-525">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="a092c-526">Asigna un conjunto de nombres a un conjunto correspondiente de identificadores de envío.</span><span class="sxs-lookup"><span data-stu-id="a092c-526">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-527">Este método es para el acceso a las clases administradas desde código no administrado y no debe llamarse desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="a092c-527">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a092c-528">Para obtener más información sobre `IDispatch::GetIDsOfNames`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a092c-528">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a092c-529">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="a092c-529">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetType">
      <MemberSignature Language="C#" Value="Type _PropertyInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _PropertyInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._PropertyInfo.GetType() = System::Runtime::InteropServices::_PropertyInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a092c-530">Obtiene un objeto <see cref="T:System.Type" /> que representa el tipo de <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-530">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="a092c-531">Objeto <see cref="T:System.Type" /> que representa el tipo <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="a092c-531">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="a092c-532">Información de tipos que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="a092c-532">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="a092c-533">Identificador de la configuración regional de la información de tipo.</span><span class="sxs-lookup"><span data-stu-id="a092c-533">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="a092c-534">Recibe un puntero al objeto de información de tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="a092c-534">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="a092c-535">Recupera la información de tipo de un objeto, que se puede usar después para obtener la información de tipo de una interfaz.</span><span class="sxs-lookup"><span data-stu-id="a092c-535">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-536">Este método es para el acceso a las clases administradas desde código no administrado y no debe llamarse desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="a092c-536">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a092c-537">Para obtener más información sobre `IDispatch::GetTypeInfo`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a092c-537">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a092c-538">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="a092c-538">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="a092c-539">Señala a una ubicación que recibe el número de interfaces de información de tipo proporcionado por el objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-539">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="a092c-540">Recupera el número de interfaces de información de tipo que proporciona un objeto (0 ó 1).</span><span class="sxs-lookup"><span data-stu-id="a092c-540">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-541">Este método es para el acceso a las clases administradas desde código no administrado y no debe llamarse desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="a092c-541">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a092c-542">Para obtener más información sobre `IDispatch::GetTypeInfoCount`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a092c-542">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a092c-543">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="a092c-543">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="a092c-544">Identifica el miembro.</span><span class="sxs-lookup"><span data-stu-id="a092c-544">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="a092c-545">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="a092c-545">Reserved for future use.</span></span> <span data-ttu-id="a092c-546">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="a092c-546">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="a092c-547">Contexto de la configuración regional en que se interpretan los argumentos.</span><span class="sxs-lookup"><span data-stu-id="a092c-547">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="a092c-548">Marcas que describen el contexto de la llamada.</span><span class="sxs-lookup"><span data-stu-id="a092c-548">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="a092c-549">Puntero a una estructura que contiene una matriz de argumentos, una matriz de valores DISPID de argumento para argumentos con nombre y recuentos del número de elementos de cada matriz.</span><span class="sxs-lookup"><span data-stu-id="a092c-549">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="a092c-550">Puntero a la ubicación donde se va a almacenar el resultado.</span><span class="sxs-lookup"><span data-stu-id="a092c-550">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="a092c-551">Puntero a una estructura que contiene información de excepciones.</span><span class="sxs-lookup"><span data-stu-id="a092c-551">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="a092c-552">Índice del primer argumento que tiene un error.</span><span class="sxs-lookup"><span data-stu-id="a092c-552">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="a092c-553">Proporciona acceso a las propiedades y los métodos expuestos por un objeto.</span><span class="sxs-lookup"><span data-stu-id="a092c-553">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a092c-554">Este método es para el acceso a las clases administradas desde código no administrado y no debe llamarse desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="a092c-554">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="a092c-555">Para obtener más información sobre `IDispatch::Invoke`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="a092c-555">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="a092c-556">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="a092c-556">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>