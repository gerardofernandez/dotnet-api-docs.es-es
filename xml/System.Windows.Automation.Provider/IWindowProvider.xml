<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5161f46c0343a762d947123080d3cc7b0b517c76" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880328" /></Metadata><TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <TypeSignature Language="F#" Value="type IWindowProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="415ca-101">Expone métodos y propiedades para admitir el acceso del cliente de automatización de la interfaz de usuario a controles que proporcionan la función fundamental basada en ventanas dentro de una interfaz gráfica de usuario tradicional.</span><span class="sxs-lookup"><span data-stu-id="415ca-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="415ca-102">Implementa en un proveedor de automatización de interfaz de usuario que debe admitir el <xref:System.Windows.Automation.WindowPattern> patrón de control.</span><span class="sxs-lookup"><span data-stu-id="415ca-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="415ca-103">Información general acerca de los patrones de control de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-103">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe"><span data-ttu-id="415ca-104">Implementación del proveedor de automatización de interfaz de usuario del lado servidor</span><span class="sxs-lookup"><span data-stu-id="415ca-104">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6"><span data-ttu-id="415ca-105">Implementación del proveedor de automatización de interfaz de usuario del lado cliente</span><span class="sxs-lookup"><span data-stu-id="415ca-105">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776"><span data-ttu-id="415ca-106">Patrones de control compatibles en un proveedor de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-106">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-107">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-107">Implementing the UI Automation Window Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iWindowProvider.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="415ca-108">Intenta cerrar la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-108">Attempts to close the window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="415ca-109"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> debe volver inmediatamente sin bloquearse.</span><span class="sxs-lookup"><span data-stu-id="415ca-109"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="415ca-110"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> genera el evento <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent>.</span><span class="sxs-lookup"><span data-stu-id="415ca-110"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="415ca-111">Si es posible, se debe generar el evento después de que el control ha terminado su acción asociada.</span><span class="sxs-lookup"><span data-stu-id="415ca-111">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="415ca-112">Cuando se llama en un control de panel dividido, este método se cierre el panel y quita la división asociada.</span><span class="sxs-lookup"><span data-stu-id="415ca-112">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="415ca-113">Este método también puede cerrar todos los demás paneles, según la implementación.</span><span class="sxs-lookup"><span data-stu-id="415ca-113">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="415ca-114">Cuando el control no puede realizar la acción solicitada.</span><span class="sxs-lookup"><span data-stu-id="415ca-114">When the control is unable to perform the requested action.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException"><span data-ttu-id="415ca-115">Cuando el elemento de destino ya no está disponible (por ejemplo, la ventana se cerró).</span><span class="sxs-lookup"><span data-stu-id="415ca-115">When the target element is no longer available (for example, the window has closed).</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-116">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-116">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberSignature Language="F#" Value="member this.InteractionState : System.Windows.Automation.WindowInteractionState" Usage="System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-117">Obtiene el estado de interacción de la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-117">Gets the interaction state of the window.</span></span></summary>
        <value><span data-ttu-id="415ca-118"><see cref="T:System.Windows.Automation.WindowInteractionState" /> del control.</span><span class="sxs-lookup"><span data-stu-id="415ca-118">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-119">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-119">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsModal : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-120">Obtiene un valor que especifica si la ventana es modal.</span><span class="sxs-lookup"><span data-stu-id="415ca-120">Gets a value that specifies whether the window is modal.</span></span></summary>
        <value><span data-ttu-id="415ca-121"><see langword="true" /> si la ventana es modal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="415ca-121"><see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-122">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-122">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTopmost : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-123">Obtiene un valor que especifica si la ventana es el elemento superior en el orden z.</span><span class="sxs-lookup"><span data-stu-id="415ca-123">Gets a value that specifies whether the window is the topmost element in the z-order.</span></span></summary>
        <value><span data-ttu-id="415ca-124"><see langword="true" /> si la ventana es de nivel superior; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="415ca-124"><see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-125">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-125">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Maximizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-126">Obtiene un valor que especifica si la ventana se puede maximizar.</span><span class="sxs-lookup"><span data-stu-id="415ca-126">Gets a value that specifies whether the window can be maximized.</span></span></summary>
        <value><span data-ttu-id="415ca-127"><see langword="true" /> si la ventana se puede maximizar; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="415ca-127"><see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-128">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-128">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Minimizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-129">Obtiene un valor que especifica si la ventana se puede minimizar.</span><span class="sxs-lookup"><span data-stu-id="415ca-129">Gets a value that specifies whether the window can be minimized.</span></span></summary>
        <value><span data-ttu-id="415ca-130"><see langword="true" /> si la ventana se puede minimizar; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="415ca-130"><see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-131">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-131">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberSignature Language="F#" Value="abstract member SetVisualState : System.Windows.Automation.WindowVisualState -&gt; unit" Usage="iWindowProvider.SetVisualState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="415ca-132">Estado visual solicitado de la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-132">The requested visual state of the window.</span></span></param>
        <summary><span data-ttu-id="415ca-133">Cambia el estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-133">Changes the visual state of the window.</span></span> <span data-ttu-id="415ca-134">Por ejemplo, lo minimiza o lo maximiza.</span><span class="sxs-lookup"><span data-stu-id="415ca-134">For example, minimizes or maximizes it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="415ca-135">Cuando el control no admite un comportamiento solicitado.</span><span class="sxs-lookup"><span data-stu-id="415ca-135">When the control does not support the requested behavior.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-136">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-136">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualState : System.Windows.Automation.WindowVisualState" Usage="System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="415ca-137">Obtiene el estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-137">Gets the visual state of the window.</span></span></summary>
        <value><span data-ttu-id="415ca-138">Estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-138">The visual state of the window.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-139">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-139">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="abstract member WaitForInputIdle : int -&gt; bool" Usage="iWindowProvider.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="415ca-140">Cantidad de tiempo, en milisegundos, que se esperará hasta que el proceso asociado entre a un estado de inactividad.</span><span class="sxs-lookup"><span data-stu-id="415ca-140">The amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="415ca-141">El valor máximo es <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="415ca-141">The maximum is <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="415ca-142">Hace que el código de llamada se bloquee durante el tiempo especificado o hasta que el proceso asociado entre en un estado de inactividad, lo que ocurra primero.</span><span class="sxs-lookup"><span data-stu-id="415ca-142">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span></span></summary>
        <returns><span data-ttu-id="415ca-143">Es <see langword="true" /> si la ventana ha entrado en el estado de inactividad; es <see langword="false" /> si se agotó el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="415ca-143"><see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="415ca-144">Este método se usa normalmente junto con la administración de un <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span><span class="sxs-lookup"><span data-stu-id="415ca-144">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="415ca-145">Depende de la implementación en el marco subyacente de la aplicación; por lo tanto, este método podría devolver algún tiempo después de la ventana está lista para la entrada del usuario.</span><span class="sxs-lookup"><span data-stu-id="415ca-145">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="415ca-146">El código de llamada no debe confiar en este método para determinar exactamente cuándo se ha vuelto inactiva la ventana.</span><span class="sxs-lookup"><span data-stu-id="415ca-146">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="415ca-147">Cuando el parámetro pasado no es un número válido.</span><span class="sxs-lookup"><span data-stu-id="415ca-147">When the parameter passed in is not a valid number.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a28cb286-296e-4a62-b4cb-55ad636ebccc"><span data-ttu-id="415ca-148">Implementar el patrón de control Window de UI Automation</span><span class="sxs-lookup"><span data-stu-id="415ca-148">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>