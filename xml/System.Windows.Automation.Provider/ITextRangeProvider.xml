<Type Name="ITextRangeProvider" FullName="System.Windows.Automation.Provider.ITextRangeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe41e917f101eab7e7e9a0b1a3d3ae56aabf98db" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56367628" /></Metadata><TypeSignature Language="C#" Value="public interface ITextRangeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITextRangeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITextRangeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITextRangeProvider" />
  <TypeSignature Language="F#" Value="type ITextRangeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4c01e-101">Expone métodos y propiedades para admitir el acceso del cliente de automatización de la interfaz de usuario a una sección de texto continuo en un contenedor de texto que implemente <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-101">Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-102">Implementa en un proveedor de automatización de interfaz de usuario que debe admitir el <xref:System.Windows.Automation.TextPattern> patrón de control.</span><span class="sxs-lookup"><span data-stu-id="4c01e-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.</span></span>  
  
 <span data-ttu-id="4c01e-103">Un <xref:System.Windows.Automation.Text.TextPatternRange> puede representar un punto de inserción, un subconjunto o todo el texto en un <xref:System.Windows.Automation.TextPattern> contenedor.</span><span class="sxs-lookup"><span data-stu-id="4c01e-103">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Text.TextPatternRange" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md"><span data-ttu-id="4c01e-104">Información general acerca de los patrones de control de UI Automation</span><span class="sxs-lookup"><span data-stu-id="4c01e-104">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe"><span data-ttu-id="4c01e-105">Implementación del proveedor de automatización de interfaz de usuario del lado servidor</span><span class="sxs-lookup"><span data-stu-id="4c01e-105">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6"><span data-ttu-id="4c01e-106">Implementación del proveedor de automatización de interfaz de usuario del lado cliente</span><span class="sxs-lookup"><span data-stu-id="4c01e-106">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776"><span data-ttu-id="4c01e-107">Patrones de control compatibles en un proveedor de UI Automation</span><span class="sxs-lookup"><span data-stu-id="4c01e-107">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/41787927-df1f-4f4a-aba3-641662854fc4"><span data-ttu-id="4c01e-108">Información general sobre el modelo de texto de UI Automation</span><span class="sxs-lookup"><span data-stu-id="4c01e-108">UI Automation TextPattern Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="abstract member AddToSelection : unit -&gt; unit" Usage="iTextRangeProvider.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-109">Agrega a la colección de texto resaltado en un contenedor de texto que admite varias selecciones discontinuas.</span><span class="sxs-lookup"><span data-stu-id="4c01e-109">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-110">Mueve el punto de inserción de texto en el área de la nueva selección.</span><span class="sxs-lookup"><span data-stu-id="4c01e-110">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="4c01e-111">Proporcionar un intervalo de texto degenerado mueve el punto de inserción.</span><span class="sxs-lookup"><span data-stu-id="4c01e-111">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c01e-112">Si el proveedor de texto no admite varias selecciones discontinuas (es decir, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> tiene un valor de <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="4c01e-112">If text provider does not support multiple, disjoint selections (that is, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-113">Devuelve una <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> nueva idéntica a la <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> original y hereda todas sus propiedades.</span><span class="sxs-lookup"><span data-stu-id="4c01e-113">Returns a new <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> identical to the original <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> and inheriting all properties of the original.</span></span></summary>
        <returns><span data-ttu-id="4c01e-114">Intervalo de texto nuevo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-114">The new text range.</span></span> <span data-ttu-id="4c01e-115">Nunca se devuelve una referencia nula (<see langword="Nothing" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4c01e-115">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-116">El nuevo intervalo se puede manipular independientemente del original.</span><span class="sxs-lookup"><span data-stu-id="4c01e-116">The new range can be manipulated independently from the original.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Compare(class System.Windows.Automation.Provider.ITextRangeProvider range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As ITextRangeProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Provider::ITextRangeProvider ^ range);" />
      <MemberSignature Language="F#" Value="abstract member Compare : System.Windows.Automation.Provider.ITextRangeProvider -&gt; bool" Usage="iTextRangeProvider.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
      </Parameters>
      <Docs>
        <param name="range"><span data-ttu-id="4c01e-117">Intervalo de texto que se debe comparar</span><span class="sxs-lookup"><span data-stu-id="4c01e-117">A text range to compare</span></span></param>
        <summary><span data-ttu-id="4c01e-118">Devuelve un valor que indica si el tramo (del punto de conexión <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> al punto de conexión <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />) de un intervalo de texto es igual que otro intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-118">Returns a value that indicates whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-119"><see langword="true" /> si el tramo de ambos intervalos de texto es idéntico; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-119"><see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c01e-120">Si el intervalo que se compara no proviene del mismo proveedor de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-120">If the range being compared does not come from the same text provider.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="iTextRangeProvider.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="4c01e-121">punto de conexión <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> o <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> del llamador.</span><span class="sxs-lookup"><span data-stu-id="4c01e-121">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span></span></param>
        <param name="targetRange"><span data-ttu-id="4c01e-122">Intervalo de destino para la comparación.</span><span class="sxs-lookup"><span data-stu-id="4c01e-122">The target range for comparison.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="4c01e-123">Extremo <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> o <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> del destino.</span><span class="sxs-lookup"><span data-stu-id="4c01e-123">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span></span></param>
        <summary><span data-ttu-id="4c01e-124">Devuelve un valor que especifica si dos intervalos de texto tienen extremos idénticos.</span><span class="sxs-lookup"><span data-stu-id="4c01e-124">Returns a value that specifies whether two text ranges have identical endpoints.</span></span></summary>
        <returns><span data-ttu-id="4c01e-125">Devuelve un valor negativo si el punto de conexión del llamador se produce en el texto antes que en el punto de conexión de destino.</span><span class="sxs-lookup"><span data-stu-id="4c01e-125">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span></span>  
  
<span data-ttu-id="4c01e-126">Devuelve cero si el punto de conexión del llamador está en la misma ubicación que el punto de conexión de destino.</span><span class="sxs-lookup"><span data-stu-id="4c01e-126">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span></span>  
  
<span data-ttu-id="4c01e-127">Devuelve un valor positivo si el punto de conexión del llamador se produce en el texto después que en el punto de conexión de destino.</span><span class="sxs-lookup"><span data-stu-id="4c01e-127">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c01e-128">Si <paramref name="targetRange" /> es de un proveedor de texto diferente.</span><span class="sxs-lookup"><span data-stu-id="4c01e-128">If <paramref name="targetRange" /> is from a different text provider.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="abstract member ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="iTextRangeProvider.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="4c01e-129">Unidad textual.</span><span class="sxs-lookup"><span data-stu-id="4c01e-129">The textual unit.</span></span></param>
        <summary><span data-ttu-id="4c01e-130">Expande el intervalo de texto a la unidad de texto especificada.</span><span class="sxs-lookup"><span data-stu-id="4c01e-130">Expands the text range to the specified text unit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-131">Si el intervalo ya es una cantidad exacta de las unidades especificadas permanece sin cambios.</span><span class="sxs-lookup"><span data-stu-id="4c01e-131">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="4c01e-132">Hay una serie de pasos que intervienen en segundo plano en orden para el <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> método se ejecute correctamente.</span><span class="sxs-lookup"><span data-stu-id="4c01e-132">There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="4c01e-133">El intervalo de texto se normaliza, es decir, se contrae, en un intervalo degenerado en el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , y el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> queda superfluo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-133">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="4c01e-134">Este paso es necesario para evitar la ambigüedad en situaciones donde abarca un intervalo de texto `unit` límites; por ejemplo, "{la U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) está incrustada en el texto" donde "{" y "}" es extremos del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-134">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="4c01e-135">El intervalo resultante se mueve hacia atrás en <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> , al principio del límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-135">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="4c01e-136">El intervalo resultante se mueve hacia delante o hacia atrás en <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> , en función del número solicitado de límites `unit` .</span><span class="sxs-lookup"><span data-stu-id="4c01e-136">The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="4c01e-137">A continuación, el intervalo se expande desde un estado de intervalo degenerado moviendo el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> en función de un límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-137">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="4c01e-138">![Ajustes de intervalo mediante Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo mediante Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="4c01e-138">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="4c01e-139">Ejemplos de cómo se ajusta un intervalo de texto para Move() y ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="4c01e-139">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c01e-140">Estos pasos son necesarios, ya que es común para un lector de pantalla lea una palabra completa, frase o un párrafo completo en el punto de inserción o en cualquier posición del cursor virtual.</span><span class="sxs-lookup"><span data-stu-id="4c01e-140">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="4c01e-141"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> respeta el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-141"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="4c01e-142"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> aplaza al siguiente mayor <xref:System.Windows.Automation.Text.TextUnit> if compatible el determinado <xref:System.Windows.Automation.Text.TextUnit> no es compatible con el control.</span><span class="sxs-lookup"><span data-stu-id="4c01e-142"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="4c01e-143">El orden de la unidad de menor a mayor, se muestra a continuación.</span><span class="sxs-lookup"><span data-stu-id="4c01e-143">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindAttribute(int32 attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As Integer, value As Object, backward As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindAttribute(int attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="abstract member FindAttribute : int * obj * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="4c01e-144">Atributo que se debe buscar.</span><span class="sxs-lookup"><span data-stu-id="4c01e-144">The attribute to search for.</span></span></param>
        <param name="value"><span data-ttu-id="4c01e-145">Valor del atributo que se debe buscar.</span><span class="sxs-lookup"><span data-stu-id="4c01e-145">The attribute value to search for.</span></span> <span data-ttu-id="4c01e-146">Este valor debe coincidir con el tipo especificado para el atributo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-146">This value must match the type specified for the attribute.</span></span></param>
        <param name="backward"><span data-ttu-id="4c01e-147"><see langword="true" /> si debe devolverse el último intervalo de texto en lugar del primero; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-147"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c01e-148">Devuelve un subconjunto del intervalo de texto que tiene el valor de atributo especificado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-148">Returns a text range subset that has the specified attribute value.</span></span></summary>
        <returns><span data-ttu-id="4c01e-149">Intervalo de texto que tiene un atributo y un valor de atributo correspondiente; en caso contrario, null (<see langword="Nothing" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4c01e-149">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-150">No hay ninguna diferencia entre el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-150">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member FindText : string * bool * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="4c01e-151">Cadena de texto que se debe buscar.</span><span class="sxs-lookup"><span data-stu-id="4c01e-151">The text string to search for.</span></span></param>
        <param name="backward"><span data-ttu-id="4c01e-152"><see langword="true" /> si debe devolverse el último intervalo de texto en lugar del primero; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-152"><see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="4c01e-153"><see langword="true" /> si no se debe distinguir entre mayúsculas y minúsculas; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-153"><see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c01e-154">Devuelve un subconjunto del intervalo de texto que contiene el texto especificado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-154">Returns a text range subset that contains the specified text.</span></span></summary>
        <returns><span data-ttu-id="4c01e-155">Intervalo de texto que coincide con el texto especificado; en caso contrario, null (<see langword="Nothing" /> en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4c01e-155">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-156">No hay ninguna diferencia entre el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-156">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (int attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAttributeValue(int32 attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(int attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeValue : int -&gt; obj" Usage="iTextRangeProvider.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attribute"><span data-ttu-id="4c01e-157">Atributo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-157">The text attribute.</span></span></param>
        <summary><span data-ttu-id="4c01e-158">Recupera el valor del atributo especificado por el intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-158">Retrieves the value of the specified attribute across the text range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-159">Recupera un objeto que representa el valor del atributo especificado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-159">Retrieves an object representing the value of the specified attribute.</span></span> <span data-ttu-id="4c01e-160">Por ejemplo, <c>GetAttributeValue(TextPattern.FontNameAttribute)</c> devolvería una cadena que representa el nombre de fuente del intervalo de texto, mientras que <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c> devolvería un valor de tipo <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-160">For example, <c>GetAttributeValue(TextPattern.FontNameAttribute)</c> would return a string that represents the font name of the text range while <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c> would return a value of type <see cref="T:System.Boolean" />.</span></span>  
  
<span data-ttu-id="4c01e-161">Devuelve <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> si el valor del atributo especificado varía respecto al intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-161">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span></span>  
  
<span data-ttu-id="4c01e-162">Devuelve <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> si el proveedor o el control no admiten el atributo especificado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-162">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-163">No hay ninguna diferencia entre el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-163">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c01e-164">Si el atributo especificado no es válido.</span><span class="sxs-lookup"><span data-stu-id="4c01e-164">If the specified attribute is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public double[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="abstract member GetBoundingRectangles : unit -&gt; double[]" Usage="iTextRangeProvider.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-165">Recupera una colección de rectángulos delimitadores para cada línea de texto total o parcialmente visible en un intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-165">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-166">Matriz de rectángulos delimitadores para cada línea de texto completa o parcial en un intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-166">An array of bounding rectangles for each full or partial line of text in a text range.</span></span>  
  
<span data-ttu-id="4c01e-167">Matriz vacía para un intervalo degenerado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-167">An empty array for a degenerate range.</span></span>  
  
<span data-ttu-id="4c01e-168">Matriz vacía para un intervalo de texto cuyas coordenadas de pantalla lo colocan completamente fuera de la pantalla, lo desplazan fuera de la vista o lo ocultan con una ventana superpuesta.</span><span class="sxs-lookup"><span data-stu-id="4c01e-168">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple[]" Usage="iTextRangeProvider.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-169">Recupera una colección de todos los objetos incrustados que se encuentran en el intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-169">Retrieves a collection of all embedded objects that fall within the text range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-170">Colección de objetos secundarios que se encuentran dentro del intervalo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-170">A collection of child objects that fall within the range.</span></span> <span data-ttu-id="4c01e-171">Los elementos secundarios superpuestos en el intervalo de texto que este no enmarca completamente también se incluyen en la colección.</span><span class="sxs-lookup"><span data-stu-id="4c01e-171">Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.</span></span>  
  
<span data-ttu-id="4c01e-172">Devuelve una colección vacía si no hay ningún objeto secundario.</span><span class="sxs-lookup"><span data-stu-id="4c01e-172">Returns an empty collection if there are no child objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderSimple ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="abstract member GetEnclosingElement : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="iTextRangeProvider.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-173">Devuelve el control más interno que enmarca el intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-173">Returns the innermost control that encloses the text range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-174">Control envolvente, que es normalmente el proveedor de texto que proporciona el intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-174">The enclosing control, typically the text provider that supplies the text range.</span></span> <span data-ttu-id="4c01e-175">Sin embargo, si el proveedor de texto admite elementos secundarios como tablas o hipervínculos, el elemento envolvente podría ser un descendiente del proveedor de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-175">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="abstract member GetText : int -&gt; string" Usage="iTextRangeProvider.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength"><span data-ttu-id="4c01e-176">Longitud máxima de la cadena que se debe devolver.</span><span class="sxs-lookup"><span data-stu-id="4c01e-176">The maximum length of the string to return.</span></span> <span data-ttu-id="4c01e-177">Use <c>-1</c> si no se requiere ningún límite.</span><span class="sxs-lookup"><span data-stu-id="4c01e-177">Use <c>-1</c> if no limit is required.</span></span></param>
        <summary><span data-ttu-id="4c01e-178">Recupera el texto sin formato del intervalo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-178">Retrieves the plain text of the range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-179">Texto sin formato del intervalo de texto, posiblemente truncado según el <paramref name="maxLength" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-179">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-180"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> respeta el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-180"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="4c01e-181">Si `maxLength` es mayor que la longitud del intervalo de texto del llamador, la cadena devuelta será el texto sin formato del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-181">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="4c01e-182"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> no se verán afectados por el orden de los puntos de conexión en el flujo de texto; siempre devolverá el texto entre los puntos de conexión inicial y final del intervalo de texto en el orden de flujo de lógica del texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-182"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4c01e-183">Si <paramref name="maxLength" /> es menor que 1.</span><span class="sxs-lookup"><span data-stu-id="4c01e-183">If <paramref name="maxLength" /> is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="4c01e-184">Límite de la unidad de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-184">The text unit boundary.</span></span></param>
        <param name="count"><span data-ttu-id="4c01e-185">Número de unidades de texto que se deben mover.</span><span class="sxs-lookup"><span data-stu-id="4c01e-185">The number of text units to move.</span></span>  
  
<span data-ttu-id="4c01e-186">Un valor positivo mueve el intervalo de texto hacia adelante, un valor negativo mueve el intervalo de texto hacia atrás y 0 no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-186">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="4c01e-187">Mueve el intervalo de texto el número especificado de unidades de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-187">Moves the text range the specified number of text units.</span></span></summary>
        <returns><span data-ttu-id="4c01e-188">Número de unidades que se movieron realmente.</span><span class="sxs-lookup"><span data-stu-id="4c01e-188">The number of units actually moved.</span></span> <span data-ttu-id="4c01e-189">Puede ser menor que el número solicitado si cualquiera de los nuevos extremos del intervalo de texto es mayor o menor que los extremos de <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" />.</span><span class="sxs-lookup"><span data-stu-id="4c01e-189">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> endpoints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-190">Cuando es necesario atravesar el contenido de un intervalo de texto, se realizan en segundo plano una serie de pasos para que el método <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> pueda ejecutarse correctamente.</span><span class="sxs-lookup"><span data-stu-id="4c01e-190">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="4c01e-191">El intervalo de texto se normaliza, es decir, se contrae, en un intervalo degenerado en el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , y el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> queda superfluo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-191">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="4c01e-192">Este paso es necesario para evitar la ambigüedad en situaciones donde abarca un intervalo de texto `unit` límites; por ejemplo, "{la U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) está incrustada en el texto" donde "{" y "}" es extremos del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-192">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="4c01e-193">El intervalo resultante se mueve hacia atrás en <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> , al principio del límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-193">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="4c01e-194">El intervalo resultante se mueve hacia delante o hacia atrás en <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> , en función del número solicitado de límites `unit` .</span><span class="sxs-lookup"><span data-stu-id="4c01e-194">The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="4c01e-195">A continuación, el intervalo se expande desde un estado de intervalo degenerado moviendo el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> en función de un límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-195">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="4c01e-196">![Ajustes de intervalo mediante Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo mediante Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="4c01e-196">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="4c01e-197">Ejemplos de cómo se ajusta un intervalo de texto para Move() y ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="4c01e-197">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="4c01e-198">El contenido textual (o texto interno) de un contenedor de texto y un objeto incrustado, como un hipervínculo o una celda de tabla, se expone como una secuencia de texto continua única en las vistas de control y contenido del árbol de [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] . Los límites del objeto se ignoran.</span><span class="sxs-lookup"><span data-stu-id="4c01e-198">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span>  
  
 <span data-ttu-id="4c01e-199">![Intervalos de texto ocupados por objetos incrustados. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "Intervalos de texto ocupados por objetos incrustados.")</span><span class="sxs-lookup"><span data-stu-id="4c01e-199">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="4c01e-200">Ejemplo de una secuencia de texto con objetos incrustados y sus intervalos</span><span class="sxs-lookup"><span data-stu-id="4c01e-200">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="4c01e-201"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> respeta el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-201"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="4c01e-202"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> aplaza al siguiente mayor <xref:System.Windows.Automation.Text.TextUnit> if compatible el determinado <xref:System.Windows.Automation.Text.TextUnit> no es compatible con el control.</span><span class="sxs-lookup"><span data-stu-id="4c01e-202"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="4c01e-203">El orden de la unidad de menor a mayor, se muestra a continuación.</span><span class="sxs-lookup"><span data-stu-id="4c01e-203">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 <span data-ttu-id="4c01e-204">El texto no se modifica de alguna forma, el intervalo de texto abarca solo una parte distinta del texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-204">The text is not altered in any way, the text range just spans a different part of the text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="iTextRangeProvider.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="4c01e-205">punto de conexión que se debe mover.</span><span class="sxs-lookup"><span data-stu-id="4c01e-205">The endpoint to move.</span></span></param>
        <param name="targetRange"><span data-ttu-id="4c01e-206">Otro intervalo del mismo proveedor de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-206">Another range from the same text provider.</span></span></param>
        <param name="targetEndpoint"><span data-ttu-id="4c01e-207">Extremo en el otro intervalo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-207">An endpoint on the other range.</span></span></param>
        <summary><span data-ttu-id="4c01e-208">Mueve un punto de conexión de un intervalo de texto al punto de conexión especificado de un segundo intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-208">Moves one endpoint of a text range to the specified endpoint of a second text range.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-209">Si el punto de conexión que se está moviendo cruza otro punto de conexión del mismo intervalo de texto, a continuación, ese otro punto de conexión se mueve también, lo que resulta en un intervalo degenerado y garantizar el orden correcto de los puntos de conexión (es decir, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> siempre es menor o igual que <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="4c01e-209">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint"><span data-ttu-id="4c01e-210">punto de conexión que se debe mover.</span><span class="sxs-lookup"><span data-stu-id="4c01e-210">The endpoint to move.</span></span></param>
        <param name="unit"><span data-ttu-id="4c01e-211">Unidad textual que se debe mover.</span><span class="sxs-lookup"><span data-stu-id="4c01e-211">The textual unit for moving.</span></span></param>
        <param name="count"><span data-ttu-id="4c01e-212">Número de unidades para mover.</span><span class="sxs-lookup"><span data-stu-id="4c01e-212">The number of units to move.</span></span> <span data-ttu-id="4c01e-213">Un valor positivo mueve el punto de conexión hacia adelante.</span><span class="sxs-lookup"><span data-stu-id="4c01e-213">A positive value moves the endpoint forward.</span></span> <span data-ttu-id="4c01e-214">Un valor negativo lo mueve hacia atrás.</span><span class="sxs-lookup"><span data-stu-id="4c01e-214">A negative value moves backward.</span></span> <span data-ttu-id="4c01e-215">Un valor de 0 no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-215">A value of 0 has no effect.</span></span></param>
        <summary><span data-ttu-id="4c01e-216">Mueve un extremo del intervalo de texto el número especificado de unidades de texto dentro del intervalo del documento.</span><span class="sxs-lookup"><span data-stu-id="4c01e-216">Moves one endpoint of the text range the specified number of text units within the document range.</span></span></summary>
        <returns><span data-ttu-id="4c01e-217">Número de unidades que realmente se mueven. Puede ser menor que el número solicitado si al mover el punto de conexión se pasa por el principio o el final del documento.</span><span class="sxs-lookup"><span data-stu-id="4c01e-217">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-218">Cuando es necesario atravesar el contenido de un intervalo de texto, se realizan en segundo plano una serie de pasos para que el método <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> pueda ejecutarse correctamente.</span><span class="sxs-lookup"><span data-stu-id="4c01e-218">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="4c01e-219">El intervalo de texto se normaliza, es decir, se contrae, en un intervalo degenerado en el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> , y el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> queda superfluo.</span><span class="sxs-lookup"><span data-stu-id="4c01e-219">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="4c01e-220">Este paso es necesario para evitar la ambigüedad en situaciones donde abarca un intervalo de texto `unit` límites; por ejemplo, "{la U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) está incrustada en el texto" donde "{" y "}" es extremos del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-220">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="4c01e-221">El intervalo resultante se mueve hacia atrás en <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> , al principio del límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-221">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="4c01e-222">A continuación, el intervalo se expande desde un estado de intervalo degenerado moviendo el extremo <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> en función de un límite `unit` solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-222">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="4c01e-223">![Ajustes de intervalo mediante Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "ajustes de intervalo mediante Move & ExpandToEnclosingUnit")</span><span class="sxs-lookup"><span data-stu-id="4c01e-223">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="4c01e-224">Ejemplos de cómo se ajusta un intervalo de texto para Move() y ExpandToEnclosingUnit()</span><span class="sxs-lookup"><span data-stu-id="4c01e-224">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="4c01e-225"><xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> aplaza al siguiente mayor <xref:System.Windows.Automation.Text.TextUnit> if compatible el determinado <xref:System.Windows.Automation.Text.TextUnit> no es compatible con el control.</span><span class="sxs-lookup"><span data-stu-id="4c01e-225"><xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="4c01e-226">El orden de la unidad de menor a mayor, se muestra a continuación.</span><span class="sxs-lookup"><span data-stu-id="4c01e-226">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromSelection : unit -&gt; unit" Usage="iTextRangeProvider.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-227">Quita una sección resaltada de texto, que corresponde a los puntos de conexión <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> y <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> del llamador, de la colección de texto resaltado en un contenedor de texto que admite varias selecciones discontinuas.</span><span class="sxs-lookup"><span data-stu-id="4c01e-227">Removes a highlighted section of text, corresponding to the caller's <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-228">El punto de inserción se moverá al área del resaltado quitado.</span><span class="sxs-lookup"><span data-stu-id="4c01e-228">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="4c01e-229">Proporcionar un intervalo de texto degenerado se moverá el punto de inserción.</span><span class="sxs-lookup"><span data-stu-id="4c01e-229">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c01e-230">Si el proveedor de texto no admite varias selecciones discontinuas (por ejemplo, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> tiene un valor de <see langword="Multiple" />).</span><span class="sxs-lookup"><span data-stu-id="4c01e-230">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="abstract member ScrollIntoView : bool -&gt; unit" Usage="iTextRangeProvider.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop"><span data-ttu-id="4c01e-231"><see langword="true" /> si el control de texto se debe desplazar de forma que el intervalo de texto quede alineado con la parte superior de la ventanilla; <see langword="false" /> si debe alinearse con la parte inferior de la ventanilla.</span><span class="sxs-lookup"><span data-stu-id="4c01e-231"><see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span></span></param>
        <summary><span data-ttu-id="4c01e-232">Hace que el control de texto se desplace verticalmente hasta que el intervalo de texto esté visible en la ventanilla.</span><span class="sxs-lookup"><span data-stu-id="4c01e-232">Causes the text control to scroll vertically until the text range is visible in the viewport.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-233"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> respeta el texto oculto y visible.</span><span class="sxs-lookup"><span data-stu-id="4c01e-233"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="4c01e-234">Si el intervalo de texto está oculto, se desplazará el control de texto sólo si el texto oculto tiene un anclaje en la ventanilla.</span><span class="sxs-lookup"><span data-stu-id="4c01e-234">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="abstract member Select : unit -&gt; unit" Usage="iTextRangeProvider.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c01e-235">Resalta el texto en el control de texto que corresponde a los extremos <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> y <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-235">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c01e-236">Si se proporciona un intervalo de texto degenerado, el punto de inserción de texto se moverá a la <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> punto de conexión del intervalo de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-236">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c01e-237">Se produce cuando la selección de texto no es compatible con el control de texto.</span><span class="sxs-lookup"><span data-stu-id="4c01e-237">Occurs when text selection is not supported by the text control.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>