<Type Name="IListContract&lt;C&gt;" FullName="System.AddIn.Contract.Collections.IListContract&lt;C&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6692cfcfb27a1b3fd98eac28b64ae843b5d07169" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63916036" /></Metadata><TypeSignature Language="C#" Value="public interface IListContract&lt;C&gt; : System.AddIn.Contract.Collections.ICollectionContract&lt;C&gt;, System.AddIn.Contract.Collections.IEnumerableContract&lt;C&gt; where C : IContract" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IListContract`1&lt;(class System.AddIn.Contract.IContract) C&gt; implements class System.AddIn.Contract.Collections.ICollectionContract`1&lt;!C&gt;, class System.AddIn.Contract.Collections.IEnumerableContract`1&lt;!C&gt;, class System.AddIn.Contract.IContract" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.Collections.IListContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IListContract(Of C)&#xA;Implements ICollectionContract(Of C), IEnumerableContract(Of C)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename C&gt;&#xA; where C : IContractpublic interface class IListContract : System::AddIn::Contract::Collections::ICollectionContract&lt;C&gt;, System::AddIn::Contract::Collections::IEnumerableContract&lt;C&gt;" />
  <TypeSignature Language="F#" Value="type IListContract&lt;'C (requires 'C :&gt; IContract)&gt; = interface&#xA;    interface ICollectionContract&lt;'C (requires 'C :&gt; IContract)&gt;&#xA;    interface IEnumerableContract&lt;'C (requires 'C :&gt; IContract)&gt;&#xA;    interface IContract" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="C">
      <Constraints>
        <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.AddIn.Contract.Collections.ICollectionContract&lt;C&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.AddIn.Contract.Collections.IEnumerableContract&lt;C&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="C"><span data-ttu-id="b0a0a-101">Tipo de los objetos de la lista.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-101">The type of objects in the list.</span></span> <span data-ttu-id="b0a0a-102"><paramref name="C" /> debe implementar la interfaz <see cref="T:System.AddIn.Contract.IContract" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-102"><paramref name="C" /> must implement the <see cref="T:System.AddIn.Contract.IContract" /> interface.</span></span></typeparam>
    <summary><span data-ttu-id="b0a0a-103">Representa una colección genérica de objetos <see cref="T:System.AddIn.Contract.IContract" /> a los que se puede obtener acceso individualmente por índice.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-103">Represents a generic collection of <see cref="T:System.AddIn.Contract.IContract" /> objects that can be individually accessed by index.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public C GetItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !C GetItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItem (index As Integer) As C" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; C GetItem(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetItem : int -&gt; 'C" Usage="iListContract.GetItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>C</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b0a0a-104">Índice de base cero del elemento que se va a obtener.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-104">The zero-based index of the element to get.</span></span></param>
        <summary><span data-ttu-id="b0a0a-105">Devuelve el elemento que se encuentra en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-105">Returns the element at the specified index.</span></span></summary>
        <returns><span data-ttu-id="b0a0a-106">Elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-106">The element at the specified index.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a0a-107">El <xref:System.AddIn.Contract.Collections.IListContract%601.GetItem%2A> método no quita el elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-107">The <xref:System.AddIn.Contract.Collections.IListContract%601.GetItem%2A> method does not remove the element at the specified index.</span></span> <span data-ttu-id="b0a0a-108">Para quitar un elemento de la <xref:System.AddIn.Contract.Collections.IListContract%601>, utilice el <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-108">To remove an element from the <xref:System.AddIn.Contract.Collections.IListContract%601>, use the <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="b0a0a-109"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-109"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0a0a-110">O bien</span><span class="sxs-lookup"><span data-stu-id="b0a0a-110">-or-</span></span> 
 <span data-ttu-id="b0a0a-111"><paramref name="index" /> es igual o mayor que el valor devuelto de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-111"><paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (C item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!C item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As C) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(C item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'C -&gt; int" Usage="iListContract.IndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="C" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="b0a0a-112">Objeto <see cref="T:System.AddIn.Contract.IContract" /> que se va a buscar en la interfaz <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-112">The <see cref="T:System.AddIn.Contract.IContract" /> to locate in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span></span></param>
        <summary><span data-ttu-id="b0a0a-113">Devuelve el índice de un elemento especificado en <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-113">Returns the index of a specific element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span></span></summary>
        <returns><span data-ttu-id="b0a0a-114">Devuelve el índice de <paramref name="item" /> si se encuentra en la lista; de lo contrario, devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-114">The index of <paramref name="item" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, C item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !C item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As C)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, C item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'C -&gt; unit" Usage="iListContract.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="C" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b0a0a-115">Índice de base cero en el que se va a insertar <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-115">The zero-based index at which to insert <paramref name="item" />.</span></span></param>
        <param name="item"><span data-ttu-id="b0a0a-116"><see cref="T:System.AddIn.Contract.IContract" /> que se va a insertar en <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-116">The <see cref="T:System.AddIn.Contract.IContract" /> to insert in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</span></span></param>
        <summary><span data-ttu-id="b0a0a-117">Inserta un elemento en <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-117">Inserts an element in the <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a0a-118">Después de llamar a <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A>, mover los elementos que siguen al punto de inserción alojar el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-118">After you call <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A>, the elements that follow the insertion point move to accommodate the new element.</span></span> <span data-ttu-id="b0a0a-119">También se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-119">The indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="b0a0a-120">Para reemplazar un elemento en el índice especificado, use el <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-120">To replace an element at a specified index, use the <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> method.</span></span>  
  
 <span data-ttu-id="b0a0a-121">Para determinar si un <xref:System.AddIn.Contract.Collections.IListContract%601> es de solo lectura, llame a la <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-121">To determine whether an <xref:System.AddIn.Contract.Collections.IListContract%601> is read-only, call the <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="b0a0a-122"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-122"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0a0a-123">O bien</span><span class="sxs-lookup"><span data-stu-id="b0a0a-123">-or-</span></span> 
 <span data-ttu-id="b0a0a-124"><paramref name="index" /> es igual o mayor que el valor devuelto de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-124"><paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b0a0a-125"><see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-125">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iListContract.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b0a0a-126">Índice del elemento que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-126">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="b0a0a-127">Quita el elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-127">Removes the element at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a0a-128">Después de llamar a <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A>, los elementos que siguen al elemento eliminado se desplazan para ocupar el hueco.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-128">After you call <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A>, the elements that follow the removed element move to occupy the vacated spot.</span></span> <span data-ttu-id="b0a0a-129">También se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-129">The indexes of the elements that are moved are also updated.</span></span>  
  
 <span data-ttu-id="b0a0a-130">Para determinar si un <xref:System.AddIn.Contract.Collections.IListContract%601> es de solo lectura, llame a la <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-130">To determine whether an <xref:System.AddIn.Contract.Collections.IListContract%601> is read-only, call the <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="b0a0a-131"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-131"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0a0a-132">O bien</span><span class="sxs-lookup"><span data-stu-id="b0a0a-132">-or-</span></span> 
 <span data-ttu-id="b0a0a-133"><paramref name="index" /> es igual o mayor que el valor devuelto de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-133"><paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b0a0a-134"><see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-134">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public void SetItem (int index, C value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetItem(int32 index, !C value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItem (index As Integer, value As C)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItem(int index, C value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'C -&gt; unit" Usage="iListContract.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="C" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b0a0a-135">Índice de base cero en el que se va a establecer el elemento.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-135">The zero-based index at which to set the element.</span></span></param>
        <param name="value"><span data-ttu-id="b0a0a-136">Elemento que se va a establecer en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-136">The element to set at the specified index.</span></span></param>
        <summary><span data-ttu-id="b0a0a-137">Reemplaza el elemento del índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-137">Replaces the element at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0a0a-138">El <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> método reemplaza el elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-138">The <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> method replaces the element at the specified index.</span></span> <span data-ttu-id="b0a0a-139">Para agregar un elemento a la <xref:System.AddIn.Contract.Collections.IListContract%601>, utilice el <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-139">To add an element to the <xref:System.AddIn.Contract.Collections.IListContract%601>, use the <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A> method.</span></span>  
  
 <span data-ttu-id="b0a0a-140">Para determinar si un <xref:System.AddIn.Contract.Collections.IListContract%601> es de solo lectura, llame a la <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> método.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-140">To determine whether an <xref:System.AddIn.Contract.Collections.IListContract%601> is read-only, call the <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="b0a0a-141"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-141"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="b0a0a-142">O bien</span><span class="sxs-lookup"><span data-stu-id="b0a0a-142">-or-</span></span> 
 <span data-ttu-id="b0a0a-143"><paramref name="index" /> es igual o mayor que el valor devuelto de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-143"><paramref name="index" /> is equal to or greater than the return value of <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b0a0a-144"><see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="b0a0a-144">The <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>