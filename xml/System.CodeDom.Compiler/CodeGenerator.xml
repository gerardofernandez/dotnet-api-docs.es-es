<Type Name="CodeGenerator" FullName="System.CodeDom.Compiler.CodeGenerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1280f12ead009303f4ba8472f559a1723d224ac" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56765247" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeGenerator : System.CodeDom.Compiler.ICodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeGenerator extends System.Object implements class System.CodeDom.Compiler.ICodeGenerator" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeGenerator&#xA;Implements ICodeGenerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeGenerator abstract : System::CodeDom::Compiler::ICodeGenerator" />
  <TypeSignature Language="F#" Value="type CodeGenerator = class&#xA;    interface ICodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.CodeDom.Compiler.ICodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="dc7a2-101">Proporciona una implementación de ejemplo de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-101">Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> interface.</span></span> <span data-ttu-id="dc7a2-102">Esta clase es abstracta.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-102">This class is abstract.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-103">Se trata de una clase base útil para derivar los generadores de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-103">This is a useful base class for code generators to derive from.</span></span> <span data-ttu-id="dc7a2-104">Los generadores de código son capaces de procesar el código fuente en un idioma específico según la estructura de un gráfico de Code Document Object Model (CodeDOM).</span><span class="sxs-lookup"><span data-stu-id="dc7a2-104">Code generators are capable of rendering source code in a specific language according to the structure of a Code Document Object Model (CodeDOM) graph.</span></span> <span data-ttu-id="dc7a2-105">Esta clase proporciona muchas funciones y métodos para generar tipos específicos de código desde un gráfico CodeDOM.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-105">This class provides many functions and methods to generate specific types of code from a CodeDOM graph.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc7a2-106">Esta clase contiene una petición de vínculo y una petición de herencia en el nivel de clase que se aplica a todos los miembros.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-106">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="dc7a2-107">Un <xref:System.Security.SecurityException> se produce cuando el llamador inmediato o la clase derivada no tiene permiso de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-107">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="dc7a2-108">Para obtener más información acerca de las peticiones de seguridad, consulte [peticiones de vínculo](~/docs/framework/misc/link-demands.md) y [peticiones de herencias](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="dc7a2-108">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="dc7a2-109">para plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-109">for full trust for the immediate caller.</span></span> <span data-ttu-id="dc7a2-110">Esta clase no puede usarse por código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-110">This class cannot be used by partially trusted code.</span></span></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="dc7a2-111">para plena confianza para los herederos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-111">for full trust for inheritors.</span></span> <span data-ttu-id="dc7a2-112">No se puede heredar esta clase por código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-112">This class cannot be inherited by partially trusted code.</span></span></permission>
    <altmember cref="T:System.CodeDom.Compiler.ICodeGenerator" />
    <altmember cref="T:System.CodeDom.Compiler.CodeCompiler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeGenerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dc7a2-113">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-113">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="dc7a2-114">para plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-114">for full trust for the immediate caller.</span></span> <span data-ttu-id="dc7a2-115">Esta clase no puede usarse por código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-115">This class cannot be used by partially trusted code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ContinueOnNewLine">
      <MemberSignature Language="C#" Value="protected virtual void ContinueOnNewLine (string st);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ContinueOnNewLine(string st) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ContinueOnNewLine (st As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ContinueOnNewLine(System::String ^ st);" />
      <MemberSignature Language="F#" Value="abstract member ContinueOnNewLine : string -&gt; unit&#xA;override this.ContinueOnNewLine : string -&gt; unit" Usage="codeGenerator.ContinueOnNewLine st" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="st" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="st"><span data-ttu-id="dc7a2-116">Cadena que se va a escribir en la línea nueva.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-116">The string to write on the new line.</span></span></param>
        <summary><span data-ttu-id="dc7a2-117">Genera un carácter de continuación de línea y envía la cadena especificada a una nueva línea.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-117">Generates a line-continuation character and outputs the specified string on a new line.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="dc7a2-118">Al implementar un generador de código para un idioma que admite un carácter de continuación de línea (por ejemplo, Visual Basic), este método debe devolver el carácter de continuación de línea antes de da como resultado un carácter de nueva línea.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-118">When implementing a code generator for a language that supports a line-continuation character (for example, Visual Basic), this method should output the line-continuation character before it outputs a newline character.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="protected abstract string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string" Usage="codeGenerator.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-119">Cadena para crear un identificador de escape.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-119">The string to create an escaped identifier for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-120">Crea un identificador de escape para el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-120">Creates an escaped identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-121">Identificador de escape para el valor.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-121">The escaped identifier for the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-122"><xref:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier%2A> comprueba si el identificador entra en conflicto con reservadas o palabras clave del lenguaje y si es así, devuelve un nombre equivalente con formato de código de escape específico del lenguaje.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-122"><xref:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="dc7a2-123">Un identificador de escape se conoce el nombre devuelto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-123">The returned name is referred to an escaped identifier.</span></span> <span data-ttu-id="dc7a2-124">El identificador de escape contiene el mismo `value` pero incluye el formato de código de escape para diferenciarlo de palabras clave en conflicto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-124">The escaped identifier contains the same `value` but includes escape code formatting to differentiate it from conflicting keywords.</span></span> <span data-ttu-id="dc7a2-125">Por ejemplo, `value` puede estar precedido por un signo de arroba ("@") o delimitado por corchetes ("[" y "]") para crear un identificador de escape.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-125">For example, `value` could be preceded by an at sign ("@") or delimited by square brackets ("[" and "]") to create an escaped identifier.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc7a2-126">La implementación predeterminada de este método no hace nada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-126">The default implementation of this method does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="protected abstract string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string" Usage="codeGenerator.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-127">Cadena para crear un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-127">A string to create a valid identifier for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-128">Crea un identificador válido para el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-128">Creates a valid identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-129">Identificador válido para el valor.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-129">A valid identifier for the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-130"><xref:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier%2A> comprueba si el identificador entra en conflicto con reservadas o palabras clave del lenguaje y si es así, devuelve un nombre de identificador válido que no entra en conflicto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-130"><xref:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, returns a valid identifier name that does not conflict.</span></span> <span data-ttu-id="dc7a2-131">El identificador devuelto contiene el mismo `value` pero incluye el formato de código de escape para diferenciarlo de palabras clave en conflicto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-131">The returned identifier contains the same `value` but includes escape code formatting to differentiate it from conflicting keywords.</span></span> <span data-ttu-id="dc7a2-132">Normalmente, si el valor requiere una modificación, está precedido por un carácter de subrayado "_".</span><span class="sxs-lookup"><span data-stu-id="dc7a2-132">Typically, if the value requires modification, it is preceded by an underscore "_".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dc7a2-133">La implementación predeterminada de este método no hace nada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-133">The default implementation of this method does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentClass">
      <MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeDeclaration CurrentClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeDeclaration CurrentClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentClass As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::CodeTypeDeclaration ^ CurrentClass { System::CodeDom::CodeTypeDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentClass : System.CodeDom.CodeTypeDeclaration" Usage="System.CodeDom.Compiler.CodeGenerator.CurrentClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-134">Obtiene la declaración de tipos de código para la clase actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-134">Gets the code type declaration for the current class.</span></span></summary>
        <value><span data-ttu-id="dc7a2-135">Declaración de tipos de código para la clase actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-135">The code type declaration for the current class.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMember">
      <MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeMember CurrentMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMember CurrentMember" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentMember As CodeTypeMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::CodeTypeMember ^ CurrentMember { System::CodeDom::CodeTypeMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentMember : System.CodeDom.CodeTypeMember" Usage="System.CodeDom.Compiler.CodeGenerator.CurrentMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-136">Obtiene el miembro actual de la clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-136">Gets the current member of the class.</span></span></summary>
        <value><span data-ttu-id="dc7a2-137">Miembro actual de la clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-137">The current member of the class.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
      </Docs>
    </Member>
    <Member MemberName="CurrentMemberName">
      <MemberSignature Language="C#" Value="protected string CurrentMemberName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentMemberName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentMemberName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ CurrentMemberName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentMemberName : string" Usage="System.CodeDom.Compiler.CodeGenerator.CurrentMemberName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-138">Obtiene el nombre del miembro actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-138">Gets the current member name.</span></span></summary>
        <value><span data-ttu-id="dc7a2-139">Nombre del miembro actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-139">The name of the current member.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTypeName">
      <MemberSignature Language="C#" Value="protected string CurrentTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentTypeName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ CurrentTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTypeName : string" Usage="System.CodeDom.Compiler.CodeGenerator.CurrentTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-140">Obtiene el nombre de la clase actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-140">Gets the current class name.</span></span></summary>
        <value><span data-ttu-id="dc7a2-141">Nombre de la clase actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-141">The current class name.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateArgumentReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArgumentReferenceExpression (System.CodeDom.CodeArgumentReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArgumentReferenceExpression(class System.CodeDom.CodeArgumentReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArgumentReferenceExpression (e As CodeArgumentReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArgumentReferenceExpression(System::CodeDom::CodeArgumentReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateArgumentReferenceExpression : System.CodeDom.CodeArgumentReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateArgumentReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArgumentReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-142"><see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-142">A <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-143">Genera código para la expresión de referencia de argumento especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-143">Generates code for the specified argument reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArgumentReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateArrayCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArrayCreateExpression (System.CodeDom.CodeArrayCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArrayCreateExpression(class System.CodeDom.CodeArrayCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArrayCreateExpression (e As CodeArrayCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArrayCreateExpression(System::CodeDom::CodeArrayCreateExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateArrayCreateExpression : System.CodeDom.CodeArrayCreateExpression -&gt; unit" Usage="codeGenerator.GenerateArrayCreateExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArrayCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-144"><see cref="T:System.CodeDom.CodeArrayCreateExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-144">A <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-145">Genera código para la expresión de creación de matrices especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-145">Generates code for the specified array creation expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArrayCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateArrayIndexerExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArrayIndexerExpression (System.CodeDom.CodeArrayIndexerExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArrayIndexerExpression(class System.CodeDom.CodeArrayIndexerExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArrayIndexerExpression (e As CodeArrayIndexerExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArrayIndexerExpression(System::CodeDom::CodeArrayIndexerExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateArrayIndexerExpression : System.CodeDom.CodeArrayIndexerExpression -&gt; unit" Usage="codeGenerator.GenerateArrayIndexerExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArrayIndexerExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-146"><see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-146">A <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-147">Genera código para la expresión de indizador de matrices especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-147">Generates code for the specified array indexer expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArrayIndexerExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAssignStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAssignStatement (System.CodeDom.CodeAssignStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAssignStatement(class System.CodeDom.CodeAssignStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAssignStatement (e As CodeAssignStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAssignStatement(System::CodeDom::CodeAssignStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateAssignStatement : System.CodeDom.CodeAssignStatement -&gt; unit" Usage="codeGenerator.GenerateAssignStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeAssignStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-148"><see cref="T:System.CodeDom.CodeAssignStatement" /> que indica la instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-148">A <see cref="T:System.CodeDom.CodeAssignStatement" /> that indicates the statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-149">Genera código para la instrucción de asignación especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-149">Generates code for the specified assignment statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAssignStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttachEventStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttachEventStatement (System.CodeDom.CodeAttachEventStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttachEventStatement(class System.CodeDom.CodeAttachEventStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttachEventStatement (e As CodeAttachEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttachEventStatement(System::CodeDom::CodeAttachEventStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateAttachEventStatement : System.CodeDom.CodeAttachEventStatement -&gt; unit" Usage="codeGenerator.GenerateAttachEventStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeAttachEventStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-150"><see cref="T:System.CodeDom.CodeAttachEventStatement" /> que indica la instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-150">A <see cref="T:System.CodeDom.CodeAttachEventStatement" /> that indicates the statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-151">Genera código para la instrucción especificada de eventos relacionados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-151">Generates code for the specified attach event statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttachEventStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttributeDeclarationsEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttributeDeclarationsEnd (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttributeDeclarationsEnd(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttributeDeclarationsEnd (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttributeDeclarationsEnd(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member GenerateAttributeDeclarationsEnd : System.CodeDom.CodeAttributeDeclarationCollection -&gt; unit" Usage="codeGenerator.GenerateAttributeDeclarationsEnd attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-152"><see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el final del bloque de atributos para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-152">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the end of the attribute block to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-153">Genera código para el final del bloque de atributos especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-153">Generates code for the specified attribute block end.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttributeDeclarationsStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttributeDeclarationsStart (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttributeDeclarationsStart(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttributeDeclarationsStart (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttributeDeclarationsStart(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member GenerateAttributeDeclarationsStart : System.CodeDom.CodeAttributeDeclarationCollection -&gt; unit" Usage="codeGenerator.GenerateAttributeDeclarationsStart attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-154"><see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el inicio del bloque de atributos para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-154">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the start of the attribute block to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-155">Genera código para el inicio del bloque de atributos especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-155">Generates code for the specified attribute block start.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateBaseReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateBaseReferenceExpression (System.CodeDom.CodeBaseReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateBaseReferenceExpression(class System.CodeDom.CodeBaseReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateBaseReferenceExpression (e As CodeBaseReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateBaseReferenceExpression(System::CodeDom::CodeBaseReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateBaseReferenceExpression : System.CodeDom.CodeBaseReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateBaseReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeBaseReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-156"><see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-156">A <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-157">Genera código para la expresión de referencia base especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-157">Generates code for the specified base reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeBaseReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateBinaryOperatorExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateBinaryOperatorExpression (System.CodeDom.CodeBinaryOperatorExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateBinaryOperatorExpression(class System.CodeDom.CodeBinaryOperatorExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateBinaryOperatorExpression (e As CodeBinaryOperatorExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateBinaryOperatorExpression(System::CodeDom::CodeBinaryOperatorExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateBinaryOperatorExpression : System.CodeDom.CodeBinaryOperatorExpression -&gt; unit&#xA;override this.GenerateBinaryOperatorExpression : System.CodeDom.CodeBinaryOperatorExpression -&gt; unit" Usage="codeGenerator.GenerateBinaryOperatorExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeBinaryOperatorExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-158"><see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-158">A <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-159">Genera código para la expresión de operador binario especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-159">Generates code for the specified binary operator expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dc7a2-160"><paramref name="e" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-160"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCastExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateCastExpression (System.CodeDom.CodeCastExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCastExpression(class System.CodeDom.CodeCastExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateCastExpression (e As CodeCastExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateCastExpression(System::CodeDom::CodeCastExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCastExpression : System.CodeDom.CodeCastExpression -&gt; unit" Usage="codeGenerator.GenerateCastExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCastExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-161"><see cref="T:System.CodeDom.CodeCastExpression" /> que indica la expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-161">A <see cref="T:System.CodeDom.CodeCastExpression" /> that indicates the expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-162">Genera código para la expresión de conversión especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-162">Generates code for the specified cast expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCastExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeGenerator.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="member"><span data-ttu-id="dc7a2-163">Miembro de clase para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-163">The class member to generate code for.</span></span></param>
        <param name="writer"><span data-ttu-id="dc7a2-164">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-164">The text writer to output code to.</span></span></param>
        <param name="options"><span data-ttu-id="dc7a2-165">Opciones que se utilizarán cuando se genere el código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-165">The options to use when generating the code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-166">Genera código para el miembro de clase especificado utilizando las opciones del generador de código y el programa de escritura de texto especificados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-166">Generates code for the specified class member using the specified text writer and code generator options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-167">Código para los miembros se genera de forma diferente dependiendo del contexto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-167">Code for members is generated differently depending on the context.</span></span> <span data-ttu-id="dc7a2-168">Por ejemplo, para los métodos en una interfaz o campos en una enumeración se genera código diferente desde el código para el mismo miembro en una clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-168">For example, code for methods on an interface or fields on an enumeration is generated differently from code for the same member on a class.</span></span> <span data-ttu-id="dc7a2-169">Esta implementación se da por supuesto que el miembro se genera para el contexto de clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-169">This implementation assumes that the member is being generated for the class context.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-170">La propiedad <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-170">The <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> property is not <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateComment">
      <MemberSignature Language="C#" Value="protected abstract void GenerateComment (System.CodeDom.CodeComment e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateComment(class System.CodeDom.CodeComment e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateComment (e As CodeComment)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateComment(System::CodeDom::CodeComment ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateComment : System.CodeDom.CodeComment -&gt; unit" Usage="codeGenerator.GenerateComment e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeComment" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-171">Clase <see cref="T:System.CodeDom.CodeComment" /> para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-171">A <see cref="T:System.CodeDom.CodeComment" /> to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-172">Genera código para el comentario especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-172">Generates code for the specified comment.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeComment" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCommentStatement">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCommentStatement (System.CodeDom.CodeCommentStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCommentStatement(class System.CodeDom.CodeCommentStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCommentStatement (e As CodeCommentStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCommentStatement(System::CodeDom::CodeCommentStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCommentStatement : System.CodeDom.CodeCommentStatement -&gt; unit&#xA;override this.GenerateCommentStatement : System.CodeDom.CodeCommentStatement -&gt; unit" Usage="codeGenerator.GenerateCommentStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCommentStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-173">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-173">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-174">Genera código para la instrucción de comentario especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-174">Generates code for the specified comment statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-175">La propiedad <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> no está establecida.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-175">The <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> property of <paramref name="e" /> is not set.</span></span></exception>
        <altmember cref="T:System.CodeDom.CodeCommentStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCommentStatements">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCommentStatements (System.CodeDom.CodeCommentStatementCollection e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCommentStatements(class System.CodeDom.CodeCommentStatementCollection e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCommentStatements (e As CodeCommentStatementCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCommentStatements(System::CodeDom::CodeCommentStatementCollection ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCommentStatements : System.CodeDom.CodeCommentStatementCollection -&gt; unit&#xA;override this.GenerateCommentStatements : System.CodeDom.CodeCommentStatementCollection -&gt; unit" Usage="codeGenerator.GenerateCommentStatements e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCommentStatementCollection" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-176">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-176">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-177">Genera código para las instrucciones de comentarios especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-177">Generates code for the specified comment statements.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCommentStatementCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnit">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnit (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnit(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnit (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnit(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit&#xA;override this.GenerateCompileUnit : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="codeGenerator.GenerateCompileUnit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-178">Unidad de compilación para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-178">The compile unit to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-179">Genera código para la unidad de compilación especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-179">Generates code for the specified compile unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnitEnd">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnitEnd (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnitEnd(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnitEnd (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnitEnd(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCompileUnitEnd : System.CodeDom.CodeCompileUnit -&gt; unit&#xA;override this.GenerateCompileUnitEnd : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="codeGenerator.GenerateCompileUnitEnd e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-180">Unidad de compilación para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-180">The compile unit to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-181">Genera código para el final de una unidad de compilación.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-181">Generates code for the end of a compile unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnitStart">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnitStart (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnitStart(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnitStart (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnitStart(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCompileUnitStart : System.CodeDom.CodeCompileUnit -&gt; unit&#xA;override this.GenerateCompileUnitStart : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="codeGenerator.GenerateCompileUnitStart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-182">Unidad de compilación para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-182">The compile unit to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-183">Genera código para el inicio de una unidad de compilación.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-183">Generates code for the start of a compile unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateConditionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateConditionStatement (System.CodeDom.CodeConditionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateConditionStatement(class System.CodeDom.CodeConditionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateConditionStatement (e As CodeConditionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateConditionStatement(System::CodeDom::CodeConditionStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateConditionStatement : System.CodeDom.CodeConditionStatement -&gt; unit" Usage="codeGenerator.GenerateConditionStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeConditionStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-184">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-184">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-185">Genera código para la instrucción condicional especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-185">Generates code for the specified conditional statement.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-186">Para la mayoría de los idiomas, este método generará código para un `if` instrucción.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-186">For most languages, this method will generate code for an `if` statement.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeConditionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateConstructor">
      <MemberSignature Language="C#" Value="protected abstract void GenerateConstructor (System.CodeDom.CodeConstructor e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateConstructor(class System.CodeDom.CodeConstructor e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateConstructor (e As CodeConstructor, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateConstructor(System::CodeDom::CodeConstructor ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberSignature Language="F#" Value="abstract member GenerateConstructor : System.CodeDom.CodeConstructor * System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateConstructor (e, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeConstructor" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-187">Constructor para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-187">The constructor to generate code for.</span></span></param>
        <param name="c"><span data-ttu-id="dc7a2-188">Tipo del objeto que construye este constructor.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-188">The type of the object that this constructor constructs.</span></span></param>
        <summary><span data-ttu-id="dc7a2-189">Genera código para el constructor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-189">Generates code for the specified constructor.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeConstructor" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDecimalValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDecimalValue (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDecimalValue(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDecimalValue (d As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDecimalValue(System::Decimal d);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDecimalValue : decimal -&gt; unit&#xA;override this.GenerateDecimalValue : decimal -&gt; unit" Usage="codeGenerator.GenerateDecimalValue d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc7a2-190">Valor decimal para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-190">The decimal value to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-191">Genera código para el valor decimal especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-191">Generates code for the specified decimal value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDefaultValueExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDefaultValueExpression (System.CodeDom.CodeDefaultValueExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDefaultValueExpression(class System.CodeDom.CodeDefaultValueExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDefaultValueExpression (e As CodeDefaultValueExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDefaultValueExpression(System::CodeDom::CodeDefaultValueExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDefaultValueExpression : System.CodeDom.CodeDefaultValueExpression -&gt; unit&#xA;override this.GenerateDefaultValueExpression : System.CodeDom.CodeDefaultValueExpression -&gt; unit" Usage="codeGenerator.GenerateDefaultValueExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDefaultValueExpression" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-192">Referencia para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-192">The reference to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-193">Genera código para la referencia especificada a un valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-193">Generates code for the specified reference to a default value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDelegateCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateDelegateCreateExpression (System.CodeDom.CodeDelegateCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDelegateCreateExpression(class System.CodeDom.CodeDelegateCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateDelegateCreateExpression (e As CodeDelegateCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateDelegateCreateExpression(System::CodeDom::CodeDelegateCreateExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDelegateCreateExpression : System.CodeDom.CodeDelegateCreateExpression -&gt; unit" Usage="codeGenerator.GenerateDelegateCreateExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDelegateCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-194">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-194">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-195">Genera código para la expresión de creación de delegado especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-195">Generates code for the specified delegate creation expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDelegateCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDelegateInvokeExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateDelegateInvokeExpression (System.CodeDom.CodeDelegateInvokeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDelegateInvokeExpression(class System.CodeDom.CodeDelegateInvokeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateDelegateInvokeExpression (e As CodeDelegateInvokeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateDelegateInvokeExpression(System::CodeDom::CodeDelegateInvokeExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDelegateInvokeExpression : System.CodeDom.CodeDelegateInvokeExpression -&gt; unit" Usage="codeGenerator.GenerateDelegateInvokeExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDelegateInvokeExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-196">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-196">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-197">Genera código para la expresión de invocación de delegado especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-197">Generates code for the specified delegate invoke expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDelegateInvokeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDirectionExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDirectionExpression (System.CodeDom.CodeDirectionExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDirectionExpression(class System.CodeDom.CodeDirectionExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDirectionExpression (e As CodeDirectionExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDirectionExpression(System::CodeDom::CodeDirectionExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDirectionExpression : System.CodeDom.CodeDirectionExpression -&gt; unit&#xA;override this.GenerateDirectionExpression : System.CodeDom.CodeDirectionExpression -&gt; unit" Usage="codeGenerator.GenerateDirectionExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDirectionExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-198">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-198">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-199">Genera código para la expresión de dirección especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-199">Generates code for the specified direction expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDirectionExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDirectives">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDirectives (System.CodeDom.CodeDirectiveCollection directives);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDirectives(class System.CodeDom.CodeDirectiveCollection directives) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDirectives (directives As CodeDirectiveCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDirectives(System::CodeDom::CodeDirectiveCollection ^ directives);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDirectives : System.CodeDom.CodeDirectiveCollection -&gt; unit&#xA;override this.GenerateDirectives : System.CodeDom.CodeDirectiveCollection -&gt; unit" Usage="codeGenerator.GenerateDirectives directives" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directives" Type="System.CodeDom.CodeDirectiveCollection" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="directives"><span data-ttu-id="dc7a2-200">Directivas de código para las que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-200">The code directives to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-201">Genera código para las directivas de código especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-201">Generates code for the specified code directives.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDoubleValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDoubleValue (double d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDoubleValue(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDoubleValue (d As Double)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDoubleValue(double d);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDoubleValue : double -&gt; unit&#xA;override this.GenerateDoubleValue : double -&gt; unit" Usage="codeGenerator.GenerateDoubleValue d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="dc7a2-202">Valor para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-202">The value to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-203">Genera código para un número de punto flotante de precisión doble.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-203">Generates code for a double-precision floating point number.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateEntryPointMethod">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEntryPointMethod (System.CodeDom.CodeEntryPointMethod e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEntryPointMethod(class System.CodeDom.CodeEntryPointMethod e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEntryPointMethod (e As CodeEntryPointMethod, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEntryPointMethod(System::CodeDom::CodeEntryPointMethod ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberSignature Language="F#" Value="abstract member GenerateEntryPointMethod : System.CodeDom.CodeEntryPointMethod * System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateEntryPointMethod (e, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeEntryPointMethod" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-204">Punto de entrada del código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-204">The entry point for the code.</span></span></param>
        <param name="c"><span data-ttu-id="dc7a2-205">Código que declara el tipo.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-205">The code that declares the type.</span></span></param>
        <summary><span data-ttu-id="dc7a2-206">Genera código para el método de punto de entrada especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-206">Generates code for the specified entry point method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeEntryPointMethod" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateEvent">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEvent (System.CodeDom.CodeMemberEvent e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEvent(class System.CodeDom.CodeMemberEvent e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEvent (e As CodeMemberEvent, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEvent(System::CodeDom::CodeMemberEvent ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberSignature Language="F#" Value="abstract member GenerateEvent : System.CodeDom.CodeMemberEvent * System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateEvent (e, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberEvent" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-207">Evento de miembro para el que se va generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-207">The member event to generate code for.</span></span></param>
        <param name="c"><span data-ttu-id="dc7a2-208">Tipo del objeto en el que se produce este evento.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-208">The type of the object that this event occurs on.</span></span></param>
        <summary><span data-ttu-id="dc7a2-209">Genera código para el evento especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-209">Generates code for the specified event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberEvent" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateEventReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEventReferenceExpression (System.CodeDom.CodeEventReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEventReferenceExpression(class System.CodeDom.CodeEventReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEventReferenceExpression (e As CodeEventReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEventReferenceExpression(System::CodeDom::CodeEventReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateEventReferenceExpression : System.CodeDom.CodeEventReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateEventReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeEventReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-210">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-210">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-211">Genera código para la expresión de referencia de evento especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-211">Generates code for the specified event reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeEventReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExpression">
      <MemberSignature Language="C#" Value="protected void GenerateExpression (System.CodeDom.CodeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateExpression(class System.CodeDom.CodeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateExpression (e As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateExpression(System::CodeDom::CodeExpression ^ e);" />
      <MemberSignature Language="F#" Value="member this.GenerateExpression : System.CodeDom.CodeExpression -&gt; unit" Usage="codeGenerator.GenerateExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-212">Expresión de código para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-212">The code expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-213">Genera código para la expresión de código especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-213">Generates code for the specified code expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dc7a2-214"><paramref name="e" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-214"><paramref name="e" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-215"><paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-215"><paramref name="e" /> is not a valid <see cref="T:System.CodeDom.CodeStatement" />.</span></span></exception>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExpressionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateExpressionStatement (System.CodeDom.CodeExpressionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateExpressionStatement(class System.CodeDom.CodeExpressionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateExpressionStatement (e As CodeExpressionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateExpressionStatement(System::CodeDom::CodeExpressionStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateExpressionStatement : System.CodeDom.CodeExpressionStatement -&gt; unit" Usage="codeGenerator.GenerateExpressionStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpressionStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-216">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-216">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-217">Genera código para la instrucción de expresión especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-217">Generates code for the specified expression statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateField">
      <MemberSignature Language="C#" Value="protected abstract void GenerateField (System.CodeDom.CodeMemberField e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateField(class System.CodeDom.CodeMemberField e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateField (e As CodeMemberField)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateField(System::CodeDom::CodeMemberField ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateField : System.CodeDom.CodeMemberField -&gt; unit" Usage="codeGenerator.GenerateField e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberField" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-218">Campo para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-218">The field to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-219">Genera código para el campo de miembro especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-219">Generates code for the specified member field.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberField" />
      </Docs>
    </Member>
    <Member MemberName="GenerateFieldReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateFieldReferenceExpression (System.CodeDom.CodeFieldReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateFieldReferenceExpression(class System.CodeDom.CodeFieldReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateFieldReferenceExpression (e As CodeFieldReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateFieldReferenceExpression(System::CodeDom::CodeFieldReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateFieldReferenceExpression : System.CodeDom.CodeFieldReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateFieldReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeFieldReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-220">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-220">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-221">Genera código para la expresión de referencia de campo especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-221">Generates code for the specified field reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeFieldReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateGotoStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateGotoStatement (System.CodeDom.CodeGotoStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateGotoStatement(class System.CodeDom.CodeGotoStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateGotoStatement (e As CodeGotoStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateGotoStatement(System::CodeDom::CodeGotoStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateGotoStatement : System.CodeDom.CodeGotoStatement -&gt; unit" Usage="codeGenerator.GenerateGotoStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeGotoStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-222">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-222">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-223">Genera código para la instrucción <see langword="goto" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-223">Generates code for the specified <see langword="goto" /> statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeGotoStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateIndexerExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateIndexerExpression (System.CodeDom.CodeIndexerExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIndexerExpression(class System.CodeDom.CodeIndexerExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateIndexerExpression (e As CodeIndexerExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateIndexerExpression(System::CodeDom::CodeIndexerExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateIndexerExpression : System.CodeDom.CodeIndexerExpression -&gt; unit" Usage="codeGenerator.GenerateIndexerExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeIndexerExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-224">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-224">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-225">Genera código para la expresión de indizador especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-225">Generates code for the specified indexer expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeIndexerExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateIterationStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateIterationStatement (System.CodeDom.CodeIterationStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIterationStatement(class System.CodeDom.CodeIterationStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateIterationStatement (e As CodeIterationStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateIterationStatement(System::CodeDom::CodeIterationStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateIterationStatement : System.CodeDom.CodeIterationStatement -&gt; unit" Usage="codeGenerator.GenerateIterationStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeIterationStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-226">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-226">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-227">Genera código para la instrucción de iteración especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-227">Generates code for the specified iteration statement.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-228">Para la mayoría de los idiomas, este método generará código para un `for` bucle o un `while` bucle.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-228">For most languages, this method will generate code for a `for` loop or a `while` loop.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeIterationStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLabeledStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLabeledStatement (System.CodeDom.CodeLabeledStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLabeledStatement(class System.CodeDom.CodeLabeledStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLabeledStatement (e As CodeLabeledStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLabeledStatement(System::CodeDom::CodeLabeledStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateLabeledStatement : System.CodeDom.CodeLabeledStatement -&gt; unit" Usage="codeGenerator.GenerateLabeledStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLabeledStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-229">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-229">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-230">Genera código para la instrucción con etiqueta especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-230">Generates code for the specified labeled statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLabeledStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLinePragmaEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLinePragmaEnd (System.CodeDom.CodeLinePragma e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLinePragmaEnd(class System.CodeDom.CodeLinePragma e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLinePragmaEnd (e As CodeLinePragma)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLinePragmaEnd(System::CodeDom::CodeLinePragma ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateLinePragmaEnd : System.CodeDom.CodeLinePragma -&gt; unit" Usage="codeGenerator.GenerateLinePragmaEnd e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLinePragma" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-231">Final de línea pragma para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-231">The end of the line pragma to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-232">Genera código para el final de línea pragma especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-232">Generates code for the specified line pragma end.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLinePragmaStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLinePragmaStart (System.CodeDom.CodeLinePragma e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLinePragmaStart(class System.CodeDom.CodeLinePragma e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLinePragmaStart (e As CodeLinePragma)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLinePragmaStart(System::CodeDom::CodeLinePragma ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateLinePragmaStart : System.CodeDom.CodeLinePragma -&gt; unit" Usage="codeGenerator.GenerateLinePragmaStart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLinePragma" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-233">Inicio de línea pragma para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-233">The start of the line pragma to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-234">Genera código para el inicio de línea pragma especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-234">Generates code for the specified line pragma start.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethod">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethod (System.CodeDom.CodeMemberMethod e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethod(class System.CodeDom.CodeMemberMethod e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethod (e As CodeMemberMethod, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethod(System::CodeDom::CodeMemberMethod ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberSignature Language="F#" Value="abstract member GenerateMethod : System.CodeDom.CodeMemberMethod * System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateMethod (e, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberMethod" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-235">Método de miembro para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-235">The member method to generate code for.</span></span></param>
        <param name="c"><span data-ttu-id="dc7a2-236">Tipo del objeto en el que se ejecuta este método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-236">The type of the object that this method occurs on.</span></span></param>
        <summary><span data-ttu-id="dc7a2-237">Genera código para el método especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-237">Generates code for the specified method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberMethod" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodInvokeExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodInvokeExpression (System.CodeDom.CodeMethodInvokeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodInvokeExpression(class System.CodeDom.CodeMethodInvokeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodInvokeExpression (e As CodeMethodInvokeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodInvokeExpression(System::CodeDom::CodeMethodInvokeExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateMethodInvokeExpression : System.CodeDom.CodeMethodInvokeExpression -&gt; unit" Usage="codeGenerator.GenerateMethodInvokeExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodInvokeExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-238">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-238">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-239">Genera código para la expresión de invocación de método especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-239">Generates code for the specified method invoke expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodInvokeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodReferenceExpression (System.CodeDom.CodeMethodReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodReferenceExpression(class System.CodeDom.CodeMethodReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodReferenceExpression (e As CodeMethodReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodReferenceExpression(System::CodeDom::CodeMethodReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateMethodReferenceExpression : System.CodeDom.CodeMethodReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateMethodReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-240">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-240">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-241">Genera código para la expresión de referencia de método especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-241">Generates code for the specified method reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodReturnStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodReturnStatement (System.CodeDom.CodeMethodReturnStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodReturnStatement(class System.CodeDom.CodeMethodReturnStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodReturnStatement (e As CodeMethodReturnStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodReturnStatement(System::CodeDom::CodeMethodReturnStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateMethodReturnStatement : System.CodeDom.CodeMethodReturnStatement -&gt; unit" Usage="codeGenerator.GenerateMethodReturnStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodReturnStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-242">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-242">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-243">Genera código para la instrucción return de método especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-243">Generates code for the specified method return statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodReturnStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespace">
      <MemberSignature Language="C#" Value="protected virtual void GenerateNamespace (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespace(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateNamespace (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateNamespace(System::CodeDom::CodeNamespace ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateNamespace : System.CodeDom.CodeNamespace -&gt; unit&#xA;override this.GenerateNamespace : System.CodeDom.CodeNamespace -&gt; unit" Usage="codeGenerator.GenerateNamespace e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-244">Espacio de nombres para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-244">The namespace to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-245">Genera código para el espacio de nombres especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-245">Generates code for the specified namespace.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceEnd (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceEnd(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceEnd (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceEnd(System::CodeDom::CodeNamespace ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateNamespaceEnd : System.CodeDom.CodeNamespace -&gt; unit" Usage="codeGenerator.GenerateNamespaceEnd e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-246">Espacio de nombres para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-246">The namespace to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-247">Genera código para el final de un espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-247">Generates code for the end of a namespace.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceImport">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceImport (System.CodeDom.CodeNamespaceImport e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceImport(class System.CodeDom.CodeNamespaceImport e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceImport (e As CodeNamespaceImport)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceImport(System::CodeDom::CodeNamespaceImport ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateNamespaceImport : System.CodeDom.CodeNamespaceImport -&gt; unit" Usage="codeGenerator.GenerateNamespaceImport e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespaceImport" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-248">Importación de espacio de nombres para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-248">The namespace import to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-249">Genera código para la importación de espacio de nombres especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-249">Generates code for the specified namespace import.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespaceImport" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceImports">
      <MemberSignature Language="C#" Value="protected void GenerateNamespaceImports (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateNamespaceImports(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateNamespaceImports (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateNamespaceImports(System::CodeDom::CodeNamespace ^ e);" />
      <MemberSignature Language="F#" Value="member this.GenerateNamespaceImports : System.CodeDom.CodeNamespace -&gt; unit" Usage="codeGenerator.GenerateNamespaceImports e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-250">Importación de espacio de nombres para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-250">The namespace import to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-251">Genera código para la importación de espacio de nombres especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-251">Generates code for the specified namespace import.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaces">
      <MemberSignature Language="C#" Value="protected void GenerateNamespaces (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateNamespaces(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateNamespaces (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateNamespaces(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberSignature Language="F#" Value="member this.GenerateNamespaces : System.CodeDom.CodeCompileUnit -&gt; unit" Usage="codeGenerator.GenerateNamespaces e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-252">Unidad de compilación para la que se van a generar espacios de nombres.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-252">The compile unit to generate namespaces for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-253">Genera código para el espacio de nombres en la unidad de compilación especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-253">Generates code for the namespaces in the specified compile unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceStart (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceStart(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceStart (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceStart(System::CodeDom::CodeNamespace ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateNamespaceStart : System.CodeDom.CodeNamespace -&gt; unit" Usage="codeGenerator.GenerateNamespaceStart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-254">Espacio de nombres para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-254">The namespace to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-255">Genera código para el inicio de un espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-255">Generates code for the start of a namespace.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateObjectCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateObjectCreateExpression (System.CodeDom.CodeObjectCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateObjectCreateExpression(class System.CodeDom.CodeObjectCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateObjectCreateExpression (e As CodeObjectCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateObjectCreateExpression(System::CodeDom::CodeObjectCreateExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateObjectCreateExpression : System.CodeDom.CodeObjectCreateExpression -&gt; unit" Usage="codeGenerator.GenerateObjectCreateExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeObjectCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-256">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-256">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-257">Genera código para la expresión de creación de objeto especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-257">Generates code for the specified object creation expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeObjectCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateParameterDeclarationExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateParameterDeclarationExpression (System.CodeDom.CodeParameterDeclarationExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateParameterDeclarationExpression(class System.CodeDom.CodeParameterDeclarationExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateParameterDeclarationExpression (e As CodeParameterDeclarationExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateParameterDeclarationExpression(System::CodeDom::CodeParameterDeclarationExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateParameterDeclarationExpression : System.CodeDom.CodeParameterDeclarationExpression -&gt; unit&#xA;override this.GenerateParameterDeclarationExpression : System.CodeDom.CodeParameterDeclarationExpression -&gt; unit" Usage="codeGenerator.GenerateParameterDeclarationExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeParameterDeclarationExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-258">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-258">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-259">Genera código para la expresión de declaración de parámetros especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-259">Generates code for the specified parameter declaration expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeParameterDeclarationExpression" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePrimitiveExpression">
      <MemberSignature Language="C#" Value="protected virtual void GeneratePrimitiveExpression (System.CodeDom.CodePrimitiveExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePrimitiveExpression(class System.CodeDom.CodePrimitiveExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GeneratePrimitiveExpression (e As CodePrimitiveExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GeneratePrimitiveExpression(System::CodeDom::CodePrimitiveExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GeneratePrimitiveExpression : System.CodeDom.CodePrimitiveExpression -&gt; unit&#xA;override this.GeneratePrimitiveExpression : System.CodeDom.CodePrimitiveExpression -&gt; unit" Usage="codeGenerator.GeneratePrimitiveExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePrimitiveExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-260">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-260">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-261">Genera código para la expresión primitiva especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-261">Generates code for the specified primitive expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-262"><paramref name="e" /> utiliza un tipo de datos no válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-262"><paramref name="e" /> uses an invalid data type.</span></span> <span data-ttu-id="dc7a2-263">Sólo los tipos de datos siguientes son válidos:</span><span class="sxs-lookup"><span data-stu-id="dc7a2-263">Only the following data types are valid:</span></span> 
<span data-ttu-id="dc7a2-264">-   string</span><span class="sxs-lookup"><span data-stu-id="dc7a2-264">-   string</span></span> 
<span data-ttu-id="dc7a2-265">-   char</span><span class="sxs-lookup"><span data-stu-id="dc7a2-265">-   char</span></span> 
<span data-ttu-id="dc7a2-266">-   byte</span><span class="sxs-lookup"><span data-stu-id="dc7a2-266">-   byte</span></span> 
<span data-ttu-id="dc7a2-267">-   Int16</span><span class="sxs-lookup"><span data-stu-id="dc7a2-267">-   Int16</span></span> 
<span data-ttu-id="dc7a2-268">-   Int32</span><span class="sxs-lookup"><span data-stu-id="dc7a2-268">-   Int32</span></span> 
<span data-ttu-id="dc7a2-269">-   Int64</span><span class="sxs-lookup"><span data-stu-id="dc7a2-269">-   Int64</span></span> 
<span data-ttu-id="dc7a2-270">-   Single</span><span class="sxs-lookup"><span data-stu-id="dc7a2-270">-   Single</span></span> 
<span data-ttu-id="dc7a2-271">-   Double</span><span class="sxs-lookup"><span data-stu-id="dc7a2-271">-   Double</span></span> 
<span data-ttu-id="dc7a2-272">-   Decimal</span><span class="sxs-lookup"><span data-stu-id="dc7a2-272">-   Decimal</span></span></exception>
        <altmember cref="T:System.CodeDom.CodePrimitiveExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateProperty">
      <MemberSignature Language="C#" Value="protected abstract void GenerateProperty (System.CodeDom.CodeMemberProperty e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateProperty(class System.CodeDom.CodeMemberProperty e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateProperty (e As CodeMemberProperty, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateProperty(System::CodeDom::CodeMemberProperty ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberSignature Language="F#" Value="abstract member GenerateProperty : System.CodeDom.CodeMemberProperty * System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateProperty (e, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberProperty" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-273">Propiedad para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-273">The property to generate code for.</span></span></param>
        <param name="c"><span data-ttu-id="dc7a2-274">Tipo del objeto en el que tiene lugar esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-274">The type of the object that this property occurs on.</span></span></param>
        <summary><span data-ttu-id="dc7a2-275">Genera código para la propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-275">Generates code for the specified property.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberProperty" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePropertyReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GeneratePropertyReferenceExpression (System.CodeDom.CodePropertyReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePropertyReferenceExpression(class System.CodeDom.CodePropertyReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GeneratePropertyReferenceExpression (e As CodePropertyReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GeneratePropertyReferenceExpression(System::CodeDom::CodePropertyReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GeneratePropertyReferenceExpression : System.CodeDom.CodePropertyReferenceExpression -&gt; unit" Usage="codeGenerator.GeneratePropertyReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePropertyReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-276">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-276">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-277">Genera código para la expresión de referencia de propiedad especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-277">Generates code for the specified property reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodePropertyReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePropertySetValueReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GeneratePropertySetValueReferenceExpression (System.CodeDom.CodePropertySetValueReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePropertySetValueReferenceExpression(class System.CodeDom.CodePropertySetValueReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GeneratePropertySetValueReferenceExpression (e As CodePropertySetValueReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GeneratePropertySetValueReferenceExpression(System::CodeDom::CodePropertySetValueReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GeneratePropertySetValueReferenceExpression : System.CodeDom.CodePropertySetValueReferenceExpression -&gt; unit" Usage="codeGenerator.GeneratePropertySetValueReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePropertySetValueReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-278">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-278">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-279">Genera código para la expresión de referencia especificada del valor del conjunto de propiedades.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-279">Generates code for the specified property set value reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateRemoveEventStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateRemoveEventStatement (System.CodeDom.CodeRemoveEventStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateRemoveEventStatement(class System.CodeDom.CodeRemoveEventStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateRemoveEventStatement (e As CodeRemoveEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateRemoveEventStatement(System::CodeDom::CodeRemoveEventStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateRemoveEventStatement : System.CodeDom.CodeRemoveEventStatement -&gt; unit" Usage="codeGenerator.GenerateRemoveEventStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeRemoveEventStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-280">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-280">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-281">Genera código para la instrucción de eliminación de evento especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-281">Generates code for the specified remove event statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeRemoveEventStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSingleFloatValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSingleFloatValue (float s);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSingleFloatValue(float32 s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSingleFloatValue (s As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSingleFloatValue(float s);" />
      <MemberSignature Language="F#" Value="abstract member GenerateSingleFloatValue : single -&gt; unit&#xA;override this.GenerateSingleFloatValue : single -&gt; unit" Usage="codeGenerator.GenerateSingleFloatValue s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="dc7a2-282">Valor para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-282">The value to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-283">Genera código para un número de punto flotante de precisión sencilla.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-283">Generates code for a single-precision floating point number.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetCompileUnit">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSnippetCompileUnit (System.CodeDom.CodeSnippetCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetCompileUnit(class System.CodeDom.CodeSnippetCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSnippetCompileUnit (e As CodeSnippetCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSnippetCompileUnit(System::CodeDom::CodeSnippetCompileUnit ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateSnippetCompileUnit : System.CodeDom.CodeSnippetCompileUnit -&gt; unit&#xA;override this.GenerateSnippetCompileUnit : System.CodeDom.CodeSnippetCompileUnit -&gt; unit" Usage="codeGenerator.GenerateSnippetCompileUnit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-284">Unidad de compilación de fragmento de código literal para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-284">The literal code fragment compile unit to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-285">Proporciona el código de la unidad de compilación de fragmento de código literal que se especifique.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-285">Outputs the code of the specified literal code fragment compile unit.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateSnippetExpression (System.CodeDom.CodeSnippetExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetExpression(class System.CodeDom.CodeSnippetExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateSnippetExpression (e As CodeSnippetExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateSnippetExpression(System::CodeDom::CodeSnippetExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateSnippetExpression : System.CodeDom.CodeSnippetExpression -&gt; unit" Usage="codeGenerator.GenerateSnippetExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-286">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-286">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-287">Proporciona los resultados relacionados con el código de la expresión de fragmento de código literal que se especifique.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-287">Outputs the code of the specified literal code fragment expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetMember">
      <MemberSignature Language="C#" Value="protected abstract void GenerateSnippetMember (System.CodeDom.CodeSnippetTypeMember e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetMember(class System.CodeDom.CodeSnippetTypeMember e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateSnippetMember (e As CodeSnippetTypeMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateSnippetMember(System::CodeDom::CodeSnippetTypeMember ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateSnippetMember : System.CodeDom.CodeSnippetTypeMember -&gt; unit" Usage="codeGenerator.GenerateSnippetMember e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetTypeMember" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-288">Miembro para el que se va generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-288">The member to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-289">Proporciona los resultados relacionados con el código del miembro de clase de fragmento de código literal que se especifique.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-289">Outputs the code of the specified literal code fragment class member.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetTypeMember" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetStatement">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSnippetStatement (System.CodeDom.CodeSnippetStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetStatement(class System.CodeDom.CodeSnippetStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSnippetStatement (e As CodeSnippetStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSnippetStatement(System::CodeDom::CodeSnippetStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateSnippetStatement : System.CodeDom.CodeSnippetStatement -&gt; unit&#xA;override this.GenerateSnippetStatement : System.CodeDom.CodeSnippetStatement -&gt; unit" Usage="codeGenerator.GenerateSnippetStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-290">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-290">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-291">Proporciona los resultados relacionados con el código de la instrucción de fragmento de código literal que se especifique.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-291">Outputs the code of the specified literal code fragment statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateStatement">
      <MemberSignature Language="C#" Value="protected void GenerateStatement (System.CodeDom.CodeStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateStatement(class System.CodeDom.CodeStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateStatement (e As CodeStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateStatement(System::CodeDom::CodeStatement ^ e);" />
      <MemberSignature Language="F#" Value="member this.GenerateStatement : System.CodeDom.CodeStatement -&gt; unit" Usage="codeGenerator.GenerateStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-292">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-292">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-293">Genera código para la instrucción especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-293">Generates code for the specified statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-294"><paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-294"><paramref name="e" /> is not a valid <see cref="T:System.CodeDom.CodeStatement" />.</span></span></exception>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateStatements">
      <MemberSignature Language="C#" Value="protected void GenerateStatements (System.CodeDom.CodeStatementCollection stms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateStatements(class System.CodeDom.CodeStatementCollection stms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateStatements (stms As CodeStatementCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateStatements(System::CodeDom::CodeStatementCollection ^ stms);" />
      <MemberSignature Language="F#" Value="member this.GenerateStatements : System.CodeDom.CodeStatementCollection -&gt; unit" Usage="codeGenerator.GenerateStatements stms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stms" Type="System.CodeDom.CodeStatementCollection" />
      </Parameters>
      <Docs>
        <param name="stms"><span data-ttu-id="dc7a2-295">Instrucciones para las que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-295">The statements to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-296">Genera código para la colección de instrucciones especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-296">Generates code for the specified statement collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatementCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateThisReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateThisReferenceExpression (System.CodeDom.CodeThisReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateThisReferenceExpression(class System.CodeDom.CodeThisReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateThisReferenceExpression (e As CodeThisReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateThisReferenceExpression(System::CodeDom::CodeThisReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateThisReferenceExpression : System.CodeDom.CodeThisReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateThisReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeThisReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-297">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-297">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-298">Genera código para la expresión de referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-298">Generates code for the specified this reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeThisReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateThrowExceptionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateThrowExceptionStatement (System.CodeDom.CodeThrowExceptionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateThrowExceptionStatement(class System.CodeDom.CodeThrowExceptionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateThrowExceptionStatement (e As CodeThrowExceptionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateThrowExceptionStatement(System::CodeDom::CodeThrowExceptionStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateThrowExceptionStatement : System.CodeDom.CodeThrowExceptionStatement -&gt; unit" Usage="codeGenerator.GenerateThrowExceptionStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeThrowExceptionStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-299">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-299">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-300">Genera código para la instrucción de producción de excepción especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-300">Generates code for the specified throw exception statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeThrowExceptionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTryCatchFinallyStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTryCatchFinallyStatement (System.CodeDom.CodeTryCatchFinallyStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTryCatchFinallyStatement(class System.CodeDom.CodeTryCatchFinallyStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTryCatchFinallyStatement (e As CodeTryCatchFinallyStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTryCatchFinallyStatement(System::CodeDom::CodeTryCatchFinallyStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTryCatchFinallyStatement : System.CodeDom.CodeTryCatchFinallyStatement -&gt; unit" Usage="codeGenerator.GenerateTryCatchFinallyStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTryCatchFinallyStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-301">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-301">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-302">Genera código para la instrucción <see langword="try...catch...finally" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-302">Generates code for the specified <see langword="try...catch...finally" /> statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeConstructor">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeConstructor (System.CodeDom.CodeTypeConstructor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeConstructor(class System.CodeDom.CodeTypeConstructor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeConstructor (e As CodeTypeConstructor)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeConstructor(System::CodeDom::CodeTypeConstructor ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTypeConstructor : System.CodeDom.CodeTypeConstructor -&gt; unit" Usage="codeGenerator.GenerateTypeConstructor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeConstructor" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-303">Constructor de clase para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-303">The class constructor to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-304">Genera código para el constructor de clase especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-304">Generates code for the specified class constructor.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeConstructor" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeEnd (System.CodeDom.CodeTypeDeclaration e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeEnd(class System.CodeDom.CodeTypeDeclaration e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeEnd (e As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeEnd(System::CodeDom::CodeTypeDeclaration ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTypeEnd : System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateTypeEnd e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-305">Final de la clase para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-305">The end of the class to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-306">Genera código para el final de la clase especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-306">Generates code for the specified end of the class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeOfExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTypeOfExpression (System.CodeDom.CodeTypeOfExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeOfExpression(class System.CodeDom.CodeTypeOfExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTypeOfExpression (e As CodeTypeOfExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateTypeOfExpression(System::CodeDom::CodeTypeOfExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTypeOfExpression : System.CodeDom.CodeTypeOfExpression -&gt; unit&#xA;override this.GenerateTypeOfExpression : System.CodeDom.CodeTypeOfExpression -&gt; unit" Usage="codeGenerator.GenerateTypeOfExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeOfExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-307">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-307">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-308">Genera código para el tipo de expresión especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-308">Generates code for the specified type of expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeOfExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeReferenceExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTypeReferenceExpression (System.CodeDom.CodeTypeReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeReferenceExpression(class System.CodeDom.CodeTypeReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTypeReferenceExpression (e As CodeTypeReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateTypeReferenceExpression(System::CodeDom::CodeTypeReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTypeReferenceExpression : System.CodeDom.CodeTypeReferenceExpression -&gt; unit&#xA;override this.GenerateTypeReferenceExpression : System.CodeDom.CodeTypeReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateTypeReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-309">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-309">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-310">Genera código para la expresión de referencia de tipo especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-310">Generates code for the specified type reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypes">
      <MemberSignature Language="C#" Value="protected void GenerateTypes (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateTypes(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateTypes (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateTypes(System::CodeDom::CodeNamespace ^ e);" />
      <MemberSignature Language="F#" Value="member this.GenerateTypes : System.CodeDom.CodeNamespace -&gt; unit" Usage="codeGenerator.GenerateTypes e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-311">Espacio de nombres para el que se van a generar clases.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-311">The namespace to generate classes for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-312">Genera código para el espacio de nombres especificado y para las clases que contiene.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-312">Generates code for the specified namespace and the classes it contains.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeStart (System.CodeDom.CodeTypeDeclaration e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeStart(class System.CodeDom.CodeTypeDeclaration e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeStart (e As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeStart(System::CodeDom::CodeTypeDeclaration ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateTypeStart : System.CodeDom.CodeTypeDeclaration -&gt; unit" Usage="codeGenerator.GenerateTypeStart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-313">Inicio de la clase para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-313">The start of the class to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-314">Genera código para el inicio especificado de la clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-314">Generates code for the specified start of the class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateVariableDeclarationStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateVariableDeclarationStatement (System.CodeDom.CodeVariableDeclarationStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateVariableDeclarationStatement(class System.CodeDom.CodeVariableDeclarationStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateVariableDeclarationStatement (e As CodeVariableDeclarationStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateVariableDeclarationStatement(System::CodeDom::CodeVariableDeclarationStatement ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateVariableDeclarationStatement : System.CodeDom.CodeVariableDeclarationStatement -&gt; unit" Usage="codeGenerator.GenerateVariableDeclarationStatement e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeVariableDeclarationStatement" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-315">Instrucción para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-315">The statement to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-316">Genera código para la instrucción de declaración de variables especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-316">Generates code for the specified variable declaration statement.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeVariableDeclarationStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateVariableReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateVariableReferenceExpression (System.CodeDom.CodeVariableReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateVariableReferenceExpression(class System.CodeDom.CodeVariableReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateVariableReferenceExpression (e As CodeVariableReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateVariableReferenceExpression(System::CodeDom::CodeVariableReferenceExpression ^ e);" />
      <MemberSignature Language="F#" Value="abstract member GenerateVariableReferenceExpression : System.CodeDom.CodeVariableReferenceExpression -&gt; unit" Usage="codeGenerator.GenerateVariableReferenceExpression e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeVariableReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-317">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-317">The expression to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-318">Genera código para la expresión de referencia de variable especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-318">Generates code for the specified variable reference expression.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeVariableReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="protected abstract string GetTypeOutput (System.CodeDom.CodeTypeReference value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetTypeOutput (value As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeGenerator.GetTypeOutput value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-319">Tipo cuyo nombre se devolverá.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-319">The type whose name will be returned.</span></span></param>
        <summary><span data-ttu-id="dc7a2-320">Obtiene el nombre del tipo de datos especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-320">Gets the name of the specified data type.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-321">Nombre de la referencia de tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-321">The name of the data type reference.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReference" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="protected int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Indent" />
      <MemberSignature Language="VB.NET" Value="Protected Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.CodeDom.Compiler.CodeGenerator.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-322">Obtiene o establece los espacios que se van a aplicar a cada nivel de sangría.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-322">Gets or sets the amount of spaces to indent each indentation level.</span></span></summary>
        <value><span data-ttu-id="dc7a2-323">Número de espacios donde aplicar una sangría a cada nivel de sangría.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-323">The number of spaces to indent for each indentation level.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-324">Normalmente se aplica sangría a los segmentos de código para facilitar su reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-324">Segments of code are commonly indented for ease of recognition.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentClass">
      <MemberSignature Language="C#" Value="protected bool IsCurrentClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentClass : bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsCurrentClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-325">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una clase.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-325">Gets a value indicating whether the current object being generated is a class.</span></span></summary>
        <value><span data-ttu-id="dc7a2-326">Es <see langword="true" /> si el objeto actual es una clase; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-326"><see langword="true" /> if the current object is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentDelegate">
      <MemberSignature Language="C#" Value="protected bool IsCurrentDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentDelegate" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentDelegate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentDelegate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentDelegate : bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-327">Obtiene un valor que indica si el objeto que se está generando en la actualidad es un delegado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-327">Gets a value indicating whether the current object being generated is a delegate.</span></span></summary>
        <value><span data-ttu-id="dc7a2-328">Es <see langword="true" /> si el objeto actual es un delegado; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-328"><see langword="true" /> if the current object is a delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentEnum">
      <MemberSignature Language="C#" Value="protected bool IsCurrentEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentEnum : bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-329">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una enumeración.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-329">Gets a value indicating whether the current object being generated is an enumeration.</span></span></summary>
        <value><span data-ttu-id="dc7a2-330">Es <see langword="true" /> si el objeto actual es una enumeración; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-330"><see langword="true" /> if the current object is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentInterface">
      <MemberSignature Language="C#" Value="protected bool IsCurrentInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentInterface : bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-331">Obtiene un valor que indica si el objeto que se está generando en la actualidad es una interfaz.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-331">Gets a value indicating whether the current object being generated is an interface.</span></span></summary>
        <value><span data-ttu-id="dc7a2-332">Es <see langword="true" /> si el objeto actual es una interfaz; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-332"><see langword="true" /> if the current object is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentStruct">
      <MemberSignature Language="C#" Value="protected bool IsCurrentStruct { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentStruct { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentStruct : bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-333">Obtiene un valor que indica si el objeto que se está generando en la actualidad es un tipo de valor o struct.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-333">Gets a value indicating whether the current object being generated is a value type or struct.</span></span></summary>
        <value><span data-ttu-id="dc7a2-334">Es <see langword="true" /> si el objeto actual es un tipo de valor o struct; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-334"><see langword="true" /> if the current object is a value type or struct; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="protected abstract bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool" Usage="codeGenerator.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-335">Valor que hay que comprobar para ver si existen conflictos con identificadores válidos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-335">The value to test for conflicts with valid identifiers.</span></span></param>
        <summary><span data-ttu-id="dc7a2-336">Obtiene un valor que indica si el valor especificado es un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-336">Gets a value indicating whether the specified value is a valid identifier.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-337"><see langword="true" /> si el valor es un identificador válido; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-337"><see langword="true" /> if the value is a valid identifier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidLanguageIndependentIdentifier">
      <MemberSignature Language="C#" Value="public static bool IsValidLanguageIndependentIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidLanguageIndependentIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidLanguageIndependentIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidLanguageIndependentIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsValidLanguageIndependentIdentifier : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-338">Cadena que hay que comprobar para ver si es válida.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-338">The string to test for validity.</span></span></param>
        <summary><span data-ttu-id="dc7a2-339">Obtiene un valor que indica si la cadena especificada es un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-339">Gets a value indicating whether the specified string is a valid identifier.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-340">Es <see langword="true" /> si la cadena especificada es un identificador válido; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-340"><see langword="true" /> if the specified string is a valid identifier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-341">Este método comprueba la cadena especificada para asegurarse de que no contiene determinados caracteres que se pueden usar para un campo de identificador de escape.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-341">This method checks the specified string to ensure that it does not contain certain characters that can be used to escape an identifier field.</span></span> <span data-ttu-id="dc7a2-342">El <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> método llama a este método para realizar la validación de cadenas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-342">The <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> method calls this method to perform string validation.</span></span> <span data-ttu-id="dc7a2-343">Una llamada a la <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> método y pasando un <xref:System.CodeDom.CodeCompileUnit> antes de generar código a partir de ella puede impedir el uso de ciertas secuencias de caracteres que incluyen código oculto dentro de un campo de identificador.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-343">Calling the <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> method and passing a <xref:System.CodeDom.CodeCompileUnit> before generating code from it can prevent the use of certain character sequences to include hidden code within an identifier field.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="dc7a2-344">para plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-344">for full trust for the immediate caller.</span></span> <span data-ttu-id="dc7a2-345">Un código de confianza parcial no puede utilizar este miembro.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-345">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)" />
      </Docs>
    </Member>
    <Member MemberName="NullToken">
      <MemberSignature Language="C#" Value="protected abstract string NullToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.NullToken" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property NullToken As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property System::String ^ NullToken { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NullToken : string" Usage="System.CodeDom.Compiler.CodeGenerator.NullToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-346">Obtiene el token que representa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-346">Gets the token that represents <see langword="null" />.</span></span></summary>
        <value><span data-ttu-id="dc7a2-347">Token que representa <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-347">The token that represents <see langword="null" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected System.CodeDom.Compiler.CodeGeneratorOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CodeGeneratorOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As CodeGeneratorOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::Compiler::CodeGeneratorOptions ^ Options { System::CodeDom::Compiler::CodeGeneratorOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.CodeDom.Compiler.CodeGeneratorOptions" Usage="System.CodeDom.Compiler.CodeGenerator.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeGeneratorOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-348">Obtiene las opciones que va a utilizar el generador de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-348">Gets the options to be used by the code generator.</span></span></summary>
        <value><span data-ttu-id="dc7a2-349">Objeto que indica las opciones que va a utilizar el generador de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-349">An object that indicates the options for the code generator to use.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="protected System.IO.TextWriter Output { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Output" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Output" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Output As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IO::TextWriter ^ Output { System::IO::TextWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Output : System.IO.TextWriter" Usage="System.CodeDom.Compiler.CodeGenerator.Output" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dc7a2-350">Obtiene el escritor de texto que se va a utilizar para la salida.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-350">Gets the text writer to use for output.</span></span></summary>
        <value><span data-ttu-id="dc7a2-351">Escritor de texto que se va a utilizar para la salida.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-351">The text writer to use for output.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="OutputAttributeArgument">
      <MemberSignature Language="C#" Value="protected virtual void OutputAttributeArgument (System.CodeDom.CodeAttributeArgument arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputAttributeArgument(class System.CodeDom.CodeAttributeArgument arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputAttributeArgument (arg As CodeAttributeArgument)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputAttributeArgument(System::CodeDom::CodeAttributeArgument ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member OutputAttributeArgument : System.CodeDom.CodeAttributeArgument -&gt; unit&#xA;override this.OutputAttributeArgument : System.CodeDom.CodeAttributeArgument -&gt; unit" Usage="codeGenerator.OutputAttributeArgument arg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.CodeDom.CodeAttributeArgument" />
      </Parameters>
      <Docs>
        <param name="arg"><span data-ttu-id="dc7a2-352">Argumento de atributo para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-352">The attribute argument to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-353">Devuelve un argumento dentro de un bloque de atributos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-353">Outputs an argument in an attribute block.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeArgument" />
      </Docs>
    </Member>
    <Member MemberName="OutputAttributeDeclarations">
      <MemberSignature Language="C#" Value="protected virtual void OutputAttributeDeclarations (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputAttributeDeclarations(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputAttributeDeclarations (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputAttributeDeclarations(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member OutputAttributeDeclarations : System.CodeDom.CodeAttributeDeclarationCollection -&gt; unit&#xA;override this.OutputAttributeDeclarations : System.CodeDom.CodeAttributeDeclarationCollection -&gt; unit" Usage="codeGenerator.OutputAttributeDeclarations attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-354">Atributos para los que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-354">The attributes to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-355">Genera código para la colección de declaraciones de atributos especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-355">Generates code for the specified attribute declaration collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputDirection">
      <MemberSignature Language="C#" Value="protected virtual void OutputDirection (System.CodeDom.FieldDirection dir);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputDirection(valuetype System.CodeDom.FieldDirection dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputDirection (dir As FieldDirection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputDirection(System::CodeDom::FieldDirection dir);" />
      <MemberSignature Language="F#" Value="abstract member OutputDirection : System.CodeDom.FieldDirection -&gt; unit&#xA;override this.OutputDirection : System.CodeDom.FieldDirection -&gt; unit" Usage="codeGenerator.OutputDirection dir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.CodeDom.FieldDirection" />
      </Parameters>
      <Docs>
        <param name="dir"><span data-ttu-id="dc7a2-356">Uno de los valores de enumeración que indica el atributo del campo.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-356">One of the enumeration values that indicates the attribute of the field.</span></span></param>
        <summary><span data-ttu-id="dc7a2-357">Genera código para el <see cref="T:System.CodeDom.FieldDirection" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-357">Generates code for the specified <see cref="T:System.CodeDom.FieldDirection" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.FieldDirection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OutputExpressionList">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dc7a2-358">Genera código para la lista de expresiones especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-358">Generates code for the specified expression list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OutputExpressionList">
      <MemberSignature Language="C#" Value="protected virtual void OutputExpressionList (System.CodeDom.CodeExpressionCollection expressions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputExpressionList(class System.CodeDom.CodeExpressionCollection expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputExpressionList (expressions As CodeExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputExpressionList(System::CodeDom::CodeExpressionCollection ^ expressions);" />
      <MemberSignature Language="F#" Value="abstract member OutputExpressionList : System.CodeDom.CodeExpressionCollection -&gt; unit&#xA;override this.OutputExpressionList : System.CodeDom.CodeExpressionCollection -&gt; unit" Usage="codeGenerator.OutputExpressionList expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.CodeDom.CodeExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="dc7a2-359">Expresiones para las que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-359">The expressions to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-360">Genera código para la lista de expresiones especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-360">Generates code for the specified expression list.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputExpressionList">
      <MemberSignature Language="C#" Value="protected virtual void OutputExpressionList (System.CodeDom.CodeExpressionCollection expressions, bool newlineBetweenItems);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputExpressionList(class System.CodeDom.CodeExpressionCollection expressions, bool newlineBetweenItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputExpressionList (expressions As CodeExpressionCollection, newlineBetweenItems As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputExpressionList(System::CodeDom::CodeExpressionCollection ^ expressions, bool newlineBetweenItems);" />
      <MemberSignature Language="F#" Value="abstract member OutputExpressionList : System.CodeDom.CodeExpressionCollection * bool -&gt; unit&#xA;override this.OutputExpressionList : System.CodeDom.CodeExpressionCollection * bool -&gt; unit" Usage="codeGenerator.OutputExpressionList (expressions, newlineBetweenItems)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.CodeDom.CodeExpressionCollection" />
        <Parameter Name="newlineBetweenItems" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expressions"><span data-ttu-id="dc7a2-361">Expresiones para las que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-361">The expressions to generate code for.</span></span></param>
        <param name="newlineBetweenItems"><span data-ttu-id="dc7a2-362"><see langword="true" /> para insertar una línea nueva después de cada elemento; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-362"><see langword="true" /> to insert a new line after each item; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="dc7a2-363">Genera código para la lista de expresiones especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-363">Generates code for the specified expression list.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputFieldScopeModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputFieldScopeModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputFieldScopeModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputFieldScopeModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputFieldScopeModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberSignature Language="F#" Value="abstract member OutputFieldScopeModifier : System.CodeDom.MemberAttributes -&gt; unit&#xA;override this.OutputFieldScopeModifier : System.CodeDom.MemberAttributes -&gt; unit" Usage="codeGenerator.OutputFieldScopeModifier attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-364">Uno de los valores de enumeración que especifica los atributos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-364">One of the enumeration values that specifies the attributes.</span></span></param>
        <summary><span data-ttu-id="dc7a2-365">Devuelve un modificador de ámbito de campo que se corresponde con los atributos especificados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-365">Outputs a field scope modifier that corresponds to the specified attributes.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputIdentifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputIdentifier (string ident);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputIdentifier(string ident) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputIdentifier (ident As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputIdentifier(System::String ^ ident);" />
      <MemberSignature Language="F#" Value="abstract member OutputIdentifier : string -&gt; unit&#xA;override this.OutputIdentifier : string -&gt; unit" Usage="codeGenerator.OutputIdentifier ident" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ident" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ident"><span data-ttu-id="dc7a2-366">Identificador que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-366">The identifier to output.</span></span></param>
        <summary><span data-ttu-id="dc7a2-367">Devuelve el identificador especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-367">Outputs the specified identifier.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMemberAccessModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputMemberAccessModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputMemberAccessModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputMemberAccessModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputMemberAccessModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberSignature Language="F#" Value="abstract member OutputMemberAccessModifier : System.CodeDom.MemberAttributes -&gt; unit&#xA;override this.OutputMemberAccessModifier : System.CodeDom.MemberAttributes -&gt; unit" Usage="codeGenerator.OutputMemberAccessModifier attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-368">Uno de los valores de enumeración que indica el modificador de acceso de miembro para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-368">One of the enumeration values that indicates the member access modifier to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-369">Genera código para el modificador de acceso de miembro especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-369">Generates code for the specified member access modifier.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputMemberScopeModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputMemberScopeModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputMemberScopeModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputMemberScopeModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputMemberScopeModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberSignature Language="F#" Value="abstract member OutputMemberScopeModifier : System.CodeDom.MemberAttributes -&gt; unit&#xA;override this.OutputMemberScopeModifier : System.CodeDom.MemberAttributes -&gt; unit" Usage="codeGenerator.OutputMemberScopeModifier attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-370">Uno de los valores de enumeración que indica el modificador de ámbito de miembro para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-370">One of the enumeration values that indicates the member scope modifier to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-371">Genera código para el modificador de ámbito de miembro especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-371">Generates code for the specified member scope modifier.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputOperator">
      <MemberSignature Language="C#" Value="protected virtual void OutputOperator (System.CodeDom.CodeBinaryOperatorType op);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputOperator(valuetype System.CodeDom.CodeBinaryOperatorType op) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputOperator (op As CodeBinaryOperatorType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputOperator(System::CodeDom::CodeBinaryOperatorType op);" />
      <MemberSignature Language="F#" Value="abstract member OutputOperator : System.CodeDom.CodeBinaryOperatorType -&gt; unit&#xA;override this.OutputOperator : System.CodeDom.CodeBinaryOperatorType -&gt; unit" Usage="codeGenerator.OutputOperator op" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="op" Type="System.CodeDom.CodeBinaryOperatorType" />
      </Parameters>
      <Docs>
        <param name="op"><span data-ttu-id="dc7a2-372">Operador para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-372">The operator to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-373">Genera código para el operador especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-373">Generates code for the specified operator.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName="OutputParameters">
      <MemberSignature Language="C#" Value="protected virtual void OutputParameters (System.CodeDom.CodeParameterDeclarationExpressionCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputParameters(class System.CodeDom.CodeParameterDeclarationExpressionCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputParameters (parameters As CodeParameterDeclarationExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputParameters(System::CodeDom::CodeParameterDeclarationExpressionCollection ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member OutputParameters : System.CodeDom.CodeParameterDeclarationExpressionCollection -&gt; unit&#xA;override this.OutputParameters : System.CodeDom.CodeParameterDeclarationExpressionCollection -&gt; unit" Usage="codeGenerator.OutputParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="parameters"><span data-ttu-id="dc7a2-374">Expresiones de declaración de parámetros para las que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-374">The parameter declaration expressions to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-375">Genera código para los parámetros especificados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-375">Generates code for the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputType">
      <MemberSignature Language="C#" Value="protected abstract void OutputType (System.CodeDom.CodeTypeReference typeRef);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputType(class System.CodeDom.CodeTypeReference typeRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OutputType (typeRef As CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OutputType(System::CodeDom::CodeTypeReference ^ typeRef);" />
      <MemberSignature Language="F#" Value="abstract member OutputType : System.CodeDom.CodeTypeReference -&gt; unit" Usage="codeGenerator.OutputType typeRef" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeRef" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="typeRef"><span data-ttu-id="dc7a2-376">Tipo para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-376">The type to generate code for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-377">Genera código para el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-377">Generates code for the specified type.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTypeAttributes">
      <MemberSignature Language="C#" Value="protected virtual void OutputTypeAttributes (System.Reflection.TypeAttributes attributes, bool isStruct, bool isEnum);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTypeAttributes(valuetype System.Reflection.TypeAttributes attributes, bool isStruct, bool isEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTypeAttributes (attributes As TypeAttributes, isStruct As Boolean, isEnum As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTypeAttributes(System::Reflection::TypeAttributes attributes, bool isStruct, bool isEnum);" />
      <MemberSignature Language="F#" Value="abstract member OutputTypeAttributes : System.Reflection.TypeAttributes * bool * bool -&gt; unit&#xA;override this.OutputTypeAttributes : System.Reflection.TypeAttributes * bool * bool -&gt; unit" Usage="codeGenerator.OutputTypeAttributes (attributes, isStruct, isEnum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="isStruct" Type="System.Boolean" />
        <Parameter Name="isEnum" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributes"><span data-ttu-id="dc7a2-378">Uno de los valores de enumeración que indica los atributos de tipo para los que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-378">One of the enumeration values that indicates the type attributes to generate code for.</span></span></param>
        <param name="isStruct"><span data-ttu-id="dc7a2-379">Es <see langword="true" /> si el tipo es un struct; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-379"><see langword="true" /> if the type is a struct; otherwise, <see langword="false" />.</span></span></param>
        <param name="isEnum"><span data-ttu-id="dc7a2-380">Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-380"><see langword="true" /> if the type is an enum; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="dc7a2-381">Genera código para los atributos de tipo especificados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-381">Generates code for the specified type attributes.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputTypeNamePair">
      <MemberSignature Language="C#" Value="protected virtual void OutputTypeNamePair (System.CodeDom.CodeTypeReference typeRef, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTypeNamePair(class System.CodeDom.CodeTypeReference typeRef, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTypeNamePair (typeRef As CodeTypeReference, name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTypeNamePair(System::CodeDom::CodeTypeReference ^ typeRef, System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member OutputTypeNamePair : System.CodeDom.CodeTypeReference * string -&gt; unit&#xA;override this.OutputTypeNamePair : System.CodeDom.CodeTypeReference * string -&gt; unit" Usage="codeGenerator.OutputTypeNamePair (typeRef, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeRef" Type="System.CodeDom.CodeTypeReference" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeRef"><span data-ttu-id="dc7a2-382">Tipo.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-382">The type.</span></span></param>
        <param name="name"><span data-ttu-id="dc7a2-383">Nombre para el objeto.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-383">The name for the object.</span></span></param>
        <summary><span data-ttu-id="dc7a2-384">Genera código para el par de tipo y nombre de objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-384">Generates code for the specified object type and name pair.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteSnippetString">
      <MemberSignature Language="C#" Value="protected abstract string QuoteSnippetString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string QuoteSnippetString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function QuoteSnippetString (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ QuoteSnippetString(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member QuoteSnippetString : string -&gt; string" Usage="codeGenerator.QuoteSnippetString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-385">Cadena que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-385">The string to convert.</span></span></param>
        <summary><span data-ttu-id="dc7a2-386">Convierte la cadena especificada dándole formato con códigos de escape.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-386">Converts the specified string by formatting it with escape codes.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-387">Cadena convertida.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-387">The converted string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-388">Este método devuelve una versión modificada de la cadena especificada que se ha dado formato con caracteres de escape de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-388">This method returns a modified version of the specified string that has been formatted with escape code characters.</span></span> <span data-ttu-id="dc7a2-389">Por ejemplo, `/"` podría utilizarse para representar `"`.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-389">For example, `/"` might be used to represent `"`.</span></span> <span data-ttu-id="dc7a2-390">Estos códigos de escape se usan para reemplazar los elementos de la cadena especificada en caso contrario, pueden estar en conflicto con la sintaxis del lenguaje.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-390">These escape codes are used to replace elements of the specified string that might otherwise conflict with language syntax.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="protected abstract bool Supports (System.CodeDom.Compiler.GeneratorSupport support);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport support) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function Supports (support As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool Supports(System::CodeDom::Compiler::GeneratorSupport support);" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeGenerator.Supports support" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="support" Type="System.CodeDom.Compiler.GeneratorSupport" />
      </Parameters>
      <Docs>
        <param name="support"><span data-ttu-id="dc7a2-391">Tipo de compatibilidad de generación de código que se va a comprobar.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-391">The type of code generation support to test for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-392">Obtiene un valor que indica si se proporciona la compatibilidad de generación de código especificada.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-392">Gets a value indicating whether the specified code generation support is provided.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-393">Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-393"><see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="string ICodeGenerator.CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function CreateEscapedIdentifier (value As String) As String Implements ICodeGenerator.CreateEscapedIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::CreateEscapedIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-394">Cadena para crear un identificador de escape.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-394">The string to create an escaped identifier for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-395">Crea un identificador de escape para el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-395">Creates an escaped identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-396">Identificador de escape para el valor.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-396">The escaped identifier for the value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier">
      <MemberSignature Language="C#" Value="string ICodeGenerator.CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function CreateValidIdentifier (value As String) As String Implements ICodeGenerator.CreateValidIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::CreateValidIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-397">Cadena para generar un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-397">The string to generate a valid identifier for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-398">Crea un identificador válido para el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-398">Creates a valid identifier for the specified value.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-399">Identificador válido para el valor especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-399">A valid identifier for the specified value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromCompileUnit (e As CodeCompileUnit, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromCompileUnit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromCompileUnit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-400">Unidad de compilación CodeDOM para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-400">The CodeDOM compilation unit to generate code for.</span></span></param>
        <param name="w"><span data-ttu-id="dc7a2-401">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-401">The text writer to output code to.</span></span></param>
        <param name="o"><span data-ttu-id="dc7a2-402">Opciones que se van a usar para generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-402">The options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-403">Genera código para la unidad de compilación de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-403">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-404"><paramref name="w" /> no está disponible.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-404"><paramref name="w" /> is not available.</span></span> <span data-ttu-id="dc7a2-405"><paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-405"><paramref name="w" /> may have been closed before the method call was made.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromExpression (System.CodeDom.CodeExpression e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(class System.CodeDom.CodeExpression e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromExpression (e As CodeExpression, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromExpression" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromExpression;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-406">Expresión para la que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-406">The expression to generate code for.</span></span></param>
        <param name="w"><span data-ttu-id="dc7a2-407">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-407">The text writer to output code to.</span></span></param>
        <param name="o"><span data-ttu-id="dc7a2-408">Opciones que se van a usar para generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-408">The options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-409">Genera código para la expresión de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-409">Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-410"><paramref name="w" /> no está disponible.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-410"><paramref name="w" /> is not available.</span></span> <span data-ttu-id="dc7a2-411"><paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-411"><paramref name="w" /> may have been closed before the method call was made.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromNamespace (System.CodeDom.CodeNamespace e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromNamespace (e As CodeNamespace, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-412">Espacio de nombres para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-412">The namespace to generate code for.</span></span></param>
        <param name="w"><span data-ttu-id="dc7a2-413">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-413">The text writer to output code to.</span></span></param>
        <param name="o"><span data-ttu-id="dc7a2-414">Opciones que se van a usar para generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-414">The options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-415">Genera código para el espacio de nombres de Code Document Object Model (CodeDOM) especificado y lo envía al escritor de texto especificado mediante las opciones especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-415">Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-416"><paramref name="w" /> no está disponible.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-416"><paramref name="w" /> is not available.</span></span> <span data-ttu-id="dc7a2-417"><paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-417"><paramref name="w" /> may have been closed before the method call was made.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromStatement (System.CodeDom.CodeStatement e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(class System.CodeDom.CodeStatement e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromStatement (e As CodeStatement, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromStatement" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromStatement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-418">Instrucción que contiene los elementos CodeDOM que se van a traducir.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-418">The statement that contains the CodeDOM elements to translate.</span></span></param>
        <param name="w"><span data-ttu-id="dc7a2-419">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-419">The text writer to output code to.</span></span></param>
        <param name="o"><span data-ttu-id="dc7a2-420">Opciones que se van a usar para generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-420">The options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-421">Genera código para la instrucción de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-421">Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-422"><paramref name="w" /> no está disponible.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-422"><paramref name="w" /> is not available.</span></span> <span data-ttu-id="dc7a2-423"><paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-423"><paramref name="w" /> may have been closed before the method call was made.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromType (e As CodeTypeDeclaration, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromType" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-424">Tipo para el que se va a generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-424">The type to generate code for.</span></span></param>
        <param name="w"><span data-ttu-id="dc7a2-425">Escritor de texto que recibe la salida de código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-425">The text writer to output code to.</span></span></param>
        <param name="o"><span data-ttu-id="dc7a2-426">Opciones que se van a usar para generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-426">The options to use for generating code.</span></span></param>
        <summary><span data-ttu-id="dc7a2-427">Genera código para la declaración de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-427">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dc7a2-428"><paramref name="w" /> no está disponible.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-428"><paramref name="w" /> is not available.</span></span> <span data-ttu-id="dc7a2-429"><paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-429"><paramref name="w" /> may have been closed before the method call was made.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput">
      <MemberSignature Language="C#" Value="string ICodeGenerator.GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeOutput (type As CodeTypeReference) As String Implements ICodeGenerator.GetTypeOutput" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System::CodeDom::CodeTypeReference ^ type) = System::CodeDom::Compiler::ICodeGenerator::GetTypeOutput;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="dc7a2-430">Tipo que se devuelve.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-430">The type to return.</span></span></param>
        <summary><span data-ttu-id="dc7a2-431">Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-431">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-432">Nombre de la referencia de tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-432">The name of the data type reference.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier">
      <MemberSignature Language="C#" Value="bool ICodeGenerator.IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsValidIdentifier (value As String) As Boolean Implements ICodeGenerator.IsValidIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::IsValidIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-433">Valor que se va a comprobar.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-433">The value to test.</span></span></param>
        <summary><span data-ttu-id="dc7a2-434">Obtiene un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-434">Gets a value that indicates whether the specified value is a valid identifier for the current language.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-435">Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-435"><see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.Supports">
      <MemberSignature Language="C#" Value="bool ICodeGenerator.Supports (System.CodeDom.Compiler.GeneratorSupport support);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.CodeDom.Compiler.ICodeGenerator.Supports(valuetype System.CodeDom.Compiler.GeneratorSupport support) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Function Supports (support As GeneratorSupport) As Boolean Implements ICodeGenerator.Supports" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.CodeDom.Compiler.ICodeGenerator.Supports(System::CodeDom::Compiler::GeneratorSupport support) = System::CodeDom::Compiler::ICodeGenerator::Supports;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="support" Type="System.CodeDom.Compiler.GeneratorSupport" />
      </Parameters>
      <Docs>
        <param name="support"><span data-ttu-id="dc7a2-436">Características para las que se va a comprobar el generador.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-436">The capabilities to test the generator for.</span></span></param>
        <summary><span data-ttu-id="dc7a2-437">Obtiene un valor que indica si el generador proporciona compatibilidad para las características de lenguaje representadas por el objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-437">Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> object.</span></span></summary>
        <returns><span data-ttu-id="dc7a2-438">Es <see langword="true" /> si se admiten las funciones especificadas; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-438"><see langword="true" /> if the specified capabilities are supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier">
      <MemberSignature Language="C#" Value="void ICodeGenerator.ValidateIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub ValidateIdentifier (value As String) Implements ICodeGenerator.ValidateIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::ValidateIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-439">El identificador que se debe validar.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-439">The identifier to validate.</span></span></param>
        <summary><span data-ttu-id="dc7a2-440">Provoca una excepción si el valor especificado no es un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-440">Throws an exception if the specified value is not a valid identifier.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateIdentifier">
      <MemberSignature Language="C#" Value="protected virtual void ValidateIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateIdentifier (value As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ValidateIdentifier : string -&gt; unit&#xA;override this.ValidateIdentifier : string -&gt; unit" Usage="codeGenerator.ValidateIdentifier value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="dc7a2-441">Identificador que hay que comprobar si es válido como tal.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-441">The identifier to test for validity as an identifier.</span></span></param>
        <summary><span data-ttu-id="dc7a2-442">Inicia una excepción si la cadena especificada no es un identificador válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-442">Throws an exception if the specified string is not a valid identifier.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-443">Si el identificador especificado no es válido o se producen conflictos con palabras clave o reservadas del lenguaje.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-443">If the specified identifier is invalid or conflicts with reserved or language keywords.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateIdentifiers">
      <MemberSignature Language="C#" Value="public static void ValidateIdentifiers (System.CodeDom.CodeObject e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateIdentifiers(class System.CodeDom.CodeObject e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateIdentifiers (e As CodeObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidateIdentifiers(System::CodeDom::CodeObject ^ e);" />
      <MemberSignature Language="F#" Value="static member ValidateIdentifiers : System.CodeDom.CodeObject -&gt; unit" Usage="System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeObject" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="dc7a2-444">Objeto que se someterá a pruebas en busca de identificadores no válidos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-444">An object to test for invalid identifiers.</span></span></param>
        <summary><span data-ttu-id="dc7a2-445">Intenta validar cada campo identificador que está dentro del <see cref="T:System.CodeDom.CodeObject" /> o árbol <see cref="N:System.CodeDom" /> especificados.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-445">Attempts to validate each identifier field contained in the specified <see cref="T:System.CodeDom.CodeObject" /> or <see cref="N:System.CodeDom" /> tree.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dc7a2-446">Es posible que los campos de identificador de <xref:System.CodeDom.CodeObject> objetos que se va a contener los caracteres de escape de campo y código oculto que puede permitir que las infracciones de seguridad.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-446">It is possible for the identifier fields of <xref:System.CodeDom.CodeObject> objects to contain field escape characters and hidden code which can allow security violations.</span></span> <span data-ttu-id="dc7a2-447">Este método comprueba los campos de cada literales <xref:System.CodeDom.CodeObject> en un <xref:System.CodeDom> árbol para los caracteres que podría usarse para ocultar el código y produce una excepción si un campo de identificador contiene un carácter no válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-447">This method checks the literal fields of each <xref:System.CodeDom.CodeObject> in a <xref:System.CodeDom> tree for characters which could be used to hide code, and throws an exception if an identifier field contains an invalid character.</span></span>  
  
 <span data-ttu-id="dc7a2-448">Este método llama a la <xref:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier%2A> método para validar cada identificador de la manera especificada <xref:System.CodeDom.CodeObject> o <xref:System.CodeDom> del árbol y produce una excepción si un identificador no es válido o contiene caracteres no válidos.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-448">This method calls the <xref:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier%2A> method to validate each identifier in the specified <xref:System.CodeDom.CodeObject> or <xref:System.CodeDom> tree, and throws an exception if an identifier is invalid or contains invalid characters.</span></span>  
  
 <span data-ttu-id="dc7a2-449">Llame a este método y pásele el <xref:System.CodeDom.CodeCompileUnit> que contiene el gráfico de código para generar antes de generar código para bloquear el uso de ciertas secuencias de caracteres que se puede usar para incluir código oculto dentro de un campo de identificador.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-449">Call this method and pass it the <xref:System.CodeDom.CodeCompileUnit> containing the code graph to generate before generating code to block the use of certain character sequences that can be used to include hidden code within an identifier field.</span></span> <span data-ttu-id="dc7a2-450">Este método no se llama automáticamente mediante los métodos de generar código.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-450">This method is not called automatically by any generate code methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dc7a2-451">El <see cref="T:System.CodeDom.CodeObject" /> especificado contiene un identificador no válido.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-451">The specified <see cref="T:System.CodeDom.CodeObject" /> contains an invalid identifier.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="dc7a2-452">para plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-452">for full trust for the immediate caller.</span></span> <span data-ttu-id="dc7a2-453">Un código de confianza parcial no puede utilizar este miembro.</span><span class="sxs-lookup"><span data-stu-id="dc7a2-453">This member cannot be used by partially trusted code.</span></span></permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>