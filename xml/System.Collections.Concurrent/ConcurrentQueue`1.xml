<Type Name="ConcurrentQueue&lt;T&gt;" FullName="System.Collections.Concurrent.ConcurrentQueue&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a1a487b2b7d241f3d89a52f71aca98ad3a68da6" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52361960" /></Metadata><TypeSignature Language="C#" Value="public class ConcurrentQueue&lt;T&gt; : System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ConcurrentQueue`1&lt;T&gt; extends System.Object implements class System.Collections.Concurrent.IProducerConsumerCollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.ConcurrentQueue`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ConcurrentQueue(Of T)&#xA;Implements IEnumerable(Of T), IProducerConsumerCollection(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ConcurrentQueue : System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ConcurrentQueue&lt;'T&gt; = class&#xA;    interface IProducerConsumerCollection&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="45980-101">Tipo de elementos que contiene la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-101">The type of the elements contained in the queue.</span></span></typeparam>
    <summary><span data-ttu-id="45980-102">Representa una colección de objetos FIFO (primero en entrar, primero en salir) que es segura para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="45980-102">Represents a thread-safe first in-first out (FIFO) collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="45980-103"><xref:System.Collections.Concurrent.ConcurrentQueue%601> implementa el <xref:System.Collections.Generic.IReadOnlyCollection%601> interfaz a partir de la [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; en versiones anteriores de .NET Framework, el <xref:System.Collections.Concurrent.ConcurrentQueue%601> clase no implementa esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="45980-103"><xref:System.Collections.Concurrent.ConcurrentQueue%601> implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the <xref:System.Collections.Concurrent.ConcurrentQueue%601> class did not implement this interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45980-104">El ejemplo siguiente muestra cómo usar un <xref:System.Collections.Concurrent.ConcurrentQueue%601> para poner en cola y quitar elementos de la cola:</span><span class="sxs-lookup"><span data-stu-id="45980-104">The following example shows how to use a <xref:System.Collections.Concurrent.ConcurrentQueue%601> to enqueue and dequeue items:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.ConcurrentQueue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.concurrentqueue/cs/concqueue.cs#1)]
 [!code-vb[System.Collections.Concurrent.ConcurrentQueue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.concurrentqueue/vb/concqueue.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="45980-105">Todos los miembros públicos y protegidos de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> son seguros para subprocesos y se pueden usar simultáneamente desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="45980-105">All public and protected members of <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45980-106">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-106">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-107">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-107">Thread-Safe Collections</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentQueue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45980-108">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-108">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-109">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-109">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentQueue (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConcurrentQueue(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;" Usage="new System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection"><span data-ttu-id="45980-110">Colección cuyos elementos se copian en el nuevo <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-110">The collection whose elements are copied to the new <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></param>
        <summary><span data-ttu-id="45980-111">Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> que contiene los elementos copiados de la colección especificada.</span><span class="sxs-lookup"><span data-stu-id="45980-111">Initializes a new instance of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> class that contains elements copied from the specified collection</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45980-112">El argumento <paramref name="collection" /> es null.</span><span class="sxs-lookup"><span data-stu-id="45980-112">The <paramref name="collection" /> argument is null.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-113">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-113">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="concurrentQueue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="concurrentQueue.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="45980-114">Matriz <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-114">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span> <span data-ttu-id="45980-115"><see cref="T:System.Array" /> debe tener una indización de base cero.</span><span class="sxs-lookup"><span data-stu-id="45980-115">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="45980-116">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="45980-116">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="45980-117">Copia los elementos de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> en una <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</span><span class="sxs-lookup"><span data-stu-id="45980-117">Copies the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45980-118"><paramref name="array" /> es una referencia nula (nada en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="45980-118"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45980-119"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="45980-119"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="45980-120"><paramref name="index" /> es igual o mayor que la longitud de la matriz <paramref name="array" /> -o bien- el número de elementos de la colección <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final del parámetro <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="45980-120"><paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-121">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-121">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45980-122">Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-122">Gets the number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <value><span data-ttu-id="45980-123">Número de elementos contenidos en <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-123">The number of elements contained in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-124">Para determinar si la colección contiene algún elemento, el uso de la <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> se recomienda la propiedad en lugar de recuperar el número de elementos de la <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> propiedad y compararlo con 0.</span><span class="sxs-lookup"><span data-stu-id="45980-124">For determining whether the collection contains any items, use of the <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> property and comparing it to 0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-125">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-125">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(T item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : 'T -&gt; unit" Usage="concurrentQueue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="45980-126">Objeto que se va a agregar al final de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-126">The object to add to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span> <span data-ttu-id="45980-127">El valor puede ser una referencia nula (Nothing en Visual Basic) para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="45980-127">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="45980-128">Agrega un objeto al final de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-128">Adds an object to the end of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-129">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-129">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="concurrentQueue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45980-130">Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-130">Returns an enumerator that iterates through the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></summary>
        <returns><span data-ttu-id="45980-131">Enumerador para los contenidos de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-131">An enumerator for the contents of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-132">La enumeración representa una instantánea en el momento del tiempo del contenido de la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-132">The enumeration represents a moment-in-time snapshot of the contents of the queue.</span></span> <span data-ttu-id="45980-133">No refleja las actualizaciones de la colección detrás del <xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A> llamó.</span><span class="sxs-lookup"><span data-stu-id="45980-133">It does not reflect any updates to the collection after <xref:System.Collections.Concurrent.ConcurrentQueue%601.GetEnumerator%2A> was called.</span></span> <span data-ttu-id="45980-134">El enumerador es seguro utilizar concurrentemente con lecturas y escrituras a la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-134">The enumerator is safe to use concurrently with reads from and writes to the queue.</span></span>  
  
 <span data-ttu-id="45980-135">El enumerador devuelve los elementos de la colección en el orden en que se agregaron, que es el orden FIFO (primero en salir).</span><span class="sxs-lookup"><span data-stu-id="45980-135">The enumerator returns the collection elements in the order in which they were added, which is FIFO order (first-in, first-out).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-136">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-136">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Concurrent.ConcurrentQueue&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45980-137">Obtiene un valor que indica si <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> está vacío.</span><span class="sxs-lookup"><span data-stu-id="45980-137">Gets a value that indicates whether the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty.</span></span></summary>
        <value><span data-ttu-id="45980-138">true si <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> está vacía; en caso contrario, false.</span><span class="sxs-lookup"><span data-stu-id="45980-138">true if the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> is empty; otherwise, false.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-139">Para determinar si la colección contiene elementos, se recomienda el uso de esta propiedad en lugar de recuperar el número de elementos de la <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> propiedad y compararlo con 0.</span><span class="sxs-lookup"><span data-stu-id="45980-139">For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentQueue%601.Count%2A> property and comparing it to 0.</span></span> <span data-ttu-id="45980-140">Sin embargo, como esta colección está diseñada para tener acceso al mismo tiempo, puede ser el caso de que otro subproceso modifique la colección después de <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> devuelve, lo que invalida el resultado.</span><span class="sxs-lookup"><span data-stu-id="45980-140">However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after <xref:System.Collections.Concurrent.ConcurrentQueue%601.IsEmpty%2A> returns, thus invalidating the result.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-141">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-141">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryAdd (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryAdd(`0)" />
      <MemberSignature Language="VB.NET" Value="Function TryAdd (item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryAdd" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryAdd(T item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryAdd;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="45980-142">Objeto que se va a agregar a <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-142">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span> <span data-ttu-id="45980-143">El valor puede ser una referencia nula (Nothing en Visual Basic) para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="45980-143">The value can be a null reference (Nothing in Visual Basic) for reference types.</span></span></param>
        <summary><span data-ttu-id="45980-144">Intenta agregar un objeto a <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-144">Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="45980-145">Es true si se agregó correctamente el objeto; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="45980-145">true if the object was added successfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-146">Para <xref:System.Collections.Concurrent.ConcurrentQueue%601>, esta operación agregará siempre el objeto al final de la <xref:System.Collections.Concurrent.ConcurrentQueue%601> y devolver true.</span><span class="sxs-lookup"><span data-stu-id="45980-146">For <xref:System.Collections.Concurrent.ConcurrentQueue%601>, this operation will always add the object to the end of the <xref:System.Collections.Concurrent.ConcurrentQueue%601> and return true.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-147">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-147">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake">
      <MemberSignature Language="C#" Value="bool IProducerConsumerCollection&lt;T&gt;.TryTake (out T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection&lt;T&gt;#TryTake(`0@)" />
      <MemberSignature Language="VB.NET" Value="Function TryTake (ByRef item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryTake" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Concurrent.IProducerConsumerCollection&lt;T&gt;.TryTake([Runtime::InteropServices::Out] T % item) = System::Collections::Concurrent::IProducerConsumerCollection&lt;T&gt;::TryTake;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="45980-148">Cuando este método devuelve un valor, si la operación se realizó correctamente, <paramref name="item" /> contiene el objeto que se ha quitado.</span><span class="sxs-lookup"><span data-stu-id="45980-148">When this method returns, if the operation was successful, <paramref name="item" /> contains the object removed.</span></span> <span data-ttu-id="45980-149">Si no había ningún objeto para quitar, el valor estará sin especificar.</span><span class="sxs-lookup"><span data-stu-id="45980-149">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="45980-150">Intenta quitar y devolver un objeto de <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-150">Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</span></span></summary>
        <returns><span data-ttu-id="45980-151">Es true si el elemento se quitó y se devolvió correctamente; de lo contrario, es false.</span><span class="sxs-lookup"><span data-stu-id="45980-151">true if an element was removed and returned succesfully; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-152">Para <xref:System.Collections.Concurrent.ConcurrentQueue%601>, esta operación intentará quitar el objeto desde el principio de la <xref:System.Collections.Concurrent.ConcurrentQueue%601>.</span><span class="sxs-lookup"><span data-stu-id="45980-152">For <xref:System.Collections.Concurrent.ConcurrentQueue%601>, this operation will attempt to remove the object from the beginning of the <xref:System.Collections.Concurrent.ConcurrentQueue%601>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-153">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-153">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="45980-154">Matriz <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-154">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</span></span> <span data-ttu-id="45980-155"><see cref="T:System.Array" /> debe tener una indización de base cero.</span><span class="sxs-lookup"><span data-stu-id="45980-155">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="45980-156">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="45980-156">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="45980-157">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="45980-157">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45980-158"><paramref name="array" /> es una referencia nula (nada en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="45980-158"><paramref name="array" /> is a null reference (Nothing in Visual Basic).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45980-159"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="45980-159"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="45980-160"><paramref name="array" /> es multidimensional.</span><span class="sxs-lookup"><span data-stu-id="45980-160"><paramref name="array" /> is multidimensional.</span></span> <span data-ttu-id="45980-161">-o bien- <paramref name="array" /> no tiene índices de base cero.</span><span class="sxs-lookup"><span data-stu-id="45980-161">-or- <paramref name="array" /> does not have zero-based indexing.</span></span> <span data-ttu-id="45980-162">-o bien- <paramref name="index" /> es igual o mayor que la longitud de la matriz <paramref name="array" /> -o bien- el número de elementos de la colección <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final del parámetro <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="45980-162">-or- <paramref name="index" /> is equal to or greater than the length of the <paramref name="array" /> -or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span> <span data-ttu-id="45980-163">-o bien- el tipo de la colección <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="45980-163">-or- The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-164">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-164">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45980-165">Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado con SyncRoot.</span><span class="sxs-lookup"><span data-stu-id="45980-165">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot.</span></span></summary>
        <value><span data-ttu-id="45980-166">true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado con SyncRoot; en caso contrario, false.</span><span class="sxs-lookup"><span data-stu-id="45980-166">true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized with the SyncRoot; otherwise, false.</span></span> <span data-ttu-id="45980-167">Para <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />, esta propiedad siempre devuelve false.</span><span class="sxs-lookup"><span data-stu-id="45980-167">For <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />, this property always returns false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-168">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-168">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45980-169">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="45980-169">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="45980-170">Esta propiedad no es compatible.</span><span class="sxs-lookup"><span data-stu-id="45980-170">This property is not supported.</span></span></summary>
        <value><span data-ttu-id="45980-171">Devuelve un valor NULL (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="45980-171">Returns null  (Nothing in Visual Basic).</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="45980-172">La propiedad SyncRoot no es compatible.</span><span class="sxs-lookup"><span data-stu-id="45980-172">The SyncRoot property is not supported.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-173">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-173">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45980-174">Devuelve un enumerador que recorre en iteración una colección.</span><span class="sxs-lookup"><span data-stu-id="45980-174">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="45980-175"><see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="45980-175">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-176">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-176">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; 'T[]&#xA;override this.ToArray : unit -&gt; 'T[]" Usage="concurrentQueue.ToArray " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45980-177">Copia los elementos almacenados en <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> a una nueva matriz.</span><span class="sxs-lookup"><span data-stu-id="45980-177">Copies the elements stored in the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> to a new array.</span></span></summary>
        <returns><span data-ttu-id="45980-178">Nueva matriz que contiene una instantánea de los elementos copiados de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span><span class="sxs-lookup"><span data-stu-id="45980-178">A new array containing a snapshot of elements copied from the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-179">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-179">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue">
      <MemberSignature Language="C#" Value="public bool TryDequeue (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDequeue([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDequeue (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryDequeue([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryDequeue :  -&gt; bool" Usage="concurrentQueue.TryDequeue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="45980-180">Cuando este método devuelve un valor, si la operación se realizó correctamente, <paramref name="result" /> contiene el objeto que se ha quitado.</span><span class="sxs-lookup"><span data-stu-id="45980-180">When this method returns, if the operation was successful, <paramref name="result" /> contains the object removed.</span></span> <span data-ttu-id="45980-181">Si no había ningún objeto para quitar, el valor estará sin especificar.</span><span class="sxs-lookup"><span data-stu-id="45980-181">If no object was available to be removed, the value is unspecified.</span></span></param>
        <summary><span data-ttu-id="45980-182">Intenta quitar y devolver el objeto situado al principio de la cola simultánea.</span><span class="sxs-lookup"><span data-stu-id="45980-182">Tries to remove and return the object at the beginning of the concurrent queue.</span></span></summary>
        <returns><span data-ttu-id="45980-183">Es <see langword="true" /> si se quitó y se devolvió correctamente el elemento situado al principio de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45980-183"><see langword="true" /> if an element was removed and returned from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45980-184"><xref:System.Collections.Concurrent.ConcurrentQueue%601> controla toda la sincronización internamente.</span><span class="sxs-lookup"><span data-stu-id="45980-184"><xref:System.Collections.Concurrent.ConcurrentQueue%601> handles all synchronization internally.</span></span> <span data-ttu-id="45980-185">Si dos subprocesos llamada <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> en exactamente el mismo momento, ninguna de las operaciones se bloquea.</span><span class="sxs-lookup"><span data-stu-id="45980-185">If two threads call <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> at precisely the same moment, neither operation is blocked.</span></span> <span data-ttu-id="45980-186">Cuando se detecta un conflicto entre dos subprocesos, un subproceso tiene que vuelva a intentar recuperar el elemento siguiente y la sincronización se controla internamente.</span><span class="sxs-lookup"><span data-stu-id="45980-186">When a conflict is detected between two threads, one thread has to try again to retrieve the next element, and the synchronization is handled internally.</span></span>  
  
 <span data-ttu-id="45980-187"><xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> intenta quitar un elemento de la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-187"><xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> tries to remove an element from the queue.</span></span> <span data-ttu-id="45980-188">Si el método es correcto, el elemento se quita y devuelve el método `true`; en caso contrario, devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="45980-188">If the method is successful, the item is removed and the method returns `true`; otherwise, it returns `false`.</span></span> <span data-ttu-id="45980-189">Esto sucede de forma atómica con respecto a otras operaciones en la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-189">That happens atomically with respect to other operations on the queue.</span></span> <span data-ttu-id="45980-190">Si la cola se rellenó con código como `q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");` y dos subprocesos intentan quitar un elemento de la cola al mismo tiempo, un subproceso se quitan de la cola `a` y el otro subproceso se quitan de la cola `b`.</span><span class="sxs-lookup"><span data-stu-id="45980-190">If the queue was populated with code such as `q.Enqueue("a"); q.Enqueue("b"); q.Enqueue("c");` and two threads concurrently try to dequeue an element, one thread will dequeue `a` and the other thread will dequeue `b`.</span></span> <span data-ttu-id="45980-191">Ambas llamadas a <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> devolverá `true`, debido a que se puede quitar un elemento de la cola.</span><span class="sxs-lookup"><span data-stu-id="45980-191">Both calls to <xref:System.Collections.Concurrent.ConcurrentQueue%601.TryDequeue%2A> will return `true`, because they were both able to dequeue an element.</span></span> <span data-ttu-id="45980-192">Si cada subproceso vuelve al quitar un elemento adicional de la cola, uno de los subprocesos se dequeue `c` y devolver `true`, mientras que el otro subproceso encontrará vacía la cola y devolverá `false`.</span><span class="sxs-lookup"><span data-stu-id="45980-192">If each thread goes back to dequeue an additional element, one of the threads will dequeue `c` and return `true`, whereas the other thread will find the queue empty and will return `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-193">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-193">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="concurrentQueue.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="45980-194">Cuando este método vuelve, <paramref name="result" /> contiene un objeto situado al principio de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> o un valor sin especificar si la operación no se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="45980-194">When this method returns, <paramref name="result" /> contains an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> or an unspecified value if the operation failed.</span></span></param>
        <summary><span data-ttu-id="45980-195">Intenta devolver un objeto situado al principio de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> sin quitarlo.</span><span class="sxs-lookup"><span data-stu-id="45980-195">Tries to return an object from the beginning of the <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="45980-196">Es <see langword="true" /> si se devolvió correctamente un objeto; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="45980-196"><see langword="true" /> if an object was returned successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2e7ca21f-786c-4367-96be-0cf3f3dcc6bd"><span data-ttu-id="45980-197">Colecciones seguras para subprocesos</span><span class="sxs-lookup"><span data-stu-id="45980-197">Thread-Safe Collections</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>