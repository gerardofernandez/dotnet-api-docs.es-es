<Type Name="EventListener" FullName="System.Diagnostics.Tracing.EventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b9b6cbaee889586e53969111bcef2a3741356af" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63888211" /></Metadata><TypeSignature Language="C#" Value="public abstract class EventListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EventListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Tracing.EventListener" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventListener abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type EventListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3e1b5-101">Proporciona métodos para habilitar y deshabilitar eventos de orígenes de eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-101">Provides methods for enabling and disabling events from event sources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-102">Un agente de escucha de evento representa el destino de todos los eventos generados por el origen del evento (<xref:System.Diagnostics.Tracing.EventSource> objeto) las implementaciones en el dominio de aplicación actual.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-102">An event listener represents the target for all events generated by event source (<xref:System.Diagnostics.Tracing.EventSource> object) implementations in the current application domain.</span></span> <span data-ttu-id="3e1b5-103">Cuando se crea un nuevo agente de escucha de eventos, lógicamente se adjunta a todos los orígenes de eventos en ese dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-103">When a new event listener is created, it is logically attached to all event sources in that application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3e1b5-104">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="3e1b5-105">Cuando haya terminado de utilizar el tipo, debe eliminar de él directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-105">When you have finished using the type, you must dispose of it either directly or indirectly.</span></span> <span data-ttu-id="3e1b5-106">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="3e1b5-107">Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="3e1b5-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="3e1b5-108">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="3e1b5-109">Un agente de escucha de eventos puede habilitar o deshabilitar de forma de origen de eventos por actual mediante el uso de niveles de eventos (<xref:System.Diagnostics.Tracing.EventLevel>) y las palabras clave de evento (<xref:System.Diagnostics.Tracing.EventKeywords>) para restringir aún más el conjunto de eventos se envíen al agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-109">An event listener can enable or disable on a per-current event source basis by using event levels (<xref:System.Diagnostics.Tracing.EventLevel>) and event keywords (<xref:System.Diagnostics.Tracing.EventKeywords>) to further restrict the set of events to be sent to the listener.</span></span> <span data-ttu-id="3e1b5-110">El agente de escucha también puede enviar comandos arbitrarios a un origen de eventos actual específico mediante el <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-110">The listener can also send arbitrary commands to a specific current event source by using the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method.</span></span> <span data-ttu-id="3e1b5-111">Los significados de los comandos son específicos de la implementación del origen del evento.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-111">The meanings of the commands are specific to the implementation of the event source.</span></span>  
  
 <span data-ttu-id="3e1b5-112">Si el <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propiedad en el <xref:System.Diagnostics.Tracing.EventSource> es el objeto que se usa para habilitar o deshabilitar los eventos <xref:System.Guid.Empty>, se ven afectados todos los orígenes de eventos en el dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-112">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the <xref:System.Diagnostics.Tracing.EventSource> object that is used to enable or disable events is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 <span data-ttu-id="3e1b5-113">Varios agentes de escucha de eventos pueden definirse en un único dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-113">Multiple event listeners can be defined in a single application domain.</span></span> <span data-ttu-id="3e1b5-114">Cada agente de escucha es lógicamente independiente de otros agentes de escucha para que los eventos que están habilitados o deshabilitados por un agente de escucha afectan solo a ese agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-114">Each listener is logically independent of the other listeners so that events that are enabled or disabled by one listener affect only that listener.</span></span> <span data-ttu-id="3e1b5-115">Es posible que los comandos enviados con el <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> método para realizar una operación semántica (por ejemplo, una colección de elementos no utilizados o vaciar datos) que afecta a los otros agentes de escucha, pero esto es la excepción en lugar de la regla.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-115">It is possible for commands sent with the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method to do a semantic operation (such as a garbage collection or flushing data) that affects the other listeners, but this is the exception rather than the rule.</span></span>  
  
 <span data-ttu-id="3e1b5-116">Cada origen de evento mantiene una lista de agentes de escucha de eventos que envía eventos a.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-116">Each event source   keeps a list of event listeners that it sends events to.</span></span> <span data-ttu-id="3e1b5-117">Un conjunto de criterios de filtrado está asociado con cada par de agente de escucha de origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-117">A set of filtering criteria is associated with each event source-listener pair.</span></span> <span data-ttu-id="3e1b5-118">Estos criterios que determinan los eventos recibirá ese agente de escucha para el origen del evento actual.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-118">These criteria determine the events that listener will receive for the current event source.</span></span> <span data-ttu-id="3e1b5-119">Los agentes de escucha los eventos de recepción en sus <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-119">Listeners receive the events on their <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> method.</span></span> <span data-ttu-id="3e1b5-120">Por lo tanto, las subclases de <xref:System.Diagnostics.Tracing.EventListener> debe invalidar este método para hacer algo útil con los datos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-120">Therefore, subclasses of <xref:System.Diagnostics.Tracing.EventListener> must override this method to do something useful with the data.</span></span>  
  
 <span data-ttu-id="3e1b5-121">Cuando se crea un nuevo origen de eventos, el <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-121">When a new event source is created, the <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> method is called.</span></span> <span data-ttu-id="3e1b5-122">Cada agente de escucha del evento actual obtiene exactamente uno <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> llamar para cada origen de eventos actual que puede enviar los mensajes de registro.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-122">Every current event listener gets exactly one <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> call for every current event source that can send it log messages.</span></span> <span data-ttu-id="3e1b5-123">Cuando se crea un agente de escucha de eventos, una serie de <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> las llamadas se realizan para notificar el nuevo agente de escucha de todos los orígenes de eventos que existían antes de que se creó el agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-123">When an event listener is created, a series of <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> calls are made to notify the new listener of all the event sources that existed before the listener was created.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e1b5-124">Crea una nueva instancia de la clase <see cref="T:System.Diagnostics.Tracing.EventListener" />.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-124">Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-125">Todos los eventos se deshabilitan cuando se crea una nueva instancia.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-125">All events are disabled when a new instance is created.</span></span> <span data-ttu-id="3e1b5-126">Use el <xref:System.Diagnostics.Tracing.EventListener.EnableEvents%2A> métodos para habilitar los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-126">Use the <xref:System.Diagnostics.Tracing.EventListener.EnableEvents%2A> methods to enable events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableEvents">
      <MemberSignature Language="C#" Value="public void DisableEvents (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableEvents(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="member this.DisableEvents : System.Diagnostics.Tracing.EventSource -&gt; unit" Usage="eventListener.DisableEvents eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-127">Origen de evento para el que se van a deshabilitar eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-127">The event source to disable events for.</span></span></param>
        <summary><span data-ttu-id="3e1b5-128">Deshabilita todos los eventos del origen de eventos especificado.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-128">Disables all events for the specified event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-129">Si el <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propiedad `eventSource` es <xref:System.Guid.Empty>, se deshabilitan los eventos para todos los orígenes de eventos en el dominio de aplicación para este agente de escucha de eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-129">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property for `eventSource` is <xref:System.Guid.Empty>, events for all event sources in the application domain are disabled for this event listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventListener.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e1b5-130">Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Diagnostics.Tracing.EventListener" />.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-130">Releases the resources used by the current instance of the <see cref="T:System.Diagnostics.Tracing.EventListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-131">Llame a `Dispose` cuando haya terminado de usar <xref:System.Diagnostics.Tracing.EventListener>.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-131">Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventListener>.</span></span> <span data-ttu-id="3e1b5-132">El método `Dispose` deja el <xref:System.Diagnostics.Tracing.EventListener> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-132">The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventListener> in an unusable state.</span></span> <span data-ttu-id="3e1b5-133">Después de llamar a `Dispose`, debe liberar todas las referencias a la <xref:System.Diagnostics.Tracing.EventListener> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Diagnostics.Tracing.EventListener> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-133">After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventListener> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventListener> was occupying.</span></span>  
  
 <span data-ttu-id="3e1b5-134">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="3e1b5-134">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableEvents">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3e1b5-135">Habilita los eventos del origen de eventos especificado.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-135">Enables events for the specified event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-136">Origen de evento para el que se van a habilitar eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-136">The event source to enable events for.</span></span></param>
        <param name="level"><span data-ttu-id="3e1b5-137">Nivel de eventos que se va a habilitar.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-137">The level of events to enable.</span></span></param>
        <summary><span data-ttu-id="3e1b5-138">Habilita los eventos del origen de eventos especificado que tiene el nivel de detalle especificado o inferior.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-138">Enables events for the specified event source that has the specified verbosity level or lower.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-139">Si el <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propiedad especificado `eventSource` es <xref:System.Guid.Empty>, se ven afectados todos los orígenes de eventos en el dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-139">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level, valuetype System.Diagnostics.Tracing.EventKeywords matchAnyKeyword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel * System.Diagnostics.Tracing.EventKeywords -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level, matchAnyKeyword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
        <Parameter Name="matchAnyKeyword" Type="System.Diagnostics.Tracing.EventKeywords" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-140">Origen de evento para el que se van a habilitar eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-140">The event source to enable events for.</span></span></param>
        <param name="level"><span data-ttu-id="3e1b5-141">Nivel de eventos que se va a habilitar.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-141">The level of events to enable.</span></span></param>
        <param name="matchAnyKeyword"><span data-ttu-id="3e1b5-142">Marcas de palabra clave necesarias para habilitar los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-142">The keyword flags necessary to enable the events.</span></span></param>
        <summary><span data-ttu-id="3e1b5-143">Habilita los eventos del origen de eventos especificado que tiene el nivel de detalle especificado o inferior, y los marcadores de palabras clave coincidentes.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-143">Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-144">Si el <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propiedad especificado `eventSource` es <xref:System.Guid.Empty>, se ven afectados todos los orígenes de eventos en el dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-144">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary&lt;string,string&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class System.Diagnostics.Tracing.EventSource eventSource, valuetype System.Diagnostics.Tracing.EventLevel level, valuetype System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnableEvents(System::Diagnostics::Tracing::EventSource ^ eventSource, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : System.Diagnostics.Tracing.EventSource * System.Diagnostics.Tracing.EventLevel * System.Diagnostics.Tracing.EventKeywords * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="eventListener.EnableEvents (eventSource, level, matchAnyKeyword, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
        <Parameter Name="level" Type="System.Diagnostics.Tracing.EventLevel" />
        <Parameter Name="matchAnyKeyword" Type="System.Diagnostics.Tracing.EventKeywords" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-145">Origen de evento para el que se van a habilitar eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-145">The event source to enable events for.</span></span></param>
        <param name="level"><span data-ttu-id="3e1b5-146">Nivel de eventos que se va a habilitar.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-146">The level of events to enable.</span></span></param>
        <param name="matchAnyKeyword"><span data-ttu-id="3e1b5-147">Marcas de palabra clave necesarias para habilitar los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-147">The keyword flags necessary to enable the events.</span></span></param>
        <param name="arguments"><span data-ttu-id="3e1b5-148">Los argumentos que se hacen coincidir para habilitar los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-148">The arguments to be matched to enable the events.</span></span></param>
        <summary><span data-ttu-id="3e1b5-149">Habilita los eventos del origen de eventos especificado que tiene el nivel de detalle especificado o inferior, el marcador de palabra clave de evento correspondiente, y los argumentos coincidentes.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-149">Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-150">Si el <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> propiedad especificado `eventSource` es <xref:System.Guid.Empty>, se ven afectados todos los orígenes de eventos en el dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-150">If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified `eventSource` is <xref:System.Guid.Empty>, all event sources in the application domain are affected.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; EventSourceCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; EventSourceCreated" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Tracing.EventListener.EventSourceCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventSourceCreated As EventHandler(Of EventSourceCreatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Tracing::EventSourceCreatedEventArgs ^&gt; ^ EventSourceCreated;" />
      <MemberSignature Language="F#" Value="member this.EventSourceCreated : EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; " Usage="member this.EventSourceCreated : System.EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Tracing.EventSourceCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e1b5-151">Se produce cuando un origen de eventos (objeto <see cref="T:System.Diagnostics.Tracing.EventSource" />) se adjunta al distribuidor.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-151">Occurs when an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) is attached to the dispatcher.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-152">El <xref:System.Diagnostics.Tracing.EventListener.EventSourceCreated> se produce para todos los orígenes de eventos existentes cuando se crea el agente de escucha de eventos, así como para los orígenes de eventos que se crean después de la creación del agente de escucha del evento.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-152">The <xref:System.Diagnostics.Tracing.EventListener.EventSourceCreated> occurs for all existing event sources when the event listener is created, as well as for any event sources that are created after the event listener's creation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceIndex">
      <MemberSignature Language="C#" Value="public static int EventSourceIndex (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EventSourceIndex(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int EventSourceIndex(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="static member EventSourceIndex : System.Diagnostics.Tracing.EventSource -&gt; int" Usage="System.Diagnostics.Tracing.EventListener.EventSourceIndex eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-153">Origen de evento cuyo índice se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-153">The event source to find the index for.</span></span></param>
        <summary><span data-ttu-id="3e1b5-154">Obtiene un pequeño número no negativo que representa el origen de eventos especificado.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-154">Gets a small non-negative number that represents the specified event source.</span></span></summary>
        <returns><span data-ttu-id="3e1b5-155">Pequeño número no negativo que representa el origen de eventos especificado.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-155">A small non-negative number that represents the specified event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-156">El valor devuelto por <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> identifica un origen de eventos que es adecuado para la indización de matriz.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-156">The value returned by <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> identifies an event source that is suitable for indexing an array.</span></span> <span data-ttu-id="3e1b5-157">Este entero es único dentro del dominio de aplicación.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-157">This integer is unique within the application domain.</span></span> <span data-ttu-id="3e1b5-158">Un agente de escucha de evento resultará útil para almacenar información adicional sobre cada origen del evento que está conectado a ella.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-158">An event listener might find it useful to store additional information about each event source that is connected to it.</span></span> <span data-ttu-id="3e1b5-159">El valor devuelto por <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> permite esta información adicional se almacenen eficazmente en una matriz expandible como `List<T>`.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-159">The value returned by <xref:System.Diagnostics.Tracing.EventListener.EventSourceIndex%2A> allows this extra information to be efficiently stored in a  expandable array such as `List<T>`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; EventWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Tracing.EventWrittenEventArgs&gt; EventWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Tracing.EventListener.EventWritten" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventWritten As EventHandler(Of EventWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Tracing::EventWrittenEventArgs ^&gt; ^ EventWritten;" />
      <MemberSignature Language="F#" Value="member this.EventWritten : EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; " Usage="member this.EventWritten : System.EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Tracing.EventWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3e1b5-160">Se produce cuando un evento ha sido escrito por un origen de eventos (objeto <see cref="T:System.Diagnostics.Tracing.EventSource" />) para el que el agente de escucha de eventos ha habilitado los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-160">Occurs when an event has been written by an event source (<see cref="T:System.Diagnostics.Tracing.EventSource" /> object) for which the event listener has enabled events.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEventSourceCreated">
      <MemberSignature Language="C#" Value="protected internal virtual void OnEventSourceCreated (System.Diagnostics.Tracing.EventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnEventSourceCreated(class System.Diagnostics.Tracing.EventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnEventSourceCreated(System::Diagnostics::Tracing::EventSource ^ eventSource);" />
      <MemberSignature Language="F#" Value="abstract member OnEventSourceCreated : System.Diagnostics.Tracing.EventSource -&gt; unit&#xA;override this.OnEventSourceCreated : System.Diagnostics.Tracing.EventSource -&gt; unit" Usage="eventListener.OnEventSourceCreated eventSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="System.Diagnostics.Tracing.EventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="3e1b5-161">Origen del evento.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-161">The event source.</span></span></param>
        <summary><span data-ttu-id="3e1b5-162">Llamado para todos los orígenes de eventos existentes cuando se crea el agente de escucha de eventos y cuando un nuevo origen de evento se asocia al agente de escucha.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-162">Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e1b5-163">Implementaciones de origen del evento deben tener en cuenta que estas devoluciones de llamada se emiten para orígenes de eventos existentes cuando se crea una instancia de la escucha de eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-163">Event source implementations should be aware that these callbacks are issued for existing event sources when the event listener is instantiated.</span></span>  
  
 <span data-ttu-id="3e1b5-164">En un entorno multiproceso, es posible que <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> devoluciones de llamada que se produzca antes de la <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-164">In a multithreaded environment, it is possible for <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> callbacks  to occur before the <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> callback.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEventWritten">
      <MemberSignature Language="C#" Value="protected internal abstract void OnEventWritten (System.Diagnostics.Tracing.EventWrittenEventArgs eventData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnEventWritten(class System.Diagnostics.Tracing.EventWrittenEventArgs eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub OnEventWritten (eventData As EventWrittenEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void OnEventWritten(System::Diagnostics::Tracing::EventWrittenEventArgs ^ eventData);" />
      <MemberSignature Language="F#" Value="abstract member OnEventWritten : System.Diagnostics.Tracing.EventWrittenEventArgs -&gt; unit" Usage="eventListener.OnEventWritten eventData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Tracing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventData" Type="System.Diagnostics.Tracing.EventWrittenEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventData"><span data-ttu-id="3e1b5-165">Argumentos de evento que describen el evento.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-165">The event arguments that describe the event.</span></span></param>
        <summary><span data-ttu-id="3e1b5-166">Se llama siempre que un evento ha sido escrito por un origen de eventos para el que el agente de escucha de eventos ha habilitado los eventos.</span><span class="sxs-lookup"><span data-stu-id="3e1b5-166">Called whenever an event has been written by an event source for which the event listener has enabled events.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>