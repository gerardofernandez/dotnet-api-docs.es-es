<Type Name="TypeConverterBase" FullName="System.Activities.XamlIntegration.TypeConverterBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87fec4eada6a8a675a091e6b95a1dfbee6583745" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53524154" /></Metadata><TypeSignature Language="C#" Value="public abstract class TypeConverterBase : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeConverterBase extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Activities.XamlIntegration.TypeConverterBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeConverterBase&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeConverterBase abstract : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type TypeConverterBase = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e612c-101">Proporciona métodos que las clases de convertidor de tipos derivados pueden utilizar para convertir los objetos en distintas representaciones y desde ellas.</span><span class="sxs-lookup"><span data-stu-id="e612c-101">Provides methods that derived type converter classes can use for converting objects to and from various representations.</span></span></summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="typeConverterBase.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e612c-102">Información contextual usada para la conversión.</span><span class="sxs-lookup"><span data-stu-id="e612c-102">Context information that is used for conversion.</span></span></param>
        <param name="sourceType"><span data-ttu-id="e612c-103">Tipo desde el que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e612c-103">The type to convert from.</span></span></param>
        <summary><span data-ttu-id="e612c-104">Cuando se invalida en una clase derivada, determina si se puede convertir desde el tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="e612c-104">When overridden in a derived class, determines whether the specified type can be converted from.</span></span></summary>
        <returns><span data-ttu-id="e612c-105">Es <see langword="true" /> si se puede convertir desde el tipo especificado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e612c-105"><see langword="true" /> if the specified type can be converted from; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.TypeConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="typeConverterBase.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e612c-106">Información contextual usada para la conversión.</span><span class="sxs-lookup"><span data-stu-id="e612c-106">Context information that is used for conversion.</span></span></param>
        <param name="destinationType"><span data-ttu-id="e612c-107">Tipo al que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e612c-107">The type to convert to.</span></span></param>
        <summary><span data-ttu-id="e612c-108">Cuando se invalida en una clase derivada, determina si se puede convertir al tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="e612c-108">When overridden in a derived class, determines whether the specified type can be converted to.</span></span></summary>
        <returns><span data-ttu-id="e612c-109">Es <see langword="true" /> si se puede convertir al tipo especificado; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e612c-109"><see langword="true" /> if the specified type can be converted to; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="typeConverterBase.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e612c-110">Información contextual usada para la conversión.</span><span class="sxs-lookup"><span data-stu-id="e612c-110">Context information that is used for conversion.</span></span></param>
        <param name="culture"><span data-ttu-id="e612c-111"><see cref="T:System.Globalization.CultureInfo" /> opcional.</span><span class="sxs-lookup"><span data-stu-id="e612c-111">An optional <see cref="T:System.Globalization.CultureInfo" />.</span></span> <span data-ttu-id="e612c-112">Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="e612c-112">If not supplied, the current culture is assumed.</span></span></param>
        <param name="value"><span data-ttu-id="e612c-113">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e612c-113">The object to convert.</span></span></param>
        <summary><span data-ttu-id="e612c-114">Cuando se invalida en una clase derivada, convierte el valor concreto en una nueva representación especificada por la clase derivada.</span><span class="sxs-lookup"><span data-stu-id="e612c-114">When overridden in a derived class, converts the specified value to a new representation specified by the derived class.</span></span></summary>
        <returns><span data-ttu-id="e612c-115">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="e612c-115">The converted value.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.XamlIntegration.TypeConverterBase.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="typeConverterBase.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="e612c-116">Información contextual usada para la conversión.</span><span class="sxs-lookup"><span data-stu-id="e612c-116">Context information that is used for conversion.</span></span></param>
        <param name="culture"><span data-ttu-id="e612c-117"><see cref="T:System.Globalization.CultureInfo" /> opcional.</span><span class="sxs-lookup"><span data-stu-id="e612c-117">An optional <see cref="T:System.Globalization.CultureInfo" />.</span></span> <span data-ttu-id="e612c-118">Si no se proporciona una referencia cultural, se usa la actual de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="e612c-118">If not supplied, the current culture is assumed.</span></span></param>
        <param name="value"><span data-ttu-id="e612c-119">Objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e612c-119">The object to convert.</span></span></param>
        <param name="destinationType"><span data-ttu-id="e612c-120">Tipo al que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="e612c-120">The type to convert to.</span></span></param>
        <summary><span data-ttu-id="e612c-121">Cuando se invalida en una clase derivada, convierte el valor concreto a la representación especificada.</span><span class="sxs-lookup"><span data-stu-id="e612c-121">When overridden in a derived class, converts the specified value to the specified representation.</span></span></summary>
        <returns><span data-ttu-id="e612c-122">El valor convertido.</span><span class="sxs-lookup"><span data-stu-id="e612c-122">The converted value.</span></span></returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>