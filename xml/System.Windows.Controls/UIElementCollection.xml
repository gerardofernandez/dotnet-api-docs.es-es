<Type Name="UIElementCollection" FullName="System.Windows.Controls.UIElementCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47606ad36ec08c6ee203f166f9856ec617765bb8" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52246792" /></Metadata><TypeSignature Language="C#" Value="public class UIElementCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIElementCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.UIElementCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElementCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElementCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type UIElementCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="de4e1-101">Representa una colección ordenada de elementos secundarios <see cref="T:System.Windows.UIElement" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-101">Represents an ordered collection of <see cref="T:System.Windows.UIElement" /> child elements.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de4e1-102">El <xref:System.Windows.Controls.Panel> basar la clase usa un <xref:System.Windows.Controls.UIElementCollection> para representar su colección de elementos secundarios.</span><span class="sxs-lookup"><span data-stu-id="de4e1-102">The <xref:System.Windows.Controls.Panel> base class uses a <xref:System.Windows.Controls.UIElementCollection> to represent its collection of child elements.</span></span> <span data-ttu-id="de4e1-103">Los métodos y propiedades definidas por el <xref:System.Windows.Controls.UIElementCollection> afectan a todos los objetos derivados de <xref:System.Windows.Controls.Panel> y definir un conjunto de características para la manipulación de común <xref:System.Windows.Controls.Panel> elementos secundarios.</span><span class="sxs-lookup"><span data-stu-id="de4e1-103">Methods and properties defined by the <xref:System.Windows.Controls.UIElementCollection> affect all objects derived from <xref:System.Windows.Controls.Panel> and define a common feature-set for the manipulation of <xref:System.Windows.Controls.Panel> child elements.</span></span>  
  
 <span data-ttu-id="de4e1-104">Un <xref:System.Windows.Controls.UIElementCollection> tiene afinidad con su propio contexto (clase).</span><span class="sxs-lookup"><span data-stu-id="de4e1-104">A <xref:System.Windows.Controls.UIElementCollection> has affinity to its own context (class).</span></span> <span data-ttu-id="de4e1-105">Debe tener acceso a la colección desde el contexto del objeto propietario <xref:System.Windows.Controls.Panel>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-105">You must access the collection from the context of the owning <xref:System.Windows.Controls.Panel>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de4e1-106">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Add%2A> método para agregar contenido secundario a un elemento primario <xref:System.Windows.Controls.StackPanel>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-106">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Add%2A> method to add child content to a parent <xref:System.Windows.Controls.StackPanel>.</span></span> <span data-ttu-id="de4e1-107">Para ello, uso el <xref:System.Windows.Controls.Panel.Children%2A> propiedad, que es de tipo <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-107">You do this by using the <xref:System.Windows.Controls.Panel.Children%2A> property, which is of type <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-csharp[UIElementCollection#1](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Controls.Panel.Children" />
    <altmember cref="T:System.Windows.Media.VisualCollection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElementCollection (System.Windows.UIElement visualParent, System.Windows.FrameworkElement logicalParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.UIElement visualParent, class System.Windows.FrameworkElement logicalParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.#ctor(System.Windows.UIElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (visualParent As UIElement, logicalParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElementCollection(System::Windows::UIElement ^ visualParent, System::Windows::FrameworkElement ^ logicalParent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.UIElementCollection : System.Windows.UIElement * System.Windows.FrameworkElement -&gt; System.Windows.Controls.UIElementCollection" Usage="new System.Windows.Controls.UIElementCollection (visualParent, logicalParent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="visualParent" Type="System.Windows.UIElement" />
        <Parameter Name="logicalParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="visualParent"><span data-ttu-id="de4e1-108">Objeto <see cref="T:System.Windows.UIElement" /> primario de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-108">The <see cref="T:System.Windows.UIElement" /> parent of the collection.</span></span></param>
        <param name="logicalParent"><span data-ttu-id="de4e1-109">Elemento primario lógico de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-109">The logical parent of the elements in the collection.</span></span></param>
        <summary><span data-ttu-id="de4e1-110">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-110">Initializes a new instance of the <see cref="T:System.Windows.Controls.UIElementCollection" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.Add(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (element As UIElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.UIElement -&gt; int&#xA;override this.Add : System.Windows.UIElement -&gt; int" Usage="uIElementCollection.Add element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-111"><see cref="T:System.Windows.UIElement" /> que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="de4e1-111">The <see cref="T:System.Windows.UIElement" /> to add.</span></span></param>
        <summary><span data-ttu-id="de4e1-112">Agrega el elemento especificado a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-112">Adds the specified element to the <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-113">Posición de índice del elemento agregado.</span><span class="sxs-lookup"><span data-stu-id="de4e1-113">The index position of the added element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-114">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Add%2A> método para agregar contenido secundario a un elemento primario <xref:System.Windows.Controls.StackPanel>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-114">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Add%2A> method to add child content to a parent <xref:System.Windows.Controls.StackPanel>.</span></span> <span data-ttu-id="de4e1-115">Para ello, uso el <xref:System.Windows.Controls.Panel.Children%2A> propiedad, que es de tipo <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-115">You do this by using the <xref:System.Windows.Controls.Panel.Children%2A> property, which is of type <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-csharp[UIElementCollection#1](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Panel.Children" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Windows.Controls.UIElementCollection.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-116">Obtiene o establece el número de elementos que puede contener <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-116">Gets or sets the number of elements that the <see cref="T:System.Windows.Controls.UIElementCollection" /> can contain.</span></span></summary>
        <value><span data-ttu-id="de4e1-117">Número total de elementos que la colección puede contener.</span><span class="sxs-lookup"><span data-stu-id="de4e1-117">The total number of elements the collection can contain.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="uIElementCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de4e1-118">Quita todos los elementos de una clase <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-118">Removes all elements from a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-119">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Clear%2A> método para borrar el contenido secundario de un elemento primario <xref:System.Windows.Controls.StackPanel>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-119">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Clear%2A> method to clear child content from a parent <xref:System.Windows.Controls.StackPanel>.</span></span> <span data-ttu-id="de4e1-120">Para ello, uso el <xref:System.Windows.Controls.Panel.Children%2A> propiedad, que es de tipo <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-120">You do this by using the <xref:System.Windows.Controls.Panel.Children%2A> property, which is of type <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-csharp[UIElementCollection#1](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Panel.Children" />
      </Docs>
    </Member>
    <Member MemberName="ClearLogicalParent">
      <MemberSignature Language="C#" Value="protected void ClearLogicalParent (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ClearLogicalParent(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.ClearLogicalParent(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ClearLogicalParent (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ClearLogicalParent(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.ClearLogicalParent : System.Windows.UIElement -&gt; unit" Usage="uIElementCollection.ClearLogicalParent element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-121"><see cref="T:System.Windows.UIElement" /> cuyo elemento primario lógico se borra.</span><span class="sxs-lookup"><span data-stu-id="de4e1-121">The <see cref="T:System.Windows.UIElement" /> whose logical parent is being cleared.</span></span></param>
        <summary><span data-ttu-id="de4e1-122">Borra el elemento primario lógico de un elemento cuando éste se quita de <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-122">Clears the logical parent of an element when the element leaves a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.Contains(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (element As UIElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Windows.UIElement -&gt; bool&#xA;override this.Contains : System.Windows.UIElement -&gt; bool" Usage="uIElementCollection.Contains element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-123">Elemento que se debe buscar.</span><span class="sxs-lookup"><span data-stu-id="de4e1-123">The element to find.</span></span></param>
        <summary><span data-ttu-id="de4e1-124">Determina si un elemento especificado se encuentra en la colección <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-124">Determines whether a specified element is in the <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-125"><see langword="true" /> si el objeto <see cref="T:System.Windows.UIElement" /> especificado se encuentra en la colección; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-125"><see langword="true" /> if the specified <see cref="T:System.Windows.UIElement" /> is found in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-126">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Contains%2A> método para determinar si un determinado <xref:System.Windows.UIElement> existe dentro de un <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-126">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Contains%2A> method to determine if a specific <xref:System.Windows.UIElement> exists within a <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-csharp[UIElementCollection#10](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#10)]
 [!code-vb[UIElementCollection#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIElementCollection/VisualBasic/Pane1.xaml.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="de4e1-127">Copia un objeto <see cref="T:System.Windows.UIElement" /> de <see cref="T:System.Windows.Controls.UIElementCollection" /> en una matriz empezando en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-127">Copies a <see cref="T:System.Windows.UIElement" /> from a <see cref="T:System.Windows.Controls.UIElementCollection" /> to an array, starting at a specified index position.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="uIElementCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="de4e1-128">Matriz en la que se va a copiar la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-128">An array into which the collection is copied.</span></span></param>
        <param name="index"><span data-ttu-id="de4e1-129">Posición de índice del elemento en el que empieza la copia.</span><span class="sxs-lookup"><span data-stu-id="de4e1-129">The index position of the element where copying begins.</span></span></param>
        <summary><span data-ttu-id="de4e1-130">Copia un objeto <see cref="T:System.Windows.UIElement" /> de <see cref="T:System.Windows.Controls.UIElementCollection" /> en una matriz empezando en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-130">Copies a <see cref="T:System.Windows.UIElement" /> from a <see cref="T:System.Windows.Controls.UIElementCollection" /> to an array, starting at a specified index position.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (System.Windows.UIElement[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Windows.UIElement[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.CopyTo(System.Windows.UIElement[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CopyTo (array As UIElement(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Windows::UIElement ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Windows.UIElement[] * int -&gt; unit&#xA;override this.CopyTo : System.Windows.UIElement[] * int -&gt; unit" Usage="uIElementCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.UIElement[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="de4e1-131">Matriz de objetos <see cref="T:System.Windows.UIElement" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-131">An array of <see cref="T:System.Windows.UIElement" /> objects.</span></span></param>
        <param name="index"><span data-ttu-id="de4e1-132">Posición de índice del elemento en el que empieza la copia.</span><span class="sxs-lookup"><span data-stu-id="de4e1-132">The index position of the element where copying begins.</span></span></param>
        <summary><span data-ttu-id="de4e1-133">Copia un objeto <see cref="T:System.Windows.UIElement" /> de <see cref="T:System.Windows.Controls.UIElementCollection" /> en una matriz empezando en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-133">Copies a <see cref="T:System.Windows.UIElement" /> from a <see cref="T:System.Windows.Controls.UIElementCollection" /> to an array, starting at a specified index position.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Controls.UIElementCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-134">Obtiene el número real de elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-134">Gets the actual number of elements in the collection.</span></span></summary>
        <value><span data-ttu-id="de4e1-135">Número real de elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-135">The actual number of elements in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-136">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Count%2A> propiedad para contar el número de elementos secundarios en un <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-136">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Count%2A> property to count the number of child elements in a <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-csharp[UIElementCollection#12](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="uIElementCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de4e1-137">Devuelve un enumerador que puede recorrer en iteración la colección <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-137">Returns an enumerator that can iterate the <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-138"><see cref="T:System.Collections.IEnumerator" /> que puede hacer una lista de los miembros de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-138">An <see cref="T:System.Collections.IEnumerator" /> that can list the members of this collection.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.IndexOf(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (element As UIElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : System.Windows.UIElement -&gt; int&#xA;override this.IndexOf : System.Windows.UIElement -&gt; int" Usage="uIElementCollection.IndexOf element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-139">Elemento cuya posición de índice se requiere.</span><span class="sxs-lookup"><span data-stu-id="de4e1-139">The element whose index position is required.</span></span></param>
        <summary><span data-ttu-id="de4e1-140">Devuelve la posición de índice de un elemento especificado en <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-140">Returns the index position of a specified element in a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-141">Posición de índice del elemento.</span><span class="sxs-lookup"><span data-stu-id="de4e1-141">The index position of the element.</span></span>  <span data-ttu-id="de4e1-142">Devuelve -1 si el elemento no está en la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-142">-1 if the element is not in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-143">El ejemplo siguiente busca la posición de índice de un <xref:System.Windows.UIElement> dentro de un <xref:System.Windows.Controls.UIElementCollection>.</span><span class="sxs-lookup"><span data-stu-id="de4e1-143">The following example finds the index position of a <xref:System.Windows.UIElement> within a <xref:System.Windows.Controls.UIElementCollection>.</span></span>  
  
 [!code-xaml[UIElementCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollectionIndexOf/CSharp/Default.xaml#1)]  
  
 <span data-ttu-id="de4e1-144">...</span><span class="sxs-lookup"><span data-stu-id="de4e1-144">...</span></span>  
  
 [!code-csharp[UIElementCollectionIndexOf#2](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollectionIndexOf/CSharp/default.xaml.cs#2)]
 [!code-vb[UIElementCollectionIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIElementCollectionIndexOf/VisualBasic/default.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.Insert(System.Int32,System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.UIElement -&gt; unit&#xA;override this.Insert : int * System.Windows.UIElement -&gt; unit" Usage="uIElementCollection.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-145">Posición de índice en la que desea insertar el elemento.</span><span class="sxs-lookup"><span data-stu-id="de4e1-145">The index position where you want to insert the element.</span></span></param>
        <param name="element"><span data-ttu-id="de4e1-146">Elemento que se va a insertar en <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-146">The element to insert into the <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></param>
        <summary><span data-ttu-id="de4e1-147">Inserta un elemento en la posición de índice especificada de <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-147">Inserts an element into a <see cref="T:System.Windows.Controls.UIElementCollection" /> at the specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-148">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Insert%2A> método para insertar contenido secundario en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-148">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Insert%2A> method to insert child content at a specified index position.</span></span>  
  
 [!code-csharp[UIElementCollection#5](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Windows.Controls.UIElementCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-149">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</span><span class="sxs-lookup"><span data-stu-id="de4e1-149">Gets a value that indicates whether access to the <see cref="T:System.Collections.ICollection" /> interface is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="de4e1-150"><see langword="true" /> si el acceso a la colección está sincronizado; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-150"><see langword="true" /> if access to the collection is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.UIElement this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::UIElement ^ default[int] { System::Windows::UIElement ^ get(int index); void set(int index, System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.UIElementCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-151">Posición de índice de <see cref="T:System.Windows.UIElement" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-151">The index position of the <see cref="T:System.Windows.UIElement" />.</span></span></param>
        <summary><span data-ttu-id="de4e1-152">Obtiene o establece el objeto <see cref="T:System.Windows.UIElement" /> almacenado en la posición del índice de base cero de <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-152">Gets or sets the <see cref="T:System.Windows.UIElement" /> stored at the zero-based index position of the <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <value><span data-ttu-id="de4e1-153">Objeto <see cref="T:System.Windows.UIElement" /> que se encuentra en la posición de <paramref name="index" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-153">A <see cref="T:System.Windows.UIElement" /> at the specified <paramref name="index" /> position.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-154">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.Item%2A> propiedad para identificar el elemento secundario en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-154">The following example uses the <xref:System.Windows.Controls.UIElementCollection.Item%2A> property to identify the child element at a specified index position.</span></span>  
  
 [!code-csharp[UIElementCollection#11](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.Remove(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Windows.UIElement -&gt; unit&#xA;override this.Remove : System.Windows.UIElement -&gt; unit" Usage="uIElementCollection.Remove element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-155">Elemento que se va a quitar de la colección.</span><span class="sxs-lookup"><span data-stu-id="de4e1-155">The element to remove from the collection.</span></span></param>
        <summary><span data-ttu-id="de4e1-156">Elimina el elemento especificado de un <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-156">Removes the specified element from a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="uIElementCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-157">Índice del objeto <see cref="T:System.Windows.UIElement" /> que desea quitar.</span><span class="sxs-lookup"><span data-stu-id="de4e1-157">The index of the <see cref="T:System.Windows.UIElement" /> that you want to remove.</span></span></param>
        <summary><span data-ttu-id="de4e1-158">Quita el objeto <see cref="T:System.Windows.UIElement" /> situado en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="de4e1-158">Removes the <see cref="T:System.Windows.UIElement" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="de4e1-159">En el ejemplo siguiente se usa el <xref:System.Windows.Controls.UIElementCollection.RemoveAt%2A> método para quitar contenido secundario en una posición de índice especificada.</span><span class="sxs-lookup"><span data-stu-id="de4e1-159">The following example uses the <xref:System.Windows.Controls.UIElementCollection.RemoveAt%2A> method to remove child content at a specified index position.</span></span>  
  
 [!code-csharp[UIElementCollection#7](~/samples/snippets/csharp/VS_Snippets_Wpf/UIElementCollection/CSharp/Pane1.xaml.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; unit&#xA;override this.RemoveRange : int * int -&gt; unit" Usage="uIElementCollection.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-160">Posición de índice del elemento en el que empieza la eliminación.</span><span class="sxs-lookup"><span data-stu-id="de4e1-160">The index position of the element where removal begins.</span></span></param>
        <param name="count"><span data-ttu-id="de4e1-161">Número de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="de4e1-161">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="de4e1-162">Quita un intervalo de elementos de <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-162">Removes a range of elements from a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLogicalParent">
      <MemberSignature Language="C#" Value="protected void SetLogicalParent (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetLogicalParent(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.SetLogicalParent(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetLogicalParent (element As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetLogicalParent(System::Windows::UIElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.SetLogicalParent : System.Windows.UIElement -&gt; unit" Usage="uIElementCollection.SetLogicalParent element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="de4e1-163"><see cref="T:System.Windows.UIElement" /> cuyo elemento primario lógico se establece.</span><span class="sxs-lookup"><span data-stu-id="de4e1-163">The <see cref="T:System.Windows.UIElement" /> whose logical parent is set.</span></span></param>
        <summary><span data-ttu-id="de4e1-164">Establece el elemento primario lógico de un elemento en una colección <see cref="T:System.Windows.Controls.UIElementCollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-164">Sets the logical parent of an element in a <see cref="T:System.Windows.Controls.UIElementCollection" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Windows.Controls.UIElementCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-165">Obtiene un objeto que se puede utilizar para sincronizar el acceso a la interfaz <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-165">Gets an object that you can use to synchronize access to the <see cref="T:System.Collections.ICollection" /> interface.</span></span></summary>
        <value><span data-ttu-id="de4e1-166">Objeto <see cref="T:System.Object" /> que se puede utilizar para sincronizar el acceso a la interfaz <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-166"><see cref="T:System.Object" /> that you can use to synchronize access to the <see cref="T:System.Collections.ICollection" /> interface.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="de4e1-167">Objeto que se va a agregar.</span><span class="sxs-lookup"><span data-stu-id="de4e1-167">The object to add.</span></span></param>
        <summary><span data-ttu-id="de4e1-168">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-168">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-169">Para una descripción de este miembro, vea <see cref="M:System.Collections.IList.Add(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-169">For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-170">Posición en la que se insertó el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="de4e1-170">The position into which the new element was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Controls.UIElementCollection.Add(System.Windows.UIElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="de4e1-171">Objeto que se va a buscar en la lista.</span><span class="sxs-lookup"><span data-stu-id="de4e1-171">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="de4e1-172">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-172">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-173">Para una descripción de este miembro, vea <see cref="M:System.Collections.IList.Contains(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-173">For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-174">Es <see langword="true" /> si se encuentra el objeto en la colección; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-174"><see langword="true" /> if the object was found in the list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Controls.UIElementCollection.Contains(System.Windows.UIElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="de4e1-175">Objeto que se va a buscar en la lista.</span><span class="sxs-lookup"><span data-stu-id="de4e1-175">The object to locate in the list.</span></span></param>
        <summary><span data-ttu-id="de4e1-176">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-176">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-177">Para una descripción de este miembro, vea <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-177">For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="de4e1-178">Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="de4e1-178">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Controls.UIElementCollection.IndexOf(System.Windows.UIElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-179">Índice basado en cero en el que debe insertarse <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-179">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="de4e1-180">Objeto que se va a insertar en la lista.</span><span class="sxs-lookup"><span data-stu-id="de4e1-180">The object to insert to the list.</span></span></param>
        <summary><span data-ttu-id="de4e1-181">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-181">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-182">Para una descripción de este miembro, vea <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-182">For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Controls.UIElementCollection.Insert(System.Int32,System.Windows.UIElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-183">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-183">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-184">Para una descripción de este miembro, vea <see cref="P:System.Collections.IList.IsFixedSize" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-184">For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</span></span></summary>
        <value><span data-ttu-id="de4e1-185"><see langword="true" /> si la lista tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-185"><see langword="true" /> if the list has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de4e1-186">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-186">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-187">Para una descripción de este miembro, vea <see cref="P:System.Collections.IList.IsReadOnly" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-187">For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</span></span></summary>
        <value><span data-ttu-id="de4e1-188"><see langword="true" /> si la lista es de solo lectura; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-188"><see langword="true" /> if the list is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.UIElementCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="de4e1-189">Índice de base cero del elemento que se va a obtener o establecer.</span><span class="sxs-lookup"><span data-stu-id="de4e1-189">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="de4e1-190">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-190">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-191">Para una descripción de este miembro, vea <see cref="P:System.Collections.IList.Item(System.Int32)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-191">For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</span></span></summary>
        <value><span data-ttu-id="de4e1-192">Elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="de4e1-192">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.UIElementCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="de4e1-193">Objeto que se va a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="de4e1-193">The object to remove from the list.</span></span></param>
        <summary><span data-ttu-id="de4e1-194">Este tipo o miembro es compatible con la infraestructura [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] y no está pensado para ser usado directamente desde su código.</span><span class="sxs-lookup"><span data-stu-id="de4e1-194">This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="de4e1-195">Para una descripción de este miembro, vea <see cref="M:System.Collections.IList.Remove(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="de4e1-195">For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Controls.UIElementCollection.Remove(System.Windows.UIElement)" />
      </Docs>
    </Member>
  </Members>
</Type>