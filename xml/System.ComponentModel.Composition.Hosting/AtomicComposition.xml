<Type Name="AtomicComposition" FullName="System.ComponentModel.Composition.Hosting.AtomicComposition">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dbe9ce6f5d7a4152209173e11f9afc6e806c397b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39744174" /></Metadata><TypeSignature Language="C#" Value="public class AtomicComposition : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AtomicComposition extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />
  <TypeSignature Language="VB.NET" Value="Public Class AtomicComposition&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class AtomicComposition : IDisposable" />
  <TypeSignature Language="F#" Value="type AtomicComposition = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="3e259-101">Representa una única operación de composición transaccional.</span><span class="sxs-lookup"><span data-stu-id="3e259-101">Represents a single composition operation for transactional composition.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="3e259-102">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="3e259-102">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="3e259-103">Cuando haya terminado de utilizar el tipo, debe deshacerse de él directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="3e259-103">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="3e259-104">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="3e259-104">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="3e259-105">Para deshacerse de él, indirectamente, usar una construcción de lenguaje, como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="3e259-105">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="3e259-106">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="3e259-106">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3e259-107">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-107">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AtomicComposition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AtomicComposition();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e259-108">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-108">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AtomicComposition (System.ComponentModel.Composition.Hosting.AtomicComposition outerAtomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Hosting.AtomicComposition outerAtomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.#ctor(System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (outerAtomicComposition As AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AtomicComposition(System::ComponentModel::Composition::Hosting::AtomicComposition ^ outerAtomicComposition);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.AtomicComposition : System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; System.ComponentModel.Composition.Hosting.AtomicComposition" Usage="new System.ComponentModel.Composition.Hosting.AtomicComposition outerAtomicComposition" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="outerAtomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="outerAtomicComposition"><span data-ttu-id="3e259-109">Elemento primario de esta operación de composición.</span><span class="sxs-lookup"><span data-stu-id="3e259-109">The parent of this composition operation.</span></span></param>
        <summary><span data-ttu-id="3e259-110">Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> con el elemento primario <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="3e259-110">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class with the specified parent <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompleteAction">
      <MemberSignature Language="C#" Value="public void AddCompleteAction (Action completeAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCompleteAction(class System.Action completeAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddCompleteAction(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCompleteAction (completeAction As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCompleteAction(Action ^ completeAction);" />
      <MemberSignature Language="F#" Value="member this.AddCompleteAction : Action -&gt; unit" Usage="atomicComposition.AddCompleteAction completeAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completeAction" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="completeAction"><span data-ttu-id="3e259-111">Acción que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="3e259-111">The action to be executed.</span></span></param>
        <summary><span data-ttu-id="3e259-112">Agrega una acción que se va a ejecutar cuando la operación de composición global se complete correctamente.</span><span class="sxs-lookup"><span data-stu-id="3e259-112">Adds an action to be executed when the overall composition operation completes successfully.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRevertAction">
      <MemberSignature Language="C#" Value="public void AddRevertAction (Action revertAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRevertAction(class System.Action revertAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.AddRevertAction(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRevertAction (revertAction As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRevertAction(Action ^ revertAction);" />
      <MemberSignature Language="F#" Value="member this.AddRevertAction : Action -&gt; unit" Usage="atomicComposition.AddRevertAction revertAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revertAction" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="revertAction"><span data-ttu-id="3e259-113">Acción que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="3e259-113">The action to be executed.</span></span></param>
        <summary><span data-ttu-id="3e259-114">Agrega una acción que se va a ejecutar si se producen errores en la operación de composición global.</span><span class="sxs-lookup"><span data-stu-id="3e259-114">Adds an action to be executed if the overall composition operation fails.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberSignature Language="F#" Value="member this.Complete : unit -&gt; unit" Usage="atomicComposition.Complete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e259-115">Marca esta operación de composición como completada.</span><span class="sxs-lookup"><span data-stu-id="3e259-115">Marks this composition operation as complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e259-116">Si este <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> está anidado, acciones de finalización no se ejecutará hasta que también ha completado la operación de composición del elemento primario.</span><span class="sxs-lookup"><span data-stu-id="3e259-116">If this <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> is nested, completion actions will not be executed until the parent composition operation has also completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3e259-117">Libera los recursos usados por <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> y marca esta operación de composición como errónea.</span><span class="sxs-lookup"><span data-stu-id="3e259-117">Releases the resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" />, and mark this composition operation as failed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="atomicComposition.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3e259-118">Libera todos los recursos que usa la instancia actual de la clase <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> y marca esta operación de composición como errónea.</span><span class="sxs-lookup"><span data-stu-id="3e259-118">Releases all resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> class, and mark this composition operation as failed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e259-119">Llame a `Dispose` cuando haya terminado de usar <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>.</span><span class="sxs-lookup"><span data-stu-id="3e259-119">Call `Dispose` when you are finished using the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>.</span></span> <span data-ttu-id="3e259-120">El método `Dispose` deja el <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> en un estado no utilizable.</span><span class="sxs-lookup"><span data-stu-id="3e259-120">The `Dispose` method leaves the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> in an unusable state.</span></span> <span data-ttu-id="3e259-121">Después de llamar a `Dispose`, debe liberar todas las referencias a la <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> por lo que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> estaba ocupando.</span><span class="sxs-lookup"><span data-stu-id="3e259-121">After calling `Dispose`, you must release all references to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> was occupying.</span></span>  
  
 <span data-ttu-id="3e259-122">Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementar un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="3e259-122">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3e259-123">Realice siempre una llamada a `Dispose` antes de liberar la última referencia al objeto <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>.</span><span class="sxs-lookup"><span data-stu-id="3e259-123">Always call `Dispose` before you release your last reference to the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition>.</span></span> <span data-ttu-id="3e259-124">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> del objeto `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="3e259-124">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Composition.Hosting.AtomicComposition> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="atomicComposition.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="3e259-125">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="3e259-125"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="3e259-126">Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> y, de forma opcional, libera los recursos administrados.</span><span class="sxs-lookup"><span data-stu-id="3e259-126">Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : obj * obj -&gt; unit" Usage="atomicComposition.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="3e259-127">Clave que se va a guardar.</span><span class="sxs-lookup"><span data-stu-id="3e259-127">The key to save.</span></span></param>
        <param name="value"><span data-ttu-id="3e259-128">Valor que se va a guardar.</span><span class="sxs-lookup"><span data-stu-id="3e259-128">The value to save.</span></span></param>
        <summary><span data-ttu-id="3e259-129">Guarda un par clave-valor en la transacción para realizar el seguimiento del estado provisional.</span><span class="sxs-lookup"><span data-stu-id="3e259-129">Saves a key-value pair in the transaction to track tentative state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryGetValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3e259-130">Obtiene un valor guardado mediante el método <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-130">Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryGetValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetValue&lt;T&gt; (object key, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue&lt;T&gt;(object key, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue(Of T) (key As Object, ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; bool TryGetValue(System::Object ^ key, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : obj *  -&gt; bool" Usage="atomicComposition.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3e259-131">Tipo del valor que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3e259-131">The type of the value to be retrieved.</span></span></typeparam>
        <param name="key"><span data-ttu-id="3e259-132">Clave de la que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3e259-132">The key to retrieve from.</span></span></param>
        <param name="value"><span data-ttu-id="3e259-133">El valor recuperado.</span><span class="sxs-lookup"><span data-stu-id="3e259-133">The retrieved value.</span></span></param>
        <summary><span data-ttu-id="3e259-134">Obtiene un valor guardado mediante el método <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-134">Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="3e259-135">Es <see langword="true" /> si el valor se recupera correctamente; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-135"><see langword="true" /> if the value was successfully retrieved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetValue&lt;T&gt; (object key, bool localAtomicCompositionOnly, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue&lt;T&gt;(object key, bool localAtomicCompositionOnly, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.AtomicComposition.TryGetValue``1(System.Object,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue(Of T) (key As Object, localAtomicCompositionOnly As Boolean, ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; bool TryGetValue(System::Object ^ key, bool localAtomicCompositionOnly, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : obj * bool *  -&gt; bool" Usage="atomicComposition.TryGetValue (key, localAtomicCompositionOnly, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="localAtomicCompositionOnly" Type="System.Boolean" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="3e259-136">Tipo del valor que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3e259-136">The type of the value to be retrieved.</span></span></typeparam>
        <param name="key"><span data-ttu-id="3e259-137">Clave de la que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="3e259-137">The key to retrieve from.</span></span></param>
        <param name="localAtomicCompositionOnly"><span data-ttu-id="3e259-138"><see langword="true" /> para excluir las transacciones primarias; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-138"><see langword="true" /> to exclude parent transactions; otherwise, <see langword="false" />.</span></span></param>
        <param name="value"><span data-ttu-id="3e259-139">El valor recuperado.</span><span class="sxs-lookup"><span data-stu-id="3e259-139">The retrieved value.</span></span></param>
        <summary><span data-ttu-id="3e259-140">Obtiene un valor guardado mediante el método <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> con la opción de no buscar en las transacciones primarias.</span><span class="sxs-lookup"><span data-stu-id="3e259-140">Gets a value saved by the <see cref="M:System.ComponentModel.Composition.Hosting.AtomicComposition.SetValue(System.Object,System.Object)" /> method, with the option of not searching parent transactions.</span></span></summary>
        <returns><span data-ttu-id="3e259-141">Es <see langword="true" /> si el valor se recupera correctamente; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="3e259-141"><see langword="true" /> if the value was successfully retrieved; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>