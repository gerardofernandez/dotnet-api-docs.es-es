<Type Name="CodeBinaryOperatorExpression" FullName="System.CodeDom.CodeBinaryOperatorExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="413cd6d83c8f6f999ea2147581019afdb5c83ea5" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63912142" /></Metadata><TypeSignature Language="C#" Value="public class CodeBinaryOperatorExpression : System.CodeDom.CodeExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeBinaryOperatorExpression extends System.CodeDom.CodeExpression" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeBinaryOperatorExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeBinaryOperatorExpression&#xA;Inherits CodeExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeBinaryOperatorExpression : System::CodeDom::CodeExpression" />
  <TypeSignature Language="F#" Value="type CodeBinaryOperatorExpression = class&#xA;    inherit CodeExpression" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="54a08-101">Representa una expresión que consta de una operación binaria entre dos expresiones.</span><span class="sxs-lookup"><span data-stu-id="54a08-101">Represents an expression that consists of a binary operation between two expressions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a08-102"><xref:System.CodeDom.CodeBinaryOperatorExpression> puede utilizarse para representar expresiones de código que incluyen un operador binario.</span><span class="sxs-lookup"><span data-stu-id="54a08-102"><xref:System.CodeDom.CodeBinaryOperatorExpression> can be used to represent code expressions that include a binary operator.</span></span> <span data-ttu-id="54a08-103">Algunos ejemplos de operadores binarios son de igualdad (`==`), adición (`+`) y bit a bit (`|`) operadores.</span><span class="sxs-lookup"><span data-stu-id="54a08-103">Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators.</span></span> <span data-ttu-id="54a08-104">El <xref:System.CodeDom.CodeBinaryOperatorType> enumeración representa un conjunto de operadores binarios básicos y usados que se admiten en varios idiomas.</span><span class="sxs-lookup"><span data-stu-id="54a08-104">The <xref:System.CodeDom.CodeBinaryOperatorType> enumeration represents a set of basic, commonly used binary operators that are supported in many languages.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="54a08-105">En este ejemplo se muestra el uso de un <xref:System.CodeDom.CodeBinaryOperatorExpression> para sumar dos números.</span><span class="sxs-lookup"><span data-stu-id="54a08-105">This example demonstrates use of a <xref:System.CodeDom.CodeBinaryOperatorExpression> to add two numbers together.</span></span>  
  
 [!code-cpp[CodeBinaryOperatorExpression#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeBinaryOperatorExpression/CPP/codebinaryoperatorexpressionexample.cpp#2)]
 [!code-csharp[CodeBinaryOperatorExpression#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeBinaryOperatorExpression/CS/codebinaryoperatorexpressionexample.cs#2)]
 [!code-vb[CodeBinaryOperatorExpression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeBinaryOperatorExpression/VB/codebinaryoperatorexpressionexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeExpression" />
    <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="54a08-106">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</span><span class="sxs-lookup"><span data-stu-id="54a08-106">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeBinaryOperatorExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeBinaryOperatorExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="54a08-107">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</span><span class="sxs-lookup"><span data-stu-id="54a08-107">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeBinaryOperatorExpression (System.CodeDom.CodeExpression left, System.CodeDom.CodeBinaryOperatorType op, System.CodeDom.CodeExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression left, valuetype System.CodeDom.CodeBinaryOperatorType op, class System.CodeDom.CodeExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (left As CodeExpression, op As CodeBinaryOperatorType, right As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeBinaryOperatorExpression(System::CodeDom::CodeExpression ^ left, System::CodeDom::CodeBinaryOperatorType op, System::CodeDom::CodeExpression ^ right);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeBinaryOperatorExpression : System.CodeDom.CodeExpression * System.CodeDom.CodeBinaryOperatorType * System.CodeDom.CodeExpression -&gt; System.CodeDom.CodeBinaryOperatorExpression" Usage="new System.CodeDom.CodeBinaryOperatorExpression (left, op, right)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="left" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="op" Type="System.CodeDom.CodeBinaryOperatorType" />
        <Parameter Name="right" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="54a08-108"><see cref="T:System.CodeDom.CodeExpression" /> a la izquierda del operador.</span><span class="sxs-lookup"><span data-stu-id="54a08-108">The <see cref="T:System.CodeDom.CodeExpression" /> on the left of the operator.</span></span></param>
        <param name="op"><span data-ttu-id="54a08-109"><see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador.</span><span class="sxs-lookup"><span data-stu-id="54a08-109">A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indicating the type of operator.</span></span></param>
        <param name="right"><span data-ttu-id="54a08-110"><see cref="T:System.CodeDom.CodeExpression" /> a la derecha del operador.</span><span class="sxs-lookup"><span data-stu-id="54a08-110">The <see cref="T:System.CodeDom.CodeExpression" /> on the right of the operator.</span></span></param>
        <summary><span data-ttu-id="54a08-111">Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> utilizando los parámetros especificados.</span><span class="sxs-lookup"><span data-stu-id="54a08-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> class using the specified parameters.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Left { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.CodeDom.CodeExpression with get, set" Usage="System.CodeDom.CodeBinaryOperatorExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54a08-112">Obtiene o establece la expresión de código a la izquierda del operador.</span><span class="sxs-lookup"><span data-stu-id="54a08-112">Gets or sets the code expression on the left of the operator.</span></span></summary>
        <value><span data-ttu-id="54a08-113"><see cref="T:System.CodeDom.CodeExpression" /> que indica el operando izquierdo.</span><span class="sxs-lookup"><span data-stu-id="54a08-113">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the left operand.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeBinaryOperatorType Operator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.CodeBinaryOperatorType Operator" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Operator" />
      <MemberSignature Language="VB.NET" Value="Public Property Operator As CodeBinaryOperatorType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeBinaryOperatorType Operator { System::CodeDom::CodeBinaryOperatorType get(); void set(System::CodeDom::CodeBinaryOperatorType value); };" />
      <MemberSignature Language="F#" Value="member this.Operator : System.CodeDom.CodeBinaryOperatorType with get, set" Usage="System.CodeDom.CodeBinaryOperatorExpression.Operator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeBinaryOperatorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54a08-114">Obtiene o establece el operador de la expresión de operador binario.</span><span class="sxs-lookup"><span data-stu-id="54a08-114">Gets or sets the operator in the binary operator expression.</span></span></summary>
        <value><span data-ttu-id="54a08-115"><see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador de la expresión.</span><span class="sxs-lookup"><span data-stu-id="54a08-115">A <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> that indicates the type of operator in the expression.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54a08-116">Un operador binario realiza una evaluación en dos operandos.</span><span class="sxs-lookup"><span data-stu-id="54a08-116">A binary operator performs an evaluation on two operands.</span></span> <span data-ttu-id="54a08-117">Algunos ejemplos de operadores binarios son de igualdad (`==`), adición (`+`) y bit a bit (`|`) operadores.</span><span class="sxs-lookup"><span data-stu-id="54a08-117">Some examples of binary operators are equality (`==`), addition (`+`), and bitwise (`|`) operators.</span></span> <span data-ttu-id="54a08-118">Muchos operadores binarios frecuentes pueden encontrarse en el <xref:System.CodeDom.CodeBinaryOperatorType> enumeración.</span><span class="sxs-lookup"><span data-stu-id="54a08-118">Many commonly used binary operators can be found in the <xref:System.CodeDom.CodeBinaryOperatorType> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Right { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeBinaryOperatorExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public Property Right As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Right { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.CodeDom.CodeExpression with get, set" Usage="System.CodeDom.CodeBinaryOperatorExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="54a08-119">Obtiene o establece la expresión de código a la derecha del operador.</span><span class="sxs-lookup"><span data-stu-id="54a08-119">Gets or sets the code expression on the right of the operator.</span></span></summary>
        <value><span data-ttu-id="54a08-120"><see cref="T:System.CodeDom.CodeExpression" /> que indica el operando derecho.</span><span class="sxs-lookup"><span data-stu-id="54a08-120">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the right operand.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>