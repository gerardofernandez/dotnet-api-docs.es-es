<Type Name="SchemaNameCollection" FullName="System.DirectoryServices.SchemaNameCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3dc3bba1f0a93f9886a52033690a8f1d3b8f1402" /><Meta Name="ms.sourcegitcommit" Value="6ee2e6b2c5d7c5bd66feeb362d29e65fdf858836" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/15/2018" /><Meta Name="ms.locfileid" Value="51690655" /></Metadata><TypeSignature Language="C#" Value="public class SchemaNameCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SchemaNameCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.SchemaNameCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class SchemaNameCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaNameCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type SchemaNameCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="68d18-101">Contiene una lista de los nombres de esquema que puede usar la propiedad <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> de un objeto <see cref="T:System.DirectoryServices.DirectoryEntries" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-101">Contains a list of the schema names that the <see cref="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" /> property of a <see cref="T:System.DirectoryServices.DirectoryEntries" /> object can use.</span></span></summary>
    <remarks>To be added.</remarks>
    <altmember cref="N:System.DirectoryServices" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; int" Usage="schemaNameCollection.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-102">Nombre de esquema que se va a agregar a la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-102">The schema name to add to this collection.</span></span></param>
        <summary><span data-ttu-id="68d18-103">Anexa un nombre de esquema especificado a esta colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-103">Appends a specified schema name to this collection.</span></span></summary>
        <returns><span data-ttu-id="68d18-104">Índice de base cero del valor de propiedad especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-104">The zero-based index of the specified property value.</span></span> <span data-ttu-id="68d18-105">Si no se encuentra el objeto, el valor devuelto es -1.</span><span class="sxs-lookup"><span data-stu-id="68d18-105">If the object is not found, the return value is -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.DirectoryServices.SchemaNameCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.DirectoryServices.SchemaNameCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As SchemaNameCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::DirectoryServices::SchemaNameCollection ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.DirectoryServices.SchemaNameCollection -&gt; unit" Usage="schemaNameCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DirectoryServices.SchemaNameCollection" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-106"><see cref="T:System.DirectoryServices.SchemaNameCollection" /> que contiene los nombres de esquema que se van a agregar.</span><span class="sxs-lookup"><span data-stu-id="68d18-106">A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="68d18-107">Anexa un conjunto de nombres de esquema especificados a esta colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-107">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string[] -&gt; unit" Usage="schemaNameCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-108">Matriz de tipo <see cref="T:System.String" /> que contiene los nombres de esquema que se van a agregar.</span><span class="sxs-lookup"><span data-stu-id="68d18-108">An array of type <see cref="T:System.String" /> that contains the schema names to add.</span></span></param>
        <summary><span data-ttu-id="68d18-109">Anexa un conjunto de nombres de esquema especificados a esta colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-109">Appends a set of specified schema names to this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="schemaNameCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68d18-110">Quita todos los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-110">Removes all objects from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="schemaNameCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-111">Nombre de esquema que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="68d18-111">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="68d18-112">Determina si la colección contiene un nombre de esquema especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-112">Determines whether this collection contains a specified schema name.</span></span></summary>
        <returns><span data-ttu-id="68d18-113">El valor devuelto es <see langword="true" /> si la propiedad especificada es de esta colección; en caso contrario, se devuelve <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-113">The return value is <see langword="true" /> if the specified property belongs to this collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] stringArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(string[] stringArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (stringArray As String(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::String ^&gt; ^ stringArray, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : string[] * int -&gt; unit" Usage="schemaNameCollection.CopyTo (stringArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArray" Type="System.String[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stringArray"><span data-ttu-id="68d18-114">Matriz de tipo <see cref="T:System.String" /> que recibe los nombres de esquema de esta colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-114">An array of type <see cref="T:System.String" /> that receives this collection's schema names.</span></span></param>
        <param name="index"><span data-ttu-id="68d18-115">Índice de base cero de la matriz en que se comienzan a copiar los nombres de esquema.</span><span class="sxs-lookup"><span data-stu-id="68d18-115">The zero-based array index at which to begin copying the schema names.</span></span></param>
        <summary><span data-ttu-id="68d18-116">Copia los nombres de esquema de la colección en una matriz, comenzando en un índice determinado de la matriz.</span><span class="sxs-lookup"><span data-stu-id="68d18-116">Copies the schema names from this collection to an array, starting at a particular index of the array.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.DirectoryServices.SchemaNameCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68d18-117">La propiedad <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> obtiene el número de objetos de esta colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-117">The <see cref="P:System.DirectoryServices.SchemaNameCollection.Count" /> property gets the number of objects in this collection.</span></span></summary>
        <value><span data-ttu-id="68d18-118">Número de objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-118">The number of objects in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="schemaNameCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68d18-119">Devuelve un enumerador que puede utilizarse para recorrer en iteración la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-119">Returns an enumerator that you can use to iterate through this collection.</span></span></summary>
        <returns><span data-ttu-id="68d18-120">Enumerador que se puede usar para recorrer la colección en iteración.</span><span class="sxs-lookup"><span data-stu-id="68d18-120">An enumerator that you can used to iterate through this collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="schemaNameCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-121">Nombre de esquema que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="68d18-121">The schema name to search for.</span></span></param>
        <summary><span data-ttu-id="68d18-122">Determina el índice de un nombre de esquema especificado de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-122">Determines the index of a specified schema name in this collection.</span></span></summary>
        <returns><span data-ttu-id="68d18-123">Índice de base cero del nombre de esquema especificado o -1 si el nombre de esquema no se encontró en la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-123">The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; unit" Usage="schemaNameCollection.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68d18-124">Índice de base cero de la colección en que se va a insertar el nombre de esquema.</span><span class="sxs-lookup"><span data-stu-id="68d18-124">The zero-based index into the collection at which to insert the schema name.</span></span></param>
        <param name="value"><span data-ttu-id="68d18-125">Nombre de esquema que se va a insertar en la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-125">The schema name to insert into this collection.</span></span></param>
        <summary><span data-ttu-id="68d18-126">Inserta un nombre de esquema en la colección, en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-126">Inserts a schema name into this collection at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-127">Si el `index` parámetro es igual al número de elementos de la colección, este método agrega el valor al final de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-127">If the `index` parameter equals the number of items in the collection, this method appends the value to the end of the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[int] { System::String ^ get(int index); void set(int index, System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string with get, set" Usage="System.DirectoryServices.SchemaNameCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68d18-128">Índice de base cero de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-128">The zero-based index into the collection.</span></span></param>
        <summary><span data-ttu-id="68d18-129">Obtiene o establece el objeto que existe en un índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-129">Gets or sets the object that exists at a specified index.</span></span></summary>
        <value><span data-ttu-id="68d18-130">Objeto que existe en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-130">The object that exists at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-131">En C#, esta propiedad es el indizador para la clase <xref:System.DirectoryServices.SchemaNameCollection>.</span><span class="sxs-lookup"><span data-stu-id="68d18-131">In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.</span></span>  
  
 <span data-ttu-id="68d18-132">En JScript, puede usar las propiedades indizadas predeterminadas definidas por un tipo, pero no se puede definir explícitamente su propio.</span><span class="sxs-lookup"><span data-stu-id="68d18-132">In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own.</span></span> <span data-ttu-id="68d18-133">Sin embargo, especificar automáticamente el atributo expando en una clase proporciona una propiedad indizada predeterminada cuyo tipo es Object y cuyo tipo de índice es <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="68d18-133">However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="schemaNameCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-134">Nombre de esquema que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="68d18-134">The schema name to remove.</span></span></param>
        <summary><span data-ttu-id="68d18-135">Quita un nombre de esquema especificado de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-135">Removes a specified schema name from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="schemaNameCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68d18-136">Índice de base cero del nombre de esquema que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="68d18-136">The zero-based index of the schema name to remove.</span></span></param>
        <summary><span data-ttu-id="68d18-137">Quita el nombre de esquema que se encuentra en un índice especificado de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-137">Removes the schema name that is at a specified index from this collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="68d18-138">El índice de base cero es menor que cero o igual al tamaño de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-138">The zero-based index is either less than zero or equal to the size of the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="68d18-139"><see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-139">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span></span> <span data-ttu-id="68d18-140">La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</span><span class="sxs-lookup"><span data-stu-id="68d18-140">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="68d18-141">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</span><span class="sxs-lookup"><span data-stu-id="68d18-141">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="68d18-142">Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-142">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="68d18-143">El valor de <paramref name="array" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-143"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68d18-144"><paramref name="index" /> es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="68d18-144"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="68d18-145"><paramref name="array" /> es multidimensional.</span><span class="sxs-lookup"><span data-stu-id="68d18-145"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="68d18-146">O bien</span><span class="sxs-lookup"><span data-stu-id="68d18-146">-or-</span></span> 
<span data-ttu-id="68d18-147">El número de elementos de la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="68d18-147">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="68d18-148">El tipo de la <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo de la <paramref name="array" /> de destino.</span><span class="sxs-lookup"><span data-stu-id="68d18-148">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68d18-149">Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</span><span class="sxs-lookup"><span data-stu-id="68d18-149">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="68d18-150">Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-150"><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-151"><xref:System.Collections.ICollection.SyncRoot%2A> devuelve un objeto que puede utilizarse para sincronizar el acceso a <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="68d18-151"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="68d18-152">Clases de colección mayoría el <xref:System.Collections?displayProperty=nameWithType> espacio de nombres también implementan un método sincronizado, lo que proporciona un contenedor sincronizado alrededor de la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="68d18-152">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</span></span>  
  
 <span data-ttu-id="68d18-153">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="68d18-153">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68d18-154">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="68d18-154">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68d18-155">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="68d18-155">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="68d18-156">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="68d18-156">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="68d18-157">El ejemplo siguiente muestra cómo bloquear la colección utilizando el <xref:System.Collections.ICollection.SyncRoot%2A> durante toda la enumeración:</span><span class="sxs-lookup"><span data-stu-id="68d18-157">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
  lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68d18-158">Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-158">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></summary>
        <value><span data-ttu-id="68d18-159">Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-159">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-160">Para colecciones con un almacén subyacente no está disponible públicamente, la implementación esperada es devolver la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="68d18-160">For collections with an underlying store is not publicly available, the expected implementation is to return the current instance.</span></span> <span data-ttu-id="68d18-161">Tenga en cuenta que el puntero a la instancia actual puede no ser suficiente para las colecciones que contienen otras colecciones; los que deben devolver la colección subyacente `SyncRoot` propiedad.</span><span class="sxs-lookup"><span data-stu-id="68d18-161">Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.</span></span>  
  
 <span data-ttu-id="68d18-162">La mayoría de las clases de colección del espacio de nombres <xref:System.Collections?displayProperty=nameWithType> también implementan un método `Synchronized` que proporciona un contenedor sincronizado alrededor de la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="68d18-162">Most collection classes in the <xref:System.Collections?displayProperty=nameWithType> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection.</span></span> <span data-ttu-id="68d18-163">Sin embargo, las clases derivadas pueden proporcionar su propia versión sincronizada de la colección mediante la propiedad <xref:System.Collections.ICollection.SyncRoot%2A>.</span><span class="sxs-lookup"><span data-stu-id="68d18-163">However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="68d18-164">El código de sincronización debe realizar operaciones en el <xref:System.Collections.ICollection.SyncRoot%2A> de la colección, no directamente en la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-164">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection.</span></span> <span data-ttu-id="68d18-165">De este modo, se garantiza el funcionamiento correcto de las colecciones derivadas de otros objetos.</span><span class="sxs-lookup"><span data-stu-id="68d18-165">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="68d18-166">En concreto, mantiene la sincronización correcta con otros subprocesos que podrían modificar al mismo tiempo la instancia de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-166">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</span></span>  
  
 <span data-ttu-id="68d18-167">En ausencia de un `Synchronized` método en una colección, el uso esperado de <xref:System.Collections.ICollection.SyncRoot%2A> tiene este aspecto:</span><span class="sxs-lookup"><span data-stu-id="68d18-167">In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:</span></span>  
  
```csharp  
ICollection MyCollection =...  
 lock(MyCollection.SyncRoot) {  
  // Some operation on the collection, which is now thread safe.  
 }  
```  
  
```vb  
Dim myCollection as New ICollection()  
 SyncLock myCollection.SyncRoot  
  ' Some operation on the collection, which is now thread safe.  
 End SyncLock  
```  
  
 <span data-ttu-id="68d18-168">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="68d18-168">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="68d18-169">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="68d18-169">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="68d18-170">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="68d18-170">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="68d18-171">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="68d18-171">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="68d18-172">El ejemplo siguiente muestra cómo bloquear la colección utilizando el <xref:System.Collections.ICollection.SyncRoot%2A> durante toda la enumeración:</span><span class="sxs-lookup"><span data-stu-id="68d18-172">The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
```csharp  
ICollection myCollection = new ICollection();  
 lock(myCollection.SyncRoot) {  
  foreach (Object item in myCollection) {  
  // Insert your code here.  
  }  
 }  
```  
  
```vb  
Dim myCollection As New ICollection()  
 Dim item As Object  
 SyncLock myCollection.SyncRoot  
  For Each item In myCollection  
  ' Insert your code here.  
  Next item  
 End SyncLock  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-173">Elemento que va a agregarse a la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-173">The item to add to the list.</span></span></param>
        <summary><span data-ttu-id="68d18-174">Agrega un elemento a la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-174">Adds an item to the list.</span></span></summary>
        <returns><span data-ttu-id="68d18-175">Posición en la que se insertó el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="68d18-175">The position into which the new item was inserted.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-176">Valor que se va a buscar en la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-176">The value to locate in the list.</span></span></param>
        <summary><span data-ttu-id="68d18-177">Determina si la lista contiene un valor especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-177">Determines whether the list contains a specified value.</span></span></summary>
        <returns><span data-ttu-id="68d18-178">Es <see langword="true" /> si el valor se encuentra en la lista; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-178"><see langword="true" /> if the value is found in the list, otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-179">A partir de .NET Framework 2.0, este método utiliza al Equals y los métodos CompareTo de los objetos de la colección para determinar si el elemento no existe.</span><span class="sxs-lookup"><span data-stu-id="68d18-179">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="68d18-180">En las versiones anteriores de .NET Framework, esta determinación se realiza mediante el uso de Equals y CompareTo métodos del parámetro de elemento en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-180">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-181">Elemento que va a buscarse en la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-181">The item to locate in the list.</span></span></param>
        <summary><span data-ttu-id="68d18-182">Determina el índice de un elemento especificado de la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-182">Determines the index of a specified item in the list.</span></span></summary>
        <returns><span data-ttu-id="68d18-183">Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</span><span class="sxs-lookup"><span data-stu-id="68d18-183">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-184">A partir de .NET Framework 2.0, este método utiliza al Equals y los métodos CompareTo de los objetos de la colección para determinar si el elemento no existe.</span><span class="sxs-lookup"><span data-stu-id="68d18-184">Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists.</span></span> <span data-ttu-id="68d18-185">En las versiones anteriores de .NET Framework, esta determinación se realiza mediante el uso de Equals y CompareTo métodos del parámetro de elemento en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="68d18-185">In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68d18-186">Índice de base cero en el que se debe insertar el valor.</span><span class="sxs-lookup"><span data-stu-id="68d18-186">The zero-based index at which value should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="68d18-187">Elemento que va a insertarse en la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-187">The item to insert into the list.</span></span></param>
        <summary><span data-ttu-id="68d18-188">Inserta un elemento en la lista del índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-188">Inserts an item to the list at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-189">Si `index` es igual al número de elementos en la lista, a continuación, *valor* se anexa al final.</span><span class="sxs-lookup"><span data-stu-id="68d18-189">If `index` equals the number of items in the list, then *value* is appended to the end.</span></span>  
  
 <span data-ttu-id="68d18-190">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="68d18-190">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="68d18-191">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="68d18-191">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68d18-192">Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</span><span class="sxs-lookup"><span data-stu-id="68d18-192">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="68d18-193">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-193"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-194">Una colección de tamaño fijo no permite agregar o quitar elementos una vez que se ha creado, pero sí permite modificar los elementos existentes.</span><span class="sxs-lookup"><span data-stu-id="68d18-194">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="68d18-195">Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="68d18-195">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="68d18-196">Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-196"><see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-197">Una colección de solo lectura no permite que se agreguen, quiten o modifiquen elementos una vez que se ha creado.</span><span class="sxs-lookup"><span data-stu-id="68d18-197">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="68d18-198">Índice de base cero del elemento que se va a obtener o establecer.</span><span class="sxs-lookup"><span data-stu-id="68d18-198">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="68d18-199">Obtiene o establece el elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-199">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="68d18-200">Elemento en el índice especificado.</span><span class="sxs-lookup"><span data-stu-id="68d18-200">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-201">Esta propiedad permite obtener acceso a un elemento específico de la colección utilizando la sintaxis siguiente: `myCollection[index]`.</span><span class="sxs-lookup"><span data-stu-id="68d18-201">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="68d18-202"><paramref name="index" /> no es un índice válido para <see cref="T:System.Collections.IList" />.</span><span class="sxs-lookup"><span data-stu-id="68d18-202"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="68d18-203">La propiedad está establecida y <see cref="T:System.Collections.IList" /> es de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="68d18-203">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="68d18-204"><paramref name="value" /> que se va a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-204">The <paramref name="value" /> to remove from the list.</span></span></param>
        <summary><span data-ttu-id="68d18-205">Quita la primera aparición de un valor <paramref name="value" /> específico de la lista.</span><span class="sxs-lookup"><span data-stu-id="68d18-205">Removes the first occurrence of a specific <paramref name="value" /> from the list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68d18-206">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="68d18-206">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="68d18-207">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="68d18-207">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>