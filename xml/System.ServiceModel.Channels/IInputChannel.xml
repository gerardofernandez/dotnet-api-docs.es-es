<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6df1443c8d9a66bd254eeca1f04d6404228dcf12" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56762539" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="99d0c-101">Define la interfaz que un canal debe implementar para recibir un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="99d0c-102">El contrato <xref:System.ServiceModel.Channels.IInputChannel> incluye variantes sincrónicas y asincrónicas de la funcionalidad de recepción, de intento de recepción y de espera por un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="99d0c-103">El modelo de incorporación de cambios se utiliza normalmente con <xref:System.ServiceModel.Channels.IInputChannel> para recibir los mensajes: llama a <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (para "incorporar cambios" en un mensaje del canal) y, a continuación, espera a que llegue un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="99d0c-104">Un modelo del uso alternativo es llamar a <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> o a <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>y, a continuación, llamar a <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="99d0c-105">Este enfoque es común para los usos transaccionales donde se inicia la transacción entre las llamadas a <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> y a <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="99d0c-106">Un <xref:System.ServiceModel.Channels.IInputChannel> no está necesariamente enlazado a un remitente único.</span><span class="sxs-lookup"><span data-stu-id="99d0c-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="99d0c-107">Otros canales e interfaces de canal pueden proporcionar una correlación entre los remitentes determinados y <xref:System.ServiceModel.Channels.IInputChannel>, pero el contrato base no hace ninguna restricción así.</span><span class="sxs-lookup"><span data-stu-id="99d0c-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="99d0c-108">Una implementación puede crear un <xref:System.ServiceModel.Channels.IInputChannel> nuevo para cada mensaje o reutilizar el mismo <xref:System.ServiceModel.Channels.IInputChannel> para varios mensajes y remitentes.</span><span class="sxs-lookup"><span data-stu-id="99d0c-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="99d0c-109">Comienza una operación de recepción asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-110">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="99d0c-111">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="99d0c-112">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="99d0c-113">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="99d0c-114">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="99d0c-115">Comienza una operación asincrónica para recibir un mensaje que tiene un objeto de estados asociado a él.</span><span class="sxs-lookup"><span data-stu-id="99d0c-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="99d0c-116"><see cref="T:System.IAsyncResult" /> que hace referencia a la recepción asincrónica de un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-117">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="99d0c-118">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="99d0c-119">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="99d0c-120">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="99d0c-121">La operación no se completa hasta que haya un mensaje disponible en el canal.</span><span class="sxs-lookup"><span data-stu-id="99d0c-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-122">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-123"><see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="99d0c-124">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="99d0c-125">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="99d0c-126">Comienza una operación asincrónica para recibir un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</span><span class="sxs-lookup"><span data-stu-id="99d0c-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="99d0c-127"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación de recepción asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-128">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="99d0c-129">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="99d0c-130">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="99d0c-131">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-132">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-133">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-134">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="99d0c-135">La operación inicia <see cref="T:System.TimeoutException" /> si se supera el <paramref name="timeout" /> especificado antes de que se complete.</span><span class="sxs-lookup"><span data-stu-id="99d0c-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-136"><see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="99d0c-137">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="99d0c-138">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="99d0c-139">Comienza una operación asincrónica para recibir un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</span><span class="sxs-lookup"><span data-stu-id="99d0c-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="99d0c-140"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación de recepción asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-141">Si desea que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="99d0c-142">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> sincrónico cuando sea aceptable bloquear el subproceso actual mientras este responde al mensaje de solicitud o hasta que se supere el intervalo del tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="99d0c-143">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="99d0c-144">Si va a administrar los tiempos de espera y no sólo reiniciar o encapsular <xref:System.TimeoutException>, debería llamar a <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> en lugar de <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="99d0c-145">Si no va a tratar especialmente los tiempos de espera, llame a <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, de lo contrario perderá información de error.</span><span class="sxs-lookup"><span data-stu-id="99d0c-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-146">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-147">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-148">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="99d0c-149">La operación devuelve <see langword="false" /> de <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> si se supera el <paramref name="timeout" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-150"><see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="99d0c-151">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="99d0c-152">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="99d0c-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="99d0c-153">Comienza una operación asincrónica para esperar a que llegue un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</span><span class="sxs-lookup"><span data-stu-id="99d0c-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="99d0c-154"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación asincrónica de espera a que llegue un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-155">Si es necesario que la aplicación siga realizando sus procesos sin esperar a que llegue el mensaje, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="99d0c-156">Utilice el método sincrónico <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> cuando sea aceptable bloquear el subproceso actual mientras espera a que llegue un mensaje de solicitud a la cola.</span><span class="sxs-lookup"><span data-stu-id="99d0c-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="99d0c-157">El subproceso está bloqueado hasta el `timeout`especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="99d0c-158">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="99d0c-159">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-160">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-161">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-162">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="99d0c-163">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado, no una excepción de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="99d0c-164">La interfaz <see cref="T:System.IAsyncResult" /> devuelta por una llamada a uno de los métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="99d0c-165">Completa una operación asincrónica para recibir un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="99d0c-166">La clase <see cref="T:System.ServiceModel.Channels.Message" /> recibida.</span><span class="sxs-lookup"><span data-stu-id="99d0c-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99d0c-167">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult *  -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="99d0c-168">La interfaz <see cref="T:System.IAsyncResult" /> devuelta por una llamada al método <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="99d0c-169">La clase <see cref="T:System.ServiceModel.Channels.Message" /> recibida.</span><span class="sxs-lookup"><span data-stu-id="99d0c-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="99d0c-170">Completa la operación asincrónica especificada para recibir un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="99d0c-171"><see langword="true" /> si se recibe un mensaje antes de que transcurra un intervalo de tiempo especificado; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99d0c-172">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="99d0c-173">La interfaz <see cref="T:System.IAsyncResult" /> que identifica la operación del método <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> que va a finalizar y de la que se va a recuperar un resultado final.</span><span class="sxs-lookup"><span data-stu-id="99d0c-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="99d0c-174">Completa la operación asincrónica especificada de espera por un mensaje.</span><span class="sxs-lookup"><span data-stu-id="99d0c-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns><span data-ttu-id="99d0c-175"><see langword="true" /> si llega un mensaje antes de que se haya superado <paramref name="timeout" />; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="99d0c-176">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99d0c-177">Obtiene la dirección en la que este canal de entrada recibe los mensajes.</span><span class="sxs-lookup"><span data-stu-id="99d0c-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="99d0c-178"><see cref="T:System.ServiceModel.EndpointAddress" /> en el que el canal de entrada recibe los mensajes.</span><span class="sxs-lookup"><span data-stu-id="99d0c-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-179">Si este canal de entrada no tiene una dirección independiente (por ejemplo, es el lado de entrada de un canal TCP iniciado por cliente), esta propiedad es `null`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="99d0c-180">Canales del nivel más alto pueden utilizar esta propiedad a efectos de la correlación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="99d0c-181">Por ejemplo, si un canal de nivel más alto implementa la solicitud-respuesta sobre <xref:System.ServiceModel.Channels.IDuplexChannel>, puede utilizar la propiedad <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> en el encabezado de WS-Addressing ReplyTo.</span><span class="sxs-lookup"><span data-stu-id="99d0c-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-182">El código siguiente muestra cómo implementar esta propiedad:</span><span class="sxs-lookup"><span data-stu-id="99d0c-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="99d0c-183">La operación no se completó en el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="99d0c-184">Se ha producido un error en el canal de entrada.</span><span class="sxs-lookup"><span data-stu-id="99d0c-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="99d0c-185">Se ha anulado el canal de entrada.</span><span class="sxs-lookup"><span data-stu-id="99d0c-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="99d0c-186">Se ha generado un error en el canal de entrada.</span><span class="sxs-lookup"><span data-stu-id="99d0c-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="99d0c-187">Devuelve un mensaje recibido por el canal de entrada si está disponible con un intervalo de tiempo definido de forma explícita o implícita.</span><span class="sxs-lookup"><span data-stu-id="99d0c-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-188">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="99d0c-189">Si es necesario que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="99d0c-190">La operación <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="99d0c-191">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99d0c-192">Devuelve el mensaje recibido si está disponible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="99d0c-193">Si no hay un mensaje disponible, se bloquea durante un intervalo de tiempo predeterminado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="99d0c-194">La clase <see cref="T:System.ServiceModel.Channels.Message" /> recibida.</span><span class="sxs-lookup"><span data-stu-id="99d0c-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-195">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="99d0c-196">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="99d0c-197">La operación <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="99d0c-198">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="99d0c-199">Se puede llamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> varias veces o simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="99d0c-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="99d0c-200">Sólo se puede completar una llamada <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> por cada mensaje recibido.</span><span class="sxs-lookup"><span data-stu-id="99d0c-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-201">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-202"><see cref="T:System.TimeSpan" /> que especifica cuánto tiempo tiene una operación de recepción antes de expirar e iniciar <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="99d0c-203">Devuelve el mensaje recibido si está disponible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="99d0c-204">Si no hay un mensaje disponible, se bloquea durante un intervalo de tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="99d0c-205">La clase <see cref="T:System.ServiceModel.Channels.Message" /> recibida.</span><span class="sxs-lookup"><span data-stu-id="99d0c-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-206">Utilice el método <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por `timeout`.</span><span class="sxs-lookup"><span data-stu-id="99d0c-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="99d0c-207">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="99d0c-208">La operación <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> sincrónica está disponible con o sin un tiempo de espera explícito.</span><span class="sxs-lookup"><span data-stu-id="99d0c-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="99d0c-209">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="99d0c-210">Se puede llamar <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> varias veces o simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="99d0c-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="99d0c-211">Sólo se puede completar una llamada <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> por cada mensaje recibido.</span><span class="sxs-lookup"><span data-stu-id="99d0c-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-212">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-213">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-214">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan *  -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-215">La interfaz <see cref="T:System.IAsyncResult" /> devuelta por una llamada a uno de los métodos <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="99d0c-216">La clase <see cref="T:System.ServiceModel.Channels.Message" /> recibida.</span><span class="sxs-lookup"><span data-stu-id="99d0c-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="99d0c-217">Intenta recibir un mensaje dentro de un intervalo de tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="99d0c-218"><see langword="true" /> si se recibe un mensaje antes de que se haya superado <paramref name="timeout" />; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-219">Si va a administrar los tiempos de espera y no sólo reiniciar o encapsular <xref:System.TimeoutException>, debería llamar a <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> en lugar de <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="99d0c-220">Si no va a tratar especialmente los tiempos de espera, llame a <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, de lo contrario perderá información de error.</span><span class="sxs-lookup"><span data-stu-id="99d0c-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-221">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-222">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-223">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="99d0c-224">La estructura <see cref="T:System.TimeSpan" /> especifica el intervalo de tiempo máximo de espera anterior a la llegada de un mensaje antes de que se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="99d0c-225">Devuelve un valor que indica si un mensaje ha llegado dentro de un intervalo especificado de hora.</span><span class="sxs-lookup"><span data-stu-id="99d0c-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="99d0c-226"><see langword="true" /> si llega un mensaje antes de que se haya superado <paramref name="timeout" />; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="99d0c-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99d0c-227">Llamar a <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> no resulta en un mensaje recibido o procesado de otra forma.</span><span class="sxs-lookup"><span data-stu-id="99d0c-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="99d0c-228">El método <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> existe principalmente para los escenarios con transacción donde donde el usuario desea recibir el mensaje mediante una transacción.</span><span class="sxs-lookup"><span data-stu-id="99d0c-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="99d0c-229">Al utilizar normalmente sólo <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> para esto, el usuario debe crear la transacción y, a continuación, llamar a <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> y esperar que el mensaje llegue antes de que expire la transacción, lo que puede no ser posible.</span><span class="sxs-lookup"><span data-stu-id="99d0c-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="99d0c-230">Si no, el usuario puede llamar a <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> y especificar el tiempo de espera deseado (incluso infinito); a continuación, cuando llega un mensaje, puede abrir la transacción, llamar a <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> y estar seguro que pueden recibir el mensaje antes de que la transacción expire.</span><span class="sxs-lookup"><span data-stu-id="99d0c-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="99d0c-231">Este método es sincrónico, por lo que se bloquea el subproceso actual hasta que haya un mensaje disponible o hasta que finalice el tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="99d0c-232">Utilice <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> cuando se acepte bloquear el subproceso actual mientras se espera a que llegue un mensaje a la cola.</span><span class="sxs-lookup"><span data-stu-id="99d0c-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="99d0c-233">El subproceso está bloqueado hasta el `timeout`especificado.</span><span class="sxs-lookup"><span data-stu-id="99d0c-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="99d0c-234">Si es necesario que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="99d0c-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99d0c-235">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="99d0c-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="99d0c-236">Se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="99d0c-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="99d0c-237">El tiempo de espera especificado es menor que cero.</span><span class="sxs-lookup"><span data-stu-id="99d0c-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="99d0c-238">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado, no una excepción de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="99d0c-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>