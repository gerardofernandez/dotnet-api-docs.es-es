<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f29f7baff433903ab6dc8a2000608ecb9aa43223" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51319509" /></Metadata><TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="6157f-101">Define la interfaz que un canal debe implementar para estar en el lado receptor de una comunicación de solicitud-respuesta entre los puntos de conexión de la mensajería.</span><span class="sxs-lookup"><span data-stu-id="6157f-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="6157f-102">La interfaz <xref:System.ServiceModel.Channels.IReplyChannel> incluye variantes sincrónicas y asincrónicas de un método <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> y devuelve un <xref:System.ServiceModel.Channels.RequestContext> que se puede utilizar para construir las respuestas a las solicitudes recibidas.</span><span class="sxs-lookup"><span data-stu-id="6157f-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="6157f-103">El contrato incluye variantes sincrónicas y asincrónicas de la funcionalidad de recepción, de intento de recepción y de espera por un mensaje.</span><span class="sxs-lookup"><span data-stu-id="6157f-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="6157f-104">Un <xref:System.ServiceModel.Channels.IReplyChannel> no está necesariamente enlazado a un remitente único.</span><span class="sxs-lookup"><span data-stu-id="6157f-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="6157f-105">Otros canales e interfaces de canal proporcionan la correlación entre el remitente y el canal de la respuesta, pero el contrato base no hace ese tipo de restricción.</span><span class="sxs-lookup"><span data-stu-id="6157f-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="6157f-106">El modelo de extracción se utiliza con <xref:System.ServiceModel.Channels.IReplyChannel> para recibir los mensajes.</span><span class="sxs-lookup"><span data-stu-id="6157f-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="6157f-107">Este modelo consiste en llamar a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (o a una de sus variantes) y a continuación esperar a que llegue un mensaje.</span><span class="sxs-lookup"><span data-stu-id="6157f-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6157f-108">Comienza una operación asincrónica para recibir una solicitud disponible.Comienza una operación asincrónica para recibir una solicitud disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-108">Begins an asynchronous operation to receive an available request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="6157f-109">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la recepción asincrónica que completa una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="6157f-110">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la recepción asincrónica de una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="6157f-111">Comienza una operación asincrónica para recibir una solicitud disponible con un tiempo de espera predeterminado.</span><span class="sxs-lookup"><span data-stu-id="6157f-111">Begins an asynchronous operation to receive an available request with a default timeout.</span></span></summary>
        <returns><span data-ttu-id="6157f-112"><see cref="T:System.IAsyncResult" /> que hace referencia a la recepción asincrónica de una solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-113">El <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> método implementa el patrón estándar para invocar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="6157f-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="6157f-114">El tiempo de espera predeterminado es 1 minuto.</span><span class="sxs-lookup"><span data-stu-id="6157f-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="6157f-115">Si se establece un tiempo de espera de recepción en el enlace utilizado para configurar la conexión, se utiliza ese valor.</span><span class="sxs-lookup"><span data-stu-id="6157f-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="6157f-116">Utilice <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> si desea especificar un tiempo de espera explícito con la llamada que invalida estos otros valores.</span><span class="sxs-lookup"><span data-stu-id="6157f-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="6157f-117">Si el mensaje de solicitud recibido es mayor que el tamaño del mensaje máximo permitido por el enlace utilizado, se produce una excepción de la clase <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="6157f-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="6157f-118">La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo.</span><span class="sxs-lookup"><span data-stu-id="6157f-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="6157f-119">El valor predeterminado es 65536 bytes.</span><span class="sxs-lookup"><span data-stu-id="6157f-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-120">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-121"><see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo que hay que esperar para recibir una solicitud disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="6157f-122">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la recepción asincrónica que completa una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="6157f-123">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la recepción asincrónica de una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="6157f-124">Comienza una operación asincrónica para recibir una solicitud disponible con un tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span></span></summary>
        <returns><span data-ttu-id="6157f-125"><see cref="T:System.IAsyncResult" /> que hace referencia a la recepción asincrónica de una solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-126">El <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> método implementa el patrón estándar para invocar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asincrónicamente.</span><span class="sxs-lookup"><span data-stu-id="6157f-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="6157f-127">El tiempo de espera establecido en este método invalida el tiempo de espera de recepción establecido en el enlace utilizado para configurar la conexión.</span><span class="sxs-lookup"><span data-stu-id="6157f-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="6157f-128">Si el mensaje de solicitud recibido es mayor que el tamaño del mensaje máximo permitido por el enlace utilizado, se produce una excepción de la clase <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="6157f-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="6157f-129">La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo.</span><span class="sxs-lookup"><span data-stu-id="6157f-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="6157f-130">El valor predeterminado es 65536 bytes.</span><span class="sxs-lookup"><span data-stu-id="6157f-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-131">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-132"><see cref="T:System.TimeSpan" /> que especifica cuánto tiempo tiene una operación de solicitud de recepción antes de expirar y devolver <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="6157f-133">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la recepción asincrónica que completa una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="6157f-134">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la recepción asincrónica de una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="6157f-135">Comienza una operación asincrónica para recibir un mensaje de solicitud que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</span><span class="sxs-lookup"><span data-stu-id="6157f-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="6157f-136"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación asincrónica de una solicitud de recepción.</span><span class="sxs-lookup"><span data-stu-id="6157f-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-137">Si es necesario que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="6157f-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="6157f-138">Utilice uno de los métodos <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> sincrónicos cuando sea aceptable bloquear el subproceso actual mientras este responde al mensaje de solicitud o hasta que se supere el intervalo del tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="6157f-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="6157f-139">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</span><span class="sxs-lookup"><span data-stu-id="6157f-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="6157f-140">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="6157f-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-141">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6157f-142">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-143"><see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo que hay que esperar para recibir una solicitud disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="6157f-144">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la recepción asincrónica que completa una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="6157f-145">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la recepción asincrónica de una operación de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="6157f-146">Comienza una operación de solicitud asincrónica que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</span><span class="sxs-lookup"><span data-stu-id="6157f-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="6157f-147"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación asincrónica de espera a que llegue un mensaje de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-148">Utilice el método sincrónico <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> cuando sea aceptable bloquear el subproceso actual mientras este espera a que llegue un mensaje de solicitud a la cola.</span><span class="sxs-lookup"><span data-stu-id="6157f-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="6157f-149">El subproceso está bloqueado hasta el `timeout`especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="6157f-150">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</span><span class="sxs-lookup"><span data-stu-id="6157f-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="6157f-151">La operación no se completa hasta que haya un mensaje de solicitud disponible en el canal o se agote el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="6157f-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-152">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6157f-153">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="6157f-154">El <see cref="T:System.IAsyncResult" /> devuelto por una llamada al método <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="6157f-155">Completa una operación asincrónica para recibir una solicitud disponible.Comienza una operación asincrónica para recibir una solicitud disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-155">Completes an asynchronous operation to receive an available request.</span></span></summary>
        <returns><span data-ttu-id="6157f-156"><see cref="T:System.ServiceModel.Channels.RequestContext" /> utilizado para construir una respuesta a la solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-157">Si el mensaje de solicitud recibido es mayor que el tamaño del mensaje máximo permitido por el enlace utilizado, se produce una excepción de la clase <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="6157f-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="6157f-158">La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo.</span><span class="sxs-lookup"><span data-stu-id="6157f-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="6157f-159">El valor predeterminado es 65536 bytes.</span><span class="sxs-lookup"><span data-stu-id="6157f-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-160">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6157f-161">La operación debería iniciar <see cref="T:System.TimeoutException" /> si se supera el <paramref name="timeout" /> especificado antes de que se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="6157f-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult *  -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="6157f-162">El <see cref="T:System.IAsyncResult" /> devuelto por una llamada al método <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="context"><span data-ttu-id="6157f-163"><see cref="T:System.ServiceModel.Channels.RequestContext" /> recibido.</span><span class="sxs-lookup"><span data-stu-id="6157f-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="6157f-164">Completa la operación asincrónica especificada para recibir un mensaje de solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-164">Completes the specified asynchronous operation to receive a request message.</span></span></summary>
        <returns><span data-ttu-id="6157f-165"><see langword="true" /> si se recibe un mensaje de solicitud antes de que transcurra un intervalo de tiempo especificado; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-165"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6157f-166">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="6157f-167">El <see cref="T:System.IAsyncResult" /> que identifica la operación <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> que va a terminar y de la que se va a recuperar un resultado final.</span><span class="sxs-lookup"><span data-stu-id="6157f-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="6157f-168">Completa la operación asincrónica especificada de espera por una solicitud.</span><span class="sxs-lookup"><span data-stu-id="6157f-168">Completes the specified asynchronous wait-for-a-request message operation.</span></span></summary>
        <returns><span data-ttu-id="6157f-169"><see langword="true" /> si se recibe una solicitud antes de que transcurra un intervalo de tiempo especificado; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-169"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6157f-170">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6157f-171">Obtiene la dirección en la que este canal de respuesta recibe los mensajes.</span><span class="sxs-lookup"><span data-stu-id="6157f-171">Gets the address on which this reply channel receives messages.</span></span></summary>
        <value><span data-ttu-id="6157f-172"><see cref="T:System.ServiceModel.EndpointAddress" /> en el que este canal de respuesta recibe los mensajes.</span><span class="sxs-lookup"><span data-stu-id="6157f-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6157f-173">El código siguiente muestra cómo implementar esta propiedad:</span><span class="sxs-lookup"><span data-stu-id="6157f-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6157f-174">Devuelve el contexto de la solicitud recibida si está disponible</span><span class="sxs-lookup"><span data-stu-id="6157f-174">Returns the context of the request received, if one is available</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6157f-175">Devuelve el contexto de la solicitud recibida si está disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-175">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="6157f-176">Si el contexto no está disponible, espera hasta que haya uno disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-176">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="6157f-177"><see cref="T:System.ServiceModel.Channels.RequestContext" /> que se utiliza para construir respuestas.</span><span class="sxs-lookup"><span data-stu-id="6157f-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-178"><xref:System.ServiceModel.Channels.RequestContext> encapsula el mensaje de solicitud y un mecanismo para responder a ese mensaje.</span><span class="sxs-lookup"><span data-stu-id="6157f-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="6157f-179">Se puede llamar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> varias veces o simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="6157f-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="6157f-180">Sólo se completa una llamada <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> por solicitud recibida.</span><span class="sxs-lookup"><span data-stu-id="6157f-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="6157f-181">Si el mensaje de solicitud recibido es mayor que el tamaño del mensaje máximo permitido por el enlace utilizado, se produce una excepción de la clase <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="6157f-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="6157f-182">La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo.</span><span class="sxs-lookup"><span data-stu-id="6157f-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="6157f-183">El valor predeterminado es 65536 bytes.</span><span class="sxs-lookup"><span data-stu-id="6157f-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-184">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-185"><see cref="T:System.TimeSpan" /> que especifica cuánto tiempo tiene una operación de solicitud antes de expirar y devolver <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6157f-186">Devuelve el contexto de la solicitud recibida si está disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-186">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="6157f-187">Si el contexto no está disponible, espera hasta que haya uno disponible.</span><span class="sxs-lookup"><span data-stu-id="6157f-187">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="6157f-188"><see cref="T:System.ServiceModel.Channels.RequestContext" /> que se utiliza para construir respuestas.</span><span class="sxs-lookup"><span data-stu-id="6157f-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-189"><xref:System.ServiceModel.Channels.RequestContext> encapsula el mensaje de solicitud y un mecanismo para responder a ese mensaje.</span><span class="sxs-lookup"><span data-stu-id="6157f-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="6157f-190">Se puede llamar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> varias veces o simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="6157f-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="6157f-191">Sólo se completa una llamada <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> por solicitud recibida.</span><span class="sxs-lookup"><span data-stu-id="6157f-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="6157f-192">Si el mensaje de solicitud recibido es mayor que el tamaño del mensaje máximo permitido por el enlace utilizado, se produce una excepción de la clase <xref:System.ServiceModel.QuotaExceededException>.</span><span class="sxs-lookup"><span data-stu-id="6157f-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="6157f-193">La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo.</span><span class="sxs-lookup"><span data-stu-id="6157f-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="6157f-194">El valor predeterminado es 65536 bytes.</span><span class="sxs-lookup"><span data-stu-id="6157f-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-195">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan *  -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-196"><see cref="T:System.TimeSpan" /> que especifica cuánto tiempo tiene una operación de solicitud antes de expirar y devolver <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="context"><span data-ttu-id="6157f-197"><see cref="T:System.ServiceModel.Channels.RequestContext" /> recibido.</span><span class="sxs-lookup"><span data-stu-id="6157f-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="6157f-198">Devuelve un valor que indica si una solicitud se recibe antes de que transcurra un intervalo de tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="6157f-199"><see langword="true" /> si se recibe un mensaje de solicitud antes de que transcurra un intervalo de tiempo especificado; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-199"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-200">Utilice <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> cuando sea aceptable bloquear el subproceso actual mientras se espera a que llegue un mensaje de solicitud a la cola.</span><span class="sxs-lookup"><span data-stu-id="6157f-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="6157f-201">El subproceso está bloqueado hasta el `timeout`especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="6157f-202">Si es necesario que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="6157f-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-203">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6157f-204">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="6157f-205"><see cref="T:System.TimeSpan" /> que especifica cuánto tiempo tiene una operación de solicitud antes de expirar y devolver <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="6157f-206">Devuelve un valor que indica si un mensaje de solicitud se recibe antes de que transcurra un intervalo de tiempo especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="6157f-207"><see langword="true" /> si se recibe una solicitud antes de que transcurra un intervalo de tiempo especificado; de lo contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6157f-207"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6157f-208">Llamar <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> no resulta en un mensaje de solicitud recibido o procesado de forma alguna.</span><span class="sxs-lookup"><span data-stu-id="6157f-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="6157f-209">El método <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> existe principalmente para los escenarios con transacción donde donde el usuario desea recibir el mensaje mediante una transacción.</span><span class="sxs-lookup"><span data-stu-id="6157f-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="6157f-210">Al utilizar normalmente <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> para esto, el usuario debe crear la transacción y, a continuación, llamar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> y esperar que el mensaje llegue antes de que expire la transacción, lo que puede no ser posible.</span><span class="sxs-lookup"><span data-stu-id="6157f-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="6157f-211">En su lugar, el usuario puede llamar <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> y especificar el tiempo de espera (incluso infinito); a continuación, cuando llega un mensaje, puede abrir la transacción, llamar <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> y estar seguro que pueden recibir el mensaje antes de que la transacción expire.</span><span class="sxs-lookup"><span data-stu-id="6157f-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="6157f-212">Utilice <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> cuando se acepte bloquear el subproceso actual mientras se espera a que llegue un mensaje a la cola.</span><span class="sxs-lookup"><span data-stu-id="6157f-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="6157f-213">El subproceso está bloqueado hasta el `timeout`especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="6157f-214">Si es necesario que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="6157f-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6157f-215">El código siguiente muestra cómo implementar este método:</span><span class="sxs-lookup"><span data-stu-id="6157f-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="6157f-216">La operación devuelve <see langword="false" /> si se supera el <paramref name="timeout" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="6157f-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>