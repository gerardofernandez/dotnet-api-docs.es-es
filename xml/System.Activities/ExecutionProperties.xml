<Type Name="ExecutionProperties" FullName="System.Activities.ExecutionProperties">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04305045deaa17d1561494c14601cbcd9c2a07d0" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51315050" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExecutionProperties : System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutionProperties extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Activities.ExecutionProperties" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionProperties&#xA;Implements IEnumerable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionProperties sealed : System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type ExecutionProperties = class&#xA;    interface seq&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="9bfb2-101">Representa la colección de propiedades en un ámbito determinado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-101">Represents the collection of properties at a particular scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bfb2-102">A través del almacenamiento local de subprocesos (TLS), el CLR mantiene un contexto de ejecución para cada subproceso.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-102">Through thread local storage (TLS), the CLR maintains an execution context for each thread.</span></span> <span data-ttu-id="9bfb2-103">Este contexto de ejecución rige propiedades de subproceso bien conocidas, como la identidad del subproceso, la transacción ambiente y el conjunto de permisos actual así como las propiedades de subproceso definidas por el usuario como ranuras con nombre.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-103">This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.</span></span>  
  
 <span data-ttu-id="9bfb2-104">A diferencia de los programas que tienen por objetivo directo el CLR, los programas de flujo de trabajo son árboles con ámbito jerárquico que se ejecutan en un entorno independiente del subproceso.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-104">Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment.</span></span> <span data-ttu-id="9bfb2-105">Esto implica que los mecanismos de TLS estándar no se pueden usar directamente para determinar qué contexto está en ámbito de un elemento de trabajo determinado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-105">This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item.</span></span> <span data-ttu-id="9bfb2-106">Por ejemplo, dos bifurcaciones paralelas de ejecución podrían utilizar distintas identidades, aunque el programador podría intercalar su ejecución en el mismo subproceso de CLR.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-106">For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.</span></span>  
  
 <span data-ttu-id="9bfb2-107">Las propiedades de ejecución permiten a una actividad declarar qué propiedades están en ámbito para su subárbol, así como proporcionar enlaces para configurar y destruir el TLS para interoperar correctamente con objetos CLR.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-107">Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9bfb2-108">Registra una nueva propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-108">Registers a new property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj -&gt; unit" Usage="executionProperties.Add (name, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9bfb2-109">Nombre de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-109">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="9bfb2-110">Objeto que representa la propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-110">The object that represents the property.</span></span></param>
        <summary><span data-ttu-id="9bfb2-111">Registra una nueva propiedad usando el nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-111">Registers a new property using the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property, bool onlyVisibleToPublicChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property, bool onlyVisibleToPublicChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object, onlyVisibleToPublicChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property, bool onlyVisibleToPublicChildren);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj * bool -&gt; unit" Usage="executionProperties.Add (name, property, onlyVisibleToPublicChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
        <Parameter Name="onlyVisibleToPublicChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9bfb2-112">Nombre de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-112">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="9bfb2-113">Objeto que representa la propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-113">The object that represents the property.</span></span></param>
        <param name="onlyVisibleToPublicChildren"><span data-ttu-id="9bfb2-114">Valor que determina si esta propiedad está visible para los elementos secundarios de la actividad propietaria.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-114">A value that determines whether this property is visible to the children of the owning activity.</span></span></param>
        <summary><span data-ttu-id="9bfb2-115">Registra una propiedad usando el nombre especificado y la visibilidad del elemento secundario.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-115">Registers a property using the specified name and child visibility.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public object Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Find(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Find : string -&gt; obj" Usage="executionProperties.Find name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9bfb2-116">Nombre de la propiedad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-116">The name of the property.</span></span></param>
        <summary><span data-ttu-id="9bfb2-117">Devuelve la propiedad más cercana del nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-117">Returns the nearest property of the given name.</span></span></summary>
        <returns><span data-ttu-id="9bfb2-118">Propiedad más cercana del nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-118">The nearest property of the given name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bfb2-119"><xref:System.Activities.ExecutionProperties.Find%2A> encuentra la propiedad visible más cercana mediante el ámbito jerárquico.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-119"><xref:System.Activities.ExecutionProperties.Find%2A> finds the nearest visible property using hierarchical scoping.</span></span> <span data-ttu-id="9bfb2-120">Si dos propiedades tienen el mismo nombre, se devuelve la propiedad más cercana del ámbito primario.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-120">If two properties have the same name, the closest property at the parent scope is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="executionProperties.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bfb2-121">Devuelve un enumerador que recorre en iteración la colección de propiedades.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-121">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="9bfb2-122">Enumerador que recorre en iteración la colección de propiedades.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-122">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Activities.ExecutionProperties.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Activities.ExecutionProperties.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9bfb2-123">Obtiene un valor que indica si hay propiedades registradas en el ámbito actual.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-123">Gets a value that indicates whether there are properties registered at the current scope.</span></span></summary>
        <value><span data-ttu-id="9bfb2-124"><see langword="true" /> si hay propiedades registradas; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-124"><see langword="true" /> if there are properties registered; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; bool" Usage="executionProperties.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9bfb2-125">Nombre de la propiedad cuyo registro anular.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-125">The name of the property to unregister.</span></span></param>
        <summary><span data-ttu-id="9bfb2-126">Anula el registro de la propiedad que tiene el nombre especificado.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-126">Unregisters the property with the specified name.</span></span></summary>
        <returns><span data-ttu-id="9bfb2-127"><see langword="true" /> si la propiedad no estaba registrada; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-127"><see langword="true" /> if the property was unregistered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9bfb2-128">El registro de las propiedades se elimina automáticamente cuando finaliza la actividad.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-128">Properties are automatically unregistered when the activity completes.</span></span> <span data-ttu-id="9bfb2-129">Este método se puede utilizar para eliminar el registro de una propiedad antes de que finalice la actividad complete.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-129">This method can be used to unregister a property before the activity completes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9bfb2-130">Devuelve un enumerador que recorre en iteración la colección de propiedades.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-130">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="9bfb2-131">Enumerador que recorre en iteración la colección de propiedades.</span><span class="sxs-lookup"><span data-stu-id="9bfb2-131">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>