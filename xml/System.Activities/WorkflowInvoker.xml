<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52590236" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="33420-101">Proporciona un medio para invocar un flujo de trabajo como si fuera una llamada a método.</span><span class="sxs-lookup"><span data-stu-id="33420-101">Provides a means for invoking a workflow as if it were a method call.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-102">La clase <xref:System.Activities.WorkflowInvoker> contiene métodos tanto de instancia como estáticos para invocar flujos de trabajo sincrónicamente y métodos de instancia para invocarlos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="33420-103">La clase <xref:System.Activities.WorkflowInvoker> no permite el control de instancias, por ejemplo, almacenar, descargar o reanudar marcadores.</span><span class="sxs-lookup"><span data-stu-id="33420-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="33420-104">Si se desea realizar un control de instancias, use <xref:System.Activities.WorkflowApplication> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="33420-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="33420-105">Para ejecutar flujos de trabajo sincrónicamente sin control de instancias, llame al método <xref:System.Activities.WorkflowInvoker.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="33420-106">Para ejecutar un flujo de trabajo de forma asincrónica sin control de instancias, use los métodos <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> y <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> o el método <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-107">En el siguiente ejemplo se invoca sincrónicamente un flujo de trabajo formado por una sola actividad de la clase <xref:System.Activities.Statements.WriteLine> mediante la clase <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="33420-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="33420-108">La definición del flujo de trabajo que va a invocar esta instancia de la clase <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="33420-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></param>
        <summary><span data-ttu-id="33420-109">Inicializa una nueva instancia de la clase <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="33420-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-110">La clase <xref:System.Activities.WorkflowInvoker> contiene métodos tanto de instancia como estáticos para invocar flujos de trabajo sincrónicamente y métodos de instancia para invocarlos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-111">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad <xref:System.Activities.Statements.WriteLine>.</span><span class="sxs-lookup"><span data-stu-id="33420-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33420-112">Invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico de la interfaz <see cref="T:System.IAsyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="33420-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-113">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="33420-114">El método al que llamar cuando se ha completado el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-114">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="33420-115">Objeto opcional específico de la aplicación que contiene información sobre la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-115">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="33420-116">Invoca un flujo de trabajo de forma asincrónica usando el objeto <see cref="T:System.AsyncCallback" /> especificado y el estado proporcionado por el usuario.</span><span class="sxs-lookup"><span data-stu-id="33420-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="33420-117">Referencia a la operación de invocación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-117">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-118">Para recibir una notificación cuando se complete el flujo de trabajo y recuperar los parámetros de salida de dicho flujo de trabajo, llame a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> desde el método `callback`.</span><span class="sxs-lookup"><span data-stu-id="33420-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="33420-119">Si se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> antes de que se complete el flujo de trabajo, la llamada queda bloqueada hasta que se completa el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="33420-120">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-121">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico de la interfaz <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="33420-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="33420-122">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-123">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-124">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-125">Se recuperan llamando al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="33420-126">Cuando la llamada al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-127">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-127">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="callback"><span data-ttu-id="33420-128">El método al que llamar cuando se ha completado el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-128">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="33420-129">Objeto opcional específico de la aplicación que contiene información sobre la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-129">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="33420-130">Invoca un flujo de trabajo de forma asincrónica utilizando el diccionario de parámetros de entrada <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado, el delegado <see cref="T:System.AsyncCallback" /> y el estado proporcionado por el usuario.</span><span class="sxs-lookup"><span data-stu-id="33420-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="33420-131">Referencia a la operación de invocación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-131">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-132">Para recibir una notificación cuando se complete el flujo de trabajo y recuperar los parámetros de salida de dicho flujo de trabajo, llame a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> desde el método `callback`.</span><span class="sxs-lookup"><span data-stu-id="33420-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="33420-133">Si se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> antes de que se complete el flujo de trabajo, la llamada queda bloqueada hasta que se completa el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="33420-134">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-135">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico de la interfaz <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="33420-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="33420-136">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-137">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-138">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-139">Se recuperan llamando al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="33420-140">Cuando la llamada al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33420-141">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="33420-142">El método al que llamar cuando se ha completado el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-142">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="33420-143">Objeto opcional específico de la aplicación que contiene información sobre la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-143">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="33420-144">Invoca un flujo de trabajo de forma asincrónica usando el intervalo de tiempo de espera, el delegado <see cref="T:System.AsyncCallback" /> y el estado proporcionado por el usuario especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="33420-145">Referencia a la operación de invocación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-145">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-146">Para recibir una notificación cuando se complete el flujo de trabajo y recuperar los parámetros de salida de dicho flujo de trabajo, llame a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> desde el método `callback`.</span><span class="sxs-lookup"><span data-stu-id="33420-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="33420-147">Si se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> antes de que se complete el flujo de trabajo, la llamada queda bloqueada hasta que se completa el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="33420-148">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException> cuando se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-149">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-150">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-151">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico de la interfaz <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="33420-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="33420-152">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-153">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-154">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-155">Se recuperan llamando al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="33420-156">Cuando la llamada al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-157">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-157">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-158">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="33420-159">El método al que llamar cuando se ha completado el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-159">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="33420-160">Objeto opcional específico de la aplicación que contiene información sobre la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-160">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="33420-161">Invoca un flujo de trabajo de forma asincrónica usando la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada, el intervalo de tiempo de espera, el delegado <see cref="T:System.AsyncCallback" /> y el estado proporcionado por el usuario especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="33420-162">Referencia a la operación de invocación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-162">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-163">Para recibir una notificación cuando se complete el flujo de trabajo y recuperar los parámetros de salida de dicho flujo de trabajo, llame a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> desde el método `callback`.</span><span class="sxs-lookup"><span data-stu-id="33420-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="33420-164">Si se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> antes de que se complete el flujo de trabajo, la llamada queda bloqueada hasta que se completa el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="33420-165">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException> cuando se llama a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-166">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-167">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-168">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico de la interfaz <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="33420-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="33420-169">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-170">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-171">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-172">Se recuperan llamando al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="33420-173">Cuando la llamada al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="33420-174">El token para cancelar el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-174">The token for the workflow to cancel.</span></span></param>
        <summary><span data-ttu-id="33420-175">Intenta cancelar el flujo de trabajo que se invocó con el parámetro <paramref name="userState" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="33420-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-176">Solo se pueden cancelar los flujos de trabajo invocados por una de las sobrecargas de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toma un parámetro `userState`.</span><span class="sxs-lookup"><span data-stu-id="33420-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="33420-177">Si se realiza correctamente la cancelación, el <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propiedad de la <xref:System.Activities.InvokeCompletedEventArgs> pasa a la <xref:System.Activities.WorkflowInvoker.InvokeCompleted> configuración del controlador de `true`; en caso contrario, se establece en `false`.</span><span class="sxs-lookup"><span data-stu-id="33420-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-178">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-179">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-180">Una vez invocado el flujo de trabajo, el host intenta cancelarlo.</span><span class="sxs-lookup"><span data-stu-id="33420-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="33420-181"><see cref="T:System.IAsyncResult" /> que hace referencia a la operación del método <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> que inició el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span></span></param>
        <summary><span data-ttu-id="33420-182">Devuelve los resultados de un flujo de trabajo invocado mediante una de las sobrecargas <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="33420-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span></span></summary>
        <returns><span data-ttu-id="33420-183">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-184">Para recibir una notificación cuando se complete el flujo de trabajo y recuperar los parámetros de salida de dicho flujo de trabajo, llame a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> desde el método `callback` especificado por <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="33420-185">Si se llama al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> antes de que se complete el flujo de trabajo, la llamada queda bloqueada hasta que se completa el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="33420-186">Este método devuelve el resultado de un flujo de trabajo invocado de forma asincrónica usando el modelo de diseño asincrónico de la interfaz <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="33420-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="33420-187">Para obtener más información, consulte [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="33420-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-188">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-189">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-190">Se recuperan llamando al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="33420-191">Cuando la llamada al método <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33420-192">Obtiene la colección <see cref="T:System.Collections.ObjectModel.Collection`1" /> de extensiones que están disponibles para los flujos de trabajo invocados por una instancia de <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="33420-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></summary>
        <value><span data-ttu-id="33420-193">La colección <see cref="T:System.Collections.ObjectModel.Collection`1" /> de extensiones que están disponibles para los flujos de trabajo invocados por una instancia de <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="33420-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-194">Esta propiedad la usan los autores de host de flujo de trabajo con el fin de agregar extensiones a la instancia de la clase <xref:System.Activities.WorkflowInvoker> para que estén disponibles para los flujos de trabajo que invoque.</span><span class="sxs-lookup"><span data-stu-id="33420-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-195">En el siguiente ejemplo se registra una clase <xref:System.Activities.Tracking.TrackingParticipant> personalizada con la colección <xref:System.Activities.WorkflowInvoker.Extensions%2A> de una instancia de la clase <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="33420-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="33420-196">Este ejemplo de código forma parte de la [seguimiento personalizado](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) ejemplo.</span><span class="sxs-lookup"><span data-stu-id="33420-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33420-197">Invoca un flujo de trabajo de manera sincrónica y devuelve un diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-198">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-199">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-200">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33420-201">Invoca un flujo de trabajo de forma sincrónica mediante la definición de flujo de trabajo pasada al constructor <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span><span class="sxs-lookup"><span data-stu-id="33420-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="33420-202">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-203">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-204">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-205">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-206">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="33420-207">La actividad `DiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-208">Cuando la llamada al método `Invoke` devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="33420-209">El flujo de trabajo se invoca dos veces, mediante la definición de flujo de trabajo pasada en el `WorkflowInvoker` constructor.</span><span class="sxs-lookup"><span data-stu-id="33420-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="33420-210">Si la actividad raíz del flujo de trabajo no tiene argumentos de salida o no los necesita el host, se pueden omitir.</span><span class="sxs-lookup"><span data-stu-id="33420-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="33420-211">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad de la clase <xref:System.Activities.Statements.WriteLine> que no tiene argumentos de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="33420-212">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-212">The workflow definition of the workflow to invoke.</span></span></param>
        <summary><span data-ttu-id="33420-213">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo especificada.</span><span class="sxs-lookup"><span data-stu-id="33420-213">Invokes a workflow synchronously using the specified workflow definition.</span></span></summary>
        <returns><span data-ttu-id="33420-214">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-215">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-216">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-217">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-218">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="33420-219">La actividad `DiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-220">Cuando la llamada al método `Invoke` devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario de salidas, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="33420-221">Si la actividad raíz del flujo de trabajo no tiene argumentos de salida o no los necesita el host, se pueden omitir.</span><span class="sxs-lookup"><span data-stu-id="33420-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="33420-222">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad de la clase <xref:System.Activities.Statements.WriteLine> que no tiene argumentos de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-223">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-223">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="33420-224">Invoca la actividad pasada al constructor <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> sincrónicamente con la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> especificada de parámetros de entrada.</span><span class="sxs-lookup"><span data-stu-id="33420-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="33420-225">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-226">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-227">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-228">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-229">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad `Divide` que tiene dos argumentos de entrada y dos argumentos de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="33420-230">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-231">Cuando la llamada a `Invoke` devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario `outputs`, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="33420-232">Si el flujo de trabajo se deriva de <xref:System.Activities.ActivityWithResult>, tales como `CodeActivity<TResult>` o `Activity<TResult>`, y hay argumentos de salida además bien definidos <xref:System.Activities.Activity%601.Result%2A> una sobrecarga no genérica del argumento de salida `Invoke`, como éste, se debe usar en orden para recuperar los argumentos adicionales.</span><span class="sxs-lookup"><span data-stu-id="33420-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="33420-233">Para ello, la definición de flujo de trabajo pasada en el `WorkflowInvoker` constructor debe ser del tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="33420-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="33420-234">En este ejemplo el `Divide` actividad deriva `CodeActivity<int>`, pero se declara como <xref:System.Activities.Activity> para que esta sobrecarga de `Invoke`, que devuelve un diccionario de argumentos en lugar de un único valor devuelto, se utiliza.</span><span class="sxs-lookup"><span data-stu-id="33420-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33420-235">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-236">Invoca un flujo de trabajo sincrónicamente con el intervalo de tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="33420-236">Invokes a workflow synchronously with the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-237">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-238">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-239">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-240">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-241">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-242">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-243">En el siguiente ejemplo se invoca un flujo de trabajo que contiene dos actividades de la clase <xref:System.Activities.Statements.WriteLine> y una actividad de la clase <xref:System.Activities.Statements.Delay> configurada con una propiedad <xref:System.Activities.Statements.Delay.Duration%2A> de un minuto.</span><span class="sxs-lookup"><span data-stu-id="33420-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="33420-244">Este flujo de trabajo se invoca dos veces; la primera vez con un intervalo de tiempo de espera de dos minutos y la segunda con un intervalo de tiempo de espera de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="33420-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="33420-245">El primer flujo de trabajo se completa correctamente, pero el segundo no y se produce una excepción <xref:System.TimeoutException>, mostrándose además el siguiente mensaje.</span><span class="sxs-lookup"><span data-stu-id="33420-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="33420-246">Para obtener un ejemplo del uso de `Invoke` con argumentos de salida, vea la sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> con los mismos parámetros que esta sobrecarga sin el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="33420-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="33420-247">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-247">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="33420-248">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-248">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="33420-249">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo y la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="33420-250">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-251">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-252">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-253">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-254">En el siguiente ejemplo se invoca un flujo de trabajo formado por una sola actividad `Divide` que tiene dos argumentos de entrada y dos argumentos de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="33420-255">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-256">Cuando la llamada a `Invoke` devuelve resultados, cada uno de los argumentos de salida se devuelve en el diccionario `outputs`, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="33420-257">Si el flujo de trabajo se deriva de <xref:System.Activities.ActivityWithResult>, tales como `CodeActivity<TResult>` o `Activity<TResult>`, y hay argumentos de salida además bien definidos <xref:System.Activities.Activity%601.Result%2A> una sobrecarga no genérica del argumento de salida `Invoke`, como éste, se debe usar en orden para recuperar los argumentos adicionales.</span><span class="sxs-lookup"><span data-stu-id="33420-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="33420-258">Para ello, la definición de flujo de trabajo pasada a `Invoke` debe ser de tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="33420-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="33420-259">En este ejemplo el `Divide` actividad deriva `CodeActivity<int>`, pero se declara como <xref:System.Activities.Activity> para que esta sobrecarga de `Invoke`, que devuelve un diccionario de argumentos en lugar de un único valor devuelto, se utiliza.</span><span class="sxs-lookup"><span data-stu-id="33420-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="33420-260">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-260">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-261">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-262">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-263">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-264">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-265">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-266">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-267">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-268">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-269">En el siguiente ejemplo se invoca un flujo de trabajo que contiene dos actividades de la clase <xref:System.Activities.Statements.WriteLine> y una actividad de la clase <xref:System.Activities.Statements.Delay> configurada con una propiedad <xref:System.Activities.Statements.Delay.Duration%2A> de un minuto.</span><span class="sxs-lookup"><span data-stu-id="33420-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="33420-270">Este flujo de trabajo se invoca dos veces; la primera vez con un intervalo de tiempo de espera de dos minutos y la segunda con un intervalo de tiempo de espera de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="33420-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="33420-271">El primer flujo de trabajo se completa correctamente, pero el segundo no y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="33420-272">Para obtener un ejemplo del uso de `Invoke` con argumentos de salida, vea la sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> con los mismos parámetros que esta sobrecarga sin el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="33420-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-273">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-273">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-274">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-275">Invoca la actividad pasada al constructor <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> sincrónicamente con la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-276">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-277">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-278">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-279">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-280">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-281">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-282">En el siguiente ejemplo se invoca un flujo de trabajo que contiene dos actividades de la clase <xref:System.Activities.Statements.WriteLine> y una actividad de la clase <xref:System.Activities.Statements.Delay> configurada con una propiedad <xref:System.Activities.Statements.Delay.Duration%2A> de un minuto.</span><span class="sxs-lookup"><span data-stu-id="33420-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="33420-283">Este flujo de trabajo se invoca dos veces; la primera vez con un intervalo de tiempo de espera de dos minutos y la segunda con un intervalo de tiempo de espera de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="33420-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="33420-284">El primer flujo de trabajo se completa correctamente, pero el segundo no y se produce una excepción <xref:System.TimeoutException>, mostrándose además el siguiente mensaje.</span><span class="sxs-lookup"><span data-stu-id="33420-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="33420-285">Para obtener un ejemplo del uso de `Invoke` con argumentos de entrada y salidos, vea la sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> con los mismos parámetros que esta sobrecarga sin el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="33420-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="33420-286">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-286">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="33420-287">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-287">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-288">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-289">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo, la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-290">Diccionario de los valores <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> de la actividad raíz ordenados por nombre de argumento que representan las salidas del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-291">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-292">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-293">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-294">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-295">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-296">En el siguiente ejemplo se invoca un flujo de trabajo que contiene dos actividades de la clase <xref:System.Activities.Statements.WriteLine> y una actividad de la clase <xref:System.Activities.Statements.Delay> configurada con una propiedad <xref:System.Activities.Statements.Delay.Duration%2A> de un minuto.</span><span class="sxs-lookup"><span data-stu-id="33420-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="33420-297">Este flujo de trabajo se invoca dos veces; la primera vez con un intervalo de tiempo de espera de dos minutos y la segunda con un intervalo de tiempo de espera de 30 segundos.</span><span class="sxs-lookup"><span data-stu-id="33420-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="33420-298">El primer flujo de trabajo se completa correctamente, pero el segundo no y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="33420-299">Para obtener un ejemplo del uso de `Invoke` con argumentos de entrada y salidos, vea la sobrecarga de <xref:System.Activities.WorkflowInvoker.Invoke%2A> con los mismos parámetros que esta sobrecarga sin el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="33420-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="33420-300">El tipo del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-300">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="33420-301">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-301">The workflow definition of the workflow to invoke.</span></span> <span data-ttu-id="33420-302">La definición del flujo de trabajo debe derivarse de la clase <see cref="T:System.Activities.ActivityWithResult" />.</span><span class="sxs-lookup"><span data-stu-id="33420-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span></span></param>
        <summary><span data-ttu-id="33420-303">Invoca un flujo de trabajo de forma sincrónica mediante la definición de flujo de trabajo pasada al constructor <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span><span class="sxs-lookup"><span data-stu-id="33420-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="33420-304">Valor de tipo TResult que tiene el resultado de la ejecución de la actividad.</span><span class="sxs-lookup"><span data-stu-id="33420-304">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-305">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-306">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-307">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-308">En el ejemplo siguiente se invoca un flujo de trabajo que consta de una sola `Add` actividad que tiene dos argumentos de entrada y, dado que se deriva de `CodeActivity<int>` lo tiene bien definidos <xref:System.Activities.Activity%601.Result%2A> argumento de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="33420-309">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-310">Cuando la llamada a `Invoke` devuelve el valor de la <xref:System.Activities.Activity%601.Result%2A> los argumentos de salida se devuelven.</span><span class="sxs-lookup"><span data-stu-id="33420-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="33420-311">Este ejemplo de código se basa en el [mediante la clase WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) ejemplo.</span><span class="sxs-lookup"><span data-stu-id="33420-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="33420-312">El tipo del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-312">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="33420-313">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-313">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="33420-314">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-314">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="33420-315">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo y la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="33420-316">Valor de tipo TResult que tiene el resultado de la ejecución de la actividad.</span><span class="sxs-lookup"><span data-stu-id="33420-316">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-317">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-318">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-319">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.Invoke%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-320">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-321">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-322">En el ejemplo siguiente se invoca un flujo de trabajo que consta de una sola `Add` actividad que tiene dos argumentos de entrada y, dado que se deriva de `CodeActivity<int>` lo tiene bien definidos <xref:System.Activities.Activity%601.Result%2A> argumento de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="33420-323">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-324">Cuando la llamada a `Invoke` devuelve el valor de la <xref:System.Activities.Activity%601.Result%2A> los argumentos de salida se devuelven.</span><span class="sxs-lookup"><span data-stu-id="33420-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="33420-325">Este ejemplo de código se basa en el [mediante la clase WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) ejemplo.</span><span class="sxs-lookup"><span data-stu-id="33420-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="33420-326">El tipo del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-326">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="33420-327">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-327">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="33420-328">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-328">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-329">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-330">Invoca un flujo de trabajo sincrónicamente usando la definición de flujo de trabajo, la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-331">Valor de tipo TResult que tiene el resultado de la ejecución de la actividad.</span><span class="sxs-lookup"><span data-stu-id="33420-331">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-332">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-333">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-334">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-335">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-336">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-337">En el ejemplo siguiente se invoca un flujo de trabajo que consta de una sola `Add` actividad que tiene dos argumentos de entrada y, dado que se deriva de `CodeActivity<int>` lo tiene bien definidos <xref:System.Activities.Activity%601.Result%2A> argumento de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="33420-338">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-339">Cuando la llamada a `Invoke` devuelve el valor de la <xref:System.Activities.Activity%601.Result%2A> los argumentos de salida se devuelven.</span><span class="sxs-lookup"><span data-stu-id="33420-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="33420-340">Este ejemplo de código se basa en el [mediante la clase WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) ejemplo.</span><span class="sxs-lookup"><span data-stu-id="33420-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="33420-341">El tipo del flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="33420-341">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="33420-342">La definición del flujo de trabajo que se va a invocar.</span><span class="sxs-lookup"><span data-stu-id="33420-342">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="33420-343">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-343">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="additionalOutputs"><span data-ttu-id="33420-344">Diccionario de parámetros de salida del flujo de trabajo adicionales, organizados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-345">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-346">Invoca un flujo de trabajo sincrónicamente mediante la definición de flujo de trabajo, la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada, la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de salida adicionales y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="33420-347">Valor de tipo TResult que tiene el resultado de la ejecución de la actividad.</span><span class="sxs-lookup"><span data-stu-id="33420-347">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-348">Este método se bloquea hasta que se ha completado el flujo de trabajo, incluido el tiempo de inactividad.</span><span class="sxs-lookup"><span data-stu-id="33420-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="33420-349">Se garantiza que toda la ejecución del flujo de trabajo se realiza en el subproceso que lo invoca.</span><span class="sxs-lookup"><span data-stu-id="33420-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="33420-350">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-351">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-352">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-353">En el ejemplo siguiente se invoca un flujo de trabajo que consta de una sola `Add` actividad que tiene dos argumentos de entrada y, dado que se deriva de `CodeActivity<int>` lo tiene bien definidos <xref:System.Activities.Activity%601.Result%2A> argumento de salida.</span><span class="sxs-lookup"><span data-stu-id="33420-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="33420-354">Cuando se invoca el flujo de trabajo, se pasa el diccionario de `arguments` que contiene los valores de cada argumento de entrada, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="33420-355">Cuando la llamada a `Invoke` devuelve el valor de la <xref:System.Activities.Activity%601.Result%2A> los argumentos de salida se devuelven.</span><span class="sxs-lookup"><span data-stu-id="33420-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="33420-356">Este ejemplo de código se basa en el [mediante la clase WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) ejemplo.</span><span class="sxs-lookup"><span data-stu-id="33420-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="33420-357">Invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-358">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-359">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-360">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-361">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33420-362">Invoca un flujo de trabajo de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="33420-362">Invokes a workflow asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-363">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-364">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-365">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-366">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-367">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-368">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-369">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-370">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-370">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="33420-371">Invoca un flujo de trabajo de forma asincrónica utilizando la <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada especificada.</span><span class="sxs-lookup"><span data-stu-id="33420-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-372">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-373">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-374">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-375">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-376">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-377">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-378">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="33420-379">Objeto proporcionado por el usuario que se utiliza para distinguir esta operación concreta de invocación asincrónica de otras operaciones de invocación asincrónicas actuales.</span><span class="sxs-lookup"><span data-stu-id="33420-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="33420-380">Invoca un flujo de trabajo de forma asincrónica usando el identificador único especificado.</span><span class="sxs-lookup"><span data-stu-id="33420-380">Invokes a workflow asynchronously using the specified unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-381">El parámetro `userState` debe ser único para todas las operaciones <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que se estén ejecutando en ese momento para la actividad actual.</span><span class="sxs-lookup"><span data-stu-id="33420-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="33420-382">Si el parámetro `userState` no es único, se produce <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="33420-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="33420-383">El parámetro `userState` se usa para identificar el flujo de trabajo del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted> y para cancelarlo mediante el método <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="33420-384">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-385">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-386">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-387">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-388">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-389">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-390">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33420-391">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-392">Invoca un flujo de trabajo de forma asincrónica con el intervalo de tiempo de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="33420-392">Invokes a workflow asynchronously with the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-393">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-394">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-395">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-396">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-397">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-398">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-399">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-400">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-401">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-402">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-402">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="userState"><span data-ttu-id="33420-403">Objeto proporcionado por el usuario que se utiliza para distinguir esta operación concreta de invocación asincrónica de otras operaciones de invocación asincrónicas actuales.</span><span class="sxs-lookup"><span data-stu-id="33420-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="33420-404">Invoca un flujo de trabajo de forma asincrónica usando la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada especificada y un identificador único.</span><span class="sxs-lookup"><span data-stu-id="33420-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-405">El parámetro `userState` debe ser único para todas las operaciones <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que se estén ejecutando en ese momento para la actividad actual.</span><span class="sxs-lookup"><span data-stu-id="33420-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="33420-406">Si `userState` no es único, se produce <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="33420-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="33420-407">El parámetro `userState` se usa para identificar el flujo de trabajo del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted> y para cancelarlo mediante el método <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="33420-408">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-409">Para configurar un intervalo de tiempo de espera en el que se debe completar el flujo de trabajo, use una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que toman una estructura <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="33420-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="33420-410">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-411">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-412">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-413">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-414">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-415">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-415">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-416">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="33420-417">Invoca de forma asincrónica un flujo de trabajo con la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada y el intervalo de tiempo de espera especificados.</span><span class="sxs-lookup"><span data-stu-id="33420-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-418">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-419">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-420">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-421">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-422">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-423">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-424">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-425">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-426">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="33420-427">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="33420-428">Objeto proporcionado por el usuario que se utiliza para distinguir esta operación concreta de invocación asincrónica de otras operaciones de invocación asincrónicas actuales.</span><span class="sxs-lookup"><span data-stu-id="33420-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="33420-429">Invoca de forma asincrónica un flujo de trabajo con el intervalo de tiempo de espera especificado y un identificador único.</span><span class="sxs-lookup"><span data-stu-id="33420-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-430">El parámetro `userState` debe ser único para todas las operaciones <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que se estén ejecutando en ese momento para la actividad actual.</span><span class="sxs-lookup"><span data-stu-id="33420-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="33420-431">Si `userState` no es único, se produce <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="33420-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="33420-432">El parámetro `userState` se usa para identificar el flujo de trabajo del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted> y para cancelarlo mediante el método <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="33420-433">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-434">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-435">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-436">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-437">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-438">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-439">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-440">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-441">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="33420-442">El diccionario de parámetros de entrada para el flujo de trabajo, ordenados por nombre de argumento.</span><span class="sxs-lookup"><span data-stu-id="33420-442">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="33420-443">Intervalo de tiempo en el que se debe completar el flujo de trabajo antes de quedar anulado y de que se produzca una excepción <see cref="T:System.TimeoutException" />.</span><span class="sxs-lookup"><span data-stu-id="33420-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="33420-444">Objeto proporcionado por el usuario que se utiliza para distinguir esta operación concreta de invocación asincrónica de otras operaciones de invocación asincrónicas actuales.</span><span class="sxs-lookup"><span data-stu-id="33420-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="33420-445">Invoca de forma asincrónica un flujo de trabajo con la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de parámetros de entrada especificada, el intervalo de tiempo de espera especificado y un identificador único.</span><span class="sxs-lookup"><span data-stu-id="33420-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-446">El parámetro `userState` debe ser único para todas las operaciones <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> que se estén ejecutando en ese momento para la actividad actual.</span><span class="sxs-lookup"><span data-stu-id="33420-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="33420-447">Si `userState` no es único, se produce <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="33420-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="33420-448">El parámetro `userState` se usa para identificar el flujo de trabajo del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted> y para cancelarlo mediante el método <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="33420-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="33420-449">Para recibir una notificación cuando se complete el flujo de trabajo, controle el evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="33420-450">Si el flujo de trabajo no se completa dentro del intervalo de tiempo de espera especificado, se anula el flujo de trabajo y se produce una excepción <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="33420-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33420-451">La excepción <xref:System.TimeoutException> solo se produce si se agota el tiempo de espera y el flujo de trabajo queda inactivo durante la ejecución.</span><span class="sxs-lookup"><span data-stu-id="33420-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="33420-452">Un flujo de trabajo que tarda en completarse más tiempo que el especificado por el intervalo de tiempo de espera se completa correctamente si el flujo de trabajo no queda inactivo.</span><span class="sxs-lookup"><span data-stu-id="33420-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="33420-453">Este método invoca de forma asincrónica un flujo de trabajo usando el modelo de diseño asincrónico basado en eventos.</span><span class="sxs-lookup"><span data-stu-id="33420-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="33420-454">Para más información, consulte [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765) (Introducción al patrón asincrónico basado en eventos).</span><span class="sxs-lookup"><span data-stu-id="33420-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-455">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-456">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-457">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33420-458">Se produce cuando se completa o se cancela el flujo de trabajo invocado por una de las sobrecargas <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />.</span><span class="sxs-lookup"><span data-stu-id="33420-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33420-459">Controle este evento para determinar si un flujo de trabajo invocado con una de las sobrecargas <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> se completó correctamente y recuperar los argumentos de salida del flujo de trabajo completado.</span><span class="sxs-lookup"><span data-stu-id="33420-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33420-460">En el siguiente ejemplo se invoca un flujo de trabajo formado por una actividad `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="33420-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="33420-461">La actividad `LongRunningDiceRoll` tiene dos argumentos de salida que representan los resultados de la operación de tirar los dados.</span><span class="sxs-lookup"><span data-stu-id="33420-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="33420-462">Cuando se completa el flujo de trabajo, se recuperan en el controlador del evento <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="33420-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>