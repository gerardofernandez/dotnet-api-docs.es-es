<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="952f772fcb721fe3cbd5422a2e15181cb494e049" /><Meta Name="ms.sourcegitcommit" Value="8bc3ac200cc1c4fb5daa8f9787e66801575530d2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/21/2019" /><Meta Name="ms.locfileid" Value="56583022" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableList&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="13d46-101">Tipo de elementos en la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="13d46-102">Representa una lista de elementos que no se puede modificar.</span><span class="sxs-lookup"><span data-stu-id="13d46-102">Represents a list of elements that cannot be modified.</span></span>  
  
 <span data-ttu-id="13d46-103">**Paquete NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">sobre las colecciones inmutables y el procedimiento de instalación</see>)</span><span class="sxs-lookup"><span data-stu-id="13d46-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="13d46-104">Al agregar o quitar elementos de un <xref:System.Collections.Immutable.IImmutableList%601>, se crea una copia de la lista original, con los cambios aplicados.</span><span class="sxs-lookup"><span data-stu-id="13d46-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied.</span></span> <span data-ttu-id="13d46-105">Los cambios incrementales a una lista de compartan tanta memoria como sea posible con versiones anteriores de una lista y habilitar la recopilación de elementos no utilizados limpiar los datos de lista único que ya no se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="13d46-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
<span data-ttu-id="13d46-106">Para obtener información sobre cómo crear un `IImmutableList<T>` implementación, consulte <xref:System.Collections.Immutable.ImmutableList%601?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="13d46-106">For information on creating an `IImmutableList<T>` implementation, see <xref:System.Collections.Immutable.ImmutableList%601?displayProperty=nameWithType>.</span></span> 
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13d46-107">Objeto que se va a agregar a la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-107">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="13d46-108">Realiza una copia de la lista y agrega el objeto especificado al final de la lista copiada.</span><span class="sxs-lookup"><span data-stu-id="13d46-108">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span></span></summary>
        <returns><span data-ttu-id="13d46-109">Una nueva lista con el objeto agregado.</span><span class="sxs-lookup"><span data-stu-id="13d46-109">A new list with the object added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="13d46-110">Objetos que se va a agregar a la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-110">The objects to add to the list.</span></span></param>
        <summary><span data-ttu-id="13d46-111">Realiza una copia de la lista y agrega los objetos especificados al final de la lista copiada.</span><span class="sxs-lookup"><span data-stu-id="13d46-111">Makes a copy of the list and adds the specified objects to the end of the copied list.</span></span></summary>
        <returns><span data-ttu-id="13d46-112">Una nueba lista con los elementos agregados.</span><span class="sxs-lookup"><span data-stu-id="13d46-112">A new list with the elements added.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13d46-113">Crea una lista con todos los elementos eliminados, pero con la misma ordenación y semántica del orden que esta lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-113">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span></span></summary>
        <returns><span data-ttu-id="13d46-114">Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</span><span class="sxs-lookup"><span data-stu-id="13d46-114">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="13d46-115">Objeto que se va a buscar en <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-115">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span> <span data-ttu-id="13d46-116">Este valor puede ser null para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="13d46-116">This value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="13d46-117">Índice inicial de base cero de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="13d46-117">The zero-based starting indes of the search.</span></span> <span data-ttu-id="13d46-118">0 (cero) es válido en una lista vacía.</span><span class="sxs-lookup"><span data-stu-id="13d46-118">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="13d46-119">Número de elementos de la sección en la que se va a realizar la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="13d46-119">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="13d46-120">Comparador de igualdad que se va a usar para localizar <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-120">The equality comparer to use to locate <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="13d46-121">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="13d46-121">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="13d46-122">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</span><span class="sxs-lookup"><span data-stu-id="13d46-122">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="13d46-123">Índice de base cero donde se inserta el valor.</span><span class="sxs-lookup"><span data-stu-id="13d46-123">The zero-based index at which to insert the value.</span></span></param>
        <param name="element"><span data-ttu-id="13d46-124">Objeto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="13d46-124">The object to insert.</span></span></param>
        <summary><span data-ttu-id="13d46-125">Inserta el elemento especificado en el índice especificado en la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="13d46-125">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="13d46-126">Nueva lista inmutable que incluye el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="13d46-126">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="13d46-127">Índice de base cero donde se deben insertar los nuevos elementos.</span><span class="sxs-lookup"><span data-stu-id="13d46-127">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="items"><span data-ttu-id="13d46-128">Elementos que van a insertarse.</span><span class="sxs-lookup"><span data-stu-id="13d46-128">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="13d46-129">Inserta los elementos especificados en el índice especificado en la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="13d46-129">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="13d46-130">Nueva lista inmutable que incluye los elementos especificados.</span><span class="sxs-lookup"><span data-stu-id="13d46-130">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="13d46-131">Objeto que se va a buscar en la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-131">The object to locate in the list.</span></span> <span data-ttu-id="13d46-132">El valor puede ser <see langword="null" /> para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="13d46-132">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="13d46-133">Índice inicial de base cero de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="13d46-133">The zero-based starting index of the search.</span></span> <span data-ttu-id="13d46-134">0 (cero) es válido en una lista vacía.</span><span class="sxs-lookup"><span data-stu-id="13d46-134">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="13d46-135">Número de elementos de la sección en la que se va a realizar la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="13d46-135">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="13d46-136">Comparador de igualdad para hallar la coincidencia con <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-136">The equality comparer to match <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="13d46-137">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contiene el número de elementos especificado y termina en el índice determinado.</span><span class="sxs-lookup"><span data-stu-id="13d46-137">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="13d46-138">Devuelva <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-138">Returns <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="13d46-139">Objeto que se va a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-139">The object to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="13d46-140">Comparador de igualdad que se va a usar para localizar <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-140">The equality comparer to use to locate <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="13d46-141">Quita la primera repetición de un objeto especificado de esta lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="13d46-141">Removes the first occurrence of a specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="13d46-142">Nueva lista con el objeto especificado eliminado.</span><span class="sxs-lookup"><span data-stu-id="13d46-142">A new list with the specified object removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="13d46-143">Delegado que define las condiciones de los elementos que se van a quitar.</span><span class="sxs-lookup"><span data-stu-id="13d46-143">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="13d46-144">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="13d46-144">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="13d46-145">Nueva lista inmutable con los elementos eliminados.</span><span class="sxs-lookup"><span data-stu-id="13d46-145">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="13d46-146">Índice del elemento que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="13d46-146">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="13d46-147">Quita el elemento del índice especificado de la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="13d46-147">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="13d46-148">Lista nueva con el elemento eliminado.</span><span class="sxs-lookup"><span data-stu-id="13d46-148">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="13d46-149">Objetos que se van a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-149">The objects to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="13d46-150">Comparador de igualdad que se utiliza para determinar si <paramref name="items" /> coinciden con los objetos de la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-150">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</span></span></param>
        <summary><span data-ttu-id="13d46-151">Quita el objeto especificado de la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-151">Removes the specified object from the list.</span></span></summary>
        <returns><span data-ttu-id="13d46-152">Nueva lista inmutable con los objetos especificados eliminada, si <paramref name="items" /> halló objetos coincidentes en la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-152">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="13d46-153">Índice inicial de base cero del intervalo de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="13d46-153">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="13d46-154">Número de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="13d46-154">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="13d46-155">Quita todos los elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-155">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span></summary>
        <returns><span data-ttu-id="13d46-156">Nueva lista inmutable con los elementos eliminados.</span><span class="sxs-lookup"><span data-stu-id="13d46-156">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="13d46-157">Elemento a sustituir.</span><span class="sxs-lookup"><span data-stu-id="13d46-157">The element to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="13d46-158">El elemento que se usará para sustituyir la primera aparición de <paramref name="oldValue" /></span><span class="sxs-lookup"><span data-stu-id="13d46-158">The element to replace the  the first occurrence of <paramref name="oldValue" /> with</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="13d46-159">Comparador de igualdad que se va a usar para hallar la coincidencia con <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-159">The equality comparer to use for matching <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="13d46-160">Devuelve una nueva lista con el primer elemento coincidente de la lista sustituido por el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="13d46-160">Returns a new list with the first matching element in the list replaced with the specified element.</span></span></summary>
        <returns><span data-ttu-id="13d46-161">Lista nueva que contiene <paramref name="newValue" />, incluso si <paramref name="oldvalue" /> coincide con <paramref name="newValue" />.</span><span class="sxs-lookup"><span data-stu-id="13d46-161">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="13d46-162"><paramref name="oldValue" /> no existe en la lista.</span><span class="sxs-lookup"><span data-stu-id="13d46-162"><paramref name="oldValue" /> does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="13d46-163">Posición en la lista del elemento que se va a reemplazar.</span><span class="sxs-lookup"><span data-stu-id="13d46-163">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="13d46-164">Elemento por el que se va a reemplazar el elemento antiguo.</span><span class="sxs-lookup"><span data-stu-id="13d46-164">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="13d46-165">Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="13d46-165">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="13d46-166">Nueva lista que contiene el elemento nuevo, incluso si el elemento situado en la ubicación especificada es igual que el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="13d46-166">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>