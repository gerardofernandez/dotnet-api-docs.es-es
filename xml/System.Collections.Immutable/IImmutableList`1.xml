<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bca0299bca249ee3c5637b75d1e9d7432f085369" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52252096" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableList&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="2a3cf-101">Tipo de elementos en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="2a3cf-102">Representa una lista de elementos que no se puede modificar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-102">Represents a list of elements that cannot be modified.</span></span>  
  
 <span data-ttu-id="2a3cf-103">**Paquete NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">sobre las colecciones inmutables y la instalación</see>)</span><span class="sxs-lookup"><span data-stu-id="2a3cf-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2a3cf-104">Al agregar o quitar elementos de un <xref:System.Collections.Immutable.IImmutableList%601>, se crea una copia de la lista original, con los cambios aplicados...</span><span class="sxs-lookup"><span data-stu-id="2a3cf-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied..</span></span> <span data-ttu-id="2a3cf-105">Los cambios incrementales a una lista de compartan tanta memoria como sea posible con versiones anteriores de una lista y habilitar la recopilación de elementos no utilizados limpiar los datos de lista único que ya no se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
 <span data-ttu-id="2a3cf-106">Para crear una nueva lista, use el método Create.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-106">To create a new list, use the Create method.</span></span>  
  
 <span data-ttu-id="2a3cf-107">El <xref:System.Collections.Immutable.IImmutableList%601> no tiene ningún constructor público, como esto crearía una lista inmutable vacía.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-107">The <xref:System.Collections.Immutable.IImmutableList%601> has no public constructor, as this would create an empty immutable list.</span></span> <span data-ttu-id="2a3cf-108">Debe crear una nueva lista con el método Create.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-108">You should create a new list using the Create method.</span></span> <span data-ttu-id="2a3cf-109">Puede agregar nuevos elementos a una copia de la lista original utilizando el <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, y <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-109">You can add new items to a copy of the original list using the <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2a3cf-110">Objeto que se va a agregar a la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-110">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="2a3cf-111">Realiza una copia de la lista y agrega el objeto especificado al final de la lista copiada.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-111">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-112">Nueva con objeto agregado o esta lista si el objeto ya está en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-112">A new list with the object added, or this list if the object is already in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="2a3cf-113">Objetos que se va a agregar a la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-113">The objects to add to the list.</span></span></param>
        <summary><span data-ttu-id="2a3cf-114">Realiza una copia de la lista y agrega los objetos especificados al final de la lista copiada.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-114">Makes a copy of the list and adds the specified objects to the end of the copied list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-115">Nueva lista con los elementos agregados o esta lista si los elementos ya existen en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-115">A new list with the elements added, or this list if the elements already exist in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2a3cf-116">Crea una lista con todos los elementos eliminados, pero con la misma ordenación y semántica del orden que esta lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-116">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-117">Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-117">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2a3cf-118">Objeto que se va a buscar en <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-118">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span> <span data-ttu-id="2a3cf-119">Este valor puede ser null para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-119">This value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="2a3cf-120">Índice inicial de base cero de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-120">The zero-based starting indes of the search.</span></span> <span data-ttu-id="2a3cf-121">0 (cero) es válido en una lista vacía.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-121">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="2a3cf-122">Número de elementos de la sección en la que se va a realizar la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-122">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="2a3cf-123">Comparador de igualdad que se va a usar para localizar <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-123">The equality comparer to use to locate <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="2a3cf-124">Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-124">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-125">Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-125">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a3cf-126">Índice de base cero donde se inserta el valor.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-126">The zero-based index at which to insert the value.</span></span></param>
        <param name="element"><span data-ttu-id="2a3cf-127">Objeto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-127">The object to insert.</span></span></param>
        <summary><span data-ttu-id="2a3cf-128">Inserta el elemento especificado en el índice especificado en la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-128">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-129">Nueva lista inmutable que incluye el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-129">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a3cf-130">Índice de base cero donde se deben insertar los nuevos elementos.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-130">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="items"><span data-ttu-id="2a3cf-131">Elementos que van a insertarse.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-131">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="2a3cf-132">Inserta los elementos especificados en el índice especificado en la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-132">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-133">Nueva lista inmutable que incluye los elementos especificados.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-133">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2a3cf-134">Objeto que se va a buscar en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-134">The object to locate in the list.</span></span> <span data-ttu-id="2a3cf-135">El valor puede ser <see langword="null" /> para los tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-135">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="2a3cf-136">Índice inicial de base cero de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-136">The zero-based starting index of the search.</span></span> <span data-ttu-id="2a3cf-137">0 (cero) es válido en una lista vacía.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-137">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="2a3cf-138">Número de elementos de la sección en la que se va a realizar la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-138">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="2a3cf-139">Comparador de igualdad para hallar la coincidencia con <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-139">The equality comparer to match <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="2a3cf-140">Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contiene el número de elementos especificado y termina en el índice determinado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-140">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-141">Devuelve <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-141">Returns <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="2a3cf-142">Objeto que se va a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-142">The object to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="2a3cf-143">Comparador de igualdad que se va a usar para localizar <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-143">The equality comparer to use to locate <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="2a3cf-144">Quita la primera repetición de un objeto especificado de esta lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-144">Removes the first occurrence of a specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-145">Devuelve una lista nueva con el objeto especificado eliminado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-145">Returns a new list with the specified object removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="2a3cf-146">Delegado que define las condiciones de los elementos que se van a quitar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-146">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="2a3cf-147">Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-147">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-148">Nueva lista inmutable con los elementos eliminados.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-148">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a3cf-149">Índice del elemento que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-149">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="2a3cf-150">Quita el elemento del índice especificado de la lista inmutable.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-150">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-151">Lista nueva con el elemento eliminado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-151">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="2a3cf-152">Objetos que se van a quitar de la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-152">The objects to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="2a3cf-153">Comparador de igualdad que se utiliza para determinar si <paramref name="items" /> coinciden con los objetos de la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-153">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</span></span></param>
        <summary><span data-ttu-id="2a3cf-154">Quita el objeto especificado de la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-154">Removes the specified object from the list.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-155">Nueva lista inmutable con los objetos especificados eliminada, si <paramref name="items" /> halló objetos coincidentes en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-155">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a3cf-156">Índice inicial de base cero del intervalo de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-156">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="2a3cf-157">Número de elementos que se va a quitar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-157">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="2a3cf-158">Quita todos los elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-158">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-159">Nueva lista inmutable con los elementos eliminados.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-159">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="2a3cf-160">Elemento a sustituir.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-160">The element to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="2a3cf-161">El elemento que se usará para sustituyir la primera aparición de <paramref name="oldValue" /></span><span class="sxs-lookup"><span data-stu-id="2a3cf-161">The element to replace the  the first occurrence of <paramref name="oldValue" /> with</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="2a3cf-162">Comparador de igualdad que se va a usar para hallar la coincidencia con <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-162">The equality comparer to use for matching <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="2a3cf-163">Devuelve una nueva lista con el primer elemento coincidente de la lista sustituido por el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-163">Returns a new list with the first matching element in the list replaced with the specified element.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-164">Lista nueva que contiene <paramref name="newValue" />, incluso si <paramref name="oldvalue" /> coincide con <paramref name="newValue" />.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-164">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2a3cf-165"><paramref name="oldValue" /> no existe en la lista.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-165"><paramref name="oldValue" /> does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2a3cf-166">Posición en la lista del elemento que se va a reemplazar.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-166">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="2a3cf-167">Elemento por el que se va a reemplazar el elemento antiguo.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-167">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="2a3cf-168">Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-168">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="2a3cf-169">Nueva lista que contiene el elemento nuevo, incluso si el elemento situado en la ubicación especificada es igual que el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="2a3cf-169">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>