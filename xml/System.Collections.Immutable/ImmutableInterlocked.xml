<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f48b074c6988c17bfc44b6e3612f6d7d03b1482" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52252473" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4f2f1-101">Contiene mecanismos de intercambio interbloqueados para colecciones inmutables.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f2f1-101">Contains interlocked exchange mechanisms for immutable collections.</span>
      </span>
      <span data-ttu-id="4f2f1-102">**Paquete NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">sobre las colecciones inmutables y la instalación</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f2f1-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
    <threadsafe>
      <span data-ttu-id="4f2f1-103">Este tipo es seguro para la ejecución de subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f2f1-103">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-104">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-104">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-105">Clave del valor a agregar o actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-105">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValueFactory">
          <span data-ttu-id="4f2f1-106">Función que recibe la clave y devuelve un nuevo valor para agregar al diccionario cuando no existe ningún valor anteriormente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-106">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="4f2f1-107">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-107">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-108">Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-108">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-109">Valor agregado o actualizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-109">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-110">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-110">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-111">Clave del valor a agregar o actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-111">The key for the value to add or update.</span>
          </span>
        </param>
        <param name="addValue">
          <span data-ttu-id="4f2f1-112">Valor a utilizar si no existe ningún valor anterior.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-112">The value to use if no previous value exists.</span>
          </span>
        </param>
        <param name="updateValueFactory">
          <span data-ttu-id="4f2f1-113">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-113">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-114">Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-114">Obtains the value from a dictionary after having added it or updated an existing entry.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-115">Valor agregado o actualizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-115">The added or updated value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-116">Tipo de elementos contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-116">The type of items contained in the collection</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-117">Variable o campo para actualizar de manera automática.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-117">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-118">Valor que se va a poner en cola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-118">The value to enqueue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-119">Pone en cola un elemento al final de una cola automáticamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-119">Atomically enqueues an element to the end of a queue.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-120">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-120">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-121">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-121">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-122">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-122">The variable or field to atomically update if the specified  is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-123">Clave del valor que se va a recuperar o agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-123">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="4f2f1-124">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-124">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
          <span data-ttu-id="4f2f1-125">Este delegado no se invocará más de una vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-125">This delegate will not be invoked more than once.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-126">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-126">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-127">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-127">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-128">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-128">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-129">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-129">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-130">Variable o campo para actualizar de manera automática si la clave especificada no se encuentra en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-130">The variable or field to atomically update if the specified key is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-131">Clave del valor que se va a obtener o agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-131">The key for the value to get or add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-132">Valor que se va a agregar al diccionario si no se encuentra la clave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-132">The value to add to the dictionary the key is not found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-133">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-133">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-134">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-134">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-135">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-135">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-136">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-136">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">To be added.</typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-137">Variable o campo para actualizar si el especificado no se encuentra en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-137">The variable or field to update if the specified is not in the dictionary.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-138">Clave del valor que se va a recuperar o agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-138">The key for the value to retrieve or add.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="4f2f1-139">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-139">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span>
          </span>
        </param>
        <param name="factoryArgument">
          <span data-ttu-id="4f2f1-140">Argumento que se va a pasar al generador de valores.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-140">The argument to pass to the value factory.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-141">Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-141">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-142">Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-142">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-143">Tipo de elemento almacenado por la matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-143">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-144">Destino, cuyo valor se compara con <paramref name="comparand" /> y que posiblemente se reemplace.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-144">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-145">Valor que reemplaza el valor de destino si la comparación da como resultado una igualdad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-145">The value that replaces the destination value if the comparison results in equality.</span>
          </span>
        </param>
        <param name="comparand">
          <span data-ttu-id="4f2f1-146">Valor que se compara con el valor que hay en <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-146">The value that is compared to the value at <paramref name="location" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-147">Compara dos matrices inmutables para comprobar si son iguales y, si lo son, reemplaza una de las matrices.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-147">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-148">Valor original de <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-148">The original value in <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-149">Tipo de elemento almacenado por la matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-149">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-150">Matriz que se va a establecer en el valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-150">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-151">Valor en el que está establecido el parámetro <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-151">The value to which the <paramref name="location" /> parameter is set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-152">Establece una matriz en el valor especificado y devuelve una referencia a la matriz original, como una operación atómica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-152">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-153">Valor original de <paramref name="location" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-153">The original value of <paramref name="location" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-154">Tipo de elemento almacenado por la matriz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-154">The type of element stored by the array.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-155">Matriz que se va a establecer en el valor especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-155">The array to set to the specified value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-156">Valor en el que está establecido el parámetro <paramref name="location" />, si no se inicializa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-156">The value to which the <paramref name="location" /> parameter is set, if it’s not initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-157">Si no se ha inicializado la matriz se establece una matriz en la matriz especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-157">Sets an array to the specified array if the array has not been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-158">
            <see langword="true" /> si se le asignó el valor especificado a la matriz; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-158">
              <see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-159">Tipo de elementos de la pila.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-159">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-160">Pila para actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-160">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-161">Valor que se va a insertar en la pila.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-161">The value to push on the stack.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-162">Inserta un nuevo elemento en la pila.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-162">Pushes a new element onto the stack.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd :  * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-163">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-163">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-164">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-164">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-165">Diccionario para actualizar con la clave y el valor especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-165">The dictionary to update with the specified key and value.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-166">Clave para agregar, si no se ha definido en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-166">The key to add, if is not already defined in the dictionary.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-167">El valor que se va a agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-167">The value to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-168">Agrega la clave y el valor especificados al diccionario si la clave no está en el diccionario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-168">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-169">
            <see langword="true" />, si la clave no está en el diccionario; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-169">
              <see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-170">Tipo de elementos de la cola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-170">The type of items in the queue.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-171">Variable o campo para actualizar de manera automática.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-171">The variable or field to atomically update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-172">Se establece en el valor del encabezado de la cola, si la cola no está vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-172">Set to the value from the head of the queue, if the queue not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-173">Quita de forma atómica y devuelve el elemento especificado en el encabezado de la cola, si la cola no está vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-173">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-174">
            <see langword="true" /> si la cola no está vacía y se quita el elemento del encabezado; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-174">
              <see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-175">Tipo de elementos de la pila.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-175">The type of items in the stack.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-176">Pila para actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-176">The stack to update.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-177">Recibe el valor quitado de la pila, si la pila no está vacía.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-177">Receives the value removed from the stack, if the stack is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-178">Quita un elemento de la parte superior de la pila, si hay un elemento para quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-178">Removes an element from the top of the stack, if there is an element to remove.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-179">
            <see langword="true" /> si un elemento se quita de la pila; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-179">
              <see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove :  * 'Key *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-180">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-180">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-181">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-181">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-182">Diccionario que se va a actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-182">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-183">Clave que se va a quitar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-183">The key to remove.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="4f2f1-184">Recibe el valor del elemento quitado, si el diccionario no está vacío.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-184">Receives the value of the removed item, if the dictionary is not empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-185">Quita el elemento con la clave especificada si la clave existe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-185">Removes the element with the specified key, if the key exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-186">
            <see langword="true" /> si se ha encontrado y eliminado la clave; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-186">
              <see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate :  * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">
          <span data-ttu-id="4f2f1-187">Tipo de claves contenidas en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-187">The type of the keys contained in the collection.</span>
          </span>
        </typeparam>
        <typeparam name="TValue">
          <span data-ttu-id="4f2f1-188">Tipo de valores contenidos en la colección.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-188">The type of the values contained in the collection.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-189">Diccionario que se va a actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-189">The dictionary to update.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="4f2f1-190">Clave a actualizar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-190">The key to update.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="4f2f1-191">Nuevo valor que se va establecer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-191">The new value to set.</span>
          </span>
        </param>
        <param name="comparisonValue">
          <span data-ttu-id="4f2f1-192">Valor actual de <paramref name="key" /> en orden para que la actualización tenga éxito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-192">The current value for <paramref name="key" /> in order for the update to succeed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-193">Establece la clave especificada en el valor especificado si la clave especificada ya está establecida en un valor específico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-193">Sets the specified key to the specified value if the specified key already is set to a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-194">
            <see langword="true" /> si <paramref name="key" /> y <paramref name="comparisonValue" /> están presentes en el diccionario y se ha actualizado la comparación a <paramref name="newValue" />; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-194">
              <see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-195">Tipo de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-195">The type of data.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-196">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-196">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="4f2f1-197">Función que transforma el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-197">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="4f2f1-198">Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-198">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-199">Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-199">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="4f2f1-200">La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-200">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-201">Es <c>true</c> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <c>false</c> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-201">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="4f2f1-202">Tipo de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-202">The type of data.</span>
          </span>
        </typeparam>
        <typeparam name="TArg">
          <span data-ttu-id="4f2f1-203">El tipo del argumento pasado a la <paramref name="transformer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-203">The type of argument passed to the <paramref name="transformer" />.</span>
          </span>
        </typeparam>
        <param name="location">
          <span data-ttu-id="4f2f1-204">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-204">The variable or field to be changed, which may be accessed by multiple threads.</span>
          </span>
        </param>
        <param name="transformer">
          <span data-ttu-id="4f2f1-205">Función que transforma el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-205">A function that mutates the value.</span>
          </span>
          <span data-ttu-id="4f2f1-206">Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-206">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span>
          </span>
        </param>
        <param name="transformerArgument">
          <span data-ttu-id="4f2f1-207">El argumento que se va a pasar a <paramref name="transformer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-207">The argument to pass to <paramref name="transformer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f2f1-208">Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-208">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span>
          </span>
          <span data-ttu-id="4f2f1-209">La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-209">The transformation is retried as many times as necessary to win the optimistic locking race.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f2f1-210">Es <c>true</c> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <c>false</c> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f2f1-210">
              <c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>