<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1f02302a0595556843ce02485a48eb3b3665db7" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52225940" /></Metadata><TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <TypeSignature Language="F#" Value="type SpeechUI = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="60968-101">Proporciona información de texto y estado acerca de operaciones de reconocimiento que se van a mostrar en la interfaz de usuario de la plataforma de voz.</span><span class="sxs-lookup"><span data-stu-id="60968-101">Provides text and status information on recognition operations to be displayed in the Speech platform user interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60968-102">Los miembros de la <xref:System.Speech.Recognition.SpeechUI> clase puede usarse para indicar comentarios exacta para el usuario final a través de la interfaz de usuario de reconocimiento de voz.</span><span class="sxs-lookup"><span data-stu-id="60968-102">The members of the <xref:System.Speech.Recognition.SpeechUI> class can be used to indicate exact feedback to the end user through the speech recognition user interface.</span></span> <span data-ttu-id="60968-103">Una aplicación puede devolver texto arbitrario y la información de correcto o con errores mediante esta clase.</span><span class="sxs-lookup"><span data-stu-id="60968-103">An application can return arbitrary text and success/failure information using this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60968-104">El ejemplo siguiente es un controlador para el <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="60968-104">The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="60968-105">Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña en el formulario "mi contraseña es...".</span><span class="sxs-lookup"><span data-stu-id="60968-105">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form "My password is …".</span></span>  
  
 <span data-ttu-id="60968-106">Si una contraseña no está presente o no es válido, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> envía información de error a la interfaz de usuario de la plataforma de voz.</span><span class="sxs-lookup"><span data-stu-id="60968-106">If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="F#" Value="static member SendTextFeedback : System.Speech.Recognition.RecognitionResult * string * bool -&gt; bool" Usage="System.Speech.Recognition.SpeechUI.SendTextFeedback (result, feedback, isSuccessfulAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="60968-107">Instancia válida <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span><span class="sxs-lookup"><span data-stu-id="60968-107">A valid <see cref="T:System.Speech.Recognition.RecognitionResult" /> instance.</span></span></param>
        <param name="feedback"><span data-ttu-id="60968-108"><see cref="T:System.String" /> que contiene un comentario sobre la operación de reconocimiento que generó <see cref="T:System.Speech.Recognition.RecognitionResult" /><paramref name="result" />.</span><span class="sxs-lookup"><span data-stu-id="60968-108">A <see cref="T:System.String" /> containing a comment about the recognition operation that produced the <see cref="T:System.Speech.Recognition.RecognitionResult" /><paramref name="result" />.</span></span></param>
        <param name="isSuccessfulAction"><span data-ttu-id="60968-109">Valor <see langword="bool" /> que indica si la aplicación consideró correcta la operación de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="60968-109">A <see langword="bool" /> indicating whether the application deemed the recognition operation a success.</span></span></param>
        <summary><span data-ttu-id="60968-110">Envía texto de estado y descriptivo a la interfaz de usuario de la plataforma de voz acerca del estado de una operación de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="60968-110">Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.</span></span></summary>
        <returns><span data-ttu-id="60968-111">Es <see langword="true" /> si la información proporcionada al método (<paramref name="Feedback" /> e <paramref name="isSuccessfulAction" />) se puso correctamente a disposición de la interfaz de usuario de la plataforma de voz, y es <see langword="false" /> si la operación no se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="60968-111"><see langword="true" /> if the information provided to the method (<paramref name="Feedback" />, and <paramref name="isSuccessfulAction" />) was successfully made available to the Speech platform user interface, and <see langword="false" /> if the operation failed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60968-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> puede utilizarse para indicar que una operación de reconocimiento no se pudo cumplir ciertos criterios, incluso si la entrada se ha reconocido.</span><span class="sxs-lookup"><span data-stu-id="60968-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.</span></span>  
  
 <span data-ttu-id="60968-113">Un ejemplo es la comprobación de la información de código de seguridad, donde la entrada se ha reconocido por completo, pero la información de comprobación era incorrecta.</span><span class="sxs-lookup"><span data-stu-id="60968-113">An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60968-114">El ejemplo siguiente es un controlador para un <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="60968-114">The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="60968-115">Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña del formulario, "mi contraseña es...".</span><span class="sxs-lookup"><span data-stu-id="60968-115">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, "My password is …".</span></span>  
  
 <span data-ttu-id="60968-116">Si una contraseña no está presente o no es válido, **SendTextFeedback** se usa para enviar información de error a la interfaz de usuario de la plataforma de voz.</span><span class="sxs-lookup"><span data-stu-id="60968-116">If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>