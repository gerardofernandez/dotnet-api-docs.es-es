<Type Name="SpeechRecognitionRejectedEventArgs" FullName="System.Speech.Recognition.SpeechRecognitionRejectedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4f2c10d10d10894b9809f3d56f74f3e30ff1f332" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52369526" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognitionRejectedEventArgs : System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SpeechRecognitionRejectedEventArgs extends System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionRejectedEventArgs&#xA;Inherits RecognitionEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionRejectedEventArgs : System::Speech::Recognition::RecognitionEventArgs" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionRejectedEventArgs = class&#xA;    inherit RecognitionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognitionEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6a94d-101">Proporciona información para los eventos <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" /> y <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6a94d-101">Provides information for the <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" /> and <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" /> events.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a94d-102">El `SpeechRecognitionRejected` evento es desencadenado por la <xref:System.Speech.Recognition.SpeechRecognizer> y <xref:System.Speech.Recognition.SpeechRecognitionEngine> clases.</span><span class="sxs-lookup"><span data-stu-id="6a94d-102">The `SpeechRecognitionRejected` event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
 <span data-ttu-id="6a94d-103">**SpeechRecognitionRejected** eventos se generan mediante un motor de reconocimiento de voz cuando ninguna de las alternativas de una operación de reconocimiento tiene una puntuación de confianza lo suficientemente alto como para ser aceptados.</span><span class="sxs-lookup"><span data-stu-id="6a94d-103">**SpeechRecognitionRejected** events are generated by a speech recognition engine when none of the alternates from a recognition operation have a high enough confidence score to be accepted.</span></span> <span data-ttu-id="6a94d-104">Información detallada sobre las frases rechazadas está disponible a través de la <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="6a94d-104">Detailed information about rejected phrases is available through the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property.</span></span>  
  
 <span data-ttu-id="6a94d-105">**SpeechRecognitionRejectedEventArgs** deriva <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="6a94d-105">**SpeechRecognitionRejectedEventArgs** derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a94d-106">El ejemplo siguiente se reconoce frases como "Mostrar la lista de intérpretes de la categoría de jazz" o "Mostrar totalmente confiable álbumes".</span><span class="sxs-lookup"><span data-stu-id="6a94d-106">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="6a94d-107">El ejemplo usa un controlador para el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> eventos para mostrar una notificación en la consola cuando el contenido de voz de entrada no coincide con el contenido de la gramática con la confianza suficiente para generar un reconocimiento correcto.</span><span class="sxs-lookup"><span data-stu-id="6a94d-107">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=   
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
        Console.WriteLine("  Rejected phrase: " + phrase.Text);  
        Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
  </Docs>
  <Members />
</Type>