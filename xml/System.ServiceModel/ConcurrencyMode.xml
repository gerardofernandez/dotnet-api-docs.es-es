<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fe756765593e1dcdb7c997005b1f83edb4d26063" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64151497" /></Metadata><TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="54df3-101">Especifica si una clase de servicio admite modos de operación de subproceso único o múltiple.</span><span class="sxs-lookup"><span data-stu-id="54df3-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54df3-102"><xref:System.ServiceModel.ConcurrencyMode> se utiliza junto con la propiedad <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> para especificar si una clase de servicio admite de modos de operación de subproceso único o múltiple.</span><span class="sxs-lookup"><span data-stu-id="54df3-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="54df3-103">Una operación de subproceso único puede ser reentrante o no reentrante.</span><span class="sxs-lookup"><span data-stu-id="54df3-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="54df3-104">En la tabla siguiente se muestra cuando Windows Communication Foundation (WCF) permite una operación que se debe invocar mientras otra está en curso, dependiendo de la <xref:System.ServiceModel.ConcurrencyMode>.</span><span class="sxs-lookup"><span data-stu-id="54df3-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="54df3-105">Valor de ConcurrencyMode</span><span class="sxs-lookup"><span data-stu-id="54df3-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="54df3-106">¿Se puede invocar una nueva operación?</span><span class="sxs-lookup"><span data-stu-id="54df3-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="54df3-107">Single</span><span class="sxs-lookup"><span data-stu-id="54df3-107">Single</span></span>|<span data-ttu-id="54df3-108">Nunca.</span><span class="sxs-lookup"><span data-stu-id="54df3-108">Never.</span></span>|  
|<span data-ttu-id="54df3-109">Reentrante</span><span class="sxs-lookup"><span data-stu-id="54df3-109">Reentrant</span></span>|<span data-ttu-id="54df3-110">Sólo al invocar otro servicio o una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="54df3-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="54df3-111">Múltiple</span><span class="sxs-lookup"><span data-stu-id="54df3-111">Multiple</span></span>|<span data-ttu-id="54df3-112">Siempre es.</span><span class="sxs-lookup"><span data-stu-id="54df3-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="54df3-113">El ejemplo de código siguiente muestra la diferencia entre el uso único, reentrante y varios.</span><span class="sxs-lookup"><span data-stu-id="54df3-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="54df3-114">Este ejemplo no se compila sin una implementación real detrás de él, pero muestran el tipo de garantías que hace que WCF y lo que significa para el código de operación de subprocesamiento.</span><span class="sxs-lookup"><span data-stu-id="54df3-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="54df3-115">La instancia del servicio es de subproceso múltiple.</span><span class="sxs-lookup"><span data-stu-id="54df3-115">The service instance is multi-threaded.</span></span> <span data-ttu-id="54df3-116">No se realiza ninguna garantía de sincronización.</span><span class="sxs-lookup"><span data-stu-id="54df3-116">No synchronization guarantees are made.</span></span> <span data-ttu-id="54df3-117">Dado que otros subprocesos pueden cambiar en cualquier momento su objeto de servicio, debe administrar en todo momento la coherencia del estado y la sincronización.</span><span class="sxs-lookup"><span data-stu-id="54df3-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="54df3-118">La instancia del servicio es de subproceso único y acepta llamadas reentrantes.</span><span class="sxs-lookup"><span data-stu-id="54df3-118">The service instance is single-threaded and accepts reentrant calls.</span></span> <span data-ttu-id="54df3-119">El servicio reentrante acepta llamadas al llamar a otro servicio; es, por consiguiente, responsabilidad suya el establecer un estado de objeto coherente antes de las llamadas y debe confirmar que los datos locales de operaciones sean válidos después de las llamadas.</span><span class="sxs-lookup"><span data-stu-id="54df3-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span></span> <span data-ttu-id="54df3-120">Tenga en cuenta que la instancia del servicio solo se desbloquea llamando a otro servicio a través de un canal de WCF.</span><span class="sxs-lookup"><span data-stu-id="54df3-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span></span> <span data-ttu-id="54df3-121">En este caso, el servicio al que se ha llamado puede reentrar al primer servicio mediante una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="54df3-121">In this case, the called service can reenter the first service via a callback.</span></span> <span data-ttu-id="54df3-122">Si el primer servicio no es reentrante, la secuencia de llamadas resulta en un interbloqueo.</span><span class="sxs-lookup"><span data-stu-id="54df3-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span></span> <span data-ttu-id="54df3-123">Para obtener información detallada, vea <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span><span class="sxs-lookup"><span data-stu-id="54df3-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="54df3-124">La instancia del servicio es de subproceso único y no acepta llamadas reentrantes.</span><span class="sxs-lookup"><span data-stu-id="54df3-124">The service instance is single-threaded and does not accept reentrant calls.</span></span> <span data-ttu-id="54df3-125">Si la propiedad <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> es <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, y los mensajes adicionales llegan mientras la instancia repara una llamada, estos mensajes deben esperar hasta que el servicio esté disponible o hasta que los mensajes superen el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="54df3-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>