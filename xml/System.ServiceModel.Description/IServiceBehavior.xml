<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f26cbbfb79ab6e7cd4db524dfccbb6a72e11474" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37617248" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="dd73b-101">Proporciona un mecanismo para modificar o insertar las extensiones personalizadas en un servicio completo, incluso <see cref="T:System.ServiceModel.ServiceHostBase" />.</span><span class="sxs-lookup"><span data-stu-id="dd73b-101">Provides a mechanism to modify or insert custom extensions across an entire service, including the <see cref="T:System.ServiceModel.ServiceHostBase" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd73b-102">Implemente <xref:System.ServiceModel.Description.IServiceBehavior> para modificar, examinar o extender algún aspecto de la ejecución de todo el servicio en el nivel de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="dd73b-102">Implement <xref:System.ServiceModel.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level:</span></span>  
  
-   <span data-ttu-id="dd73b-103">Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> para cambiar los valores de propiedad en tiempo de ejecución o insertar objetos de extensión personalizados, como controladores de errores, interceptores de mensajes o parámetros, extensiones de seguridad y otros objetos de extensión personalizados.</span><span class="sxs-lookup"><span data-stu-id="dd73b-103">Use the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span>  
  
-   <span data-ttu-id="dd73b-104">Use el <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> método para examinar la descripción antes de Windows Communication Foundation (WCF) se construye el servicio en ejecución para confirmar que puede ejecutarse correctamente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-104">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to examine the description before Windows Communication Foundation (WCF) constructs the executing service to confirm that it can execute properly.</span></span>  
  
-   <span data-ttu-id="dd73b-105">Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> para pasar la información personalizada del servicio a un elemento de enlace de modo que pueda admitir correctamente el servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-105">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly.</span></span>  
  
 <span data-ttu-id="dd73b-106">Los objetos <xref:System.ServiceModel.Description.IServiceBehavior> pueden utilizar cualquiera de estos métodos, pero a menudo sólo uno es importante; en ese caso, los métodos no usados pueden ser devueltos sin ningún valor.</span><span class="sxs-lookup"><span data-stu-id="dd73b-106"><xref:System.ServiceModel.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd73b-107">Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros.</span><span class="sxs-lookup"><span data-stu-id="dd73b-107">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="dd73b-108">Este <xref:System.ServiceModel.Description.ServiceDescription> parámetro se utiliza solo para realizar un examen, si se modifican estos objetos el comportamiento de la ejecución no estará definido.</span><span class="sxs-lookup"><span data-stu-id="dd73b-108">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined.</span></span>  
  
 <span data-ttu-id="dd73b-109">Para realizar la tarea de personalización prevista, el objeto <xref:System.ServiceModel.Description.IServiceBehavior> debe agregarse a la propiedad <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> antes de la construcción del tiempo de ejecución del servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-109">To perform the customization task for which it is intended, the <xref:System.ServiceModel.Description.IServiceBehavior> object must be added to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime.</span></span> <span data-ttu-id="dd73b-110">Existen tres formas de hacer esto:</span><span class="sxs-lookup"><span data-stu-id="dd73b-110">There are three ways to do this:</span></span>  
  
-   <span data-ttu-id="dd73b-111">Mediante programación agregue el comportamiento de servicio personalizado a la propiedad <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> antes de que se llame al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en el objeto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dd73b-111">Programmatically add the custom service behavior to the <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> object.</span></span>  
  
-   <span data-ttu-id="dd73b-112">Cree un atributo personalizado que implemente <xref:System.ServiceModel.Description.IServiceBehavior> y utilícelo para marcar las clases de servicio que deben modificarse.</span><span class="sxs-lookup"><span data-stu-id="dd73b-112">Create a custom attribute that implements <xref:System.ServiceModel.Description.IServiceBehavior> and use it to mark service classes that are to be modified.</span></span> <span data-ttu-id="dd73b-113">Cuando un <xref:System.ServiceModel.ServiceHost> haya construido, WCF usa la reflexión para detectar los atributos en el tipo de servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-113">When a <xref:System.ServiceModel.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type.</span></span> <span data-ttu-id="dd73b-114">Si cualquier atributo implementa <xref:System.ServiceModel.Description.IServiceBehavior>, se agregan a la colección de comportamientos en <xref:System.ServiceModel.Description.ServiceDescription>.</span><span class="sxs-lookup"><span data-stu-id="dd73b-114">If any attributes implement <xref:System.ServiceModel.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:System.ServiceModel.Description.ServiceDescription>.</span></span>  
  
-   <span data-ttu-id="dd73b-115">Extienda la clase <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para admitir la especificación del comportamiento en una aplicación o archivo de configuración del equipo.</span><span class="sxs-lookup"><span data-stu-id="dd73b-115">Extend the <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file.</span></span> <span data-ttu-id="dd73b-116">Para obtener más información, vea la sección Ejemplo.</span><span class="sxs-lookup"><span data-stu-id="dd73b-116">See the Example section for more information.</span></span>  
  
 <span data-ttu-id="dd73b-117">Ejemplos de comportamientos de servicio de WCF la <xref:System.ServiceModel.ServiceBehaviorAttribute> atributo, el <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, el <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> y <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> comportamiento.</span><span class="sxs-lookup"><span data-stu-id="dd73b-117">Examples of service behaviors in WCF include the <xref:System.ServiceModel.ServiceBehaviorAttribute> attribute, the <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd73b-118">El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-118">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="dd73b-119">En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-119">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="dd73b-120">La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="dd73b-120">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="dd73b-121">En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-121">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="dd73b-122">Descripción del servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-122">The service description of the service.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="dd73b-123">Host de servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-123">The host of the service.</span></span></param>
        <param name="endpoints"><span data-ttu-id="dd73b-124">puntos de conexión del servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-124">The service endpoints.</span></span></param>
        <param name="bindingParameters"><span data-ttu-id="dd73b-125">Objetos personalizados a los que los elementos de enlace tienen acceso.</span><span class="sxs-lookup"><span data-stu-id="dd73b-125">Custom objects to which binding elements have access.</span></span></param>
        <summary><span data-ttu-id="dd73b-126">Proporciona la capacidad de pasar los datos personalizados a los elementos de enlace para admitir la implementación del contrato.</span><span class="sxs-lookup"><span data-stu-id="dd73b-126">Provides the ability to pass custom data to binding elements to support the contract implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd73b-127">Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> para agregar los objetos de datos personalizados a la colección `parameters` que los elementos de enlace pueden utilizar para adquirir la información adicional y permitirles admitir el contrato.</span><span class="sxs-lookup"><span data-stu-id="dd73b-127">Use the <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> method to add custom data objects to the `parameters` collection that binding elements can use to acquire extra information to enable them to support the contract.</span></span>  
  
 <span data-ttu-id="dd73b-128">Este método se llama una vez para cada URI de escucha.</span><span class="sxs-lookup"><span data-stu-id="dd73b-128">This method is called once for each listen URI.</span></span> <span data-ttu-id="dd73b-129">Por ejemplo, si un servicio tiene cuatro extremos y dos de ellos tienen el mismo URI de escucha, se llamará tres veces a este método.</span><span class="sxs-lookup"><span data-stu-id="dd73b-129">For example, if a service has four endpoints, and two of them have the same listen URI, then this method gets called three times.</span></span> <span data-ttu-id="dd73b-130">La razón es que los `bindingParameters` tienen como destino cada pila del canal y existe una pila de canal para cada URI de escucha.</span><span class="sxs-lookup"><span data-stu-id="dd73b-130">The reason is that the `bindingParameters` target each channel stack and there is one channel stack for each listen URI.</span></span> <span data-ttu-id="dd73b-131">Dado que cada llamada recibe esos extremos en esa URI de escucha, dos llamadas obtienen un único <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> y una llamada obtiene una colección de dos objetos <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dd73b-131">Because each call receives those endpoints at that listen URI, two calls each get a single <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, and one call gets a collection of two <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd73b-132">Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros.</span><span class="sxs-lookup"><span data-stu-id="dd73b-132">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="dd73b-133">El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.</span><span class="sxs-lookup"><span data-stu-id="dd73b-133">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="dd73b-134">Descripción del servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-134">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="dd73b-135">Host que se está generando actualmente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-135">The host that is currently being built.</span></span></param>
        <summary><span data-ttu-id="dd73b-136">Proporciona la capacidad de cambiar los valores de propiedad en tiempo de ejecución o insertar objetos de extensión personalizados, tales como controladores de error, interceptores de mensajes o parámetros, extensiones de seguridad, y otros objetos de extensión personalizados.</span><span class="sxs-lookup"><span data-stu-id="dd73b-136">Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd73b-137">Implemente el método <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> para inspeccionar o modificar el objeto <xref:System.ServiceModel.ServiceHostBase> que se está construyendo para admitir algún escenario de ejecución personalizado.</span><span class="sxs-lookup"><span data-stu-id="dd73b-137">Implement the <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to inspect or modify the <xref:System.ServiceModel.ServiceHostBase> object that is being constructed in order to support some custom execution scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd73b-138">Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros.</span><span class="sxs-lookup"><span data-stu-id="dd73b-138">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="dd73b-139">El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.</span><span class="sxs-lookup"><span data-stu-id="dd73b-139">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd73b-140">El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-140">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="dd73b-141">En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-141">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="dd73b-142">La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="dd73b-142">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="dd73b-143">En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-143">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription"><span data-ttu-id="dd73b-144">Descripción del servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-144">The service description.</span></span></param>
        <param name="serviceHostBase"><span data-ttu-id="dd73b-145">Host del servicio que se está construyendo actualmente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-145">The service host that is currently being constructed.</span></span></param>
        <summary><span data-ttu-id="dd73b-146">Proporciona la capacidad de inspeccionar el host y la descripción del servicio para confirmar que este puede ejecutarse correctamente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-146">Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd73b-147">Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> para confirmar si el servicio actual puede ejecutarse correctamente de acuerdo con su escenario.</span><span class="sxs-lookup"><span data-stu-id="dd73b-147">Use the <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> method to confirm whether the current service can execute properly according to your scenario.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dd73b-148">Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros.</span><span class="sxs-lookup"><span data-stu-id="dd73b-148">All of the <xref:System.ServiceModel.Description.IServiceBehavior> methods pass <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> and <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> objects as a parameters.</span></span> <span data-ttu-id="dd73b-149">El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.</span><span class="sxs-lookup"><span data-stu-id="dd73b-149">The <xref:System.ServiceModel.Description.ServiceDescription> parameter is for examination and insertion of customizations only; if you otherwise modify these objects the execution behavior is undefined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd73b-150">El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio.</span><span class="sxs-lookup"><span data-stu-id="dd73b-150">The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application.</span></span> <span data-ttu-id="dd73b-151">En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-151">In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.</span></span>  
  
 <span data-ttu-id="dd73b-152">La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.</span><span class="sxs-lookup"><span data-stu-id="dd73b-152">The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> of type `GreetingFault`.</span></span>  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 <span data-ttu-id="dd73b-153">En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.</span><span class="sxs-lookup"><span data-stu-id="dd73b-153">In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.</span></span>  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>