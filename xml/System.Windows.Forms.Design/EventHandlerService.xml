<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68564afaf15992af43bd94c6d17a5b5b472be0c6" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39750989" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <TypeSignature Language="F#" Value="type EventHandlerService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eab99-101">Proporciona una manera sistemática de administrar los controladores de eventos para el documento actual.</span><span class="sxs-lookup"><span data-stu-id="eab99-101">Provides a systematic way to manage event handlers for the current document.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab99-102">Los programadores pueden desear para que pueda escribir código en un mismo lugar que controla los eventos de un tipo determinado.</span><span class="sxs-lookup"><span data-stu-id="eab99-102">Developers may want to be able to write code in one place that handles events of a certain type.</span></span>  
  
 <span data-ttu-id="eab99-103">Además, los desarrolladores que deba cambiar globalmente el comportamiento de los controladores para eventos concretos o tipos de eventos, que se pueden distribuir entre los componentes del diseñador.</span><span class="sxs-lookup"><span data-stu-id="eab99-103">Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.</span></span>  
  
 <span data-ttu-id="eab99-104">Los diseñadores para un proyecto típico son muchos objetos diferentes, por lo que puede ser útil enumerar y almacenar la referencia a estos eventos desde un lugar común.</span><span class="sxs-lookup"><span data-stu-id="eab99-104">The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.</span></span>  
  
 <span data-ttu-id="eab99-105">Este servicio implementa una "pila de eventos" que contiene el conjunto actual de controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="eab99-105">This service implements an "event stack" that contains the current set of event handlers.</span></span> <span data-ttu-id="eab99-106">La pila puede tener una variedad de distintos tipos de controladores en la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-106">The stack may have a variety of different types of handlers on the stack.</span></span>  
  
 <span data-ttu-id="eab99-107">Por ejemplo, un diseñador puede insertar o agregar un controlador de teclado y un controlador del mouse en la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-107">For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.</span></span> <span data-ttu-id="eab99-108">Cuando un diseñador solicita un controlador de eventos, el servicio encontrará el controlador de nivel superior de la pila que coincide con la clase solicitada.</span><span class="sxs-lookup"><span data-stu-id="eab99-108">When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.</span></span>  
  
 <span data-ttu-id="eab99-109">De este modo el servicio se puede extender a cualquier esquema de eventos y también permite a tipos específicos de los controladores de eventos que se debe reemplazar.</span><span class="sxs-lookup"><span data-stu-id="eab99-109">This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.</span></span> <span data-ttu-id="eab99-110">Por ejemplo, puede reemplazar los controladores de eventos del mouse sin que afecte a los controladores de eventos de menú o los controladores de eventos de teclado.</span><span class="sxs-lookup"><span data-stu-id="eab99-110">For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.EventHandlerService : System.Windows.Forms.Control -&gt; System.Windows.Forms.Design.EventHandlerService" Usage="new System.Windows.Forms.Design.EventHandlerService focusWnd" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd"><span data-ttu-id="eab99-111">Control <see cref="T:System.Windows.Forms.Control" /> que se está diseñado.</span><span class="sxs-lookup"><span data-stu-id="eab99-111">The <see cref="T:System.Windows.Forms.Control" /> which is being designed.</span></span></param>
        <summary><span data-ttu-id="eab99-112">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.EventHandlerService" />.</span><span class="sxs-lookup"><span data-stu-id="eab99-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberSignature Language="F#" Value="member this.EventHandlerChanged : EventHandler " Usage="member this.EventHandlerChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eab99-113">Se desencadena un evento OnEventHandlerChanged.</span><span class="sxs-lookup"><span data-stu-id="eab99-113">Fires an OnEventHandlerChanged event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusWindow : System.Windows.Forms.Control" Usage="System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eab99-114">Obtiene el control al que están asociados los controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="eab99-114">Gets the control to which event handlers are attached.</span></span></summary>
        <value><span data-ttu-id="eab99-115">Control <see cref="T:System.Windows.Forms.Control" /> asociado mediante el constructor.</span><span class="sxs-lookup"><span data-stu-id="eab99-115">The <see cref="T:System.Windows.Forms.Control" /> which was attached through the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberSignature Language="F#" Value="abstract member GetHandler : Type -&gt; obj&#xA;override this.GetHandler : Type -&gt; obj" Usage="eventHandlerService.GetHandler handlerType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType"><span data-ttu-id="eab99-116">Tipo del controlador que se va a obtener.</span><span class="sxs-lookup"><span data-stu-id="eab99-116">The type of the handler to get.</span></span></param>
        <summary><span data-ttu-id="eab99-117">Obtiene el controlador de eventos actualmente activo del tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="eab99-117">Gets the currently active event handler of the specified type.</span></span></summary>
        <returns><span data-ttu-id="eab99-118">Instancia del controlador o <see langword="null" /> si no hay ningún controlador del tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="eab99-118">An instance of the handler, or <see langword="null" /> if there is no handler of the requested type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab99-119">Nunca debe almacenar en caché este valor porque otros componentes son gratuitos cambiarlo.</span><span class="sxs-lookup"><span data-stu-id="eab99-119">You should never cache this value because other components are free to change it.</span></span> <span data-ttu-id="eab99-120">Esta llamada es bastante rápida, sin embargo, especialmente para los casos en que se pide siempre el mismo tipo de controlador.</span><span class="sxs-lookup"><span data-stu-id="eab99-120">This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PopHandler : obj -&gt; unit&#xA;override this.PopHandler : obj -&gt; unit" Usage="eventHandlerService.PopHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="eab99-121">Controlador que se va a quitar de la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-121">The handler to remove from the stack.</span></span></param>
        <summary><span data-ttu-id="eab99-122">Extrae el controlador especificado de la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-122">Pops the given handler off of the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab99-123">Si el controlador no es el componente de nivel superior en la pila, esto mostrará todos los controladores hasta y controlador incluido.</span><span class="sxs-lookup"><span data-stu-id="eab99-123">If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PushHandler : obj -&gt; unit&#xA;override this.PushHandler : obj -&gt; unit" Usage="eventHandlerService.PushHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="eab99-124">El controlador que se va a agregar a la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-124">The handler to add to the stack.</span></span></param>
        <summary><span data-ttu-id="eab99-125">Inserta un nuevo controlador de eventos en la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-125">Pushes a new event handler on the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eab99-126">Este controlador se usará en todos los componentes que solicitan un tipo de controlador compatible.</span><span class="sxs-lookup"><span data-stu-id="eab99-126">This handler will be used by all components that request a compatible handler type.</span></span> <span data-ttu-id="eab99-127">Si este controlador no admite el tipo solicitado, se usará el controlador siguiente en la pila.</span><span class="sxs-lookup"><span data-stu-id="eab99-127">If this handler does not support the requested type, the next handler on the stack will be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>