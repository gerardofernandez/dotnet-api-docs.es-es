<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f99bbb0e42da0960b73f91e7fcd9fea067f3d2ea" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64101245" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1a2c9-101">Define los métodos que permiten la inspección o modificación personalizadas de mensajes de la aplicación entrantes y salientes en aplicaciones de servicio.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a2c9-102">Implemente <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para inspeccionar o modificar los mensajes de la aplicación entrantes o salientes antes de enviar un mensaje de solicitud a una operación, o antes de devolver un mensaje de respuesta al autor de una llamada.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="1a2c9-103">Hay un gran número de situaciones que requieren que se intercepten los mensajes antes de invocar la operación a la que están destinados.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="1a2c9-104">Por ejemplo, puede registrar los mensajes de aplicación entrantes o usar una característica que se base en el encabezado de un mensaje.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="1a2c9-105">Normalmente, los inspectores de mensajes son insertados por un comportamiento de servicio (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), un comportamiento de extremo (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), o un comportamiento de contrato (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="1a2c9-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="1a2c9-106">A continuación, el comportamiento agrega el inspector de mensajes a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="1a2c9-107">Para obtener más información sobre cómo extender el tiempo de ejecución utilizando los comportamientos, consulte [Extending ServiceHost y la capa del modelo de servicio](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="1a2c9-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="1a2c9-108">El método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> habilita el comportamiento personalizado después de recibir el mensaje, pero antes de enviarlo a la operación a la que va dirigido.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="1a2c9-109">El método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> habilita el comportamiento personalizado después de la devolución de la operación, pero antes de que se envíe la respuesta.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a2c9-110">Se llama a los objetos <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> siempre en el mismo punto durante el envío del mensaje, sin tener en cuenta si una operación es unidireccional o del tipo solicitud-respuesta.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a2c9-111">En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="1a2c9-112">En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="1a2c9-113">En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="1a2c9-114">Mensaje de solicitud.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="1a2c9-115">Canal de entrada.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="1a2c9-116">Instancia de servicio actual.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="1a2c9-117">Se le llama una vez que se ha recibido un mensaje entrante, pero antes de que el mensaje se envíe a la operación a la que va dirigido.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="1a2c9-118">Objeto utilizado para poner en correlación el estado.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-118">The object used to correlate state.</span></span> <span data-ttu-id="1a2c9-119">Este objeto se devuelve en el método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a2c9-120">Use el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> para inspeccionar o modificar el mensaje entrante, el canal de cliente que lo proporcionó, y la instancia de servicio actual.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="1a2c9-121">El valor devuelto puede ser cualquier objeto que desee usar para la correlación. Se le devuelve como parámetro `correlationState` en el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a2c9-122">No puede usar el cuerpo del mensaje a menos que almacene en búfer el mensaje completo y realice una copia.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="1a2c9-123">Si hace esto, debe realizar dos copias del mensaje: una para realizar la inspección y otra para invalidar el parámetro `request`.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a2c9-124">En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="1a2c9-125">En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="1a2c9-126">En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="1a2c9-127">Mensaje de respuesta.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-127">The reply message.</span></span> <span data-ttu-id="1a2c9-128">Este valor es nulo si la operación es unidireccional.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="1a2c9-129">El objeto de correlación devuelto desde el método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="1a2c9-130">Se le llama después de la devolución de la operación, pero antes de que se envíe el mensaje de respuesta.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a2c9-131">Use el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> para realizar el comportamiento personalizado antes de enviar el mensaje de retorno.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="1a2c9-132">`correlationState` es el objeto devuelto del método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> que puede utilizar para realizar la correlación entre las llamadas entrantes y salientes de manera que admitan el comportamiento.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a2c9-133">En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="1a2c9-134">En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="1a2c9-135">En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="1a2c9-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>