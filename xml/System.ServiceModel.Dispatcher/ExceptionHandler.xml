<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f02d4a390bb9bb135205dfb9606eecfe3a51a31e" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48638103" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="212dd-101">Extienda la clase <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para crear un controlador de excepciones para las excepciones no controladas que tengan lugar dentro del tiempo de ejecución de Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="212dd-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="212dd-102">Extienda la clase <xref:System.ServiceModel.Dispatcher.ExceptionHandler> e invalide el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> para determinar si una excepción debe finalizar la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="212dd-103">A continuación, cree una nueva instancia de personalizado <xref:System.ServiceModel.Dispatcher.ExceptionHandler> clase y asignarla a estático <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propiedad antes de crear clientes WCF o servicios.</span><span class="sxs-lookup"><span data-stu-id="212dd-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="212dd-104">En el ejemplo de código siguiente se muestra una implementación de la clase abstracta <xref:System.ServiceModel.Dispatcher.ExceptionHandler> que invalida el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.</span><span class="sxs-lookup"><span data-stu-id="212dd-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="212dd-105">El ejemplo de código siguiente muestra cómo habilitar personalizado `MyExceptionHandler` para las excepciones no controladas que se producen en el tiempo de ejecución WCF.</span><span class="sxs-lookup"><span data-stu-id="212dd-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="212dd-106">Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</span><span class="sxs-lookup"><span data-stu-id="212dd-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="212dd-107">Obtiene una instancia de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que controla todas las excepciones.</span><span class="sxs-lookup"><span data-stu-id="212dd-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span></span></summary>
        <value><span data-ttu-id="212dd-108">Objeto <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que devuelve <see langword="true" /> para todas las excepciones.</span><span class="sxs-lookup"><span data-stu-id="212dd-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="212dd-109">Obtiene o establece la implementación de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> actual para el dominio de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="212dd-110">Asignar un personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recibe excepciones no controladas que se producen en subprocesos asincrónicos de Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="212dd-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous Windows Communication Foundation (WCF) threads.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="212dd-111">De forma predeterminada, el <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> propiedad es `null`, y las excepciones no controladas en subprocesos asincrónicos de WCF finalizan la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="212dd-112">Establezca esta propiedad en un objeto <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para recibir estas excepciones y actuar antes ellas.</span><span class="sxs-lookup"><span data-stu-id="212dd-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="212dd-113">Si una excepción no controlada se produce en un subproceso asincrónico de WCF y llega a este controlador, el estado del dominio de aplicación puede verse comprometido.</span><span class="sxs-lookup"><span data-stu-id="212dd-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="212dd-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> no debe devolver `true` para estas excepciones.</span><span class="sxs-lookup"><span data-stu-id="212dd-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="212dd-115">Excepción que se ha producido en el runtime de Windows Communication Foundation (WCF) y que puede finalizar la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-115">The exception the occurred within the Windows Communication Foundation (WCF) runtime and which may terminate the application.</span></span></param>
        <summary><span data-ttu-id="212dd-116">Si se invalida en una clase derivada, devuelve <see langword="true" /> si se ha controlado la excepción, o <see langword="false" /> si la excepción se debe volver a iniciar y la aplicación se debe finalizar.</span><span class="sxs-lookup"><span data-stu-id="212dd-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span></span></summary>
        <returns><span data-ttu-id="212dd-117">Es <see langword="true" /> si se ha controlado la excepción; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="212dd-117"><see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="212dd-118">La propiedad <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> devuelve `true` si se ha controlado la excepción.</span><span class="sxs-lookup"><span data-stu-id="212dd-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="212dd-119">Si devuelve `false` o inicia otra excepción, la excepción original se vuelve a iniciar.</span><span class="sxs-lookup"><span data-stu-id="212dd-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="212dd-120">En el ejemplo de código siguiente se muestra una implementación de la clase abstracta <xref:System.ServiceModel.Dispatcher.ExceptionHandler> que invalida el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.</span><span class="sxs-lookup"><span data-stu-id="212dd-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="212dd-121">El ejemplo de código siguiente muestra cómo habilitar personalizado `MyExceptionHandler` para las excepciones no controladas que se producen en el tiempo de ejecución WCF.</span><span class="sxs-lookup"><span data-stu-id="212dd-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="212dd-122">Obtiene o establece la implementación de transporte de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para el dominio de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span></span></summary>
        <value><span data-ttu-id="212dd-123">Personalizada <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> objeto que recibe excepciones no controladas que se producen dentro de los transportes global de Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="212dd-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global Windows Communication Foundation (WCF) transports.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="212dd-124">De forma predeterminada, el <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propiedad está establecida en el valor de <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causando las excepciones no controladas dentro de los transportes WCF se pasará por alto.</span><span class="sxs-lookup"><span data-stu-id="212dd-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="212dd-125">Establezca esta propiedad en una instancia de <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para recibir estas excepciones y actuar ante ellas.</span><span class="sxs-lookup"><span data-stu-id="212dd-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="212dd-126">Si una excepción no controlada se produce dentro de un transporte WCF global y llega a este controlador, es posible que el estado del dominio de aplicación está en peligro.</span><span class="sxs-lookup"><span data-stu-id="212dd-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="212dd-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> puede devolver `false` para estas excepciones hagan que se finalice la aplicación.</span><span class="sxs-lookup"><span data-stu-id="212dd-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>