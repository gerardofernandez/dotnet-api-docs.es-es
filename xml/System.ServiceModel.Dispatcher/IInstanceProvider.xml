<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37615922" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c6563-101">Declara métodos que proporcionan un objeto de servicio o reciclan un objeto de servicio de un servicio Windows Communication Foundation (WCF).</span><span class="sxs-lookup"><span data-stu-id="c6563-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6563-102">Implemente la interfaz <xref:System.ServiceModel.Dispatcher.IInstanceProvider> para controlar la creación y el reciclaje de los objetos de servicio cuando un objeto <xref:System.ServiceModel.InstanceContext> solicita o elimina uno.</span><span class="sxs-lookup"><span data-stu-id="c6563-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="c6563-103">Una vez implementada la interfaz <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, debe asignar su objeto de proveedor de instancias personalizado a la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> utilizando un comportamiento del extremo (un objeto <xref:System.ServiceModel.Description.IEndpointBehavior>) o un comportamiento del contrato (un objeto <xref:System.ServiceModel.Description.IContractBehavior> ).</span><span class="sxs-lookup"><span data-stu-id="c6563-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="c6563-104">Si el mecanismo de inserción es un comportamiento del extremo también puede implementar un objeto <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> que pueda insertar su comportamiento personalizado mediante un archivo de configuración.</span><span class="sxs-lookup"><span data-stu-id="c6563-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="c6563-105">Si el mecanismo de inserción es un comportamiento del contrato, puede insertar mediante programación el comportamiento antes de la apertura del host del servicio o puede implementar un atributo personalizado.</span><span class="sxs-lookup"><span data-stu-id="c6563-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="c6563-106">(Para obtener un ejemplo de comportamiento de contrato, consulte la sección Ejemplo.)</span><span class="sxs-lookup"><span data-stu-id="c6563-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="c6563-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> tiene dos métodos: <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> y <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="c6563-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="c6563-108">Estos métodos se implementan normalmente para crear objetos de servicio mediante un constructor no predeterminado o para inicializar o eliminar algún estado relacionado con la duración del objeto.</span><span class="sxs-lookup"><span data-stu-id="c6563-108">These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="c6563-109">La agrupación de objetos de servicio es un ejemplo de funcionalidad <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizada.</span><span class="sxs-lookup"><span data-stu-id="c6563-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="c6563-110">Normalmente, <xref:System.ServiceModel.InstanceContext> invoca <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> cuando <xref:System.ServiceModel.InstanceContext> se crea por primera vez e invoca el método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> cuando se cierra <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="c6563-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="c6563-111">Hay dos maneras de hacer que un objeto <xref:System.ServiceModel.InstanceContext> libere un objeto de servicio antes de que se cierre <xref:System.ServiceModel.InstanceContext>.</span><span class="sxs-lookup"><span data-stu-id="c6563-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="c6563-112">El primer método es establecer <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> en <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> o <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span><span class="sxs-lookup"><span data-stu-id="c6563-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="c6563-113">El segundo método es llamar al método <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="c6563-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="c6563-114">Si se hace esto, <xref:System.ServiceModel.InstanceContext> llama al método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> en el proveedor de instancias del distribuidor.</span><span class="sxs-lookup"><span data-stu-id="c6563-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="c6563-115">Si llega un mensaje nuevo una vez liberada la instancia, WCF crea una nueva instancia utilizando el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> método.</span><span class="sxs-lookup"><span data-stu-id="c6563-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c6563-116">Si <xref:System.ServiceModel.InstanceContextMode> del servicio es <xref:System.ServiceModel.InstanceContextMode.Single>, el sistema no llama a los métodos <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> ni siquiera cuando el usuario no proporcionó un objeto de servicio conocido a menos que el usuario llame directamente a <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> y a continuación a <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span><span class="sxs-lookup"><span data-stu-id="c6563-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c6563-117">El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.</span><span class="sxs-lookup"><span data-stu-id="c6563-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="c6563-118">El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado.</span><span class="sxs-lookup"><span data-stu-id="c6563-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="c6563-119">También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.</span><span class="sxs-lookup"><span data-stu-id="c6563-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c6563-120">Devuelve un objeto de servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="c6563-121">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> actual.</span><span class="sxs-lookup"><span data-stu-id="c6563-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="c6563-122">Devuelve un objeto de servicio dado el objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="c6563-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6563-123">Un objeto de servicio definido por el usuario.</span><span class="sxs-lookup"><span data-stu-id="c6563-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6563-124">Use el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> método para controlar el objeto de servicio exacto que un servicio WCF recibe cuando intenta crear uno nuevo.</span><span class="sxs-lookup"><span data-stu-id="c6563-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c6563-125">El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.</span><span class="sxs-lookup"><span data-stu-id="c6563-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="c6563-126">El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado.</span><span class="sxs-lookup"><span data-stu-id="c6563-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="c6563-127">También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.</span><span class="sxs-lookup"><span data-stu-id="c6563-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="c6563-128">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> actual.</span><span class="sxs-lookup"><span data-stu-id="c6563-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="c6563-129">El mensaje que activó la creación de un objeto de servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="c6563-130">Devuelve un objeto de servicio dado el objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</span><span class="sxs-lookup"><span data-stu-id="c6563-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6563-131">El objeto de servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6563-132">Use el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> método para controlar el objeto de servicio exacto que un servicio WCF recibe cuando intenta crear uno nuevo.</span><span class="sxs-lookup"><span data-stu-id="c6563-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c6563-133">El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.</span><span class="sxs-lookup"><span data-stu-id="c6563-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="c6563-134">El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado.</span><span class="sxs-lookup"><span data-stu-id="c6563-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="c6563-135">También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.</span><span class="sxs-lookup"><span data-stu-id="c6563-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="c6563-136">El contexto de la instancia del servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="c6563-137">Objeto de servicio que se va a reciclar.</span><span class="sxs-lookup"><span data-stu-id="c6563-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="c6563-138">Llamado cuando un objeto <see cref="T:System.ServiceModel.InstanceContext" /> recicla un objeto de servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6563-139">Utilice el método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> para realizar una eliminación de recurso personalizada u otra personalización del reciclaje cuando un servicio recicla un objeto de servicio.</span><span class="sxs-lookup"><span data-stu-id="c6563-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>