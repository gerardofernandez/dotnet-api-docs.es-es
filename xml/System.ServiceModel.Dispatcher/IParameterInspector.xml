<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf2278efb91472b6df53e28d753d2443a7141017" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58562295" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4c3a8-101">Define el contrato implementado por inspectores de parámetros personalizados que permite inspeccionar o modificar la información antes y después de la realización de llamadas en el cliente o el servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-101">Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c3a8-102">Implemente la interfaz <xref:System.ServiceModel.Dispatcher.IParameterInspector> para crear a un inspector de parámetros personalizado que puede ver y modificar el contenido de una llamada, tanto antes como después de la llamada, en aplicaciones cliente o de servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-102">Implement the <xref:System.ServiceModel.Dispatcher.IParameterInspector> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</span></span>  
  
 <span data-ttu-id="4c3a8-103">En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-103">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="4c3a8-104">También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-104">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="4c3a8-105">En las llamadas entrantes a un servicio, el inspector se invoca una vez que se han deserializado los parámetros, pero antes de que se envíen a la operación del servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-105">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
 <span data-ttu-id="4c3a8-106">Use las propiedades <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> para agregar una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> a la colección de inspectores para una operación determinada.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-106">Use the <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> or the <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> properties to add an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation to the inspectors collection for a particular operation.</span></span>  
  
 <span data-ttu-id="4c3a8-107">**Tenga en cuenta** a los desarrolladores y administradores deben asegurarse de que la interacción con otras <xref:System.ServiceModel.Dispatcher.IParameterInspector> se entiende las implementaciones.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-107">**Note** Developers and administrators must ensure that the interaction with other <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementations is understood.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c3a8-108">En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:</span><span class="sxs-lookup"><span data-stu-id="4c3a8-108">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="4c3a8-109">Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-109">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="4c3a8-110">Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-110">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="4c3a8-111">En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-111">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="4c3a8-112">Nombre de la operación invocada.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-112">The name of the invoked operation.</span></span></param>
        <param name="outputs"><span data-ttu-id="4c3a8-113">Cualquier objeto de salida.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-113">Any output objects.</span></span></param>
        <param name="returnValue"><span data-ttu-id="4c3a8-114">El valor devuelto de la operación.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-114">The return value of the operation.</span></span></param>
        <param name="correlationState"><span data-ttu-id="4c3a8-115">Cualquier estado de correlación devuelto desde el método <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />, o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-115">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c3a8-116">Se llama a este método una vez que se devuelven las llamadas del cliente y antes de que se envíen las respuestas del servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-116">Called after client calls are returned and before service responses are sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c3a8-117">En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-117">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="4c3a8-118">También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-118">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="4c3a8-119">En las llamadas entrantes a un servicio, el inspector se invoca una vez que se han deserializado los parámetros, pero antes de que se envíen a la operación del servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-119">On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c3a8-120">En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:</span><span class="sxs-lookup"><span data-stu-id="4c3a8-120">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="4c3a8-121">Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-121">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="4c3a8-122">Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-122">Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="4c3a8-123">En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-123">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName"><span data-ttu-id="4c3a8-124">Nombre de la operación.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-124">The name of the operation.</span></span></param>
        <param name="inputs"><span data-ttu-id="4c3a8-125">Objetos que el cliente pasa al método.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-125">The objects passed to the method by the client.</span></span></param>
        <summary><span data-ttu-id="4c3a8-126">Se llama a este método antes de enviar las llamadas del cliente y antes de que se devuelvan las respuestas del servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-126">Called before client calls are sent and after service responses are returned.</span></span></summary>
        <returns><span data-ttu-id="4c3a8-127">Estado de correlación devuelto como parámetro <paramref name="correlationState" /> en <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-127">The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />.</span></span> <span data-ttu-id="4c3a8-128">Devuelve <see langword="null" /> si no se piensa utilizar el estado de correlación.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-128">Return <see langword="null" /> if you do not intend to use correlation state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c3a8-129">En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-129">On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</span></span> <span data-ttu-id="4c3a8-130">También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-130">The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</span></span>  
  
 <span data-ttu-id="4c3a8-131">En las llamadas entrantes a un servicio, el inspector se invoca una vez que se ha deserializado el contenido de la solicitud y se ha enviado a la operación de servicio, y antes de que el contenido de la respuesta se ha serializado y enviado al cliente.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-131">On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c3a8-132">En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:</span><span class="sxs-lookup"><span data-stu-id="4c3a8-132">The following code example shows an <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementation that:</span></span>  
  
-   <span data-ttu-id="4c3a8-133">Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-133">Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</span></span>  
  
-   <span data-ttu-id="4c3a8-134">Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-134">Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</span></span>  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 <span data-ttu-id="4c3a8-135">En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.</span><span class="sxs-lookup"><span data-stu-id="4c3a8-135">The following code example shows how to use either <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> or <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> to insert <xref:System.ServiceModel.Dispatcher.IParameterInspector> objects.</span></span>  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>