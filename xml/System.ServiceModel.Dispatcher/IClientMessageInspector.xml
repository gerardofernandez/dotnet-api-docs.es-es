<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4dc658e9df4137e0e99b431412ff46141d044ca4" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56776787" /></Metadata><TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <TypeSignature Language="F#" Value="type IClientMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5a2af-101">Define un objeto inspector de mensajes que se puede agregar a la colección <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> para ver o modificar mensajes.</span><span class="sxs-lookup"><span data-stu-id="5a2af-101">Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a2af-102">Implemente el <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interfaz y agréguelo a la <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> colección para inspeccionar o modificar mensajes cuando pasan a través de un objeto de cliente WCF.</span><span class="sxs-lookup"><span data-stu-id="5a2af-102">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a WCF client object.</span></span> <span data-ttu-id="5a2af-103">Para obtener información detallada, vea <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span><span class="sxs-lookup"><span data-stu-id="5a2af-103">For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a2af-104">En el ejemplo de código siguiente se muestra una implementación que escribe cadenas en la consola cuando se llama a la implementación.</span><span class="sxs-lookup"><span data-stu-id="5a2af-104">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="5a2af-105">En el ejemplo de código siguiente se muestra cómo utilizar un objeto <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para insertar el inspector de mensajes de cliente en el punto de conexión del cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-105">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="5a2af-106">Finalmente, en el ejemplo de código siguiente se muestra cómo modificar el archivo de configuración del cliente para usar el comportamiento de punto de conexión con un punto de conexión determinado.</span><span class="sxs-lookup"><span data-stu-id="5a2af-106">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveReply :  * obj -&gt; unit" Usage="iClientMessageInspector.AfterReceiveReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="5a2af-107">Mensaje que se va a transformar en tipos y se va a devolver a la aplicación cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-107">The message to be transformed into types and handed back to the client application.</span></span></param>
        <param name="correlationState"><span data-ttu-id="5a2af-108">Datos de estado de la correlación.</span><span class="sxs-lookup"><span data-stu-id="5a2af-108">Correlation state data.</span></span></param>
        <summary><span data-ttu-id="5a2af-109">Habilita la inspección o modificación de un mensaje una vez recibido un mensaje de respuesta, pero antes de devolverlo a la aplicación cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-109">Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a2af-110">Implemente <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> para inspeccionar o modificar un mensaje de respuesta después de que se ha recibido por el objeto de cliente WCF, pero antes de que se deserialice en los objetos que se devuelven a la aplicación cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-110">Implement <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</span></span>  
  
 <span data-ttu-id="5a2af-111">`correlationState` es el objeto devuelto por el usuario cuando se llama a <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> para este mensaje.</span><span class="sxs-lookup"><span data-stu-id="5a2af-111">The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message.</span></span> <span data-ttu-id="5a2af-112">El procedimiento recomendado es convertirlo en <xref:System.Guid?displayProperty=nameWithType> para garantizar que no hay dos objetos `correlationState` iguales.</span><span class="sxs-lookup"><span data-stu-id="5a2af-112">The best practice is to make this a <xref:System.Guid?displayProperty=nameWithType> to ensure that no two `correlationState` objects are the same.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a2af-113">En el ejemplo de código siguiente se muestra una implementación que escribe cadenas en la consola cuando se llama a la implementación.</span><span class="sxs-lookup"><span data-stu-id="5a2af-113">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="5a2af-114">En el ejemplo de código siguiente se muestra cómo utilizar un objeto <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para insertar el inspector de mensajes de cliente en el punto de conexión del cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-114">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="5a2af-115">Finalmente, en el ejemplo de código siguiente se muestra cómo modificar el archivo de configuración del cliente para usar el comportamiento de punto de conexión con un punto de conexión determinado.</span><span class="sxs-lookup"><span data-stu-id="5a2af-115">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendRequest :  * System.ServiceModel.IClientChannel -&gt; obj" Usage="iClientMessageInspector.BeforeSendRequest (request, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="5a2af-116">Mensaje que se va a enviar al servicio.</span><span class="sxs-lookup"><span data-stu-id="5a2af-116">The message to be sent to the service.</span></span></param>
        <param name="channel"><span data-ttu-id="5a2af-117">Canal de objeto de cliente de WCF.</span><span class="sxs-lookup"><span data-stu-id="5a2af-117">The WCF client object channel.</span></span></param>
        <summary><span data-ttu-id="5a2af-118">Habilita la inspección o modificación de un mensaje antes de que se envíe un mensaje de solicitud a un servicio.</span><span class="sxs-lookup"><span data-stu-id="5a2af-118">Enables inspection or modification of a message before a request message is sent to a service.</span></span></summary>
        <returns><span data-ttu-id="5a2af-119">Objeto que se devuelve como argumento <paramref name="correlationState" /> del método <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="5a2af-119">The object that is returned as the <paramref name="correlationState" /> argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span> <span data-ttu-id="5a2af-120">Es <see langword="null" /> si no se utiliza ningún estado de correlación.</span><span class="sxs-lookup"><span data-stu-id="5a2af-120">This is <see langword="null" /> if no correlation state is used.</span></span>  
  
<span data-ttu-id="5a2af-121">El procedimiento recomendado es convertirlo en <see cref="T:System.Guid" /> para garantizar que no hay dos objetos <paramref name="correlationState" /> iguales.</span><span class="sxs-lookup"><span data-stu-id="5a2af-121">The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5a2af-122">Implemente <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> para inspeccionar o modificar un mensaje de solicitud antes de que se envíe.</span><span class="sxs-lookup"><span data-stu-id="5a2af-122">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> to inspect or modify a request message before it is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5a2af-123">En el ejemplo de código siguiente se muestra una implementación que escribe cadenas en la consola cuando se llama a la implementación.</span><span class="sxs-lookup"><span data-stu-id="5a2af-123">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="5a2af-124">En el ejemplo de código siguiente se muestra cómo utilizar un objeto <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> para insertar el inspector de mensajes de cliente en el punto de conexión del cliente.</span><span class="sxs-lookup"><span data-stu-id="5a2af-124">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="5a2af-125">Finalmente, en el ejemplo de código siguiente se muestra cómo modificar el archivo de configuración del cliente para usar el comportamiento de punto de conexión con un punto de conexión determinado.</span><span class="sxs-lookup"><span data-stu-id="5a2af-125">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>