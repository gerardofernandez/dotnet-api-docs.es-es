<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cd7d26a8035ac771856adae7eedfbd2609c7c2" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52737447" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d9fee-101">Proporciona una clase base para un tipo personalizado derivado que supervisa los cambios de estado de los datos de los que depende un elemento de caché.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9fee-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-102">La <xref:System.Runtime.Caching.ChangeMonitor> clase se utiliza como la clase base para las clases derivadas de monitor que están especializadas en las implementaciones de caché concreta.</span><span class="sxs-lookup"><span data-stu-id="d9fee-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="d9fee-103">Un <xref:System.Runtime.Caching.ChangeMonitor> instancia supervisa los cambios realizados en el estado de los datos que depende de un elemento de caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="d9fee-104">Por ejemplo, el elemento puede ser una entidad de datos o de archivos cuyo contenido se almacenan en caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="d9fee-105">Si se actualiza la entidad de datos o archivo, también se debe cambiar la entrada de caché asociada.</span><span class="sxs-lookup"><span data-stu-id="d9fee-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="d9fee-106">Elementos comunes que se pueden supervisar incluyen entidades de datos (por ejemplo, los campos de la base de datos, valores, filas o tablas), otra entrada de caché y los archivos y los atributos de archivo.</span><span class="sxs-lookup"><span data-stu-id="d9fee-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="d9fee-107">Un cambio de dependencia es un cambio en el estado de una dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="d9fee-108">En una implementación de caché típica, una vez un <xref:System.Runtime.Caching.ChangeMonitor> instancia notifica a la memoria caché que ha cambiado una dependencia, la memoria caché realiza la acción necesaria, como invalidar la entrada de caché insertado.</span><span class="sxs-lookup"><span data-stu-id="d9fee-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="d9fee-109">Derivados <xref:System.Runtime.Caching.ChangeMonitor> clases se pueden personalizar para supervisar los cambios de dependencia para específicos distintos almacenes de datos.</span><span class="sxs-lookup"><span data-stu-id="d9fee-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="d9fee-110">Por ejemplo, existen implementaciones de caché para un sistema de archivos, memoria física o una base de datos.</span><span class="sxs-lookup"><span data-stu-id="d9fee-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="d9fee-111">La <xref:System.Runtime.Caching.ChangeMonitor> clase examina los cambios que se producen fuera de la memoria caché y, a continuación, las alertas de la memoria caché que se han producido cambios.</span><span class="sxs-lookup"><span data-stu-id="d9fee-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="d9fee-112">El [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] incluye las siguientes clases que derivan de <xref:System.Runtime.Caching.ChangeMonitor> clase:</span><span class="sxs-lookup"><span data-stu-id="d9fee-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="d9fee-113">Cada una de estas clases funciona con diferentes tipos de dependencias.</span><span class="sxs-lookup"><span data-stu-id="d9fee-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="d9fee-114">Por ejemplo, la clase derivada <xref:System.Runtime.Caching.FileChangeMonitor> clase supervisa los cambios realizados en una memoria caché para los datos de sistema de archivos (archivos y carpetas) que depende del elemento en caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="d9fee-115">Este tipo es seguro para la ejecución de subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9fee-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="d9fee-116">Si se puede crear una implementación de caché o un cambio derivado supervisar tipo, debe seguir ciertas instrucciones.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-116">If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines.</span>
        </span>
        <span data-ttu-id="d9fee-117">En la lista siguiente se resume estas instrucciones.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-117">The following list summarizes these guidelines.</span>
        </span>
        <span data-ttu-id="d9fee-118">Para obtener más información, consulte la documentación de métodos o propiedades individuales.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-118">For more information, see the documentation for individual methods or properties.</span>
        </span>
        <span data-ttu-id="d9fee-119">-El constructor de una clase derivada debe establecer el <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> propiedad, empezar a supervisar y llamar a <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método antes de que el método devuelve.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-119">-   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns.</span>
        </span>
        <span data-ttu-id="d9fee-120">Si un constructor encuentra un error durante las construcciones y debe tener que desechar los recursos, el constructor solo puede llamar a la <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> sobrecargar después la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> se llama al método porque el <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> sobrecarga producirá una <see cref="T:System.InvalidOperationException" /> excepción si no se ha completado la inicialización.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-120">If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.</span>
        </span>
        <span data-ttu-id="d9fee-121">-Si se producen cambios en los datos que se está supervisando antes de que la inicialización se complete, debe llamar al constructor el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método antes de llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-121">-   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span>
        </span>
        <span data-ttu-id="d9fee-122">-Después de una derivada <see cref="T:System.Runtime.Caching.ChangeMonitor" /> se crea una instancia de tipo, debe insertar el monitor en un personalizado <see cref="T:System.Runtime.Caching.ObjectCache" /> implementación.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-122">-   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation.</span>
        </span>
        <span data-ttu-id="d9fee-123">O si ya ha terminado con la supervisión de cambios, llame a la <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> método.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-123">Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
        </span>
        <span data-ttu-id="d9fee-124">-Después un <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instancia se inserta en un <see cref="T:System.Runtime.Caching.ObjectCache" /> implementación, el <see cref="T:System.Runtime.Caching.ObjectCache" /> instancia requieren que se elimina la supervisión de cambios.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-124">-   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed.</span>
        </span>
        <span data-ttu-id="d9fee-125">Aunque la inserción no es válida y provoca una excepción, el <see cref="T:System.Runtime.Caching.ObjectCache" /> implementación debe llamar a la <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> de sobrecarga.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-125">Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span>
        </span>
        <span data-ttu-id="d9fee-126">-Después de un monitor del cambio derivado se inserta en una memoria caché, el <see cref="T:System.Runtime.Caching.ObjectCache" /> implementación debe llamar a <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, pasando un <see cref="T:System.Runtime.Caching.OnChangedCallback" /> objeto.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-126">-   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object.</span>
        </span>
        <span data-ttu-id="d9fee-127">El <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> método se puede llamar solo una vez.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-127">The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time.</span>
        </span>
        <span data-ttu-id="d9fee-128">Si ya se ha producido un cambio de dependencia, el <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instancia se llamará inmediatamente cuando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> se llama.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-128">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span>
        </span>
        <span data-ttu-id="d9fee-129">En caso contrario, el <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instancia se llamará solo una vez.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-129">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time.</span>
        </span>
        <span data-ttu-id="d9fee-130">Una vez llamada produce cuando el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> se llama al método porque el <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instancia ha detectado un cambio, o cuando el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> se llama al método en el <see cref="T:System.Runtime.Caching.ChangeMonitor" />, lo que ocurra primero.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-130">This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.</span>
        </span>
        <span data-ttu-id="d9fee-131">-El <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instancia proporcionada por un <see cref="T:System.Runtime.Caching.ObjectCache" /> implementación debería quitar la entrada de caché asociada y especificar un motivo mediante la <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeración.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-131">-   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.</span>
        </span>
        <span data-ttu-id="d9fee-132">-A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> puede llamar la instancia de la <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método bien antes de una implementación de caché se haya llamado <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> método o después.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-132">-   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after.</span>
        </span>
        <span data-ttu-id="d9fee-133">Si el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> se llama al método antes de <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> se denomina base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementación enviará una notificación a la memoria caché que esto ha sucedido y desencadenará la devolución de llamada que se pasarán al <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> inmediatamente cuando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> se invoca.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-133">If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked.</span>
        </span>
        <span data-ttu-id="d9fee-134">Cualquier dato de estado que se pasa a la <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método es guardado por el supervisor de cambios y posteriormente se pasan a la <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> método cuando el <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> se invoca el método.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-134">Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.</span>
        </span>
        <span data-ttu-id="d9fee-135">-Un supervisor de cambios debe implementar la <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> método.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-135">-   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method.</span>
        </span>
        <span data-ttu-id="d9fee-136">Para obtener más información, vea la documentación del método <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-136">For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.</span>
        </span>
        <span data-ttu-id="d9fee-137">-El <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> sobrecarga del método debe llamarse para desechar el <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instancia.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-137">-   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
        </span>
        <span data-ttu-id="d9fee-138">Las reglas para llamar a Dispose son los siguientes:</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-138">The rules for calling Dispose are as follows:</span>
        </span>
        <span data-ttu-id="d9fee-139">-Antes de un elemento se inserta en la memoria caché, es responsabilidad del autor de llamada para desechar un <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instancia.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-139">-   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
        </span>
        <span data-ttu-id="d9fee-140">-Una vez el elemento de caché y la <see cref="T:System.Runtime.Caching.ChangeMonitor" /> las instancias que están asociadas con la se pasan a una memoria caché, el implementador de la memoria caché debe asegurarse de que el <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> método se llama, incluso si se produce un error en la inserción.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-140">-   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.</span>
        </span>
        <span data-ttu-id="d9fee-141">-Después de un elemento y sus asociados <see cref="T:System.Runtime.Caching.ChangeMonitor" /> las instancias se pasan a una memoria caché, el llamador no debe eliminar la dependencia porque cuando el <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> se llama al método, la llamada se tratará como si ha cambiado la dependencia.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-141">-   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed.</span>
        </span>
        <span data-ttu-id="d9fee-142">Como resultado, el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método se invoca automáticamente.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-142">As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.</span>
        </span>
        <span data-ttu-id="d9fee-143">-Teniendo estas reglas en consideración, el <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> método debe llamarse en una de las maneras siguientes:</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-143">-   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:</span>
        </span>
        <span data-ttu-id="d9fee-144">: Deben llamar los usuarios el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> sobrecarga del método si deciden no insertar la instancia de supervisión de cambios en una memoria caché.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-144">-   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.</span>
        </span>
        <span data-ttu-id="d9fee-145">-Si la implementación intenta insertar la instancia de supervisión de cambios en una caché de objetos, pero se produce un error en la inserción, la implementación de caché es responsable de llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> de sobrecarga.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-145">-   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span>
        </span>
        <span data-ttu-id="d9fee-146">Cuando el intento de inserción produce una excepción, la implementación de caché debe eliminar cualquier dependencia asociada.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-146">When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.</span>
        </span>
        <span data-ttu-id="d9fee-147">-Si se quita la entrada de caché, también debe eliminar la implementación de caché de la dependencia.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-147">-   If the cache entry is removed, the cache implementation must also dispose of the dependency.</span>
        </span>
        <span data-ttu-id="d9fee-148">-La implementación interna de la <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método llama automáticamente a la <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> método después de que llama a una devolución de llamada que se ha registrado mediante <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-148">-   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span>
        </span>
        <block subset="none" type="note">
          <para>
            <span data-ttu-id="d9fee-149">Esta llamada al método dispose durante el desencadenamiento automático solo se produce si la inicialización de la <see cref="T:System.Runtime.Caching.ChangeMonitor" /> previamente se completó la instancia.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-149">This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.</span>
            </span>
          </para>
        </block>
        <span data-ttu-id="d9fee-150">Cuando llama al constructor del supervisor de cambios derivadas el <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método, si ya ha cambiado el estado de la supervisión de cambios (es decir, el estado que se supervisa ya ha cambiado cuando el constructor todavía estaba activo) la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método eliminar automáticamente la supervisión de cambios.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-150">When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.</span>
        </span>
        <span data-ttu-id="d9fee-151">-El <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> propiedad está establecida en <see langword="true" /> después de la <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> se llama al método por la instancia de supervisión de cambios derivadas, independientemente de si un <see cref="T:System.Runtime.Caching.OnChangedCallback" /> se ha establecido el objeto mediante una llamada a la <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> método o no.</span>
        <span class="sxs-lookup">
          <span data-stu-id="d9fee-151">-   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</span>
        </span>
      </para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
    <related type="Article" href="https://msdn.microsoft.com/library/ac11c8ea-df5d-4de8-b315-9ccf1048b0ce">
      <span data-ttu-id="d9fee-152">Almacenamiento en caché de ASP.NET</span>
      <span class="sxs-lookup">
        <span data-stu-id="d9fee-152">ASP.NET Caching</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-153">Inicializa una nueva instancia de la clase <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-153">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="d9fee-154">Los constructores de clases derivadas llaman a este constructor para inicializar la clase base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-154">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-155">La <xref:System.Runtime.Caching.ChangeMonitor> clase tiene un constructor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="d9fee-155">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="d9fee-156">Sin embargo, las clases que heredan de la base de <xref:System.Runtime.Caching.ChangeMonitor> clase y definir la supervisión personalizada de cambio de comportamiento debe realizar la inicialización en el constructor.</span><span class="sxs-lookup"><span data-stu-id="d9fee-156">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="d9fee-157">Para obtener más información, vea la sección Notas a los herederos.</span><span class="sxs-lookup"><span data-stu-id="d9fee-157">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-158">El constructor de una clase derivada debe establecer el <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> propiedad, empezar a supervisar y llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> clase antes de devolver.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-158">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns.</span>
            </span>
            <span data-ttu-id="d9fee-159">Si cambia una dependencia antes de la inicialización ha finalizado (por ejemplo, si una clave de caché dependiente no se encuentra en la memoria caché), debe llamar al constructor el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método antes de llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-159">If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span>
            </span>
            <span data-ttu-id="d9fee-160">En este caso, puede llamar al constructor el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> método solamente después la <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> se denomina método, porque el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> método produce una excepción si no se ha completado la inicialización.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-160">In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-161">Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-161">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-162">El <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método se utiliza para liberar el <xref:System.Runtime.Caching.ChangeMonitor> instancia y los recursos relacionados.</span><span class="sxs-lookup"><span data-stu-id="d9fee-162">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="d9fee-163">El público <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método se invoca para coordinar el proceso de eliminación con eventos de ciclo de vida de clave de las clases de supervisión de cambios derivadas (como inicialización) y para liberar el <xref:System.Runtime.Caching.ChangeMonitor> para que la instancia puede recolectarse de instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-163">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="d9fee-164">El <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método se implementa mediante las clases de supervisión de cambios para desechar los recursos administrados y no administrados.</span><span class="sxs-lookup"><span data-stu-id="d9fee-164">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-165">Libera todos los recursos utilizados por la instancia actual de la clase <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-165">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-166">El <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método invoca el <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método de clases derivadas solo una vez, la primera vez que se llama.</span><span class="sxs-lookup"><span data-stu-id="d9fee-166">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="d9fee-167">Las llamadas posteriores a la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método no tienen ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="d9fee-167">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="d9fee-168">Después de haber llamado al método, el <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> propiedad está establecida en `true`.</span><span class="sxs-lookup"><span data-stu-id="d9fee-168">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="d9fee-169">El <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> sobrecarga debe llamarse para desechar un <xref:System.Runtime.Caching.ChangeMonitor> instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-169">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="d9fee-170">Éstas son las reglas para llamar al método dispose:</span><span class="sxs-lookup"><span data-stu-id="d9fee-170">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="d9fee-171">Antes de que se inserta un elemento en la memoria caché, es responsabilidad del llamador para desechar un <xref:System.Runtime.Caching.ChangeMonitor> instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-171">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="d9fee-172">Elemento en caché una vez y el <xref:System.Runtime.Caching.ChangeMonitor> las instancias que están asociadas con la se pasan a una memoria caché, el implementador de la memoria caché debe asegurarse de que <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> se llama, incluso si se produce un error en la inserción.</span><span class="sxs-lookup"><span data-stu-id="d9fee-172">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="d9fee-173">Después de un elemento y sus asociados <xref:System.Runtime.Caching.ChangeMonitor> las instancias se pasan a una memoria caché, el llamador no debe eliminar la dependencia porque cuando el <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> se llama al método, la llamada se tratará como si ha cambiado la dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-173">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="d9fee-174">Como resultado, el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método se invoca automáticamente.</span><span class="sxs-lookup"><span data-stu-id="d9fee-174">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="d9fee-175">Teniendo estas reglas en consideración, el <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método debe llamarse en una de las maneras siguientes:</span><span class="sxs-lookup"><span data-stu-id="d9fee-175">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="d9fee-176">Deben llamar los usuarios la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> sobrecarga del método si deciden no insertar la instancia de supervisión de cambios en una memoria caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-176">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="d9fee-177">La implementación de caché es responsable de llamar a la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> sobrecarga si la implementación intenta insertar la instancia de supervisión de cambios en una caché de objetos, pero se produce un error en la inserción.</span><span class="sxs-lookup"><span data-stu-id="d9fee-177">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="d9fee-178">Cuando el intento de inserción produce una excepción, la implementación de la memoria caché debe eliminar cualquier dependencia asociada.</span><span class="sxs-lookup"><span data-stu-id="d9fee-178">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="d9fee-179">Si se quita la entrada de caché, la implementación de la memoria caché también debe eliminar la dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-179">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="d9fee-180">La implementación interna de la <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método llama automáticamente a la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método después de que llama a una devolución de llamada que se ha registrado mediante el <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-180">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9fee-181">El método dispose automático durante el desencadenamiento de eventos solo se produce si la inicialización de la <xref:System.Runtime.Caching.ChangeMonitor> instancia anteriormente ha finalizado.</span><span class="sxs-lookup"><span data-stu-id="d9fee-181">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="d9fee-182">Cuando llama al constructor del supervisor de cambios derivadas el <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> método, si ya ha cambiado el estado de la supervisión de cambios (es decir, el estado que se supervisa ya ha cambiado cuando el constructor todavía estaba activo), a continuación, <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> método eliminación automática de la supervisión de cambios.</span><span class="sxs-lookup"><span data-stu-id="d9fee-182">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9fee-183">Los usuarios no deben llamar a la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-183">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="d9fee-184">Sin embargo, no se puede impedir que los usuarios una llamada al método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-184">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="d9fee-185">Por lo tanto, si es así, el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se invoca el método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-185">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="d9fee-186">En ese caso, la entrada de caché se notifica como si ha cambiado la dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-186">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="d9fee-187">Para evitar que las clases derivadas invaliden <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método, el método no es una implementación de interfaz explícita.</span><span class="sxs-lookup"><span data-stu-id="d9fee-187">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d9fee-188">La inicialización no se ha completado en la clase de supervisión de cambios que llamó al método base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-188">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="d9fee-189">Es <see langword="true" /> para liberar los recursos administrados y no administrados, así como todas las referencias a una instancia de <see cref="T:System.Runtime.Caching.ChangeMonitor" />; es <see langword="false" /> para liberar únicamente los recursos no administrados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-189">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="d9fee-190">Cuando se pasa <see langword="false" />, un subproceso <see langword="finalizer" /> llama al método <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> y es probable que las referencias administradas externas ya no sean válidas porque ya se han recopilado los elementos no utilizados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-190">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9fee-191">Libera todos los recursos administrados y no administrados así como todas las referencias a la instancia de <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-191">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="d9fee-192">Esta sobrecarga la deben implementar las clases de supervisión de cambios derivadas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-192">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-193">Cuando el valor de `disposing` valor es `true`, se eliminan todos los recursos administrados y no administrados y se liberan todas las referencias a este objeto para que la instancia de supervisión de cambios puede recolectarlas.</span><span class="sxs-lookup"><span data-stu-id="d9fee-193">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="d9fee-194">Se garantiza que la base de <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método invocará implementada <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método solo una vez.</span><span class="sxs-lookup"><span data-stu-id="d9fee-194">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-195">Supervisor de cambios debe implementar la <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> sobrecarga para liberar todos los recursos administrados y cuando el valor de <paramref name="disposing" /> es <see langword="true" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-195">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />.</span>
            </span>
            <span data-ttu-id="d9fee-196">El <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> sobrecarga del método que tiene un <paramref name="disposing" /> valor <see langword="true" /> se llama solo una vez, es decir, cuando se elimina la instancia por primera vez.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-196">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time.</span>
            </span>
            <span data-ttu-id="d9fee-197">Supervisor de cambios no debe llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> sobrecargar directamente.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-197">A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly.</span>
            </span>
            <span data-ttu-id="d9fee-198">Supervisor de cambios derivadas puede llamar al público sin parámetros <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> método en la base de <see cref="T:System.Runtime.Caching.ChangeMonitor" /> clase.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-198">A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
            </span>
            <span data-ttu-id="d9fee-199">Como alternativa, un supervisor de cambios puede implementar un método finalizador.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-199">Alternatively, a change monitor can implement a finalizer method.</span>
            </span>
            <span data-ttu-id="d9fee-200">En ese caso, puede invocar el finalizador del <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> método y pásele un <paramref name="disposing" /> valor de <see langword="false" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-200">In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />.</span>
            </span>
            <span data-ttu-id="d9fee-201">Sin embargo, esto normalmente no es necesario.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-201">However, this is usually unnecessary.</span>
            </span>
            <span data-ttu-id="d9fee-202">Supervisión de los cambios de dependencia normalmente se realiza mediante un servicio que mantiene una referencia a la instancia de supervisión de cambios.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-202">Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance.</span>
            </span>
            <span data-ttu-id="d9fee-203">La referencia impide que la instancia se recolectan y, por tanto, hace que un método de finalizador innecesarios.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-203">The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary.</span>
            </span>
            <span data-ttu-id="d9fee-204">Para evitar pérdidas de memoria, cuando cambia alguna dependencia, el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> método desecha la instancia de supervisión de cambios (a menos que no ha finalizado la inicialización).</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-204">To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-205">Obtiene un valor que indica que el estado supervisado por la clase <see cref="T:System.Runtime.Caching.ChangeMonitor" /> ha cambiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-205">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d9fee-206">Es <see langword="true" /> si el estado supervisado por la instancia de <see cref="T:System.Runtime.Caching.ChangeMonitor" /> ha cambiado; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-206">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-207">Puede comprobar el valor de esta propiedad en una derivada <xref:System.Runtime.Caching.ChangeMonitor> clase para ver si ha cambiado una dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-207">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="d9fee-208">El valor se establece en `true` cuando se produce un cambio de dependencia (es decir, cuando el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se llama al método).</span><span class="sxs-lookup"><span data-stu-id="d9fee-208">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="d9fee-209">Después de la <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se llama al método mediante la clase derivada, el valor de la <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad será `true`, independientemente de si un <xref:System.Runtime.Caching.OnChangedCallback> instancia se ha notificado mediante una llamada a la <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-209">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9fee-210">Los llamadores pueden comprobar el <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad para ver si ha cambiado una dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-210">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="d9fee-211">Sin embargo, en un entorno multiproceso, un enfoque más sencillo y más fácil de mantener es insertar datos en una implementación de caché sin comprobar el <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d9fee-211">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="d9fee-212">Implementaciones de caché deben comprobar la <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad automáticamente y no debe realizar una inserción o establecer si ya han cambiado una o varias de las dependencias asociadas.</span><span class="sxs-lookup"><span data-stu-id="d9fee-212">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-213">Este método lo invoca el constructor de clases derivadas para indicar que ha finalizado la inicialización.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-213">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-214">Si cambia una dependencia antes de que la inicialización se completa en una clase derivada, se debe invocar el constructor de la clase derivada la <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-214">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="d9fee-215">Cuando el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se invoca al método, el <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad se establece automáticamente en `true` por la supervisión de cambios.</span><span class="sxs-lookup"><span data-stu-id="d9fee-215">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="d9fee-216">Como resultado, cuando llama al constructor de la supervisión de cambios el <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> método, la clase base llama automáticamente a la <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-216">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="d9fee-217">Si la inicialización se ha completado, el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método desecha automáticamente la instancia de supervisión de cambios.</span><span class="sxs-lookup"><span data-stu-id="d9fee-217">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-218">El constructor de una clase derivada debe llamar a la base de <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> método antes de que el constructor.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-218">The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns.</span>
            </span>
            <span data-ttu-id="d9fee-219">El constructor de una clase derivada puede llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> método solamente después <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> se denomina, porque el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> método produce una excepción si no se ha completado la inicialización.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-219">The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-220">Obtiene un valor que indica que se elimina la instancia derivada de una clase <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-220">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d9fee-221">Es <see langword="true" /> si se elimina la instancia; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-221">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-222">La propiedad está establecida en `true` después de la base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> llamadas al método el <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> método en una clase derivada para eliminar la instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-222">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="d9fee-223">Referencia a un método que se invoca cuando ha cambiado una dependencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-223">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9fee-224">Lo llaman los implementadores de memoria caché para registrar una devolución de llamada y notificar a una instancia de <see cref="T:System.Runtime.Caching.ObjectCache" /> a través del delegado <see cref="T:System.Runtime.Caching.OnChangedCallback" /> cuando una dependencia ha cambiado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-224">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-225">Los implementadores de la memoria caché Utilice este método para conectarse con un supervisor de cambios.</span><span class="sxs-lookup"><span data-stu-id="d9fee-225">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="d9fee-226">Si asociar uno o más monitores con el elemento de caché de cambios, se pasa un <xref:System.Runtime.Caching.CacheItemPolicy> instancia con una propiedad de monitores de cambio rellenada para el elemento de caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-226">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="d9fee-227">Un implementador de la memoria caché que es compatible con los monitores de cambio es responsable de recorrer en iteración el <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> propiedad y registrar el <xref:System.Runtime.Caching.OnChangedCallback> cambiar de delegados con cada monitor que encuentra.</span><span class="sxs-lookup"><span data-stu-id="d9fee-227">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="d9fee-228">Dado que el <xref:System.Runtime.Caching.OnChangedCallback> delegado incluye un parámetro de estado opcional, una implementación de monitor de cambio concreta puede pasar la información de estado opcional.</span><span class="sxs-lookup"><span data-stu-id="d9fee-228">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="d9fee-229">El implementador de la memoria caché se determina si se puede tomar una dependencia explícita del tipo de estado de un monitor de cambio personalizada que se pasa como parte de la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="d9fee-229">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9fee-230">La API de extensibilidad de caché de base no tiene ningún requisito de dependencia explícita del tipo de estado.</span><span class="sxs-lookup"><span data-stu-id="d9fee-230">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="d9fee-231">La implementación de la <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> método determina automáticamente si el estado del monitor ya ha cambiado en el momento <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-231">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="d9fee-232">Si el <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> propiedad es `true`, a continuación, el método llama automáticamente a la <xref:System.Runtime.Caching.OnChangedCallback> controlador de eventos, que se registró, mediante el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-232">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="d9fee-233">Esto ocurre porque es posible que el estado supervisado subyacente ha cambiado desde el momento en que un supervisor de cambios a la hora de una implementación de caché obtiene al monitor y se conecta a él, crea una implementación de caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-233">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="d9fee-234">Si el estado ya ha cambiado, a continuación, el objeto que se pasa a la <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método es `null`.</span><span class="sxs-lookup"><span data-stu-id="d9fee-234">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="d9fee-235">El <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> método se puede invocar solo una vez y se iniciará una excepción en llamadas subsiguientes.</span><span class="sxs-lookup"><span data-stu-id="d9fee-235">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d9fee-236">El método de devolución de llamada ya se ha invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-236">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d9fee-237">El valor de <paramref name="onChangedCallback" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-237">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-238">1.  Debe llamar a la <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> método para recibir una notificación de cambios de dependencia.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-238">1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes.</span>
            </span>
            <span data-ttu-id="d9fee-239">Si ya se ha producido un cambio de dependencia, el <see cref="T:System.Runtime.Caching.OnChangedCallback" /> se llamará instancia cuando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> se llama.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-239">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span>
            </span>
            <span data-ttu-id="d9fee-240">En caso contrario, el <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instancia se llamará una vez, cuando el <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> se llama al método o cuando el <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> se llama el método, lo que ocurra primero.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-240">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first.</span>
            </span>
            <span data-ttu-id="d9fee-241">El <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instancia proporcionada por la implementación de caché debe quitar la entrada de caché y si se solicita el llamador de la memoria caché, aumente el cambio necesario o un evento de actualización de vuelta al llamador caché original.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-241">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.</span>
            </span>
            <span data-ttu-id="d9fee-242">2.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-242">2.</span>
            </span>
            <span data-ttu-id="d9fee-243">La implementación de la memoria caché de objeto debe quitar la entrada de caché que está asociada a un cambio de dependencia.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-243">The object cache implementation must remove the cache entry that is associated with a dependency change.</span>
            </span>
          </para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="d9fee-244">Datos del evento de cambio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-244">The data for the change event.</span>
          </span>
          <span data-ttu-id="d9fee-245">Este valor puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-245">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d9fee-246">Este método lo invocan las clases derivadas para generar el evento cuando cambia una dependencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-246">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-247">Normalmente, el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se llama al método cuando se producen cambios de dependencia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-247">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="d9fee-248">El <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método también se invoca cuando se elimina una instancia de supervisión de cambios, pero la eliminación se produce solo si ya no se ha invocado la devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="d9fee-248">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="d9fee-249">Si el <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> se llama al método antes de la <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> llama el método, los datos de estado de la llamada a la <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> método se guarda mediante la implementación de caché.</span><span class="sxs-lookup"><span data-stu-id="d9fee-249">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="d9fee-250">Además, la devolución de llamada para el <xref:System.Runtime.Caching.OnChangedCallback> método se invoca inmediatamente cuando el <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> se invoca el método.</span><span class="sxs-lookup"><span data-stu-id="d9fee-250">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d9fee-251">Obtiene un valor que representa una instancia de la clase <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-251">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d9fee-252">Identificador de una instancia de la clase de supervisión de cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d9fee-252">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9fee-253">El <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> valor de propiedad normalmente consta de datos de cadena de dependencia nombres combinados que identifican de forma los identificadores de los datos que se supervisan mediante una <xref:System.Runtime.Caching.ChangeMonitor> instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-253">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="d9fee-254">El valor de la <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> propiedad es una cadena.</span><span class="sxs-lookup"><span data-stu-id="d9fee-254">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="d9fee-255">El valor de la cadena se usa para asignar el identificador único de la <xref:System.Runtime.Caching.ChangeMonitor> instancia.</span><span class="sxs-lookup"><span data-stu-id="d9fee-255">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-256">Invalidando la propiedad, puede definir una implementación personalizada para el valor de cadena de la propiedad con el fin de asignar un identificador único.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-256">By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d9fee-257">En las clases derivadas, debe establecer el valor de la propiedad en el constructor.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d9fee-257">In derived classes, you must set the value of the property in the constructor.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>