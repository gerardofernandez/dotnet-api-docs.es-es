<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3cf191e551b332cdd652ad1dfd6b103d7383185" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701046" /></Metadata><TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PromptBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PromptBuilder" />
  <TypeSignature Language="F#" Value="type PromptBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="06ec7-101">Crea un objeto vacío de <see cref="T:System.Speech.Synthesis.Prompt" /> y proporciona métodos para agregar contenido, seleccionar voces, controlar atributos de voz y controlar la pronunciación de las palabras emitidas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-101">Creates an empty <see cref="T:System.Speech.Synthesis.Prompt" /> object and provides methods for adding content, selecting voices, controlling voice attributes, and controlling the pronunciation of spoken words.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-102">Con <xref:System.Speech.Synthesis.PromptBuilder>, puede agregar una variedad de tipos de contenido a un símbolo del sistema, incluidos texto sin formato, el marcado SSML (como una cadena o un archivo), grabaciones de audio, o incluso otro <xref:System.Speech.Synthesis.PromptBuilder> objeto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-102">With <xref:System.Speech.Synthesis.PromptBuilder>, you can add a variety of content types to a prompt, including plain text, SSML markup (as a string or a file), recorded audio, or even another <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span>  
  
 <span data-ttu-id="06ec7-103">Anexar texto a un <xref:System.Speech.Synthesis.PromptBuilder> objeto y, opcionalmente, controlar atributos de voz como énfasis, velocidad y el volumen, usan uno de los <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-103">To append text to a <xref:System.Speech.Synthesis.PromptBuilder> object and optionally control voice attributes such as emphasis, rate, and volume, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> methods.</span></span>  <span data-ttu-id="06ec7-104">También puede controlar los atributos de voz como un grupo con el <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> y <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-104">You can also control voice attributes as a group with the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> methods.</span></span>  
  
 <span data-ttu-id="06ec7-105">Puede anexar texto y controlar lo que se habla o se pronuncia utilizando el <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-105">You can append text and control what is spoken or how it is pronounced using the <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> methods.</span></span>  
  
 <span data-ttu-id="06ec7-106">Cambiar la voz seleccionada actualmente en el símbolo del sistema mediante uno de los métodos <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> requieren los métodos, nomenclatura una voz concreta para usar o especificar las características de voz, como la edad y sexo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-106">Change the currently selected speaking voice in the prompt using one of the overloaded <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods, naming a specific voice to use or specifying required voice characteristics, such as age and gender.</span></span>  
  
 <span data-ttu-id="06ec7-107">Para generar voz a partir de un <xref:System.Speech.Synthesis.PromptBuilder> objeto, pasarlo como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-107">To generate speech from a <xref:System.Speech.Synthesis.PromptBuilder> object, you can pass it as an argument to the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-108">Para obtener más información, consulte [construir mensajes complejos](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span><span class="sxs-lookup"><span data-stu-id="06ec7-108">For more information, see [Constructing a Complex Prompt](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361616(v%3doffice.14)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-109">Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-109">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-110">Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-110">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06ec7-111">En el ejemplo siguiente se crea un nuevo <xref:System.Speech.Synthesis.PromptBuilder> de instancia y le agrega una cadena de texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-111">The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="06ec7-112">El marcado siguiente muestra el equivalente en el lenguaje de marcado de síntesis de voz (SSML), (`xml:lang` es un atributo obligatorio de la `speak` elemento):</span><span class="sxs-lookup"><span data-stu-id="06ec7-112">The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PromptBuilder(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.PromptBuilder : System.Globalization.CultureInfo -&gt; System.Speech.Synthesis.PromptBuilder" Usage="new System.Speech.Synthesis.PromptBuilder culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="06ec7-113">Proporciona información sobre una referencia cultural concreta, como su idioma, el nombre de la referencia cultural, el sistema de escritura, el calendario usado, y cómo aplicar formato a las fechas y ordenar las cadenas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-113">Provides information about a specific culture, such as its language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="06ec7-114">Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica una referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="06ec7-114">Creates a new instance of the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> class and specifies a culture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-115">Este constructor establece el valor para el <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="06ec7-115">This constructor sets the value for the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="06ec7-116">El <xref:System.Speech.Synthesis.SpeechSynthesizer> tratará de objeto seleccionar una voz instalada que admite el idioma especificado por el `culture` parámetro para procesar el símbolo del sistema.</span><span class="sxs-lookup"><span data-stu-id="06ec7-116">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the `culture` parameter to process the prompt.</span></span> <span data-ttu-id="06ec7-117">Si se encuentra una voz con la referencia cultural especificada, se usará.</span><span class="sxs-lookup"><span data-stu-id="06ec7-117">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="06ec7-118">Si no se encuentra una voz con la referencia cultural especificada, se usará la voz de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="06ec7-118">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="06ec7-119">Pronunciar correctamente las palabras en el idioma especificado por el `culture` parámetro, un motor de síntesis (texto a voz o TTS) de voz que admita el idioma debe instalarse.</span><span class="sxs-lookup"><span data-stu-id="06ec7-119">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="06ec7-120">Un motor TTS instalado se denomina una voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-120">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="06ec7-121">Para obtener información sobre la que se instalan las voces una referencia cultural concreta, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-121">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-122">Microsoft Windows y la API System.Speech Aceptar todos los códigos de idioma de país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-122">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="06ec7-123">Los motores de TTS que se incluye con Windows 7 admiten los siguientes códigos de idioma de país:</span><span class="sxs-lookup"><span data-stu-id="06ec7-123">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="06ec7-124">en-US.</span><span class="sxs-lookup"><span data-stu-id="06ec7-124">en-US.</span></span> <span data-ttu-id="06ec7-125">Inglés (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="06ec7-125">English (United States)</span></span>  
  
-   <span data-ttu-id="06ec7-126">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="06ec7-126">zh-CN.</span></span> <span data-ttu-id="06ec7-127">Chino (China)</span><span class="sxs-lookup"><span data-stu-id="06ec7-127">Chinese (China)</span></span>  
  
-   <span data-ttu-id="06ec7-128">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="06ec7-128">zh-TW.</span></span> <span data-ttu-id="06ec7-129">Chino (Taiwán)</span><span class="sxs-lookup"><span data-stu-id="06ec7-129">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="06ec7-130">También se permiten códigos de idioma de dos letras como "es-es".</span><span class="sxs-lookup"><span data-stu-id="06ec7-130">Two-letter language codes such as "en" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-131">El ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de instancia y especifica su <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-131">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.</span></span>  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 <span data-ttu-id="06ec7-132">El marcado siguiente muestra el SSML equivalente:</span><span class="sxs-lookup"><span data-stu-id="06ec7-132">The following markup shows the equivalent SSML:</span></span>  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-133">Anexa un archivo de audio especificado a un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-133">Appends a specified audio file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : string -&gt; unit" Usage="promptBuilder.AppendAudio path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="06ec7-134">Ruta de acceso completa al archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-134">A fully qualified path to the audio file.</span></span></param>
        <summary><span data-ttu-id="06ec7-135">Anexa el archivo de audio especificado a <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-135">Appends the specified audio file to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri -&gt; unit" Usage="promptBuilder.AppendAudio audioFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="06ec7-136">URI del archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-136">URI for the audio file.</span></span></param>
        <summary><span data-ttu-id="06ec7-137">Anexa el archivo de audio en el URI especificado a <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-137">Appends the audio file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06ec7-138">En el ejemplo siguiente se inicializa una nueva instancia de la <xref:System.Speech.Synthesis.PromptBuilder> clase y, a continuación, se agrega texto a él, seguido de un archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-138">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 <span data-ttu-id="06ec7-139">El marcado siguiente muestra el marcado SSML equivalente.</span><span class="sxs-lookup"><span data-stu-id="06ec7-139">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendAudio (audioFile As Uri, alternateText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendAudio(Uri ^ audioFile, System::String ^ alternateText);" />
      <MemberSignature Language="F#" Value="member this.AppendAudio : Uri * string -&gt; unit" Usage="promptBuilder.AppendAudio (audioFile, alternateText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile"><span data-ttu-id="06ec7-140">URI del archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-140">URI for the audio file.</span></span></param>
        <param name="alternateText"><span data-ttu-id="06ec7-141">Cadena que contiene el texto alternativo que representa el sonido.</span><span class="sxs-lookup"><span data-stu-id="06ec7-141">A string containing alternate text representing the audio.</span></span></param>
        <summary><span data-ttu-id="06ec7-142">Anexa el archivo de audio y el texto alternativo especificados a <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-142">Appends the specified audio file and alternate text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-143">El motor de síntesis de voz leerá el texto alternativo si no se puede reproducir el archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-143">The speech synthesis engine will speak the alternate text if the audio file cannot be played.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-144">Los ejemplos siguientes se agrega un archivo de audio a un <xref:System.Speech.Synthesis.PromptBuilder> de instancia y especifica el texto que diga si no se puede reproducir el archivo de audio.</span><span class="sxs-lookup"><span data-stu-id="06ec7-144">The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.</span></span>  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 <span data-ttu-id="06ec7-145">El marcado siguiente muestra el marcado SSML equivalente.</span><span class="sxs-lookup"><span data-stu-id="06ec7-145">The following markup shows the equivalent SSML markup.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBookmark (bookmarkName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBookmark(System::String ^ bookmarkName);" />
      <MemberSignature Language="F#" Value="member this.AppendBookmark : string -&gt; unit" Usage="promptBuilder.AppendBookmark bookmarkName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName"><span data-ttu-id="06ec7-146">Cadena que contiene el nombre del marcador anexado.</span><span class="sxs-lookup"><span data-stu-id="06ec7-146">A string containing the name of the appended bookmark.</span></span></param>
        <summary><span data-ttu-id="06ec7-147">Anexa un marcador al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-147">Appends a bookmark to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-148">Se generará un motor de síntesis de voz una <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> eventos si encuentra un marcador mientras habla un símbolo del sistema mediante cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-148">A speech synthesis engine will generate a <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event if it encounters a bookmark while speaking a prompt using any of the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-149">El ejemplo siguiente crea un símbolo del sistema que incluye dos marcadores y envía el resultado a un archivo WAV para su reproducción.</span><span class="sxs-lookup"><span data-stu-id="06ec7-149">The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback.</span></span> <span data-ttu-id="06ec7-150">El controlador para el <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> eventos escribe el nombre del marcador y su posición en la secuencia de audio cuando se generó el evento en la consola.</span><span class="sxs-lookup"><span data-stu-id="06ec7-150">The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-151">Inserta una interrupción (pausa) en el contenido de un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-151">Inserts a break (pause) in the content of a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak();" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : unit -&gt; unit" Usage="promptBuilder.AppendBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-152">Anexa una interrupción al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-152">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-153">Este método no especifica una duración para la interrupción.</span><span class="sxs-lookup"><span data-stu-id="06ec7-153">This method does not specify a duration for the break.</span></span> <span data-ttu-id="06ec7-154">El <xref:System.Speech.Synthesis.SpeechSynthesizer> determina un valor de duración en función del contexto lingüístico.</span><span class="sxs-lookup"><span data-stu-id="06ec7-154">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will determine a duration value based on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-155">El ejemplo siguiente crea un símbolo del sistema que contiene dos frases separadas por un salto y habla el símbolo del sistema en el dispositivo de audio predeterminado en el equipo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-155">The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (strength As PromptBreak)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(System::Speech::Synthesis::PromptBreak strength);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : System.Speech.Synthesis.PromptBreak -&gt; unit" Usage="promptBuilder.AppendBreak strength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength"><span data-ttu-id="06ec7-156">Indica la duración de la interrupción, con los valores crecientes siguientes:</span><span class="sxs-lookup"><span data-stu-id="06ec7-156">Indicates the duration of the break, with the following increasing values:</span></span></param>
        <summary><span data-ttu-id="06ec7-157">Anexa una interrupción al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica su intensidad (duración).</span><span class="sxs-lookup"><span data-stu-id="06ec7-157">Appends a break to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its strength (duration).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-158">Los valores de la <xref:System.Speech.Synthesis.PromptBreak> enumeración representan un intervalo de intervalos (pausa) de separación entre los límites de palabra.</span><span class="sxs-lookup"><span data-stu-id="06ec7-158">The values in the <xref:System.Speech.Synthesis.PromptBreak> enumeration represent a range of separation intervals (pauses) between word boundaries.</span></span> <span data-ttu-id="06ec7-159">El motor de síntesis de voz determina la duración exacta del intervalo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-159">The speech synthesis engine determines the exact duration of the interval.</span></span> <span data-ttu-id="06ec7-160">Cuando se solicita un salto, uno de estos valores se pasa para el motor de texto a voz (TTS), que contiene una asignación entre estos valores y los valores correspondientes de salto de milisegundo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-160">When a break is requested, one of these values is passed to the text-to-speech (TTS) engine, which contains a mapping between these values and the corresponding millisecond break values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-161">El ejemplo siguiente crea un símbolo del sistema que contiene dos frases separadas por un salto y envía el resultado a un archivo WAV para su reproducción.</span><span class="sxs-lookup"><span data-stu-id="06ec7-161">The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendBreak (duration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendBreak(TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.AppendBreak : TimeSpan -&gt; unit" Usage="promptBuilder.AppendBreak duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration"><span data-ttu-id="06ec7-162">Tiempo en pasos, donde un paso equivale a 100 nanosegundos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-162">The time in ticks, where one tick equals 100 nanoseconds.</span></span></param>
        <summary><span data-ttu-id="06ec7-163">Anexa una interrupción de la duración especificada al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-163">Appends a break of the specified duration to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-164">Un salto puede usarse para controlar otros límites prosódica entre palabras o pausas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-164">A break can be used to control pauses or other prosodic boundaries between words.</span></span> <span data-ttu-id="06ec7-165">Un salto es opcional.</span><span class="sxs-lookup"><span data-stu-id="06ec7-165">A break is optional.</span></span> <span data-ttu-id="06ec7-166">Si un salto no está presente, el sintetizador determina el salto entre las palabras en función del contexto lingüístico.</span><span class="sxs-lookup"><span data-stu-id="06ec7-166">If a break is not present, the synthesizer determines the break between words depending on the linguistic context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-167">En el ejemplo siguiente se crea un símbolo del sistema que contiene dos frases separadas por un salto de 15.000.000 tics (1,5 segundos) y habla el símbolo del sistema en el dispositivo de audio predeterminado en el equipo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-167">The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendPromptBuilder(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.AppendPromptBuilder : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="promptBuilder.AppendPromptBuilder promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder"><span data-ttu-id="06ec7-168">Contenido que se va a anexar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-168">The content to append.</span></span></param>
        <summary><span data-ttu-id="06ec7-169">Anexa un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> a otro objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-169">Appends a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object to another <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06ec7-170">El ejemplo siguiente crea dos <xref:System.Speech.Synthesis.PromptBuilder> instancias y, a continuación, los anexa a un tercer <xref:System.Speech.Synthesis.PromptBuilder>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-170">The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-171">Anexa un archivo SSML a un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-171">Appends an SSML file to a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : string -&gt; unit" Usage="promptBuilder.AppendSsml path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="06ec7-172">Ruta de acceso completa al archivo SSML que se va a anexar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-172">A fully qualified path to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="06ec7-173">Anexa el archivo SSML en la ruta de acceso especificada al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-173">Appends the SSML file at the specified path to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-174">El archivo SSML debe ser un archivo de formato XML que se ajusta a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) especificación.</span><span class="sxs-lookup"><span data-stu-id="06ec7-174">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification.</span></span>  
  
 <span data-ttu-id="06ec7-175">También puede anexar como una cadena con el marcado SSML <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-175">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-176">El ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de objetos y anexa el contenido de un archivo SSML con el <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-176">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 <span data-ttu-id="06ec7-177">Este es el archivo SSML que hace referencia el ejemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="06ec7-177">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(Uri ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : Uri -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="06ec7-178">URI completo del archivo SSML que se va a anexar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-178">A fully qualified URI to the SSML file to append.</span></span></param>
        <summary><span data-ttu-id="06ec7-179">Anexa el archivo SSML en el URI especificado al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-179">Appends the SSML file at the specified URI to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-180">El archivo SSML debe ser un archivo de formato XML que se ajusta a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://www.w3.org/TR/speech-synthesis/) especificación.</span><span class="sxs-lookup"><span data-stu-id="06ec7-180">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="06ec7-181">También puede anexar como una cadena con el marcado SSML <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-181">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-182">El ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de objetos y anexa el contenido de un archivo SSML con el <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-182">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 <span data-ttu-id="06ec7-183">Este es el archivo SSML que hace referencia el ejemplo anterior.</span><span class="sxs-lookup"><span data-stu-id="06ec7-183">The following is the SSML file that the preceding example references.</span></span>  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsml (ssmlFile As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsml(System::Xml::XmlReader ^ ssmlFile);" />
      <MemberSignature Language="F#" Value="member this.AppendSsml : System.Xml.XmlReader -&gt; unit" Usage="promptBuilder.AppendSsml ssmlFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile"><span data-ttu-id="06ec7-184">Nombre completo del archivo XML que se va a anexar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-184">A fully qualified name to the XML file to append.</span></span></param>
        <summary><span data-ttu-id="06ec7-185">Agrega un objeto <c>XMLReader</c> que define una referencia de un mensaje de SSML al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-185">Appends an <c>XMLReader</c> object that references an SSML prompt to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-186">El archivo SSML debe ser un archivo de formato XML que se ajusta a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://www.w3.org/TR/speech-synthesis/) especificación.</span><span class="sxs-lookup"><span data-stu-id="06ec7-186">The SSML file must be an XML-format file that conforms to the [Speech Synthesis Markup Language (SSML) Version 1.0](https://www.w3.org/TR/speech-synthesis/) specification.</span></span>  
  
 <span data-ttu-id="06ec7-187">También puede anexar como una cadena con el marcado SSML <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-187">You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-188">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> objeto desde un <xref:System.Xml.XmlReader> objeto que hace referencia a un archivo que contiene el marcado del lenguaje de marcado de síntesis de voz (SSML).</span><span class="sxs-lookup"><span data-stu-id="06ec7-188">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.</span></span>  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSsmlMarkup (ssmlMarkup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSsmlMarkup(System::String ^ ssmlMarkup);" />
      <MemberSignature Language="F#" Value="member this.AppendSsmlMarkup : string -&gt; unit" Usage="promptBuilder.AppendSsmlMarkup ssmlMarkup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup"><span data-ttu-id="06ec7-189">Cadena que contiene el marcado SSML.</span><span class="sxs-lookup"><span data-stu-id="06ec7-189">A string containing SSML markup.</span></span></param>
        <summary><span data-ttu-id="06ec7-190">Anexa la cadena especificada que contiene el marcado SSML al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-190">Appends the specified string containing SSML markup to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-191">Debe utilizar los caracteres de escape adecuados al anexar el marcado SSML.</span><span class="sxs-lookup"><span data-stu-id="06ec7-191">You must use the appropriate escape characters when appending SSML markup.</span></span> <span data-ttu-id="06ec7-192">Tenga en cuenta el-barras diagonales inversas delante de las comillas que encierra el valor de la `interpret-as` atributo en el ejemplo siguiente:</span><span class="sxs-lookup"><span data-stu-id="06ec7-192">Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:</span></span>  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  <span data-ttu-id="06ec7-193">La cadena utilizada como argumento a <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> no puede incluir un `speak` elemento.</span><span class="sxs-lookup"><span data-stu-id="06ec7-193">The string used as an argument to <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> cannot include a `speak` element.</span></span>  
  
 <span data-ttu-id="06ec7-194">Cuando se usa <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> para especificar pronunciaciones insertada en un `phoneme` elemento, puede usar teléfonos desde cualquiera de los alfabetos fonéticos siguientes, proporcionados que admite el motor de voz actual:</span><span class="sxs-lookup"><span data-stu-id="06ec7-194">When using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:</span></span>  
  
-   <span data-ttu-id="06ec7-195">Alfabeto fonético de internacional (IPA)</span><span class="sxs-lookup"><span data-stu-id="06ec7-195">International Phonetic Alphabet (IPA)</span></span>  
  
-   <span data-ttu-id="06ec7-196">Conjunto telefónico universal (UPS)</span><span class="sxs-lookup"><span data-stu-id="06ec7-196">Universal Phone Set (UPS)</span></span>  
  
-   <span data-ttu-id="06ec7-197">SAPI teléfono establecido</span><span class="sxs-lookup"><span data-stu-id="06ec7-197">SAPI Phone Set</span></span>  
  
 <span data-ttu-id="06ec7-198">Cualquier motor de voz SSML conforme hablará teléfonos desde el archivo IPA.</span><span class="sxs-lookup"><span data-stu-id="06ec7-198">Any SSML-compliant speech engine will speak phones from the IPA.</span></span>  
  
 <span data-ttu-id="06ec7-199">También puede anexar un archivo que contiene el marcado SSML mediante uno de los <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-199">You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods.</span></span> <span data-ttu-id="06ec7-200">Para anexar el texto que se hablará que no esté formateado con el lenguaje de marcado, utilice uno de los <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-200">To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-201">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-201">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string -&gt; unit" Usage="promptBuilder.AppendText textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-202">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-202">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="06ec7-203">Especifica el texto que se va a anexar al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-203">Specifies text to append to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-204">Para anexar texto con formato de lenguaje de marcado SSML, utilice <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-204">To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-205">El ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de objetos y anexa una cadena de texto con el <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-205">The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, emphasis As PromptEmphasis)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptEmphasis emphasis);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptEmphasis -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, emphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-206">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-206">A string containing the text to be spoken.</span></span></param>
        <param name="emphasis"><span data-ttu-id="06ec7-207">Valor del énfasis que se va a aplicar al texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-207">The value for the emphasis or stress to apply to the text.</span></span></param>
        <summary><span data-ttu-id="06ec7-208">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el grado de énfasis para el texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-208">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the degree of emphasis for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-209">Los motores de síntesis de voz de Windows no admiten el parámetro énfasis en este momento.</span><span class="sxs-lookup"><span data-stu-id="06ec7-209">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="06ec7-210">Establecimiento de valores para el parámetro de énfasis, se producirá ningún cambio en la salida de voz sintetizada audible.</span><span class="sxs-lookup"><span data-stu-id="06ec7-210">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, rate As PromptRate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptRate rate);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptRate -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, rate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-211">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-211">A string containing the text to be spoken.</span></span></param>
        <param name="rate"><span data-ttu-id="06ec7-212">Valor de la velocidad de habla que se va a aplicar al texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-212">The value for the speaking rate to apply to the text.</span></span></param>
        <summary><span data-ttu-id="06ec7-213">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica la velocidad con que se va a decir el texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-213">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the speaking rate for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06ec7-214">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de objetos y anexa cadenas de texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-214">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="06ec7-215">El ejemplo se usa el <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método para especificar una lenta en términos de tasa para la cadena que se agrega, que enumera el contenido de un pedido.</span><span class="sxs-lookup"><span data-stu-id="06ec7-215">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendText (textToSpeak As String, volume As PromptVolume)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendText(System::String ^ textToSpeak, System::Speech::Synthesis::PromptVolume volume);" />
      <MemberSignature Language="F#" Value="member this.AppendText : string * System.Speech.Synthesis.PromptVolume -&gt; unit" Usage="promptBuilder.AppendText (textToSpeak, volume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-216">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-216">A string containing the text to be spoken.</span></span></param>
        <param name="volume"><span data-ttu-id="06ec7-217">Valor del volumen de habla que se va a aplicar al texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-217">The value for the speaking volume (loudness) to apply to the text.</span></span></param>
        <summary><span data-ttu-id="06ec7-218">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el volumen con que se va a decir el texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-218">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the volume to speak the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-219">El <xref:System.Speech.Synthesis.PromptVolume.Default> para <xref:System.Speech.Synthesis.PromptVolume> indica el volumen completo, que es el mismo como <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-219">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="06ec7-220">Los demás valores disminuir el volumen de salida de voz con respecto al total del volumen.</span><span class="sxs-lookup"><span data-stu-id="06ec7-220">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-221">En el ejemplo siguiente se usa el <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> método para especificar la configuración de volumen que el <xref:System.Speech.Synthesis.SpeechSynthesizer> deberían aplicarse a la salida de voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-221">The following example uses the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithAlias (textToSpeak As String, substitute As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithAlias(System::String ^ textToSpeak, System::String ^ substitute);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithAlias : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithAlias (textToSpeak, substitute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-222">Cadena que contiene la representación del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-222">A string containing the text representation.</span></span></param>
        <param name="substitute"><span data-ttu-id="06ec7-223">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-223">A string containing the text to be spoken.</span></span></param>
        <summary><span data-ttu-id="06ec7-224">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el texto de alias que se va a decir en lugar del texto especificado.</span><span class="sxs-lookup"><span data-stu-id="06ec7-224">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the alias text to be spoken in place of the appended text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-225">Esto permite que un documento contenga una voz y una forma escrita para un símbolo del sistema.</span><span class="sxs-lookup"><span data-stu-id="06ec7-225">This allows a document to contain both a spoken and a written form for a prompt.</span></span> <span data-ttu-id="06ec7-226">Por ejemplo, la forma escrita podría ser un acrónimo, como SAPI, y la forma hablada podría ser el texto expandido el acrónimo en esta interfaz de programación de aplicaciones de voz case.</span><span class="sxs-lookup"><span data-stu-id="06ec7-226">For example, the written form could be an acronym, such as SAPI, and the spoken form could be the expanded text for the acronym, in this case Speech Application Programming Interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-227">En el ejemplo siguiente, se anexa una cadena de texto ("Speech Synthesis Markup Language") y su alias ("SSML") a un <xref:System.Speech.Synthesis.PromptBuilder> objeto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-227">The following example appends a text string ("Speech Synthesis Markup Language") and its alias ("SSML") to a <xref:System.Speech.Synthesis.PromptBuilder> object.</span></span> <span data-ttu-id="06ec7-228">El sintetizador pronuncia "S S M L".</span><span class="sxs-lookup"><span data-stu-id="06ec7-228">The synthesizer will pronounce "S S M L".</span></span>  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-229">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el tipo de contenido del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-229">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type of the text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::Speech::Synthesis::SayAs sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * System.Speech.Synthesis.SayAs -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-230">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-230">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="06ec7-231">Tipo de contenido del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-231">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="06ec7-232">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el tipo de contenido usando un miembro de la enumeración <see cref="T:System.Speech.Synthesis.SayAs" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-232">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the content type using a member of the <see cref="T:System.Speech.Synthesis.SayAs" /> enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-233">El tipo de contenido especificado por `sayAs` puede proporcionar orientación para el motor de síntesis de voz acerca de cómo pronunciar el contenido de `textToSpeak`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-233">The content type specified by `sayAs` can provide guidance to the speech synthesis engine about how to pronounce the contents of `textToSpeak`.</span></span>  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithHint (textToSpeak As String, sayAs As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithHint(System::String ^ textToSpeak, System::String ^ sayAs);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithHint : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithHint (textToSpeak, sayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-234">Cadena que contiene el texto que se va a decir.</span><span class="sxs-lookup"><span data-stu-id="06ec7-234">A string containing the text to be spoken.</span></span></param>
        <param name="sayAs"><span data-ttu-id="06ec7-235">Tipo de contenido del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-235">The content type of the text.</span></span></param>
        <summary><span data-ttu-id="06ec7-236">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y un <see cref="T:System.String" /> que especifica el tipo de contenido del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-236">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and a <see cref="T:System.String" /> that specifies the content type of the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-237">Puede usar este método para especificar un tipo de contenido que no se incluye en el <xref:System.Speech.Synthesis.SayAs> enumeración.</span><span class="sxs-lookup"><span data-stu-id="06ec7-237">You can use this method to specify a content type that is not included in the <xref:System.Speech.Synthesis.SayAs> enumeration.</span></span> <span data-ttu-id="06ec7-238">Sin embargo, el motor TTS debe admitir el parámetro que especifique.</span><span class="sxs-lookup"><span data-stu-id="06ec7-238">However, the TTS engine must support the parameter that you specify.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendTextWithPronunciation (textToSpeak As String, pronunciation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendTextWithPronunciation(System::String ^ textToSpeak, System::String ^ pronunciation);" />
      <MemberSignature Language="F#" Value="member this.AppendTextWithPronunciation : string * string -&gt; unit" Usage="promptBuilder.AppendTextWithPronunciation (textToSpeak, pronunciation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak"><span data-ttu-id="06ec7-239">Cadena que contiene la forma escrita de la palabra usando el alfabeto convencional para un idioma.</span><span class="sxs-lookup"><span data-stu-id="06ec7-239">A string containing the written form of the word using the conventional alphabet for a language.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="06ec7-240">Cadena que contiene los teléfonos que se dirán con el alfabeto fonético internacional (IPA).</span><span class="sxs-lookup"><span data-stu-id="06ec7-240">A string containing phones to be spoken from the International Phonetic Alphabet (IPA).</span></span></param>
        <summary><span data-ttu-id="06ec7-241">Anexa texto al objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica la pronunciación del texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-241">Appends text to the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the pronunciation for the text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-242">El sintetizador habla el contenido de la `pronunciation` parámetro, no el contenido de la `textToSpeak` parámetro.</span><span class="sxs-lookup"><span data-stu-id="06ec7-242">The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.</span></span>  
  
 <span data-ttu-id="06ec7-243">Pronunciaciones especificarse insertados en los mensajes solo se aplican a la aparición de una palabra individual y reemplazar las pronunciaciones del motor de voz o cualquiera de sus léxicos actualmente activos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-243">Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons.</span></span> <span data-ttu-id="06ec7-244">Normalmente, usará las pronunciaciones en línea para pronunciaciones personalizadas de palabras existentes o para la pronunciación de palabras poco comunes, como nombres propios, lo que el motor de síntesis de voz no puede pronunciar como se esperaba.</span><span class="sxs-lookup"><span data-stu-id="06ec7-244">Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.</span></span>  
  
 <span data-ttu-id="06ec7-245">Deben especificarse en línea pronunciaciones mediante teléfonos del alfabeto fonético internacional (IPA).</span><span class="sxs-lookup"><span data-stu-id="06ec7-245">Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA).</span></span> <span data-ttu-id="06ec7-246">Un teléfono es una letra o un carácter que representa un sonido discreto de voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-246">A phone is a letter or character that represents a discreet sound of speech.</span></span> <span data-ttu-id="06ec7-247">Los motores de voz que cumplen con la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) especificación pronuncie teléfonos desde el archivo IPA.</span><span class="sxs-lookup"><span data-stu-id="06ec7-247">Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA.</span></span> <span data-ttu-id="06ec7-248">Para especificar pronunciaciones en línea con otros alfabetos fonéticos, vea <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-248">To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</span></span>  
  
 <span data-ttu-id="06ec7-249">El archivo IPA se publica un [gráfico](https://go.microsoft.com/fwlink/?LinkId=58362) que se enumeran sus teléfonos y los asigna a los números de Unicode.</span><span class="sxs-lookup"><span data-stu-id="06ec7-249">The IPA publishes a [chart](https://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.</span></span>  
  
 <span data-ttu-id="06ec7-250">Algunos teléfonos del alfabeto IPA tienen las mismas representaciones como letras del alfabeto latino.</span><span class="sxs-lookup"><span data-stu-id="06ec7-250">Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet.</span></span> <span data-ttu-id="06ec7-251">En esos casos, es posible escribir los caracteres latinos y tienen la representación adecuada para un teléfono.</span><span class="sxs-lookup"><span data-stu-id="06ec7-251">In those cases, it is possible to type the Latin character and have the proper representation for a phone.</span></span> <span data-ttu-id="06ec7-252">Dado que los caracteres latinos utilizados normalmente en texto pueden representar varios teléfonos del conjunto de phone IPA, simplemente escribiendo los caracteres latinos podría no producir el teléfono IPA preciso deseado.</span><span class="sxs-lookup"><span data-stu-id="06ec7-252">Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired.</span></span> <span data-ttu-id="06ec7-253">Otros teléfonos de la necesidad de alfabeto IPA para representarse en el código como carácter de referencias que consta de una y comercial (&), la almohadilla (#), y un número de Unicode para el teléfono en formato hexadecimal o decimal, deseado todos seguido por un punto y coma (;).</span><span class="sxs-lookup"><span data-stu-id="06ec7-253">Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;).</span></span> <span data-ttu-id="06ec7-254">Por ejemplo, un schwa (&\#x0259;) se representaría mediante `&#x0259;`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-254">For example, a schwa (&\#x0259;) would be represented by `&#x0259;`.</span></span>  
  
 <span data-ttu-id="06ec7-255">Para agregar las pronunciaciones nuevas o personalizadas para varias palabras, por ejemplo a dialectos express regionales o para agregar nombres propios o vocabulario que es específico de una disciplina educativa o médica, generar un léxico y agregarlo a la <xref:System.Speech.Synthesis.SpeechSynthesizer> mediante <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-255">To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-256">En el ejemplo siguiente se inicializa una nueva instancia de la <xref:System.Speech.Synthesis.PromptBuilder> clase.</span><span class="sxs-lookup"><span data-stu-id="06ec7-256">The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class.</span></span> <span data-ttu-id="06ec7-257">Luego anexa la cadena de texto "My name is" a la instancia.</span><span class="sxs-lookup"><span data-stu-id="06ec7-257">It then appends the text string "My name is" to the instance.</span></span> <span data-ttu-id="06ec7-258">Por último, se anexa una cadena que contiene el nombre correcto "DuBois" y especifica la pronunciación del nombre.</span><span class="sxs-lookup"><span data-stu-id="06ec7-258">Finally, it appends a string containing the proper name "DuBois" and specifies the pronunciation of the name.</span></span>  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 <span data-ttu-id="06ec7-259">El marcado siguiente muestra el SSML que <xref:System.Speech.Synthesis.PromptBuilder> genera el objeto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-259">The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.</span></span>  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="06ec7-260">Asociación fonético internacional</span><span class="sxs-lookup"><span data-stu-id="06ec7-260">International Phonetic Association</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearContent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearContent();" />
      <MemberSignature Language="F#" Value="member this.ClearContent : unit -&gt; unit" Usage="promptBuilder.ClearContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-261">Borra el contenido del objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-261">Clears the content from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06ec7-262">Obtiene o establece la información de referencia cultural del objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-262">Gets or sets the culture information for the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-263">El <xref:System.Speech.Synthesis.SpeechSynthesizer> tratará de objeto seleccionar una voz instalada que admite el idioma especificado por el <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad que se va a procesar el símbolo del sistema.</span><span class="sxs-lookup"><span data-stu-id="06ec7-263">The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property to process the prompt.</span></span> <span data-ttu-id="06ec7-264">Si se encuentra una voz con la referencia cultural especificada, se usará.</span><span class="sxs-lookup"><span data-stu-id="06ec7-264">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="06ec7-265">Si no se encuentra una voz con la referencia cultural especificada, se usará la voz de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="06ec7-265">If a voice with the specified culture cannot be found, the default voice will be used.</span></span>  
  
 <span data-ttu-id="06ec7-266">También se puede especificar una referencia cultural en el símbolo del sistema para las secciones discretas de contenido mediante el <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, y <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-266">A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods.</span></span> <span data-ttu-id="06ec7-267">Una referencia cultural especificada para una parte del contenido con uno de los métodos anteriores invalidará el <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad mientras que en efecto y el <xref:System.Speech.Synthesis.SpeechSynthesizer> intenta seleccionar una voz instalada que admite el idioma especificado por el `culture` parámetro del método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-267">A culture specified for a portion of content using one of the above methods will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.</span></span>  
  
 <span data-ttu-id="06ec7-268">Pronunciar correctamente las palabras en el idioma especificado por el <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad, un motor de síntesis (texto a voz o TTS) de voz que admita el idioma debe instalarse.</span><span class="sxs-lookup"><span data-stu-id="06ec7-268">To correctly pronounce words in the language specified by the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="06ec7-269">Un motor TTS instalado se denomina una voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-269">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="06ec7-270">Para obtener información sobre la que se instalan las voces una referencia cultural concreta, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-270">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-271">Microsoft Windows y la API System.Speech Aceptar todos los códigos de idioma de país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-271">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="06ec7-272">Los motores de TTS que se incluye con Windows 7 admiten los siguientes códigos de idioma de país:</span><span class="sxs-lookup"><span data-stu-id="06ec7-272">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="06ec7-273">en-US.</span><span class="sxs-lookup"><span data-stu-id="06ec7-273">en-US.</span></span> <span data-ttu-id="06ec7-274">Inglés (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="06ec7-274">English (United States)</span></span>  
  
-   <span data-ttu-id="06ec7-275">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="06ec7-275">zh-CN.</span></span> <span data-ttu-id="06ec7-276">Chino (China)</span><span class="sxs-lookup"><span data-stu-id="06ec7-276">Chinese (China)</span></span>  
  
-   <span data-ttu-id="06ec7-277">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="06ec7-277">zh-TW.</span></span> <span data-ttu-id="06ec7-278">Chino (Taiwán)</span><span class="sxs-lookup"><span data-stu-id="06ec7-278">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="06ec7-279">También se permiten códigos de idioma de dos letras como "es-es".</span><span class="sxs-lookup"><span data-stu-id="06ec7-279">Two-letter language codes such as "en" are also permitted.</span></span>  <span data-ttu-id="06ec7-280">Consulte [constantes de identificador de idioma y las cadenas](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) para obtener una lista completa de códigos de idioma.</span><span class="sxs-lookup"><span data-stu-id="06ec7-280">See [Language Identifier Constants and Strings](https://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) for a comprehensive list of language codes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndParagraph();" />
      <MemberSignature Language="F#" Value="member this.EndParagraph : unit -&gt; unit" Usage="promptBuilder.EndParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-281">Especifica el fin de un párrafo en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-281">Specifies the end of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-282">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-282">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="06ec7-283">Vea <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> para obtener un ejemplo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-283">See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSentence();" />
      <MemberSignature Language="F#" Value="member this.EndSentence : unit -&gt; unit" Usage="promptBuilder.EndSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-284">Especifica el fin de una oración en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-284">Specifies the end of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-285">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-285">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span> <span data-ttu-id="06ec7-286">Vea <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> para obtener un ejemplo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-286">See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndStyle();" />
      <MemberSignature Language="F#" Value="member this.EndStyle : unit -&gt; unit" Usage="promptBuilder.EndStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-287">Especifica el fin de un estilo en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-287">Specifies the end of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-288">El <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> método detiene el estilo de habla actual.</span><span class="sxs-lookup"><span data-stu-id="06ec7-288">The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style.</span></span> <span data-ttu-id="06ec7-289">El estilo de habla vuelve a la configuración que estaba en vigor antes el <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> método inicia un nuevo estilo de habla.</span><span class="sxs-lookup"><span data-stu-id="06ec7-289">The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style.</span></span> <span data-ttu-id="06ec7-290">Vea <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> para obtener un ejemplo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-290">See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndVoice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndVoice();" />
      <MemberSignature Language="F#" Value="member this.EndVoice : unit -&gt; unit" Usage="promptBuilder.EndVoice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-291">Especifica el fin de uso de una voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-291">Specifies the end of use of a voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-292">El <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> método detiene el uso de la voz actual para la salida de voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-292">The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output.</span></span> <span data-ttu-id="06ec7-293">La voz se vuelve a la configuración que estaba en vigor antes el <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> método inicia una nueva voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-293">The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06ec7-294">Obtiene si el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> está vacío.</span><span class="sxs-lookup"><span data-stu-id="06ec7-294">Gets whether the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> is empty.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-295">Especifica el inicio de un párrafo en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica opcionalmente un idioma.</span><span class="sxs-lookup"><span data-stu-id="06ec7-295">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-296">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-296">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph();" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : unit -&gt; unit" Usage="promptBuilder.StartParagraph " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-297">Especifica el inicio de un párrafo en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-297">Specifies the start of a paragraph in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-298">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-298">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-299">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> objeto, anexa el contenido y organiza el contenido en los párrafos y frases.</span><span class="sxs-lookup"><span data-stu-id="06ec7-299">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartParagraph (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartParagraph(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartParagraph : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartParagraph culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="06ec7-300">Proporciona información sobre una referencia cultural concreta, como el idioma, el nombre de la referencia cultural, el sistema de escritura, el calendario usado, y cómo aplicar formato a las fechas y ordenar las cadenas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-300">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="06ec7-301">Especifica el inicio de un párrafo en la referencia cultural especificada en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-301">Specifies the start of a paragraph in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-302">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-302">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="06ec7-303">El `culture` parámetro para un párrafo puede ser diferente de la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad de la <xref:System.Speech.Synthesis.PromptBuilder> objeto que lo contiene.</span><span class="sxs-lookup"><span data-stu-id="06ec7-303">The `culture` parameter for a paragraph can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span> <span data-ttu-id="06ec7-304">De hecho, mientras que el valor de la `culture` parámetro reemplazará la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="06ec7-304">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="06ec7-305">El <xref:System.Speech.Synthesis.SpeechSynthesizer> intenta seleccionar una voz instalada que admite el idioma especificado por el `culture` parámetro hablar del párrafo.</span><span class="sxs-lookup"><span data-stu-id="06ec7-305">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the paragraph.</span></span> <span data-ttu-id="06ec7-306">Si se encuentra una voz con la referencia cultural especificada, se usará.</span><span class="sxs-lookup"><span data-stu-id="06ec7-306">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="06ec7-307">Si no se encuentra una voz con la referencia cultural especificada, se usará la voz de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="06ec7-307">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="06ec7-308">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, llame a <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-308">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</span></span>  
  
 <span data-ttu-id="06ec7-309">Pronunciar correctamente las palabras en el idioma especificado por el `culture` parámetro, un motor de síntesis (texto a voz o TTS) de voz que admita el idioma debe instalarse.</span><span class="sxs-lookup"><span data-stu-id="06ec7-309">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="06ec7-310">Un motor TTS instalado se denomina una voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-310">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="06ec7-311">Para obtener información sobre la que se instalan las voces una referencia cultural concreta, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-311">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-312">Microsoft Windows y la API System.Speech Aceptar todos los códigos de idioma de país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-312">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="06ec7-313">Los motores de TTS que se incluye con Windows 7 admiten los siguientes códigos de idioma de país:</span><span class="sxs-lookup"><span data-stu-id="06ec7-313">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="06ec7-314">en-US.</span><span class="sxs-lookup"><span data-stu-id="06ec7-314">en-US.</span></span> <span data-ttu-id="06ec7-315">Inglés (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="06ec7-315">English (United States)</span></span>  
  
-   <span data-ttu-id="06ec7-316">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="06ec7-316">zh-CN.</span></span> <span data-ttu-id="06ec7-317">Chino (China)</span><span class="sxs-lookup"><span data-stu-id="06ec7-317">Chinese (China)</span></span>  
  
-   <span data-ttu-id="06ec7-318">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="06ec7-318">zh-TW.</span></span> <span data-ttu-id="06ec7-319">Chino (Taiwán)</span><span class="sxs-lookup"><span data-stu-id="06ec7-319">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="06ec7-320">También se permiten códigos de idioma de dos letras como "es-es".</span><span class="sxs-lookup"><span data-stu-id="06ec7-320">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-321">Especifica el inicio de una frase en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica opcionalmente un idioma.</span><span class="sxs-lookup"><span data-stu-id="06ec7-321">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object, and optionally specifies a language.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-322">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-322">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence();" />
      <MemberSignature Language="F#" Value="member this.StartSentence : unit -&gt; unit" Usage="promptBuilder.StartSentence " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-323">Especifica el inicio de una frase en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-323">Specifies the start of a sentence in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-324">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-324">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-325">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> objeto, anexa el contenido y organiza el contenido en los párrafos y frases.</span><span class="sxs-lookup"><span data-stu-id="06ec7-325">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartSentence (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartSentence(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartSentence : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartSentence culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="06ec7-326">Proporciona información sobre una referencia cultural concreta, como el idioma, el nombre de la referencia cultural, el sistema de escritura, el calendario usado, y cómo aplicar formato a las fechas y ordenar las cadenas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-326">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="06ec7-327">Especifica el inicio de una frase en la referencia cultural especificada en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-327">Specifies the start of a sentence in the specified culture in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-328">Mensajes largos se pueden representar más parecida a la voz humana si se dividen en frases y párrafos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-328">Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs.</span></span>  
  
 <span data-ttu-id="06ec7-329">El `culture` parámetro para una oración puede ser diferente de la `culture` parámetro para el párrafo que contiene la frase o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad de la <xref:System.Speech.Synthesis.PromptBuilder> objeto que contiene.</span><span class="sxs-lookup"><span data-stu-id="06ec7-329">The `culture` parameter for a sentence can be different than the `culture` parameter for the paragraph that contains the sentence or the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains them.</span></span>  
  
 <span data-ttu-id="06ec7-330">En efecto, mientras que el valor de la `culture` parámetro reemplazará el <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad y el `culture` parámetro para el párrafo que contiene la frase.</span><span class="sxs-lookup"><span data-stu-id="06ec7-330">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property and the `culture` parameter for the paragraph that contains the sentence.</span></span> <span data-ttu-id="06ec7-331">El <xref:System.Speech.Synthesis.SpeechSynthesizer> intenta seleccionar una voz instalada que admite el idioma especificado por el `culture` parámetro hablar de la oración.</span><span class="sxs-lookup"><span data-stu-id="06ec7-331">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the sentence.</span></span> <span data-ttu-id="06ec7-332">Si se encuentra una voz con la referencia cultural especificada, se usará.</span><span class="sxs-lookup"><span data-stu-id="06ec7-332">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="06ec7-333">Si no se encuentra una voz con la referencia cultural especificada, se usará la voz de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="06ec7-333">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="06ec7-334">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, llame a <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-334">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</span></span>  
  
 <span data-ttu-id="06ec7-335">Pronunciar correctamente las palabras en el idioma especificado por el `culture` parámetro, un motor de síntesis (texto a voz o TTS) de voz que admita el idioma debe instalarse.</span><span class="sxs-lookup"><span data-stu-id="06ec7-335">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="06ec7-336">Un motor TTS instalado se denomina una voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-336">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="06ec7-337">Para obtener información sobre la que se instalan las voces una referencia cultural concreta, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-337">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-338">Microsoft Windows y la API System.Speech Aceptar todos los códigos de idioma de país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-338">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="06ec7-339">Los motores de TTS que se incluye con Windows 7 admiten los siguientes códigos de idioma de país:</span><span class="sxs-lookup"><span data-stu-id="06ec7-339">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="06ec7-340">en-US.</span><span class="sxs-lookup"><span data-stu-id="06ec7-340">en-US.</span></span> <span data-ttu-id="06ec7-341">Inglés (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="06ec7-341">English (United States)</span></span>  
  
-   <span data-ttu-id="06ec7-342">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="06ec7-342">zh-CN.</span></span> <span data-ttu-id="06ec7-343">Chino (China)</span><span class="sxs-lookup"><span data-stu-id="06ec7-343">Chinese (China)</span></span>  
  
-   <span data-ttu-id="06ec7-344">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="06ec7-344">zh-TW.</span></span> <span data-ttu-id="06ec7-345">Chino (Taiwán)</span><span class="sxs-lookup"><span data-stu-id="06ec7-345">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="06ec7-346">También se permiten códigos de idioma de dos letras como "es-es".</span><span class="sxs-lookup"><span data-stu-id="06ec7-346">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartStyle (style As PromptStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartStyle(System::Speech::Synthesis::PromptStyle ^ style);" />
      <MemberSignature Language="F#" Value="member this.StartStyle : System.Speech.Synthesis.PromptStyle -&gt; unit" Usage="promptBuilder.StartStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style"><span data-ttu-id="06ec7-347">El estilo que se va a iniciar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-347">The style to start.</span></span></param>
        <summary><span data-ttu-id="06ec7-348">Especifica el inicio de un estilo en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-348">Specifies the start of a style in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-349">El <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> método toma un <xref:System.Speech.Synthesis.PromptStyle> objeto como su argumento.</span><span class="sxs-lookup"><span data-stu-id="06ec7-349">The <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method takes a <xref:System.Speech.Synthesis.PromptStyle> object as its argument.</span></span> <span data-ttu-id="06ec7-350">Puede usar las propiedades de la <xref:System.Speech.Synthesis.PromptStyle> objeto para establecer el énfasis, velocidad de habla y volumen (intensidad) para aplicar a voz mientras el estilo está en vigor de salida.</span><span class="sxs-lookup"><span data-stu-id="06ec7-350">You can use the properties of the <xref:System.Speech.Synthesis.PromptStyle> object to set the emphasis, speaking rate, and volume (loudness) to apply to speech output while the style is in effect.</span></span> <span data-ttu-id="06ec7-351">Para dejar de usar el estilo actual, llame a la <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-351">To stop using the current style, call the <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method.</span></span>  
  
> [!NOTE]
> -   <span data-ttu-id="06ec7-352">Los motores de síntesis de voz de Windows no admiten el parámetro énfasis en este momento.</span><span class="sxs-lookup"><span data-stu-id="06ec7-352">The speech synthesis engines in Windows do not support the emphasis parameter at this time.</span></span> <span data-ttu-id="06ec7-353">Establecimiento de valores para el parámetro de énfasis, se producirá ningún cambio en la salida de voz sintetizada audible.</span><span class="sxs-lookup"><span data-stu-id="06ec7-353">Setting values for the emphasis parameter will produce no audible change in the synthesized speech output.</span></span>  
> -   <span data-ttu-id="06ec7-354">El <xref:System.Speech.Synthesis.PromptVolume.Default> para <xref:System.Speech.Synthesis.PromptVolume> indica el volumen completo, que es el mismo como <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-354">The <xref:System.Speech.Synthesis.PromptVolume.Default> setting for <xref:System.Speech.Synthesis.PromptVolume> is full volume, which is the same as <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>.</span></span> <span data-ttu-id="06ec7-355">Los demás valores disminuir el volumen de salida de voz con respecto al total del volumen.</span><span class="sxs-lookup"><span data-stu-id="06ec7-355">The other settings decrease the volume of speech output relative to full volume.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-356">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> de objetos y anexa cadenas de texto.</span><span class="sxs-lookup"><span data-stu-id="06ec7-356">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings.</span></span> <span data-ttu-id="06ec7-357">El ejemplo se usa el <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> método para especificar una lenta en términos de tasa para la cadena que se agrega, que enumera el contenido de un pedido.</span><span class="sxs-lookup"><span data-stu-id="06ec7-357">The example uses the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.</span></span>  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06ec7-358">Indica al sintetizador que cambie la voz en un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-358">Instructs the synthesizer to change the voice in a <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-359">Una voz representa un motor TTS instalado.</span><span class="sxs-lookup"><span data-stu-id="06ec7-359">A voice represents an installed TTS engine.</span></span> <span data-ttu-id="06ec7-360">Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres y atributos de voces de texto a voz (TTS) que se pueden seleccionar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-360">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="06ec7-361">Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-361">When an application calls <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, the method verifies that each of the voices it finds in the registry meets certain minimum criteria.</span></span> <span data-ttu-id="06ec7-362">Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-362">For any voice that fails verification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> sets its <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property to `False`.</span></span> <span data-ttu-id="06ec7-363">Una aplicación no puede llamar a cualquiera de los <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> métodos en una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-363">An application cannot call any of the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> methods on a voice whose <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property is `False`.</span></span> <span data-ttu-id="06ec7-364">Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="06ec7-364">Typically, applications will not set a voice's <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Globalization.CultureInfo -&gt; unit" Usage="promptBuilder.StartVoice culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="06ec7-365">Proporciona información sobre una referencia cultural concreta, como el idioma, el nombre de la referencia cultural, el sistema de escritura, el calendario usado, y cómo aplicar formato a las fechas y ordenar las cadenas.</span><span class="sxs-lookup"><span data-stu-id="06ec7-365">Provides information about a specific culture, such as the language, the name of the culture, the writing system, the calendar used, and how to format dates and sort strings.</span></span></param>
        <summary><span data-ttu-id="06ec7-366">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica la referencia cultural de la voz que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-366">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the culture of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-367">El `culture` parámetro <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> puede ser diferente de la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad de la <xref:System.Speech.Synthesis.PromptBuilder> objeto que lo contiene.</span><span class="sxs-lookup"><span data-stu-id="06ec7-367">The `culture` parameter for <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> can be different than the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property of the <xref:System.Speech.Synthesis.PromptBuilder> object that contains it.</span></span>  <span data-ttu-id="06ec7-368">De hecho, mientras que el valor de la `culture` parámetro reemplazará la <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="06ec7-368">While in effect, the value of the `culture` parameter will override the <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> property.</span></span> <span data-ttu-id="06ec7-369">El <xref:System.Speech.Synthesis.SpeechSynthesizer> intenta seleccionar una voz instalada que admite el idioma especificado por el `culture` parámetro hablar el contenido incluido en <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> y <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-369">The <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter to speak the content enclosed by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> and <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span> <span data-ttu-id="06ec7-370">Si se encuentra una voz con la referencia cultural especificada, se usará.</span><span class="sxs-lookup"><span data-stu-id="06ec7-370">If a voice with the specified culture is found, it will be used.</span></span> <span data-ttu-id="06ec7-371">Si no se encuentra una voz con la referencia cultural especificada, se usará la voz de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="06ec7-371">If a voice with the specified culture cannot be found, the default voice will be used.</span></span> <span data-ttu-id="06ec7-372">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, llame a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-372">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 <span data-ttu-id="06ec7-373">Pronunciar correctamente las palabras en el idioma especificado por el `culture` parámetro, un motor de síntesis (texto a voz o TTS) de voz que admita el idioma debe instalarse.</span><span class="sxs-lookup"><span data-stu-id="06ec7-373">To correctly pronounce words in the language specified by the `culture` parameter, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed.</span></span> <span data-ttu-id="06ec7-374">Un motor TTS instalado se denomina una voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-374">An installed TTS engine is called a voice.</span></span> <span data-ttu-id="06ec7-375">Para obtener información sobre la que se instalan las voces una referencia cultural concreta, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método.</span><span class="sxs-lookup"><span data-stu-id="06ec7-375">To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.</span></span>  
  
 <span data-ttu-id="06ec7-376">Microsoft Windows y la API System.Speech Aceptar todos los códigos de idioma de país válidos como valores para `culture`.</span><span class="sxs-lookup"><span data-stu-id="06ec7-376">Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`.</span></span> <span data-ttu-id="06ec7-377">Los motores de TTS que se incluye con Windows 7 admiten los siguientes códigos de idioma de país:</span><span class="sxs-lookup"><span data-stu-id="06ec7-377">The TTS engines that shipped with Windows 7 support the following language-country codes:</span></span>  
  
-   <span data-ttu-id="06ec7-378">en-US.</span><span class="sxs-lookup"><span data-stu-id="06ec7-378">en-US.</span></span> <span data-ttu-id="06ec7-379">Inglés (Estados Unidos)</span><span class="sxs-lookup"><span data-stu-id="06ec7-379">English (United States)</span></span>  
  
-   <span data-ttu-id="06ec7-380">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="06ec7-380">zh-CN.</span></span> <span data-ttu-id="06ec7-381">Chino (China)</span><span class="sxs-lookup"><span data-stu-id="06ec7-381">Chinese (China)</span></span>  
  
-   <span data-ttu-id="06ec7-382">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="06ec7-382">zh-TW.</span></span> <span data-ttu-id="06ec7-383">Chino (Taiwán)</span><span class="sxs-lookup"><span data-stu-id="06ec7-383">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="06ec7-384">También se permiten códigos de idioma de dos letras como "es-es".</span><span class="sxs-lookup"><span data-stu-id="06ec7-384">Two-letter language codes such as "en" are also permitted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="promptBuilder.StartVoice gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="06ec7-385">Sexo de la voz para usar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-385">The gender of the voice to use.</span></span></param>
        <summary><span data-ttu-id="06ec7-386">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el género de la voz que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-386">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-387">Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres y atributos de voces de texto a voz (TTS) que se pueden seleccionar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-387">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="06ec7-388">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> llamar a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-388">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (voice As VoiceInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceInfo ^ voice);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceInfo -&gt; unit" Usage="promptBuilder.StartVoice voice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice"><span data-ttu-id="06ec7-389">Los criterios que debe usar la voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-389">The criteria for the voice to use.</span></span></param>
        <summary><span data-ttu-id="06ec7-390">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica los criterios para la nueva voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-390">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies criteria for the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-391">Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres y atributos de voces de texto a voz (TTS) que se pueden seleccionar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-391">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="06ec7-392">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> llamar a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-392">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : string -&gt; unit" Usage="promptBuilder.StartVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="06ec7-393">Nombre de la voz que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-393">The name of the voice to use.</span></span></param>
        <summary><span data-ttu-id="06ec7-394">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el nombre de la voz que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-394">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the name of the voice to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-395">Para obtener información sobre la que se instalan las voces, use uno de los <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="06ec7-395">To get information about which voices are installed, use one of the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods.</span></span>  
  
 <span data-ttu-id="06ec7-396">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> llamar a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-396">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="promptBuilder.StartVoice (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="06ec7-397">Sexo de la nueva voz para usar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-397">The gender of the new voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="06ec7-398">Edad de la voz para usar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-398">The age of the voice to use.</span></span></param>
        <summary><span data-ttu-id="06ec7-399">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica el género y la edad de la nueva voz.</span><span class="sxs-lookup"><span data-stu-id="06ec7-399">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies the gender and the age of the new voice.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-400">Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres y atributos de voces de texto a voz (TTS) que se pueden seleccionar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-400">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="06ec7-401">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> llamar a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-401">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartVoice (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartVoice(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.StartVoice : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="promptBuilder.StartVoice (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender"><span data-ttu-id="06ec7-402">Sexo de la voz para usar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-402">The gender of the voice to use.</span></span></param>
        <param name="age"><span data-ttu-id="06ec7-403">Edad de la voz para usar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-403">The age of the voice to use.</span></span></param>
        <param name="voiceAlternate"><span data-ttu-id="06ec7-404">Un entero que especifica una voz preferida cuando más de una voz coincide con los parámetros <paramref name="gender" /> y <paramref name="age" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-404">An integer that specifies a preferred voice when more than one voice matches the <paramref name="gender" /> and <paramref name="age" /> parameters.</span></span></param>
        <summary><span data-ttu-id="06ec7-405">Indica al sintetizador que cambie la voz en el objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> y especifica su género, su edad y una voz preferida que coincida con el género y la edad especificados.</span><span class="sxs-lookup"><span data-stu-id="06ec7-405">Instructs the synthesizer to change the voice in the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object and specifies its gender, age, and a preferred voice that matches the specified gender and age.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-406">Un motor de síntesis de voz cuenta las coincidencias que encuentra para los parámetros especificados y devuelve la voz cuando el recuento es igual a la `voiceAlternate` parámetro.</span><span class="sxs-lookup"><span data-stu-id="06ec7-406">A speech synthesis engine counts the matches it finds for the specified parameters, and returns the voice when the count equals the `voiceAlternate` parameter.</span></span>  
  
 <span data-ttu-id="06ec7-407">Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> métodos y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres y atributos de voces de texto a voz (TTS) que se pueden seleccionar.</span><span class="sxs-lookup"><span data-stu-id="06ec7-407">Use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> methods and <xref:System.Speech.Synthesis.VoiceInfo> class to obtain the names and attributes of installed text-to-speech (TTS) voices that you can select.</span></span>  
  
 <span data-ttu-id="06ec7-408">Dejar de usar la voz especificada por <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> llamar a <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span><span class="sxs-lookup"><span data-stu-id="06ec7-408">To stop using the voice specified by <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> call <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXml();" />
      <MemberSignature Language="F#" Value="member this.ToXml : unit -&gt; string" Usage="promptBuilder.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06ec7-409">Devuelve el SSML generado a partir del objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</span><span class="sxs-lookup"><span data-stu-id="06ec7-409">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object.</span></span></summary>
        <returns><span data-ttu-id="06ec7-410">Devuelve el SSML generado a partir del objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" /> como una sola línea.</span><span class="sxs-lookup"><span data-stu-id="06ec7-410">Returns the SSML generated from the <see cref="T:System.Speech.Synthesis.PromptBuilder" /> object as a single line.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06ec7-411">El <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> método no realiza ningún intento para dar formato el SSML devuelto de ninguna manera.</span><span class="sxs-lookup"><span data-stu-id="06ec7-411">The <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> method makes no attempt to format the returned SSML in any way.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06ec7-412">En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> objeto, anexa el texto y, a continuación, escribe el equivalente SSML el símbolo del sistema en la consola antes de hablar el contenido del mensaje.</span><span class="sxs-lookup"><span data-stu-id="06ec7-412">The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>