<Type Name="InstanceStore" FullName="System.Runtime.DurableInstancing.InstanceStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e1c307c5d88796df0bd407c00fa925981bc8079" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53292333" /></Metadata><TypeSignature Language="C#" Value="public abstract class InstanceStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InstanceStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstanceStore" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InstanceStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstanceStore abstract" />
  <TypeSignature Language="F#" Value="type InstanceStore = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4972c-101">Representa un almacén de instancias.</span><span class="sxs-lookup"><span data-stu-id="4972c-101">Represents an instance store.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-102">Un proveedor de persistencia proporciona el acceso a un almacén de instancias mediante una implementación concreta de la clase <xref:System.Runtime.DurableInstancing.InstanceStore>.</span><span class="sxs-lookup"><span data-stu-id="4972c-102">A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class.</span></span>  
  
 <span data-ttu-id="4972c-103">Los proveedores de persistencia pueden llamar a InstanceHandle.Free en los controladores pasados a TryCommand, incluso después de que el comando haya terminado de ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="4972c-103">Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing.</span></span> <span data-ttu-id="4972c-104">Pero los proveedores de persistencia no deben contener referencias fuertes a los objetos InstanceHandle o InstanceOwner, ya que esto podría impedir que InstanceStore recogiera los elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="4972c-104">But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="4972c-105">No se puede cambiar las definiciones de flujo de trabajo para flujos de trabajo conservados.</span><span class="sxs-lookup"><span data-stu-id="4972c-105">Workflow definitions for persisted workflows cannot be changed.</span></span> <span data-ttu-id="4972c-106">Si se cambia una definición de flujo de trabajo después de que se conserva, el tiempo de ejecución de flujo de trabajo se bloqueará cuando se vuelve a cargar el flujo de trabajo.</span><span class="sxs-lookup"><span data-stu-id="4972c-106">If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InstanceStore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InstanceStore();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4972c-107">Inicializa una instancia de la clase <see cref="T:System.Runtime.DurableInstancing.InstanceStore" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-107">Initializes an instance of the <see cref="T:System.Runtime.DurableInstancing.InstanceStore" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecute">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecute(class System.Runtime.DurableInstancing.InstanceHandle handle, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecute (handle As InstanceHandle, command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecute(System::Runtime::DurableInstancing::InstanceHandle ^ handle, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginExecute : System.Runtime.DurableInstancing.InstanceHandle * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginExecute (handle, command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="4972c-108">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-108">An instance handle.</span></span></param>
        <param name="command"><span data-ttu-id="4972c-109">Comando que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="4972c-109">The command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-110">Valor de tiempo de espera para la ejecución del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-110">The timeout value for the command execution.</span></span></param>
        <param name="callback"><span data-ttu-id="4972c-111">Delegado de devolución de llamada asincrónica que recibe notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-111">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="4972c-112">Información de estado.</span><span class="sxs-lookup"><span data-stu-id="4972c-112">The state information.</span></span></param>
        <summary><span data-ttu-id="4972c-113">Ejecuta de forma asincrónica comandos de persistencia como <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> y <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-113">Asynchronously executes persistence commands such as <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span></span></summary>
        <returns><span data-ttu-id="4972c-114">Estado de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-114">The state of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-115">Un host llama al método <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> para ejecutar un comando de persistencia en un identificador de instancia de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-115">A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously.</span></span> <span data-ttu-id="4972c-116">El host obtiene el identificador de instancia invocando el método <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="4972c-116">The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method.</span></span> <span data-ttu-id="4972c-117">El identificador de instancia puede estar enlazado a entidades que representan el contexto y asunto del comando, como una instancia, un propietario de instancia o un bloqueo de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-117">The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</span></span>  <span data-ttu-id="4972c-118">Los comandos solo se pueden enviar uno a uno al identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-118">Only one command may be issued against an instance handle at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual IAsyncResult BeginTryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.IAsyncResult BeginTryCommand(class System.Runtime.DurableInstancing.InstancePersistenceContext context, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function BeginTryCommand (context As InstancePersistenceContext, command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual IAsyncResult ^ BeginTryCommand(System::Runtime::DurableInstancing::InstancePersistenceContext ^ context, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginTryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginTryCommand (context, command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.DurableInstancing.InstancePersistenceContext" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4972c-119">Contexto de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-119">The instance context.</span></span></param>
        <param name="command"><span data-ttu-id="4972c-120">Comando de persistencia que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="4972c-120">The persistence command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-121">Valor de tiempo de espera para la ejecución del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-121">The timeout value for the command execution.</span></span></param>
        <param name="callback"><span data-ttu-id="4972c-122">Delegado de devolución de llamada asincrónica que recibe notificación de la finalización de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-122">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="4972c-123">Información de estado.</span><span class="sxs-lookup"><span data-stu-id="4972c-123">The state information.</span></span></param>
        <summary><span data-ttu-id="4972c-124">Un proveedor de persistencia implementa este método, que determina si se puede ejecutar un comando de persistencia determinado.</span><span class="sxs-lookup"><span data-stu-id="4972c-124">A persistence provider implements this method, which determines whether a particular persistence command can be executed.</span></span> <span data-ttu-id="4972c-125">Si se puede ejecutar el comando, se hace de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-125">If the command can be executed, executes the command asynchronously.</span></span></summary>
        <returns><span data-ttu-id="4972c-126">Estado de la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-126">The state of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-127">Si se puede ejecutar el comando, el proveedor de persistencia llama a los métodos pertinentes en InstancePersistenceContext para proporcionar los resultados del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-127">If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="4972c-128">Aunque este método se declara como `virtual` lugar `abstract`, no hay ninguna implementación.</span><span class="sxs-lookup"><span data-stu-id="4972c-128">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="4972c-129">Este método se debe invalidar para proporcionar funcionalidad.</span><span class="sxs-lookup"><span data-stu-id="4972c-129">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForEvents">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginWaitForEvents(class System.Runtime.DurableInstancing.InstanceHandle handle, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForEvents (handle As InstanceHandle, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForEvents(System::Runtime::DurableInstancing::InstanceHandle ^ handle, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginWaitForEvents : System.Runtime.DurableInstancing.InstanceHandle * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginWaitForEvents (handle, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="4972c-130">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-130">An instance handle.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-131">Período tras el cual se supera el tiempo de espera de la operación.</span><span class="sxs-lookup"><span data-stu-id="4972c-131">The period after which the operation times out.</span></span></param>
        <param name="callback"><span data-ttu-id="4972c-132">Método al que se va a llamar cuando se haya completado la operación de lectura asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-132">The method to be called after the asynchronous operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="4972c-133">Objeto que contiene la información de estado asociada a la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-133">An object containing the state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="4972c-134">Comienza una operación asincrónica para escuchar cualquier evento generado por el almacén de instancias de un identificador de instancia concreto.</span><span class="sxs-lookup"><span data-stu-id="4972c-134">Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.</span></span></summary>
        <returns><span data-ttu-id="4972c-135">Devuelve un objeto <see cref="T:System.IAsyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-135">Returns an <see cref="T:System.IAsyncResult" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceHandle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4972c-136">Crea un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-136">Creates an instance handle.</span></span> <span data-ttu-id="4972c-137">Si se establece DefaultInstanceOwner, el valor se enlaza automáticamente como propietario de instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-137">If the DefaultInstanceOwner is set, the value is automatically bound as the new handle's instance owner.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle () As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle();" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : unit -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4972c-138">Crea un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-138">Creates an instance handle.</span></span></summary>
        <returns><span data-ttu-id="4972c-139">El identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-139">The instance handle.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (instanceId As Guid) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : Guid -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="4972c-140">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-140">An instance identifier.</span></span> <span data-ttu-id="4972c-141">No debe ser Guid.Empty.</span><span class="sxs-lookup"><span data-stu-id="4972c-141">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="4972c-142">Crea un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-142">Creates an instance handle.</span></span>  <span data-ttu-id="4972c-143">Si se establece DefaultInstanceOwner, el valor se enlaza automáticamente como propietario de instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-143">If the DefaultInstanceOwner is set, the value is automatically bound as the new handle's instance owner.</span></span>  <span data-ttu-id="4972c-144">El identificador de instancia pasado como parámetro se enlaza automáticamente como instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-144">The instance identifier passed as a parameter is automatically bound as the new handle's instance.</span></span></summary>
        <returns><span data-ttu-id="4972c-145">El identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-145">The instance handle.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (owner As InstanceOwner) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : System.Runtime.DurableInstancing.InstanceOwner -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="4972c-146">Propietario de una instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-146">The owner of an instance.</span></span></param>
        <summary><span data-ttu-id="4972c-147">Crea un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-147">Creates an instance handle.</span></span> <span data-ttu-id="4972c-148">Si el propietario de instancia pasado como parámetro no es null, el valor se enlaza automáticamente como propietario de instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-148">If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle's instance owner.</span></span>  <span data-ttu-id="4972c-149">(En caso contrario, no se enlaza ningún propietario de la instancia, aun cuando DefaultInstanceOwner esté establecido.)</span><span class="sxs-lookup"><span data-stu-id="4972c-149">(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)</span></span></summary>
        <returns><span data-ttu-id="4972c-150">El identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-150">The instance handle.</span></span> <span data-ttu-id="4972c-151">Un valor nulo indica que el nuevo identificador no se debería enlazar automáticamente a un propietario de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-151">A null value indicates that the new handle should not be automatically bound to an instance owner.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(class System.Runtime.DurableInstancing.InstanceOwner owner, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (owner As InstanceOwner, instanceId As Guid) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(System::Runtime::DurableInstancing::InstanceOwner ^ owner, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : System.Runtime.DurableInstancing.InstanceOwner * Guid -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle (owner, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="4972c-152">Objeto InstanceOwner que representa el propietario de una instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-152">An InstanceOwner object  that represents the owner of an instance.</span></span> <span data-ttu-id="4972c-153">Pase null como el valor para que este parámetro indique que el nuevo controlador no se debería enlazar automáticamente a un propietario de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-153">Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.</span></span></param>
        <param name="instanceId"><span data-ttu-id="4972c-154">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-154">An instance identifier.</span></span> <span data-ttu-id="4972c-155">No debe ser Guid.Empty.</span><span class="sxs-lookup"><span data-stu-id="4972c-155">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="4972c-156">Crea un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-156">Creates an instance handle.</span></span> <span data-ttu-id="4972c-157">Si el propietario de instancia pasado como parámetro no es null, el valor se enlaza automáticamente como propietario de instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-157">If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle's instance owner.</span></span>  <span data-ttu-id="4972c-158">(En caso contrario, no se enlaza ningún propietario de la instancia, aun cuando DefaultInstanceOwner esté establecido.) El identificador de instancia pasado como parámetro se enlaza automáticamente como instancia del nuevo manipulador.</span><span class="sxs-lookup"><span data-stu-id="4972c-158">(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle's instance.</span></span></summary>
        <returns><span data-ttu-id="4972c-159">El identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-159">The instance handle.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultInstanceOwner As InstanceOwner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceOwner ^ DefaultInstanceOwner { System::Runtime::DurableInstancing::InstanceOwner ^ get(); void set(System::Runtime::DurableInstancing::InstanceOwner ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultInstanceOwner : System.Runtime.DurableInstancing.InstanceOwner with get, set" Usage="System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceOwner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4972c-160">Obtiene o establece el propietario de la instancia predeterminada.</span><span class="sxs-lookup"><span data-stu-id="4972c-160">Gets or sets the default instance owner.</span></span></summary>
        <value><span data-ttu-id="4972c-161">El propietario de la instancia predeterminada.</span><span class="sxs-lookup"><span data-stu-id="4972c-161">The default instance owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-162">Algunos hosts averiguan el propietario de la instancia que se debe utilizar leyendo esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="4972c-162">Some hosts infer the instance owner to use by reading this property.</span></span> <span data-ttu-id="4972c-163">WorkflowApplication puede utilizar esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="4972c-163">WorkflowApplication can use this property.</span></span> <span data-ttu-id="4972c-164">WorkflowServiceHost no utiliza esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="4972c-164">WorkflowServiceHost does not use this property.</span></span>  
  
 <span data-ttu-id="4972c-165">La propiedad DefaultInstanceOwner se debe establecer en null cuando ya no es necesaria.</span><span class="sxs-lookup"><span data-stu-id="4972c-165">The DefaultInstanceOwner propery must be set to null when it is no longer necessary.</span></span> <span data-ttu-id="4972c-166">Si el valor de DefaultInstanceOwner no es null, los objetos InstanceStore no utilizados podrían no recogerse.</span><span class="sxs-lookup"><span data-stu-id="4972c-166">InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="4972c-167">Aunque este método se declara como `virtual` lugar `abstract`, no hay ninguna implementación.</span><span class="sxs-lookup"><span data-stu-id="4972c-167">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="4972c-168">Este método se debe invalidar para proporcionar funcionalidad.</span><span class="sxs-lookup"><span data-stu-id="4972c-168">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecute">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView EndExecute (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceView EndExecute(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecute (result As IAsyncResult) As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceView ^ EndExecute(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndExecute : IAsyncResult -&gt; System.Runtime.DurableInstancing.InstanceView" Usage="instanceStore.EndExecute result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4972c-169">Resultado de la operación.</span><span class="sxs-lookup"><span data-stu-id="4972c-169">The result of the operation.</span></span></param>
        <summary><span data-ttu-id="4972c-170">Finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-170">Ends the asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4972c-171">Objeto InstanceView que representa el estado conocido de la instancia después de la realización correcta del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-171">An InstanceView object  representing the known state of the instance after the successful completion of the command.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-172">Si se llamara a BeginExecute bajo una transacción, este estado puede incluir datos no confirmados.</span><span class="sxs-lookup"><span data-stu-id="4972c-172">If BeginExecute was called under a transaction, this state may include uncommitted data.</span></span> <span data-ttu-id="4972c-173">Una vez confirmada correctamente la transacción, los datos del objeto InstanceView pueden considerarse confirmados.</span><span class="sxs-lookup"><span data-stu-id="4972c-173">Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual bool EndTryCommand (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool EndTryCommand(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function EndTryCommand (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool EndTryCommand(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndTryCommand : IAsyncResult -&gt; bool&#xA;override this.EndTryCommand : IAsyncResult -&gt; bool" Usage="instanceStore.EndTryCommand result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4972c-174">Resultado de la operación.</span><span class="sxs-lookup"><span data-stu-id="4972c-174">The result of the operation.</span></span></param>
        <summary><span data-ttu-id="4972c-175">Finaliza una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-175">Ends an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4972c-176">Una implementación de proveedor de persistencia debe devolver false si no admite el comando pasado al método BeginTryCommand.</span><span class="sxs-lookup"><span data-stu-id="4972c-176">A persistence provider implementation should return false if it doesn't support the command passed to the BeginTryCommand method.</span></span> <span data-ttu-id="4972c-177">En caso contrario, debería devolver true o producir una excepción.</span><span class="sxs-lookup"><span data-stu-id="4972c-177">Otherwise it should return true or throw an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="4972c-178">Aunque este método se declara como `virtual` lugar `abstract`, no hay ninguna implementación.</span><span class="sxs-lookup"><span data-stu-id="4972c-178">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="4972c-179">Este método se debe invalidar para proporcionar funcionalidad.</span><span class="sxs-lookup"><span data-stu-id="4972c-179">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; EndWaitForEvents (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; EndWaitForEvents(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForEvents (result As IAsyncResult) As List(Of InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ EndWaitForEvents(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndWaitForEvents : IAsyncResult -&gt; System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;" Usage="instanceStore.EndWaitForEvents result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="4972c-180">Un objeto IAsyncResult que entregó al cliente el método Begin.</span><span class="sxs-lookup"><span data-stu-id="4972c-180">An IAsyncResult object that was handed over to the client by the Begin method.</span></span></param>
        <summary><span data-ttu-id="4972c-181">Finaliza la operación asincrónica iniciada por el método <see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-181">Ends the asynchronous operation initiated by the <see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></summary>
        <returns><span data-ttu-id="4972c-182">Devuelve una lista de objetos <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-182">Returns a list of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView Execute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceView Execute(class System.Runtime.DurableInstancing.InstanceHandle handle, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute (handle As InstanceHandle, command As InstancePersistenceCommand, timeout As TimeSpan) As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceView ^ Execute(System::Runtime::DurableInstancing::InstanceHandle ^ handle, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Runtime.DurableInstancing.InstanceHandle * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; System.Runtime.DurableInstancing.InstanceView" Usage="instanceStore.Execute (handle, command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="4972c-183">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-183">An instance handle.</span></span></param>
        <param name="command"><span data-ttu-id="4972c-184">Comando que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="4972c-184">The command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-185">Valor de tiempo de espera para la operación.</span><span class="sxs-lookup"><span data-stu-id="4972c-185">The timeout value for the operation.</span></span></param>
        <summary><span data-ttu-id="4972c-186">Ejecuta sincrónicamente un comando de persistencia.</span><span class="sxs-lookup"><span data-stu-id="4972c-186">Executes a persistence command synchronously.</span></span> <span data-ttu-id="4972c-187">Ejemplos de comandos de persistencia son: <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> y <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-187">Examples of persistence commands are: <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span></span></summary>
        <returns><span data-ttu-id="4972c-188">Un objeto InstanceView que representa el estado conocido de la instancia después de la realización correcta del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-188">An InstanceView object representing the known state of the instance after the successful completion of the command.</span></span>  <span data-ttu-id="4972c-189">Si se llamara a Execute bajo una transacción, este estado puede incluir datos no confirmados.</span><span class="sxs-lookup"><span data-stu-id="4972c-189">If Execute was called under a transaction, this state may include uncommitted data.</span></span> <span data-ttu-id="4972c-190">Una vez confirmada correctamente la transacción, los datos del objeto InstanceView pueden considerarse confirmados.</span><span class="sxs-lookup"><span data-stu-id="4972c-190">Once the transaction is committed successfully, the data in the InstanceView object can be considered committed</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-191">Un host llama al método <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> para ejecutar un comando de persistencia con un identificador de instancia, que el host obtiene invocando el método <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="4972c-191">A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method.</span></span> <span data-ttu-id="4972c-192">El identificador de instancia puede estar enlazado a entidades que representan el contexto y asunto del comando, como una instancia, un propietario de instancia o un bloqueo de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-192">The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</span></span>  <span data-ttu-id="4972c-193">Los comandos solo se pueden enviar uno a uno al identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-193">Only one command may be issued against an instance handle at a time.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="4972c-194">Si este método se ejecuta con un <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, creará un <xref:System.Runtime.DurableInstancing.InstanceOwner> y enlazarlo a la instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-194">If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance.</span></span> <span data-ttu-id="4972c-195">Esto significa que ningún otro proceso podrá tener acceso a ese flujo de trabajo; Si el proceso finaliza, el flujo de trabajo no puede recuperar ni se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="4972c-195">This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed.</span></span> <span data-ttu-id="4972c-196">Si este flujo de trabajo se ejecuta de nuevo, un <xref:System.Runtime.DurableInstancing.InstanceLockedException> se iniciará.</span><span class="sxs-lookup"><span data-stu-id="4972c-196">If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.</span></span>  
>   
>  <span data-ttu-id="4972c-197">Si <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> no es se usa el almacén de instancias creará un archivo temporal <xref:System.Runtime.DurableInstancing.InstanceOwner> que se eliminará al final del proceso.</span><span class="sxs-lookup"><span data-stu-id="4972c-197">If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process.</span></span> <span data-ttu-id="4972c-198">Sin embargo, si el proceso finaliza antes de punto de persistencia final del flujo de trabajo, esta excepción se producirá, a menos que el período de tiempo especificado en el **HostLockRenewalPeriod** parámetro ha expirado.</span><span class="sxs-lookup"><span data-stu-id="4972c-198">However, if the process ends before the workflow's final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="protected System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents (System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents(class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetEvents (owner As InstanceOwner) As InstancePersistenceEvent()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ GetEvents(System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.GetEvents : System.Runtime.DurableInstancing.InstanceOwner -&gt; System.Runtime.DurableInstancing.InstancePersistenceEvent[]" Usage="instanceStore.GetEvents owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstancePersistenceEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="4972c-199">Objeto <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> que representa el propietario de una instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-199">An <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> object representing the owner of an instance.</span></span></param>
        <summary><span data-ttu-id="4972c-200">Obtiene todos los eventos señalados enlazados a un objeto <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-200">Gets all the signaled events bound to an <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> object.</span></span></summary>
        <returns><span data-ttu-id="4972c-201">Devuelve una matriz de objetos <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-201">Returns an array of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstanceOwners">
      <MemberSignature Language="C#" Value="protected System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetInstanceOwners () As InstanceOwner()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Runtime::DurableInstancing::InstanceOwner ^&gt; ^ GetInstanceOwners();" />
      <MemberSignature Language="F#" Value="member this.GetInstanceOwners : unit -&gt; System.Runtime.DurableInstancing.InstanceOwner[]" Usage="instanceStore.GetInstanceOwners " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceOwner[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4972c-202">Obtiene cada objeto InstanceOwner que esté enlazado a un identificador de instancia válido o no ha sido recogido por el sistema de elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="4972c-202">Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.</span></span></summary>
        <returns><span data-ttu-id="4972c-203">Propietario de la instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-203">The owner of the instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-204">Devuelve una matriz de los objetos InstanceOwner.</span><span class="sxs-lookup"><span data-stu-id="4972c-204">Returns an array of InstanceOwner objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFreeInstanceHandle">
      <MemberSignature Language="C#" Value="protected virtual void OnFreeInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFreeInstanceHandle(class System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFreeInstanceHandle(System::Runtime::DurableInstancing::InstanceHandle ^ instanceHandle, System::Object ^ userContext);" />
      <MemberSignature Language="F#" Value="abstract member OnFreeInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle * obj -&gt; unit&#xA;override this.OnFreeInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle * obj -&gt; unit" Usage="instanceStore.OnFreeInstanceHandle (instanceHandle, userContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceHandle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="userContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceHandle"><span data-ttu-id="4972c-205">El identificador de instancia que se liberó.</span><span class="sxs-lookup"><span data-stu-id="4972c-205">The instance handle that was freed.</span></span></param>
        <param name="userContext"><span data-ttu-id="4972c-206">Información de contexto de usuario del proveedor de persistencia que se ha devuelto desde OnNewInstanceHandle, o bien null si no se ha reemplazado OnNewInstanceHandle.</span><span class="sxs-lookup"><span data-stu-id="4972c-206">The persistence provider's user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.</span></span></param>
        <summary><span data-ttu-id="4972c-207">Se invoca cuando se libera un identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-207">Invoked when an instance handle is freed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNewInstanceHandle">
      <MemberSignature Language="C#" Value="protected virtual object OnNewInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object OnNewInstanceHandle(class System.Runtime.DurableInstancing.InstanceHandle instanceHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ OnNewInstanceHandle(System::Runtime::DurableInstancing::InstanceHandle ^ instanceHandle);" />
      <MemberSignature Language="F#" Value="abstract member OnNewInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle -&gt; obj&#xA;override this.OnNewInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle -&gt; obj" Usage="instanceStore.OnNewInstanceHandle instanceHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceHandle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
      </Parameters>
      <Docs>
        <param name="instanceHandle"><span data-ttu-id="4972c-208">Identificador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-208">An instance handle.</span></span></param>
        <summary><span data-ttu-id="4972c-209">Se invoca cuando se crea un nuevo indicador de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-209">Invoked when a new instance handle is created.</span></span></summary>
        <returns><span data-ttu-id="4972c-210">Objeto.</span><span class="sxs-lookup"><span data-stu-id="4972c-210">An object.</span></span>  <span data-ttu-id="4972c-211">Este objeto de contexto de usuario estará disponible para el proveedor de persistencia cuando los comandos se ejecutan utilizando el identificador y cuando se libere el identificador.</span><span class="sxs-lookup"><span data-stu-id="4972c-211">This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetEvent">
      <MemberSignature Language="C#" Value="protected void ResetEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetEvent (persistenceEvent As InstancePersistenceEvent, owner As InstanceOwner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent, System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.ResetEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent * System.Runtime.DurableInstancing.InstanceOwner -&gt; unit" Usage="instanceStore.ResetEvent (persistenceEvent, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent"><span data-ttu-id="4972c-212">Evento de persistencia que fue señalado anteriormente y que se debe restablecer.</span><span class="sxs-lookup"><span data-stu-id="4972c-212">The persistence event that was signaled earlier and to be reset.</span></span></param>
        <param name="owner"><span data-ttu-id="4972c-213">Propietario de la instancia asociada con el evento de persistencia.</span><span class="sxs-lookup"><span data-stu-id="4972c-213">The instance owner associated with the persistence event.</span></span></param>
        <summary><span data-ttu-id="4972c-214">Restablece el evento señalado y quita el evento de la lista de eventos señalados mantenida por el propietario de la instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-214">Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEvent">
      <MemberSignature Language="C#" Value="protected void SignalEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SignalEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SignalEvent (persistenceEvent As InstancePersistenceEvent, owner As InstanceOwner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SignalEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent, System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.SignalEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent * System.Runtime.DurableInstancing.InstanceOwner -&gt; unit" Usage="instanceStore.SignalEvent (persistenceEvent, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent"><span data-ttu-id="4972c-215">Evento de persistencia que se debe señalar.</span><span class="sxs-lookup"><span data-stu-id="4972c-215">The persistence event to be signaled.</span></span></param>
        <param name="owner"><span data-ttu-id="4972c-216">Propietario de la instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-216">The instance owner.</span></span></param>
        <summary><span data-ttu-id="4972c-217">Un almacén de instancias invoca este método para señalar un evento.</span><span class="sxs-lookup"><span data-stu-id="4972c-217">An instance store invokes this method to signal an event.</span></span> <span data-ttu-id="4972c-218">Host del flujo de trabajo que se suscribe para este evento de persistencia, lo recibe y emprende una acción adecuada.</span><span class="sxs-lookup"><span data-stu-id="4972c-218">A workflow host that subscribes for this persistence event receives it and takes an appropriate action.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual bool TryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryCommand(class System.Runtime.DurableInstancing.InstancePersistenceContext context, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function TryCommand (context As InstancePersistenceContext, command As InstancePersistenceCommand, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool TryCommand(System::Runtime::DurableInstancing::InstancePersistenceContext ^ context, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member TryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; bool&#xA;override this.TryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; bool" Usage="instanceStore.TryCommand (context, command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.DurableInstancing.InstancePersistenceContext" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="4972c-219">Contexto de instancia.</span><span class="sxs-lookup"><span data-stu-id="4972c-219">The instance context.</span></span></param>
        <param name="command"><span data-ttu-id="4972c-220">Comando que se va a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="4972c-220">The command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-221">Valor de tiempo de espera para la operación.</span><span class="sxs-lookup"><span data-stu-id="4972c-221">Timeout value for the operation.</span></span></param>
        <summary><span data-ttu-id="4972c-222">Un proveedor de persistencia implementa este método, que determina si se puede ejecutar un comando de persistencia determinado y, si se puede ejecutar el comando, lo ejecuta de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4972c-222">A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.</span></span></summary>
        <returns><span data-ttu-id="4972c-223">Una implementación de proveedor de persistencia debe devolver <see langword="false" /> si no admite el comando pasado como parámetro; de lo contrario, debe devolver <see langword="true" /> o generar una excepción.</span><span class="sxs-lookup"><span data-stu-id="4972c-223">A persistence provider implementation should return <see langword="false" /> if it doesn't support the command passed as a parameter; otherwise it should return <see langword="true" /> or throw an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4972c-224">Si se puede ejecutar el comando, el proveedor de persistencia llama a los métodos pertinentes del <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> para proporcionar los resultados del comando.</span><span class="sxs-lookup"><span data-stu-id="4972c-224">If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; WaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; WaitForEvents(class System.Runtime.DurableInstancing.InstanceHandle handle, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEvents (handle As InstanceHandle, timeout As TimeSpan) As List(Of InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ WaitForEvents(System::Runtime::DurableInstancing::InstanceHandle ^ handle, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForEvents : System.Runtime.DurableInstancing.InstanceHandle * TimeSpan -&gt; System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;" Usage="instanceStore.WaitForEvents (handle, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="4972c-225">Identificador de instancia que está enlazado al evento.</span><span class="sxs-lookup"><span data-stu-id="4972c-225">The instance handle that is bound to the event.</span></span></param>
        <param name="timeout"><span data-ttu-id="4972c-226">Intervalo de tiempo transcurrido el cual se supera el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="4972c-226">The time span after which the waiting operation times out.</span></span></param>
        <summary><span data-ttu-id="4972c-227">Host de flujo de trabajo que normalmente invoca este método para esperar a que se señale un evento.</span><span class="sxs-lookup"><span data-stu-id="4972c-227">A workflow host typically invokes this method to wait for an event to be signaled.</span></span></summary>
        <returns><span data-ttu-id="4972c-228">Una lista de objetos <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span><span class="sxs-lookup"><span data-stu-id="4972c-228">A list of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>