<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48619336" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="382a4-101">Habilita iteraciones de bucles paralelos para interactuar con otras iteraciones.</span><span class="sxs-lookup"><span data-stu-id="382a4-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="382a4-102">La clase <see cref="T:System.Threading.Tasks.Parallel" /> proporciona una instancia de esta clase a cada bucle; no se pueden crear instancias en el código.</span><span class="sxs-lookup"><span data-stu-id="382a4-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-103">Tenga en cuenta que no se puede crear una instancia de una instancia de esta clase.</span><span class="sxs-lookup"><span data-stu-id="382a4-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="382a4-104">Se genera automáticamente el compilador como un argumento en una llamada a la <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> o <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="382a4-105">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="382a4-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="382a4-106">Construcciones como `for` y `foreach` (en C#) y `For` y `For Each` (en Visual Basic) ejecutar secuencialmente desde el índice más bajo al más alto o desde el primer objeto de un conjunto a la última.</span><span class="sxs-lookup"><span data-stu-id="382a4-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="382a4-107">En cambio, el <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> y <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> métodos no lo hacen.</span><span class="sxs-lookup"><span data-stu-id="382a4-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="382a4-108">Dado que las iteraciones individuales del bucle se ejecutan en paralelo, puede empezar y terminar en cualquier orden.</span><span class="sxs-lookup"><span data-stu-id="382a4-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="382a4-109">La <xref:System.Threading.Tasks.ParallelLoopState> clase permite que las iteraciones individuales de bucles paralelos para interactuar entre sí.</span><span class="sxs-lookup"><span data-stu-id="382a4-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="382a4-110">La <xref:System.Threading.Tasks.ParallelLoopState> clase le permite:</span><span class="sxs-lookup"><span data-stu-id="382a4-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="382a4-111">Salir de la iteración actual y evitar cualquier iteraciones adicionales inicien mediante una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="382a4-112">Esto no afecta a las iteraciones que ya han empezado a la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="382a4-113">Evitar que se ejecute mediante una llamada a las iteraciones con un índice mayor que el índice actual el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-114">Esto no afecta a las iteraciones que ya han empezado a la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="382a4-115">Determinar si se ha producido una excepción en cualquier iteración del bucle, recupere el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="382a4-116">Determinar si cualquier iteración del bucle ha llamado el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método recuperando el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="382a4-117">Puede utilizar esta propiedad para devolver de iteraciones del bucle que se inició antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método pero todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="382a4-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="382a4-118">Determinar si cualquier iteración del bucle ha llamado el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método o se ha producido una excepción al recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="382a4-119">Salida de una iteración de ejecución prolongada, cuyo índice es mayor que el índice de una iteración en la que se llamó a Break, recupere el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-120">El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-121">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-122">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="382a4-123">Como la salida muestra el ejemplo, no hay iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio del valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="382a4-124">Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-125">Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="382a4-126">Un <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia está pensada para usarse únicamente dentro del cuerpo del bucle a la que se ha proporcionado una instancia.</span><span class="sxs-lookup"><span data-stu-id="382a4-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="382a4-127">No es seguro utilizar una proporcionada <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia después del bucle asociado finaliza, ni es seguro entregarla explícitamente a otros subprocesos y tener esos subprocesos acceder a él en cualquier momento.</span><span class="sxs-lookup"><span data-stu-id="382a4-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="382a4-128">Otro <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instancia se proporcionará a cada subproceso implicado en un bucle.</span><span class="sxs-lookup"><span data-stu-id="382a4-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-129">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="382a4-130">Comunica que el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución de iteraciones después de la iteración actual en cuanto pueda el sistema.</span><span class="sxs-lookup"><span data-stu-id="382a4-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indica que no se deben ejecutar iteraciones después de la iteración actual.</span><span class="sxs-lookup"><span data-stu-id="382a4-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="382a4-132">Eficazmente cancela cualquier adicionales iteraciones del bucle.</span><span class="sxs-lookup"><span data-stu-id="382a4-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="382a4-133">Sin embargo, no impide que las iteraciones que ya han empezado a la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="382a4-134">Por ejemplo, si <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama desde la iteración número 100 de un bucle paralelo recorrer en iteración de 0 a 1000, todas las iteraciones menos de 100 deben seguir ejecutándose, pero las iteraciones de 101 a 1000 que aún no ha iniciado no son ejecutarse.</span><span class="sxs-lookup"><span data-stu-id="382a4-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="382a4-135">Para las iteraciones de ejecución prolongada que ya se estén ejecutando, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> establece la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad en índice de la iteración actual si el índice actual es menor que el valor actual de <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="382a4-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="382a4-136">Para detener las iteraciones cuyo índice es mayor que la iteración más baja de interrupción de la ejecución de la competencia, debe hacer lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="382a4-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="382a4-137">Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="382a4-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="382a4-138">Salir de la iteración si su índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="382a4-139">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="382a4-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="382a4-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se suele utilizar en algoritmos de búsqueda donde una ordenación está presente en el origen de datos.</span><span class="sxs-lookup"><span data-stu-id="382a4-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-141">El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-142">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-143">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="382a4-144">Como la salida muestra el ejemplo, no hay iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> inicio del valor de propiedad después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="382a4-145">Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método, las llamadas de cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-146">Si el valor de propiedad es `true`, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="382a4-147">El método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> se definió previamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="382a4-148">Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</span><span class="sxs-lookup"><span data-stu-id="382a4-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-149">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="382a4-150">Obtiene si alguna iteración del bucle causó una excepción que la iteración no controló.</span><span class="sxs-lookup"><span data-stu-id="382a4-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="382a4-151"><see langword="true" /> si se produjo una excepción no controlada; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-152">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="382a4-153">Obtiene si alguna iteración del bucle llamó al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="382a4-154"><see langword="true" /> si cualquier iteración detuvo el bucle llamando al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-155">Para las iteraciones de larga ejecución del bucle, puede recuperar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si las iteraciones del bucle que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="382a4-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="382a4-156">A continuación, puede usar el valor de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para determinar si deben devolver de inmediato o ejecutar con normalidad.</span><span class="sxs-lookup"><span data-stu-id="382a4-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-157">El ejemplo siguiente ejecuta hasta 10 000 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-158">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-159">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="382a4-160">Porque todavía es posible que se ejecuta cuando las iteraciones del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> llama el método, la expresión lambda llama el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="382a4-161">Si devuelve `true`, la iteración se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-162">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="382a4-163">Obtiene la iteración más baja del bucle desde el que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="382a4-164">Iteración más baja desde la que se llamó a <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="382a4-165">En el caso de un bucle <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, el valor está basado en un índice generado internamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-166">Es posible que varias iteraciones de un bucle paralelo para llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-167">Si es así, este valor es el índice más pequeño de una iteración en la que llama <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="382a4-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="382a4-168">Si llama ninguna iteración del bucle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, esta propiedad devuelve `null`.</span><span class="sxs-lookup"><span data-stu-id="382a4-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="382a4-169">Tenga en cuenta que el valor de propiedad se ve afectado por las llamadas a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="382a4-170">En iteraciones de ejecución prolongada en el que todas las iteraciones después de la iteración que llama a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> no es preciso ejecutar el método, el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad se usa para finalizar las iteraciones que comenzó su ejecución antes de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-171">Para detener las iteraciones cuyo índice es mayor que la iteración más baja de interrupción de la ejecución de la competencia, debe hacer lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="382a4-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="382a4-172">Compruebe si el <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad es `true`.</span><span class="sxs-lookup"><span data-stu-id="382a4-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="382a4-173">Salir de la iteración si su índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad.</span><span class="sxs-lookup"><span data-stu-id="382a4-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="382a4-174">En este ejemplo se ilustra.</span><span class="sxs-lookup"><span data-stu-id="382a4-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-175">El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-176">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-177">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="382a4-178">Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="382a4-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="382a4-179">Para evitar que estos se completen, llama cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-180">Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="382a4-181">Tenga en cuenta que, dado el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor está fuera del ámbito fuera del bucle paralelo, debe asignarla a una variable que está visible fuera del bucle si desea conservar su valor.</span><span class="sxs-lookup"><span data-stu-id="382a4-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-182">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="382a4-183">Obtiene si la iteración actual del bucle debe salir basándose en las solicitudes realizadas por esta u otras iteraciones.</span><span class="sxs-lookup"><span data-stu-id="382a4-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="382a4-184"><see langword="true" /> si la iteración actual debería terminar; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-185">El <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad está establecida en `true` en cualquiera de las condiciones siguientes:</span><span class="sxs-lookup"><span data-stu-id="382a4-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="382a4-186">Una iteración de las llamadas de bucle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> o <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="382a4-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="382a4-187">Una iteración del bucle produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="382a4-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="382a4-188">El bucle se ha cancelado.</span><span class="sxs-lookup"><span data-stu-id="382a4-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="382a4-189">Cuando esta propiedad es `true`, el <xref:System.Threading.Tasks.Parallel> clase proactivamente intenta impedir que las iteraciones adicionales del bucle iniciando la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="382a4-190">Sin embargo, puede haber casos donde es puede evitar que se inicien iteraciones adicionales.</span><span class="sxs-lookup"><span data-stu-id="382a4-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="382a4-191">También puede ser el caso de que una iteración de larga ejecución ya ha comenzado la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="382a4-192">En tales casos, pueden comprobar de forma explícita las iteraciones del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propiedad y dejará de ejecución si la propiedad devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="382a4-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-193">El ejemplo siguiente ejecuta hasta 100 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-194">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-195">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="382a4-196">Esto evita que las iteraciones cuyo índice es mayor que el <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valor de propiedad de inicio después de la llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método, pero no afecta a las iteraciones que ya han empezado a ejecutar.</span><span class="sxs-lookup"><span data-stu-id="382a4-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="382a4-197">Para evitar que estos se completen, llama cada iteración del <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="382a4-198">Si es así, la iteración comprueba el valor de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propiedad y, si es mayor que el valor de índice de la iteración actual, se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-199">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="382a4-200">Comunica que el bucle <see cref="T:System.Threading.Tasks.Parallel" /> debe cesar la ejecución en cuanto pueda el sistema.</span><span class="sxs-lookup"><span data-stu-id="382a4-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="382a4-201">Una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método indica que no se necesitan ejecutar las iteraciones del bucle que no haya iniciado todavía.</span><span class="sxs-lookup"><span data-stu-id="382a4-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="382a4-202">Eficazmente cancela cualquier adicionales iteraciones del bucle.</span><span class="sxs-lookup"><span data-stu-id="382a4-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="382a4-203">Sin embargo, no impide que las iteraciones que ya han empezado a la ejecución.</span><span class="sxs-lookup"><span data-stu-id="382a4-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="382a4-204">Una llamada a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método causas el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad para devolver `true` para cualquier iteración del bucle que todavía se está ejecutando.</span><span class="sxs-lookup"><span data-stu-id="382a4-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="382a4-205">Esto es especialmente útil para las iteraciones de ejecución prolongada, que pueden comprobar el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propiedad y salir pronto si su valor es `true`.</span><span class="sxs-lookup"><span data-stu-id="382a4-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="382a4-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> Normalmente se emplea en los algoritmos en función de búsqueda, donde una vez que es un resultado de iteraciones se encuentra, ninguna otras se deben ejecutar.</span><span class="sxs-lookup"><span data-stu-id="382a4-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="382a4-207">El ejemplo siguiente ejecuta hasta 10 000 iteraciones de un bucle en paralelo.</span><span class="sxs-lookup"><span data-stu-id="382a4-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="382a4-208">Cada iteración se pausa durante un intervalo aleatorio entre 1 y 1000 milisegundos.</span><span class="sxs-lookup"><span data-stu-id="382a4-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="382a4-209">Un valor generado aleatoriamente que se determina en qué iteración del bucle el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="382a4-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="382a4-210">Como se muestra el resultado del ejemplo, no las iteraciones se ejecutan después de llamar a la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="382a4-211">Dado que las iteraciones del bucle son aún más probables que se ejecuta cuando el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> se llama al método, las llamadas de cada iteración el <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> método para comprobar si se llama otra iteración el <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> método.</span><span class="sxs-lookup"><span data-stu-id="382a4-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="382a4-212">Si devuelve `true`, la iteración se devuelve inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="382a4-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="382a4-213">Se ha llamado anteriormente al método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span><span class="sxs-lookup"><span data-stu-id="382a4-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="382a4-214">Las iteraciones del mismo bucle no pueden utilizar <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> y <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> en combinación.</span><span class="sxs-lookup"><span data-stu-id="382a4-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="382a4-215">Paralelismo de datos (biblioteca TPL)</span><span class="sxs-lookup"><span data-stu-id="382a4-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>