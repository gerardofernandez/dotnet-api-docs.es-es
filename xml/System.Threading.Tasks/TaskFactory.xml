<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0840b5646b82fa6e7833718724b56dd16676c685" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52232245" /></Metadata><TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3b819-101">Proporciona compatibilidad para crear y programar objetos <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-101">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-102">.NET Framework proporciona dos factorías para crear y programar tareas:</span><span class="sxs-lookup"><span data-stu-id="3b819-102">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="3b819-103">El <xref:System.Threading.Tasks.TaskFactory> (clase), que crea <xref:System.Threading.Tasks.Task> y <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="3b819-103">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span> <span data-ttu-id="3b819-104">Puede llamar a las sobrecargas de este método para crear y ejecutar una tarea que requiere argumentos no predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-104">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="3b819-105">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], el <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método proporciona la manera más fácil de crear una tarea no tiene valor predeterminado de los valores de configuración y la inicia inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="3b819-105">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="3b819-106">El <xref:System.Threading.Tasks.TaskFactory%601> (clase), que crea <xref:System.Threading.Tasks.Task%601> objetos.</span><span class="sxs-lookup"><span data-stu-id="3b819-106">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="3b819-107">La <xref:System.Threading.Tasks.TaskFactory> clase le permite hacer lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="3b819-107">The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="3b819-108">Crear una tarea e inícielo inmediatamente mediante una llamada a la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-108">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="3b819-109">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], el <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método proporciona la manera más fácil de crear una tarea no tiene valor predeterminado de los valores de configuración y la inicia inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="3b819-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="3b819-110">Crear una tarea que se inicia cuando se ha completado cualquiera de las tareas en una matriz mediante una llamada a la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="3b819-111">Crear una tarea que se inicia cuando se hayan completado todas las tareas en una matriz mediante una llamada a la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="3b819-112">Estático <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> propiedad devuelve el valor predeterminado es <xref:System.Threading.Tasks.TaskFactory%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="3b819-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="3b819-113">También puede llamar a uno de los <xref:System.Threading.Tasks.TaskFactory> clase constructores para configurar el <xref:System.Threading.Tasks.Task> objetos que el <xref:System.Threading.Tasks.TaskFactory> crea la clase.</span><span class="sxs-lookup"><span data-stu-id="3b819-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates.</span></span> <span data-ttu-id="3b819-114">En el ejemplo siguiente se configura un nuevo <xref:System.Threading.Tasks.TaskFactory> objeto para crear tareas que tienen un token de cancelación indicado, opciones de creación de tareas, las opciones de continuación y un programador de tareas personalizado.</span><span class="sxs-lookup"><span data-stu-id="3b819-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]
 [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  
  
 <span data-ttu-id="3b819-115">En la mayoría de los casos, no es necesario crear una nueva instancia <xref:System.Threading.Tasks.TaskFactory> instancia.</span><span class="sxs-lookup"><span data-stu-id="3b819-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance.</span></span> <span data-ttu-id="3b819-116">En su lugar, puede usar el <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> propiedad, que devuelve un objeto de fábrica que utiliza valores predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-116">Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="3b819-117">A continuación, puede llamar a sus métodos para iniciar nuevas tareas o definir las continuaciones de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="3b819-118">Para obtener un ejemplo, vea el ejemplo.</span><span class="sxs-lookup"><span data-stu-id="3b819-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-119">En el ejemplo siguiente se usa estático <xref:System.Threading.Tasks.Task.Factory%2A> propiedad para realizar dos llamadas a la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-119">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3b819-120">El primero rellena una matriz con los nombres de archivos en el directorio Mis documentos del usuario, mientras que la segunda rellena una matriz con los nombres de los subdirectorios del directorio de Mis documentos del usuario.</span><span class="sxs-lookup"><span data-stu-id="3b819-120">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="3b819-121">A continuación, llama el <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> método, que muestra información sobre el número de archivos y directorios en las dos matrices después de las dos primeras tareas completan la ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3b819-122">Todos los miembros públicos y protegidos de <see cref="T:System.Threading.Tasks.TaskFactory" /> son seguros para subprocesos y se pueden usar simultáneamente desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="3b819-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-123">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-123">Task Parallel Library (TPL)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="3b819-124">Ejemplos de programación paralela con .NET Framework</span><span class="sxs-lookup"><span data-stu-id="3b819-124">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b819-125">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskFactory" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-125">Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskFactory" /> class.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-126">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-126">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3b819-127">Inicializa una instancia de <see cref="T:System.Threading.Tasks.TaskFactory" /> con la configuración predeterminada.</span><span class="sxs-lookup"><span data-stu-id="3b819-127">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-128">Este constructor crea un <xref:System.Threading.Tasks.TaskFactory> instancia con una configuración predeterminada.</span><span class="sxs-lookup"><span data-stu-id="3b819-128">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="3b819-129">El <xref:System.Threading.Tasks.TaskCreationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskCreationOptions.None>, el <xref:System.Threading.Tasks.TaskContinuationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskContinuationOptions.None>y el <xref:System.Threading.Tasks.TaskScheduler> propiedad se inicializa en el programador actual (vea <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="3b819-129">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-130">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-130">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="3b819-131"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a las tareas creadas por este <see cref="T:System.Threading.Tasks.TaskFactory" /> a menos que se especifique explícitamente otro CancellationToken mientras se llama a los métodos del generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-131">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <summary><span data-ttu-id="3b819-132">Inicializa una instancia de <see cref="T:System.Threading.Tasks.TaskFactory" /> con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-132">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-133">Este constructor crea un <xref:System.Threading.Tasks.TaskFactory> instancia con una configuración predeterminada.</span><span class="sxs-lookup"><span data-stu-id="3b819-133">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="3b819-134">El <xref:System.Threading.Tasks.TaskCreationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskCreationOptions.None>, el <xref:System.Threading.Tasks.TaskContinuationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskContinuationOptions.None>y el <xref:System.Threading.Tasks.TaskScheduler> propiedad se inicializa en el programador actual (vea <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="3b819-134">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-135">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md"><span data-ttu-id="3b819-136">Cancelación</span><span class="sxs-lookup"><span data-stu-id="3b819-136">Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="3b819-137">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> predeterminado que se va a usar para programar las tareas creadas con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-137">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory.</span></span> <span data-ttu-id="3b819-138">Un valor null indica que se debería emplear el objeto TaskScheduler actual.</span><span class="sxs-lookup"><span data-stu-id="3b819-138">A null value indicates that the current TaskScheduler should be used.</span></span></param>
        <summary><span data-ttu-id="3b819-139">Inicializa una instancia de <see cref="T:System.Threading.Tasks.TaskFactory" /> con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-139">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-140">Con este constructor, el <xref:System.Threading.Tasks.TaskCreationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskCreationOptions.None>, el <xref:System.Threading.Tasks.TaskContinuationOptions> propiedad se inicializa en <xref:System.Threading.Tasks.TaskContinuationOptions.None>y el <xref:System.Threading.Tasks.TaskScheduler> propiedad se inicializa en `scheduler`, a menos que sea null, en cuyo caso el propiedad se inicializa en el programador actual (vea <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="3b819-140">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-141">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-141">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-142">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-142">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="3b819-143">Objeto <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> predeterminado que se va a usar al crear tareas con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-143">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-144">Objeto <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> predeterminado que se va a usar al crear tareas de continuación con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-144">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <summary><span data-ttu-id="3b819-145">Inicializa una instancia de <see cref="T:System.Threading.Tasks.TaskFactory" /> con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-145">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-146">Con este constructor, el <xref:System.Threading.Tasks.TaskCreationOptions> propiedad se inicializa en `creationOptions`, el <xref:System.Threading.Tasks.TaskContinuationOptions> propiedad se inicializa en `continuationOptions`y el <xref:System.Threading.Tasks.TaskScheduler> propiedad se inicializa en el programador actual (vea <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="3b819-146">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-147">El argumento <paramref name="creationOptions" /> especifica un valor <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-147">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="3b819-148">Para más información, vea los comentarios sobre <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-148">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="3b819-149">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-149">-or-</span></span> 
<span data-ttu-id="3b819-150">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-150">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-151">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-151">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-152">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-152">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="3b819-153"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> predeterminado que se asignará a las tareas creadas por este <see cref="T:System.Threading.Tasks.TaskFactory" /> a menos que se especifique explícitamente otro CancellationToken mientras se llama a los métodos del generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-153">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-154">Objeto <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> predeterminado que se va a usar al crear tareas con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-154">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-155">Objeto <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> predeterminado que se va a usar al crear tareas de continuación con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-155">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-156">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> predeterminado que se va a usar para programar las tareas creadas con TaskFactory.</span><span class="sxs-lookup"><span data-stu-id="3b819-156">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory.</span></span> <span data-ttu-id="3b819-157">Un valor null indica que se debería emplear TaskScheduler.Current.</span><span class="sxs-lookup"><span data-stu-id="3b819-157">A null value indicates that TaskScheduler.Current should be used.</span></span></param>
        <summary><span data-ttu-id="3b819-158">Inicializa una instancia de <see cref="T:System.Threading.Tasks.TaskFactory" /> con la configuración especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-158">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-159">Con este constructor, el <xref:System.Threading.Tasks.TaskCreationOptions> propiedad se inicializa en `creationOptions`, el <xref:System.Threading.Tasks.TaskContinuationOptions> propiedad se inicializa en `continuationOptions`y el <xref:System.Threading.Tasks.TaskScheduler> propiedad se inicializa en `scheduler`, a menos que sea null, en cuyo caso el propiedad se inicializa en el programador actual (vea <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="3b819-159">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-160">El argumento <paramref name="creationOptions" /> especifica un valor <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-160">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span></span> <span data-ttu-id="3b819-161">Para más información, vea los comentarios sobre <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-161">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span></span>  
  
<span data-ttu-id="3b819-162">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-162">-or-</span></span> 
<span data-ttu-id="3b819-163">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-163">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-164">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-165">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-165">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b819-166">Obtiene el token de cancelación predeterminado para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-166">Gets the default cancellation token for this task factory.</span></span></summary>
        <value><span data-ttu-id="3b819-167">Token de cancelación de tareas predeterminado para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-167">The default task cancellation token for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-168">Esta propiedad devuelve el valor predeterminado <xref:System.Threading.CancellationToken> que se asignará a todas las tareas creadas por este generador, a menos que otro <xref:System.Threading.CancellationToken> valor se especifica explícitamente durante la llamada a los métodos de generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-168">This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-169">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-169">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-170">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-170">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-171">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-171">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b819-172">Obtiene las opciones predeterminadas de continuación de tareas para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-172">Gets the default task continuation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="3b819-173">Opciones predeterminadas de continuación de tareas para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-173">The default task continuation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-174">El valor de propiedad se utiliza para crear todas las tareas de continuación, a menos que se especifiquen explícitamente otras opciones durante las llamadas a métodos de este generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-174">The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-175">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-175">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-176">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-176">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b819-177">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-177">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="3b819-178">Ejemplos de programación paralela con .NET Framework</span><span class="sxs-lookup"><span data-stu-id="3b819-178">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-179">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-179">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-180">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-180">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="3b819-181">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-181">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-182">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-182">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-183">El <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método se ejecuta el `continuationAction` delegado cuando todas las tareas de la `tasks` haya completado la matriz, independientemente de su estado de finalización.</span><span class="sxs-lookup"><span data-stu-id="3b819-183">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
 <span data-ttu-id="3b819-184">Excepciones iniciadas por tareas en el `tasks` matriz no están disponibles para la tarea de continuación a través del control de excepciones estructurado.</span><span class="sxs-lookup"><span data-stu-id="3b819-184">Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling.</span></span> <span data-ttu-id="3b819-185">Puede determinar qué excepciones producidas examinando la <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> propiedad de cada tarea en el `tasks` matriz.</span><span class="sxs-lookup"><span data-stu-id="3b819-185">You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> property of each task in the `tasks` array.</span></span> <span data-ttu-id="3b819-186">Usar para controlar las excepciones producidas por tareas de control de excepciones estructurado el `tasks` de matriz, llame a la <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-186">To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-187">El ejemplo siguiente inicia tareas independientes que usan una expresión regular para contar el número de palabras en un conjunto de archivos de texto.</span><span class="sxs-lookup"><span data-stu-id="3b819-187">The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="3b819-188">El <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> método se utiliza para iniciar una tarea que muestra el recuento total de word cuando se hayan completado todas las tareas antecedentes.</span><span class="sxs-lookup"><span data-stu-id="3b819-188">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  
  
 <span data-ttu-id="3b819-189">La llamada a la tarea de continuación <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método no lo permite controlar las excepciones producidas por las tareas antecedentes, por lo que el ejemplo examina la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propiedad de cada tarea antecedente para determinar si la tarea se realizó correctamente.</span><span class="sxs-lookup"><span data-stu-id="3b819-189">The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property of each antecedent task to determine whether the task succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-190">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-190">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-191">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-191">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-192">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-192">-or-</span></span> 
<span data-ttu-id="3b819-193">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-193">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-194">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-194">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-195">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-195">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-196">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-196">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-197">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-197">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-198">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-198">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-199">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-199">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-200">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-200">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-201">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-201">The new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-202">El [\], acción (tarea\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D% 2CSystem.Threading.CancellationToken%29 > método se ejecuta el `continuationAction` delegado cuando todas las tareas de la `tasks` haya completado la matriz, independientemente de su estado de finalización.</span><span class="sxs-lookup"><span data-stu-id="3b819-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-203">El ejemplo siguiente crea un token de cancelación, que pasa a separar las tareas que utilizan una expresión regular para contar el número de palabras en un conjunto de archivos de texto.</span><span class="sxs-lookup"><span data-stu-id="3b819-203">The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="3b819-204">Si no se encuentra un archivo, se establece el token de cancelación.</span><span class="sxs-lookup"><span data-stu-id="3b819-204">The cancellation token is set if a file cannot be found.</span></span> <span data-ttu-id="3b819-205">El [\], acción (tarea\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A > método se utiliza para iniciar una tarea que muestra el recuento total de word cuando se hayan completado todas las tareas antecedentes.</span><span class="sxs-lookup"><span data-stu-id="3b819-205">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span> <span data-ttu-id="3b819-206">Si se establece el token de cancelación, lo que indica que se han cancelado una o varias tareas, controla el <xref:System.AggregateException> excepción y muestra un mensaje de error.</span><span class="sxs-lookup"><span data-stu-id="3b819-206">If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-207">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-207">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-208">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-208">-or-</span></span> 
<span data-ttu-id="3b819-209">El <see cref="T:System.Threading.CancellationTokenSource" /> que creó <paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-209">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-210">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-210">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-211">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-211">-or-</span></span> 
<span data-ttu-id="3b819-212">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-212">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-213">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-213">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-214">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-214">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-215">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-215">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-216">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-216">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-217">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-217">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-218">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-218">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-219">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-219">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="3b819-220">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-220">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-221">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-221">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-222">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-222">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-223">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-223">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-224">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-224">-or-</span></span> 
<span data-ttu-id="3b819-225">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-225">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-226">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-226">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-227">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-227">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-228">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-228">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-229">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-229">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-230">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-230">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-231">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-231">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-232">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-232">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-233">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-233">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-234">Objeto que se usa para programar la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-234">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-235">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-235">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-236">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-236">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-237">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-237">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-238">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-238">-or-</span></span> 
<span data-ttu-id="3b819-239">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-239">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-240">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-240">-or-</span></span> 
<span data-ttu-id="3b819-241">El argumento <paramref name="scheduler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-241">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-242">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-242">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-243">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-243">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-244">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-244">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-245">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-245">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-246">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-246">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-247">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-247">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="3b819-248">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-248">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-249">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-249">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-250">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-250">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-251">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-251">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-252">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-252">-or-</span></span> 
<span data-ttu-id="3b819-253">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-253">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-254">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-254">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-255">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-255">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-256">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-256">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-257">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-257">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-258">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-258">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-259">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-259">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-260">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-260">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-261">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-261">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-262">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-262">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-263">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-263">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-264">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-264">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-265">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-265">-or-</span></span> 
<span data-ttu-id="3b819-266">El <see cref="T:System.Threading.CancellationTokenSource" /> que creó <paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-267">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-267">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-268">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-268">-or-</span></span> 
<span data-ttu-id="3b819-269">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-269">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-270">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-270">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-271">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-271">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-272">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-272">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-273">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-273">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-274">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-274">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-275">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-275">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-276">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-276">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-277">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-277">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-278">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-278">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="3b819-279">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-279">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-280">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-280">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-281">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-281">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-282">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-282">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-283">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-283">-or-</span></span> 
<span data-ttu-id="3b819-284">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-285">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-285">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-286">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-286">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-287">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-287">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-288">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-288">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-289">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-289">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-290">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-290">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-291">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-291">The array of tasks from which to continue.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-292">Delegado de acción que se va a ejecutar cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-292">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-293">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-293">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-294">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-294">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-295">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-295">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-296">Objeto que se usa para programar la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-296">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-297">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-297">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-298">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-298">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-299">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-299">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-300">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-300">-or-</span></span> 
<span data-ttu-id="3b819-301">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-301">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-302">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-302">-or-</span></span> 
<span data-ttu-id="3b819-303">El argumento <paramref name="scheduler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-303">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-304">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-304">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-305">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-305">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-306">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-306">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-307">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-307">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-308">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-308">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-309">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-309">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-310">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-310">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="3b819-311">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-311">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-312">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-312">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-313">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-313">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-314">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-314">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-315">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-315">-or-</span></span> 
<span data-ttu-id="3b819-316">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-316">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-317">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-317">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-318">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-318">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-319">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-319">Chaining Tasks by Using Continuation Tasks</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-320">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-320">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-321">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-321">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-322">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-322">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-323">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-323">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-324">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-324">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-325">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-325">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-326">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-326">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-327">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-327">-or-</span></span> 
<span data-ttu-id="3b819-328">El <see cref="T:System.Threading.CancellationTokenSource" /> que creó <paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-328">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-329">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-329">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-330">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-330">-or-</span></span> 
<span data-ttu-id="3b819-331">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-331">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-332">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-332">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-333">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-333">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-334">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-334">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-335">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-335">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-336">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-336">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-337">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-337">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-338">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-338">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-339">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-339">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-340">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-340">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="3b819-341">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-341">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-342">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-342">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-343">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-343">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-344">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-344">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-345">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-345">-or-</span></span> 
<span data-ttu-id="3b819-346">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-346">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-347">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-347">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-348">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-348">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-349">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-349">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-350">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-350">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-351">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-351">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-352">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-352">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-353">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-353">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-354">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-354">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-355">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-355">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-356">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-356">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-357">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-357">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-358">Objeto que se usa para programar la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-358">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-359">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-359">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-360">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-360">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-361">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-361">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-362">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-362">-or-</span></span> 
<span data-ttu-id="3b819-363">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-363">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-364">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-364">-or-</span></span> 
<span data-ttu-id="3b819-365">El argumento <paramref name="scheduler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-365">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-366">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-366">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-367">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-367">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-368">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-368">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-369">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-369">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-370">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-370">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-371">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-371">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-372">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-372">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-373">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-373">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <summary><span data-ttu-id="3b819-374">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-374">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-375">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-375">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-376">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-376">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-377">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-377">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-378">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-378">-or-</span></span> 
<span data-ttu-id="3b819-379">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-379">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-380">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-380">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-381">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-382">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-383">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-384">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-384">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-385">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-385">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-386">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-386">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-387">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-387">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-388">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-388">The cancellation token to assign to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-389">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-389">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-390">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-390">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-391">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-391">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-392">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-392">-or-</span></span> 
<span data-ttu-id="3b819-393">El <see cref="T:System.Threading.CancellationTokenSource" /> que creó <paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-393">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-394">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-394">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-395">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-395">-or-</span></span> 
<span data-ttu-id="3b819-396">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-396">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-397">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-397">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-398">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-398">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-399">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-399">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-400">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-400">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-401">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-401">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-402">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-402">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-403">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-403">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-404">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-404">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-405">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-405">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-406">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-406">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <summary><span data-ttu-id="3b819-407">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-407">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-408">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-408">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-409">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-409">An element in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-410">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-410">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-411">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-411">-or-</span></span> 
<span data-ttu-id="3b819-412">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-412">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-413">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-413">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-414">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-414">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-415">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-415">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-416">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-416">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-417">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-417">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-418">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-418">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-419">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado a la tarea creada.</span><span class="sxs-lookup"><span data-stu-id="3b819-419">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-420">Matriz de tareas desde la que se va a continuar.</span><span class="sxs-lookup"><span data-stu-id="3b819-420">The array of tasks from which to continue.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-421">Delegado de función que se va a ejecutar asincrónicamente cuando se completen todas las tareas de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-421">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-422">Token de cancelación que se va a asignar a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-422">The cancellation token to assign to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-423">Combinación bit a bit de los valores de enumeración que controlan el comportamiento de la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-423">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span></span> <span data-ttu-id="3b819-424">No se admiten los miembros NotOn\* y OnlyOn\*.</span><span class="sxs-lookup"><span data-stu-id="3b819-424">The NotOn\* and OnlyOn\* members are not supported.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-425">Objeto que se usa para programar la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-425">The object that is used to schedule the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-426">Crea una tarea de continuación que comienza cuando un conjunto de tareas especificadas se ha completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-426">Creates a continuation task that starts when a set of specified tasks has completed.</span></span></summary>
        <returns><span data-ttu-id="3b819-427">Nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-427">The new continuation task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-428">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-428">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-429">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-429">-or-</span></span> 
<span data-ttu-id="3b819-430">El argumento <paramref name="continuationFunction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-430">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-431">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-431">-or-</span></span> 
<span data-ttu-id="3b819-432">El argumento <paramref name="scheduler" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-432">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-433">La matriz <paramref name="tasks" /> está vacía o contiene un valor null.</span><span class="sxs-lookup"><span data-stu-id="3b819-433">The <paramref name="tasks" /> array is empty or contains a null value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-434">El argumento <paramref name="continuationOptions" /> especifica un valor no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-434">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-435">Un elemento de la matriz <paramref name="tasks" /> se ha desechado.</span><span class="sxs-lookup"><span data-stu-id="3b819-435">An element in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-436">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-436">-or-</span></span> 
<span data-ttu-id="3b819-437">El <see cref="T:System.Threading.CancellationTokenSource" /> que creó <paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-437">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-438">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-438">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-439">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-439">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-440">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-440">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b819-441">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-441">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-442">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-442">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-443">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-443">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-444">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-444">Task Cancellation</span></span></related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="3b819-445">Ejemplos de programación paralela con .NET Framework</span><span class="sxs-lookup"><span data-stu-id="3b819-445">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-446">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-446">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-447">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-447">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="3b819-448">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-448">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-449">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-449">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3b819-450">El ejemplo siguiente muestra cómo usar `ContinueWhenAny` y `ContinueWhenAll`:</span><span class="sxs-lookup"><span data-stu-id="3b819-450">The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]
 [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-451">Uno de los elementos de la matriz <paramref name="tasks" /> se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-451">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-452">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-452">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-453">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-453">-or-</span></span> 
<span data-ttu-id="3b819-454">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-454">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-455">La matriz <paramref name="tasks" /> contiene un valor <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-455">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="3b819-456">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-456">-or-</span></span> 
<span data-ttu-id="3b819-457">La matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-457">The <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-458">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-458">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-459">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-459">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-460">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-460">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-461">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-461">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-462">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-462">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-463"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-463">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-464">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-464">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-465">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-465">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-466">Uno de los elementos de la matriz <paramref name="tasks" /> se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-466">One of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-467">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-467">-or-</span></span> 
 <span data-ttu-id="3b819-468"><paramref name="cancellationToken" /> ya se ha eliminado.</span><span class="sxs-lookup"><span data-stu-id="3b819-468"><paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-469">La matriz <paramref name="tasks" /> está <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-469">The <paramref name="tasks" /> array is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3b819-470">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-470">-or-</span></span> 
<span data-ttu-id="3b819-471">El argumento <paramref name="continuationAction" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-471">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-472">La matriz <paramref name="tasks" /> contiene un valor <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-472">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span></span>  
  
<span data-ttu-id="3b819-473">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-473">-or-</span></span> 
<span data-ttu-id="3b819-474">La matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-474">The <paramref name="tasks" /> array is empty .</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-475">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-475">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-476">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-476">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-477">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-477">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-478">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-478">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-479">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-479">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-480">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-480">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-481">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-481">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-482">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-482">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-483">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-483">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-484">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-484">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-485">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-485">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-486">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-486">-or-</span></span> 
<span data-ttu-id="3b819-487">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-487">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-488">La excepción que se produce cuando el argumento <paramref name="continuationOptions" /> especifica un valor TaskContinuationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-488">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-489">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-489">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-490">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-490">-or-</span></span> 
<span data-ttu-id="3b819-491">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-491">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-492">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-492">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-493">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-493">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-494">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-494">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="3b819-495">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-495">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-496">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-496">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-497"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-497">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-498">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-498">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-499">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-499">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-500">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-500">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-501">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-501">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-502">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-502">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-503">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-503">-or-</span></span> 
<span data-ttu-id="3b819-504">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-504">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-505">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-505">-or-</span></span> 
<span data-ttu-id="3b819-506">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-506">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-507">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-507">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-508">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-508">-or-</span></span> 
<span data-ttu-id="3b819-509">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-509">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-510">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-510">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-511">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-511">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-512">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-512">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-513">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-513">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-514">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-514">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-515">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-515">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="3b819-516">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-516">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-517">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-517">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-518">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-518">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-519">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-519">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-520">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-520">-or-</span></span> 
<span data-ttu-id="3b819-521">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-521">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-522">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-522">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-523">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-523">-or-</span></span> 
<span data-ttu-id="3b819-524">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-524">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-525">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-525">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-526">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-526">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-527">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-527">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-528">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-528">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-529">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-529">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-530">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-530">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-531"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-531">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-532">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-532">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-533">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-533">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-534">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-534">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-535">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-535">-or-</span></span> 
<span data-ttu-id="3b819-536">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-536">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-537">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-537">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-538">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-538">-or-</span></span> 
<span data-ttu-id="3b819-539">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-539">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-540">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-540">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-541">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-541">-or-</span></span> 
<span data-ttu-id="3b819-542">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-542">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-543">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-543">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-544">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-544">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-545">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-545">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-546">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-546">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-547">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-547">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-548">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-548">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-549">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-549">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-550">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-550">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-551">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-551">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-552">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-552">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-553">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-553">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-554">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-554">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-555">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-555">-or-</span></span> 
<span data-ttu-id="3b819-556">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-556">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-557">La excepción que se produce cuando el argumento <paramref name="continuationOptions" /> especifica un valor TaskContinuationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-557">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-558">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-558">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-559">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-559">-or-</span></span> 
<span data-ttu-id="3b819-560">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-560">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-561">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-561">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-562">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-562">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-563">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-563">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-564">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-564">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-565">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-565">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationAction"><span data-ttu-id="3b819-566">Delegado de acción que se va a ejecutar cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-566">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-567"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-567">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-568">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-568">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-569">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-569">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-570">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-570">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-571">Nuevo objeto <see cref="T:System.Threading.Tasks.Task" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-571">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-572">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-572">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-573">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-573">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-574">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-574">-or-</span></span> 
<span data-ttu-id="3b819-575">Excepción que se produce cuando el argumento <paramref name="continuationAction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-575">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-576">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-576">-or-</span></span> 
<span data-ttu-id="3b819-577">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-577">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-578">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-578">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-579">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-579">-or-</span></span> 
<span data-ttu-id="3b819-580">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-580">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-581">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-581">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-582">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-582">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-583">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-583">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-584">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-584">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-585">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-585">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-586">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-586">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="3b819-587">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-587">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-588">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-588">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-589">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-589">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-590">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-590">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-591">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-591">-or-</span></span> 
<span data-ttu-id="3b819-592">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-592">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-593">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-593">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-594">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-594">-or-</span></span> 
<span data-ttu-id="3b819-595">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-595">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-596">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-596">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-597">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-597">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-598">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-598">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-599">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-599">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-600">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-600">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-601">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-601">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-602"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-602">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-603">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-603">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-604">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-604">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-605">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-605">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-606">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-606">-or-</span></span> 
<span data-ttu-id="3b819-607">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-607">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-608">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-608">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-609">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-609">-or-</span></span> 
<span data-ttu-id="3b819-610">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-610">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-611">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-611">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-612">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-612">-or-</span></span> 
<span data-ttu-id="3b819-613">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-613">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-614">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-614">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-615">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-615">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-616">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-616">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-617">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-617">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-618">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-618">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-619">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-619">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-620">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-620">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-621">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-621">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-622">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-622">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-623">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-623">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-624">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-624">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-625">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-625">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-626">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-626">-or-</span></span> 
<span data-ttu-id="3b819-627">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-627">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-628">La excepción que se produce cuando el argumento <paramref name="continuationOptions" /> especifica un valor TaskContinuationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-628">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-629">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-629">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-630">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-630">-or-</span></span> 
<span data-ttu-id="3b819-631">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-631">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-632">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-632">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-633">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-633">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-634">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-634">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-635">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-635">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-636">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-636">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-637">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-637">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-638"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-638">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-639">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-639">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-640">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-640">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-641">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-641">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-642">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-642">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-643">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-643">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-644">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-644">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-645">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-645">-or-</span></span> 
<span data-ttu-id="3b819-646">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-646">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-647">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-647">-or-</span></span> 
<span data-ttu-id="3b819-648">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-648">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-649">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-649">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-650">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-650">-or-</span></span> 
<span data-ttu-id="3b819-651">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-651">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-652">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-652">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-653">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-653">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-654">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-654">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-655">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-655">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-656">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-656">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-657">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-657">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-658">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-658">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <summary><span data-ttu-id="3b819-659">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-659">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-660">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-660">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-661">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-661">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-662">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-662">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-663">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-663">-or-</span></span> 
<span data-ttu-id="3b819-664">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-664">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-665">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-665">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-666">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-666">-or-</span></span> 
<span data-ttu-id="3b819-667">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-667">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-668">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-668">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-669">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-669">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-670">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-670">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-671">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-671">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-672">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-672">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-673">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-673">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-674">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-674">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-675"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-675">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="3b819-676">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-676">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-677">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-677">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-678">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-678">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span>  
  
<span data-ttu-id="3b819-679">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-679">-or-</span></span> 
<span data-ttu-id="3b819-680">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-680">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-681">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-681">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-682">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-682">-or-</span></span> 
<span data-ttu-id="3b819-683">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-683">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-684">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-684">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-685">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-685">-or-</span></span> 
<span data-ttu-id="3b819-686">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-686">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-687">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-687">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-688">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-688">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-689">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-689">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-690">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-690">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-691">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-691">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-692">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-692">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-693">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-693">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-694">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-694">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-695">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-695">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-696">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-696">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-697">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-697">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-698">La excepción que se produce cuando se ha eliminado uno de los elementos de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-698">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-699">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-699">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-700">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-700">-or-</span></span> 
<span data-ttu-id="3b819-701">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-701">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-702">La excepción que se produce cuando el argumento <paramref name="continuationOptions" /> especifica un valor TaskContinuationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-702">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-703">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-703">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-704">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-704">-or-</span></span> 
<span data-ttu-id="3b819-705">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-705">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-706">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-706">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-707">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-707">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-708">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-708">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult"><span data-ttu-id="3b819-709">Tipo del resultado del parámetro <paramref name="tasks" /> precedente.</span><span class="sxs-lookup"><span data-stu-id="3b819-709">The type of the result of the antecedent <paramref name="tasks" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-710">Tipo del resultado devuelto por el delegado de <paramref name="continuationFunction" /> y asociado al objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-710">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="3b819-711">Matriz de tareas desde la que se va a continuar cuando se complete una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-711">The array of tasks from which to continue when one task completes.</span></span></param>
        <param name="continuationFunction"><span data-ttu-id="3b819-712">Delegado de función que se va a ejecutar asincrónicamente cuando se complete una tarea de la matriz <paramref name="tasks" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-712">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-713"><see cref="T:System.Threading.CancellationToken" /> que se asignará a la nueva tarea de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-713">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="3b819-714">Valor de <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-714">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-715">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-715">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-716">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación que se iniciará cuando se complete cualquier tarea del conjunto proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-716">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span></span></summary>
        <returns><span data-ttu-id="3b819-717">Nuevo objeto <see cref="T:System.Threading.Tasks.Task`1" /> de continuación.</span><span class="sxs-lookup"><span data-stu-id="3b819-717">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-718">El NotOn \* y OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, que restringir para que <xref:System.Threading.Tasks.TaskStatus> se ejecutará una continuación, los Estados son válidos con ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="3b819-718">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-719">La excepción que se produce cuando la matriz <paramref name="tasks" /> es NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-719">The exception that is thrown when the <paramref name="tasks" /> array is null.</span></span>  
  
<span data-ttu-id="3b819-720">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-720">-or-</span></span> 
<span data-ttu-id="3b819-721">Excepción que se produce cuando el argumento <paramref name="continuationFunction" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-721">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-722">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-722">-or-</span></span> 
<span data-ttu-id="3b819-723">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-723">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3b819-724">La excepción que se produce cuando la matriz <paramref name="tasks" /> contiene un valor NULL.</span><span class="sxs-lookup"><span data-stu-id="3b819-724">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span></span>  
  
<span data-ttu-id="3b819-725">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-725">-or-</span></span> 
<span data-ttu-id="3b819-726">La excepción que se produce cuando la matriz <paramref name="tasks" /> está vacía.</span><span class="sxs-lookup"><span data-stu-id="3b819-726">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-727">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-727">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-728">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-728">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-729">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-729">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b819-730">Obtiene las opciones predeterminadas de creación de tareas para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-730">Gets the default task creation options for this task factory.</span></span></summary>
        <value><span data-ttu-id="3b819-731">Opciones predeterminadas de creación de tareas para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-731">The default task creation options for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-732">El valor de propiedad se utiliza para crear todas las tareas, a menos que se especifiquen explícitamente otras opciones durante las llamadas a métodos de este generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-732">The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-733">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-733">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b819-734">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-734">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-735">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-735">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-736">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-736">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b819-737">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-737">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-738">Delegado de acción que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-738">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="3b819-739">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que ejecuta una acción del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-739">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-740">Objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-740">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-741">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-741">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-742">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-742">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-743">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-743">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-744">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-744">-or-</span></span> 
<span data-ttu-id="3b819-745">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-745">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-746">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-746">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-747">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-747">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="3b819-748">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-748">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-749">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-749">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-750">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-750">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-751">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-751">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-752">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-752">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-753">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-753">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span>  <span data-ttu-id="3b819-754">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-754">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-755">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-755">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-756">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-756">-or-</span></span> 
<span data-ttu-id="3b819-757">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-757">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-758">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-758">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-759">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-759">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b819-760">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-760">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-761">Delegado de acción que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-761">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-762">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-762">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-763">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que ejecuta una acción del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-763">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-764">Objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-764">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-765">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-765">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-766">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-766">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-767">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-767">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-768">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-768">-or-</span></span> 
<span data-ttu-id="3b819-769">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-769">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-770">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-770">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-771">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-771">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-772">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-772">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-773">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-773">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod"><span data-ttu-id="3b819-774">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-774">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-775">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-775">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-776">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-776">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-777">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-777">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-778">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-778">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-779">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-779">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-780">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-780">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-781">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-781">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="3b819-782">El <xref:System.Threading.Tasks.TaskCreationOptions> valores <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> y <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> son mutuamente excluyentes.</span><span class="sxs-lookup"><span data-stu-id="3b819-782">The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive.</span></span> <span data-ttu-id="3b819-783">En los métodos FromAsync, ya sea `LongRunning` o `AttachedToParent` por sí mismos provocará un <xref:System.ArgumentOutOfRangeException> que se produzca.</span><span class="sxs-lookup"><span data-stu-id="3b819-783">In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-784">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-784">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-785">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-785">-or-</span></span> 
<span data-ttu-id="3b819-786">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-786">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-787">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-787">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-788">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-788">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-789">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-789">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="3b819-790">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-790">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-791">Delegado de acción que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-791">The action delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-792">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-792">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-793">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar la tarea que ejecuta el método End.</span><span class="sxs-lookup"><span data-stu-id="3b819-793">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="3b819-794">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que ejecuta una acción del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-794">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-795">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-795">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-796">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-796">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-797">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-797">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-798">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-798">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-799">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-799">-or-</span></span> 
<span data-ttu-id="3b819-800">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-800">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-801">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-801">-or-</span></span> 
<span data-ttu-id="3b819-802">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-802">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-803">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-803">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-804">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-804">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-805">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-805">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-806">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-806">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-807">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-807">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-808">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-808">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-809">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-809">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-810">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-810">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-811">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-811">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-812">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-812">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-813">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-813">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-814">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-814">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-815">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-815">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-816">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-816">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-817">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-817">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-818">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-818">-or-</span></span> 
<span data-ttu-id="3b819-819">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-819">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-820">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-820">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-821">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-821">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-822">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-822">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-823">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-823">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-824">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-824">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-825">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-825">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-826">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-826">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-827">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-827">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-828">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-828">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-829">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-829">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-830">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-830">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-831">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-831">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-832">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-832">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-833">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-833">-or-</span></span> 
<span data-ttu-id="3b819-834">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-834">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-835">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-835">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-836">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-836">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-837">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-837">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-838">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-838">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-839">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-839">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-840">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-840">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="3b819-841">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-841">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-842">Delegado de función que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-842">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <summary><span data-ttu-id="3b819-843">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que ejecuta una función del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-843">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-844">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-844">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-845">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-845">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-846">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-846">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-847">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-847">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-848">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-848">-or-</span></span> 
<span data-ttu-id="3b819-849">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-849">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-850">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-850">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-851">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-851">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-852">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-852">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-853">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-853">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-854">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-854">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-855">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-855">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-856">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-856">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-857">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-857">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-858">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-858">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-859">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-859">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-860">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-860">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-861">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-861">-or-</span></span> 
<span data-ttu-id="3b819-862">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-862">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-863">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-863">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-864">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-864">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-865">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-865">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="3b819-866">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-866">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-867">Delegado de función que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-867">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-868">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-868">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-869">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que ejecuta una función del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-869">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-870">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-870">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-871">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-871">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-872">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-872">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-873">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-873">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-874">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-874">-or-</span></span> 
<span data-ttu-id="3b819-875">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-875">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-876">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-876">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-877">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-877">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-878">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-878">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-879">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-879">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-880">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-880">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-881">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-881">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-882">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-882">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-883">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-883">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-884">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-884">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-885">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-885">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-886">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-886">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-887">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-887">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-888">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-888">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-889">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-889">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-890">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-890">-or-</span></span> 
<span data-ttu-id="3b819-891">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-891">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-892">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-892">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-893">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-893">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-894">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-894">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-895">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-895">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-896">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-896">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-897">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-897">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="asyncResult"><span data-ttu-id="3b819-898">Interfaz IAsyncResult cuya finalización debe desencadenar el procesamiento de <paramref name="endMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-898">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-899">Delegado de función que procesa el objeto <paramref name="asyncResult" /> completado.</span><span class="sxs-lookup"><span data-stu-id="3b819-899">The function delegate that processes the completed <paramref name="asyncResult" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-900">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-900">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-901">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar la tarea que ejecuta el método End.</span><span class="sxs-lookup"><span data-stu-id="3b819-901">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span></span></param>
        <summary><span data-ttu-id="3b819-902">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que ejecuta una función del método End cuando se completa la interfaz <see cref="T:System.IAsyncResult" /> especificada.</span><span class="sxs-lookup"><span data-stu-id="3b819-902">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span></span></summary>
        <returns><span data-ttu-id="3b819-903">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-903">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="3b819-904">El <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> sobrecargas que toman un `asyncResult` parámetro no son tan eficaces como las sobrecargas que toman un `beginMethod` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-904">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="3b819-905">Si el rendimiento es un problema, use las sobrecargas que proporcionan el `beginMethod` / `endMethod` patrón.</span><span class="sxs-lookup"><span data-stu-id="3b819-905">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-906">Excepción que se produce cuando el argumento <paramref name="asyncResult" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-906">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-907">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-907">-or-</span></span> 
<span data-ttu-id="3b819-908">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-908">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-909">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-909">-or-</span></span> 
<span data-ttu-id="3b819-910">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-910">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-911">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-911">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-912">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-912">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-913">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-913">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-914">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-914">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-915">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-915">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-916">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-916">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-917">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-917">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-918">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-918">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-919">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-919">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-920">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-920">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-921">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-921">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-922">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-922">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-923">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-923">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-924">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-924">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-925">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-925">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-926">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-926">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-927">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-927">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-928">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-928">-or-</span></span> 
<span data-ttu-id="3b819-929">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-929">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-930">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-930">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-931">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-931">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-932">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-932">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-933">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-933">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-934">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-934">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-935">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-935">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-936">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-936">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-937">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-937">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-938">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-938">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-939">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-939">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-940">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-940">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-941">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-941">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-942">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-942">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-943">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-943">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-944">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-944">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-945">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-945">-or-</span></span> 
<span data-ttu-id="3b819-946">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-946">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-947">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-947">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-948">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-948">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-949">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-949">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-950">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-950">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-951">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-951">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-952">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-952">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-953">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-953">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-954">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-954">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-955">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-955">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-956">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-956">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-957">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-957">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-958">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-958">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-959">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-959">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-960">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-960">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-961">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-961">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-962">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-962">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-963">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-963">-or-</span></span> 
<span data-ttu-id="3b819-964">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-964">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-965">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-965">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-966">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-966">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-967">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-967">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-968">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-968">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-969">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-969">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-970">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-970">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-971">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-971">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-972">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-972">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-973">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-973">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-974">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-974">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-975">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-975">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-976">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-976">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-977">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-977">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-978">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-978">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-979">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-979">-or-</span></span> 
<span data-ttu-id="3b819-980">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-980">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-981">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-981">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-982">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-982">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-983">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-983">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-984">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-984">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-985">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-985">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-986">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-986">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-987">Tipo del tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-987">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="3b819-988">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-988">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-989">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-989">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-990">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-990">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-991">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-991">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-992">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-992">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="3b819-993">Tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-993">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-994">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-994">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-995">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-995">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-996">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-996">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-997">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-997">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-998">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-998">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-999">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-999">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1000">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1000">-or-</span></span> 
<span data-ttu-id="3b819-1001">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1001">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1002">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1002">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1003">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1003">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-1004">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1004">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-1005">Tipo del tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1005">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="3b819-1006">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1006">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-1007">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1007">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-1008">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1008">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-1009">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1009">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-1010">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1010">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="3b819-1011">Tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1011">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1012">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1012">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1013">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1013">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1014">Crea un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1014">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-1015">Objeto <see cref="T:System.Threading.Tasks.Task" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1015">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1016">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-1016">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-1017">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-1017">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1018">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1018">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1019">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1019">-or-</span></span> 
<span data-ttu-id="3b819-1020">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1020">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1021">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1021">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1022">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1022">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1023">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1023">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1024">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1024">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1025">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1025">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-1026">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1026">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-1027">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1027">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-1028">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1028">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-1029">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1029">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-1030">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1030">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-1031">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1031">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-1032">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1032">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1033">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1033">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-1034">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1034">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-1035">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1035">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1036">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-1036">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-1037">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-1037">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1038">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1038">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1039">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1039">-or-</span></span> 
<span data-ttu-id="3b819-1040">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1040">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1041">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1041">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1042">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1042">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-1043">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1043">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-1044">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1044">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-1045">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1045">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-1046">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1046">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-1047">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1047">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-1048">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1048">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-1049">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1049">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1050">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1050">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1051">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1051">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1052">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1052">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-1053">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1053">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1054">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-1054">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-1055">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-1055">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1056">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1056">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1057">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1057">-or-</span></span> 
<span data-ttu-id="3b819-1058">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1058">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1059">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1059">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1060">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1060">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1061">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1061">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1062">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1062">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1063">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1063">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-1064">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1064">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-1065">Tipo del tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1065">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="3b819-1066">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1066">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-1067">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1067">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-1068">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1068">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-1069">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1069">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-1070">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1070">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-1071">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1071">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="3b819-1072">Tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1072">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1073">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1073">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-1074">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1074">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-1075">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1075">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1076">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-1076">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-1077">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-1077">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1078">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1078">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1079">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1079">-or-</span></span> 
<span data-ttu-id="3b819-1080">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1080">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1081">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1081">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1082">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1082">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1"><span data-ttu-id="3b819-1083">Tipo del segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1083">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg2"><span data-ttu-id="3b819-1084">Tipo del tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1084">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TArg3"><span data-ttu-id="3b819-1085">Tipo del primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1085">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="3b819-1086">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1086">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="beginMethod"><span data-ttu-id="3b819-1087">Delegado que comienza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1087">The delegate that begins the asynchronous operation.</span></span></param>
        <param name="endMethod"><span data-ttu-id="3b819-1088">Delegado que finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1088">The delegate that ends the asynchronous operation.</span></span></param>
        <param name="arg1"><span data-ttu-id="3b819-1089">Primer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1089">The first argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg2"><span data-ttu-id="3b819-1090">Segundo argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1090">The second argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="arg3"><span data-ttu-id="3b819-1091">Tercer argumento que se pasa al delegado de <paramref name="beginMethod" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1091">The third argument passed to the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1092">Objeto que contiene los datos que el delegado de <paramref name="beginMethod" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1092">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1093">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1093">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1094">Crea un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa un par de métodos Begin y End que se ajustan al modelo de programación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1094">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span></span></summary>
        <returns><span data-ttu-id="3b819-1095">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado que representa la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1095">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1096">El `beginMethod` delegado se inicia en el subproceso que <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> se está ejecutando en.</span><span class="sxs-lookup"><span data-stu-id="3b819-1096">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="3b819-1097">Este método produce cualquier excepción producida por el `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="3b819-1097">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1098">Excepción que se produce cuando el argumento <paramref name="beginMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1098">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1099">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1099">-or-</span></span> 
<span data-ttu-id="3b819-1100">Excepción que se produce cuando el argumento <paramref name="endMethod" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1100">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1101">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1101">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1102">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1102">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1103">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1103">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1104">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1104">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="3b819-1105">Usar TPL con otros patrones asincrónicos</span><span class="sxs-lookup"><span data-stu-id="3b819-1105">Using TPL with Other Asynchronous Patterns</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3b819-1106">Obtiene el programador de tareas predeterminado para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-1106">Gets the default task scheduler for this task factory.</span></span></summary>
        <value><span data-ttu-id="3b819-1107">Programador de tareas predeterminado para este generador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-1107">The default task scheduler for this task factory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1108">El valor de propiedad se usa para programar todas las tareas, a menos que se especifique explícitamente otro programador durante las llamadas a métodos de este generador.</span><span class="sxs-lookup"><span data-stu-id="3b819-1108">The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="3b819-1109">Si este valor de propiedad es `null`, el valor de la <xref:System.Threading.Tasks.TaskScheduler.Current%2A> se utiliza la propiedad.</span><span class="sxs-lookup"><span data-stu-id="3b819-1109">If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1110">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1110">Task Parallel Library (TPL)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3b819-1111">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1111">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1112">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], el <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método es la manera recomendada para iniciar una tarea enlazada.</span><span class="sxs-lookup"><span data-stu-id="3b819-1112">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method is the recommended way to launch a compute-bound task.</span></span> <span data-ttu-id="3b819-1113">Use el <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método solo cuando se requieren un control específico para una tarea de ejecución prolongada, enlazadas.</span><span class="sxs-lookup"><span data-stu-id="3b819-1113">Use the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method only when you require fine-grained control for a long-running, compute-bound task.</span></span> <span data-ttu-id="3b819-1114">Esto incluye los escenarios en los que desea controlar lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="3b819-1114">This includes scenarios in which you want to control the following:</span></span>  
  
-   <span data-ttu-id="3b819-1115">Opciones de creación de la tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1115">Task creation options.</span></span> <span data-ttu-id="3b819-1116">Las tareas creadas por el <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método de forma predeterminada se crean con el <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> opción.</span><span class="sxs-lookup"><span data-stu-id="3b819-1116">Tasks created by the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method by default are created with the <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span></span> <span data-ttu-id="3b819-1117">Para invalidar este comportamiento, o proporcionar otros <xref:System.Threading.Tasks.TaskCreationOptions> opciones, llame a un <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> de sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="3b819-1117">To override this behavior, or to provide other <xref:System.Threading.Tasks.TaskCreationOptions> options, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span></span>  
  
-   <span data-ttu-id="3b819-1118">Paso de parámetros.</span><span class="sxs-lookup"><span data-stu-id="3b819-1118">Parameter passing.</span></span> <span data-ttu-id="3b819-1119">Las sobrecargas de los <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método no le permiten pasar un parámetro para el delegado de la tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1119">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method do not allow you to pass a parameter to the task delegate.</span></span> <span data-ttu-id="3b819-1120">Las sobrecargas de los <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> método hacer.</span><span class="sxs-lookup"><span data-stu-id="3b819-1120">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method do.</span></span>  
  
-   <span data-ttu-id="3b819-1121">Programador de tareas.</span><span class="sxs-lookup"><span data-stu-id="3b819-1121">The task scheduler.</span></span> <span data-ttu-id="3b819-1122">Las sobrecargas de los <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> método usar el programador de tareas de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="3b819-1122">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method use the default task scheduler.</span></span> <span data-ttu-id="3b819-1123">Para controlar el programador de tareas, llame a un <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> sobrecarga con un `scheduler` parámetro.</span><span class="sxs-lookup"><span data-stu-id="3b819-1123">To control the task scheduler, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload with a `scheduler` parameter.</span></span> <span data-ttu-id="3b819-1124">Para obtener más información, vea <xref:System.Threading.Tasks.TaskScheduler>.</span><span class="sxs-lookup"><span data-stu-id="3b819-1124">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="3b819-1125">Ejemplos de programación paralela con .NET Framework</span><span class="sxs-lookup"><span data-stu-id="3b819-1125">Samples for Parallel Programming with the .NET Framework</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1126">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1126">The action delegate to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="3b819-1127">Crea e inicia una tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1127">Creates and starts a task.</span></span></summary>
        <returns><span data-ttu-id="3b819-1128">La tarea iniciada.</span><span class="sxs-lookup"><span data-stu-id="3b819-1128">The started task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1129">Una llamada a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> es funcionalmente equivalente a la creación de una tarea mediante uno de sus constructores y, a continuación, llamar a la <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> método para programar la tarea para su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1129">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution.</span></span>  
  
 <span data-ttu-id="3b819-1130">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> método como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1130">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters.</span></span> <span data-ttu-id="3b819-1131">Sin embargo, tenga en cuenta que hay una diferencia de comportamiento entre los dos métodos relacionados con: <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> de forma predeterminada no permite secundarios tareas iniciadas con el <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opción para adjuntar a la actual <xref:System.Threading.Tasks.Task> de instancia, mientras que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span><span class="sxs-lookup"><span data-stu-id="3b819-1131">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span></span> <span data-ttu-id="3b819-1132">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1132">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1133">En el ejemplo siguiente se usa el <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> método que se invoca varias veces un <xref:System.Action> delegado que genera un número aleatorio, lo interpreta como un punto de código Unicode, lo convierte en una unidad de código UTF16 codificado y muestra información sobre el resultado carácter o caracteres.</span><span class="sxs-lookup"><span data-stu-id="3b819-1133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1134">El argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1134">The <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1135">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1135">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1136">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1136">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1137">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1137">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1138">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1138">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1139"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1139">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <summary><span data-ttu-id="3b819-1140">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1140">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1141">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1141">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1142">Una llamada a `StartNew` es funcionalmente equivalente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1142">Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1143">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1143">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="3b819-1144">Sin embargo, tenga en cuenta que hay una diferencia de comportamiento entre los dos métodos relacionados con: <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> de forma predeterminada no permite secundarios tareas iniciadas con el <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opción para adjuntar a la actual <xref:System.Threading.Tasks.Task> de instancia, mientras que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span><span class="sxs-lookup"><span data-stu-id="3b819-1144">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="3b819-1145">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1145">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1146">El ejemplo siguiente se llama el <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> método para crear una tarea que recorre en iteración los archivos en el directorio C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="3b819-1146">The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="3b819-1147">La expresión lambda llama el <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> método para agregar información acerca de cada archivo a un <xref:System.Collections.Generic.List%601> objeto.</span><span class="sxs-lookup"><span data-stu-id="3b819-1147">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3b819-1148">Cada uno separa la tarea anidada que se invoca el <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> bucle comprueba el estado del token de cancelación y, si se solicita la cancelación, llama a la <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-1148">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3b819-1149">El <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método produce una <xref:System.OperationCanceledException> excepción que se controla en un `catch` bloquear cuando el subproceso que realiza la llamada llama a la <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="3b819-1149">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1150">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1150">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1151">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1151">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1152">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1152">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1153">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1153">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1154">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1154">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1155">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1155">The action delegate to execute asynchronously.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1156">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1156">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="3b819-1157">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1157">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1158">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1158">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1159">Llamar a StartNew equivale funcionalmente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1159">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1160">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1160">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1161">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1161">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1162">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1162">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1163">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1163">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1164">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1164">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1165">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1165">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1166">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1166">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1167">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1167">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1168">Objeto que contiene los datos que el delegado de <paramref name="action" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1168">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-1169">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1169">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1170">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1170">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1171">Una llamada a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> es funcionalmente equivalente a la creación de un <xref:System.Threading.Tasks.Task> utilizando uno de sus constructores y, a continuación, llamar a la <xref:System.Threading.Tasks.Task.Start%2A> método para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1171">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1172">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1173">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1173">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1174">El ejemplo siguiente define una matriz de palabras de 6 letras.</span><span class="sxs-lookup"><span data-stu-id="3b819-1174">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="3b819-1175">Cada palabra, a continuación, se pasa a un <xref:System.Action%601> delegado, que codifica la palabra y muestra la palabra original y su versión alterada.</span><span class="sxs-lookup"><span data-stu-id="3b819-1175">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  
  
 <span data-ttu-id="3b819-1176">Tenga en cuenta que en el ejemplo se inicializa un único generador de números aleatorios, que está protegido por un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="3b819-1176">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="3b819-1177">Para la necesidad de un bloqueo, vea "La System.Random clase y el subproceso de seguridad" en el <xref:System.Random> tema de la clase.</span><span class="sxs-lookup"><span data-stu-id="3b819-1177">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1178">El argumento <paramref name="action" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1178">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1179">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1179">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1180">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1180">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1181">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1181">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1182">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1182">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1183">Objeto que contiene los datos que el delegado de <paramref name="action" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1183">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1184"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="3b819-1184">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="3b819-1185">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1185">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1186">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1186">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1187">Llamar a StartNew equivale funcionalmente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1187">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1188">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1188">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1189">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1189">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1190">El ejemplo siguiente define una matriz de palabras de 6 letras.</span><span class="sxs-lookup"><span data-stu-id="3b819-1190">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="3b819-1191">Cada palabra, a continuación, se pasa a un <xref:System.Action%601> delegado, que codifica la palabra y muestra la palabra original y su versión alterada.</span><span class="sxs-lookup"><span data-stu-id="3b819-1191">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  
  
 <span data-ttu-id="3b819-1192">Tenga en cuenta que en el ejemplo se inicializa un único generador de números aleatorios, que está protegido por un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="3b819-1192">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="3b819-1193">Para la necesidad de un bloqueo, vea "La System.Random clase y el subproceso de seguridad" en el <xref:System.Random> tema de la clase.</span><span class="sxs-lookup"><span data-stu-id="3b819-1193">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span> <span data-ttu-id="3b819-1194">Para controlar la posibilidad de daños en el generador de números aleatorios, se pasa un token de cancelación para la tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1194">To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</span></span> <span data-ttu-id="3b819-1195">Si dos números aleatorios igual a cero, el método supone que el generador de números aleatorios está dañado y establece el token de cancelación.</span><span class="sxs-lookup"><span data-stu-id="3b819-1195">If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</span></span> <span data-ttu-id="3b819-1196">Antes de ordenar la `chars` matriz que contiene los seis caracteres de una palabra, las llamadas al método el <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> método inicie una <xref:System.OperationCanceledException> si se ha cancelado el token.</span><span class="sxs-lookup"><span data-stu-id="3b819-1196">Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1197">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1197">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1198">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1198">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1199">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1199">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1200">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1200">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1201">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1201">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1202">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1202">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1203">Objeto que contiene los datos que el delegado de <paramref name="action" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1203">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1204">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1204">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="3b819-1205">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1205">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1206">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1206">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1207">Llamar a StartNew equivale funcionalmente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1207">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1208">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1208">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1209">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1209">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1210">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1210">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1211">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1211">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1212">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1212">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1213">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1213">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1214">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1214">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1215">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1215">The action delegate to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1216"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="3b819-1216">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1217">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1217">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-1218">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1218">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1219">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1219">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1220">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1220">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1221">Llamar a StartNew equivale funcionalmente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1221">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1222">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1222">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1223">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1223">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1224">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1224">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1225">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1225">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1226">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1226">-or-</span></span> 
<span data-ttu-id="3b819-1227">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1227">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1228">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1228">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1229">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1229">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1230">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1230">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1231">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1231">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1232">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1232">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1233">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1233">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="3b819-1234">Delegado de acción que se va a ejecutar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="3b819-1234">The action delegate to execute asynchronously.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1235">Objeto que contiene los datos que el delegado de <paramref name="action" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1235">An object containing data to be used by the <paramref name="action" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1236"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1236">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1237">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1237">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-1238">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1238">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1239">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1239">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1240">Objeto <see cref="T:System.Threading.Tasks.Task" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1240">The started <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1241">Llamar a StartNew equivale funcionalmente a la creación de una tarea mediante uno de sus constructores y, a continuación, que realiza la llamada <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1241">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1242">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1242">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1243">Para obtener más información y ejemplos de código, vea [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1243">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1244">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1244">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1245">Excepción que se produce cuando el argumento <paramref name="action" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1245">The exception that is thrown when the <paramref name="action" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1246">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1246">-or-</span></span> 
<span data-ttu-id="3b819-1247">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1247">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1248">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1248">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1249">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1249">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1250">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1250">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1251">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1251">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1252">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1252">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1253">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1253">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1254">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1254">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1255">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1255">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1256">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1256">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1257">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1257">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1258">Una llamada a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> es funcionalmente equivalente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1258">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1259">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede llamar a la <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> método como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1259">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1260">Sin embargo, tenga en cuenta que hay una diferencia de comportamiento entre los dos métodos relacionados con: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> de forma predeterminada no permite secundarios tareas iniciadas con el <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opción para adjuntar a la actual <xref:System.Threading.Tasks.Task%601> de instancia, mientras que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span><span class="sxs-lookup"><span data-stu-id="3b819-1260">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span></span> <span data-ttu-id="3b819-1261">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1261">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1262">El ejemplo siguiente es una aplicación de adición simple que genera dos números aleatorios y pide al usuario que escriba su suma.</span><span class="sxs-lookup"><span data-stu-id="3b819-1262">The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</span></span> <span data-ttu-id="3b819-1263">A continuación, indica si la respuesta es correcta o, si la respuesta del usuario no es un número válido, pide al usuario que vuelva a escribir un número válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1263">It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</span></span> <span data-ttu-id="3b819-1264">El <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> se usa para crear el <xref:System.Threading.Tasks.Task%601> los objetos que devuelven los números aleatorios para agregar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1264">The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1265">El argumento <paramref name="function" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1265">The <paramref name="function" /> argument is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1266">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1266">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1267">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1267">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1268">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1268">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1269">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1269">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1270">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1270">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1271">Objeto que contiene los datos que el delegado de <paramref name="function" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1271">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <summary><span data-ttu-id="3b819-1272">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1272">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1273">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1273">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1274">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1274">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1275">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1275">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1276">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1276">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1277">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1277">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1278">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1278">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1279">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1279">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1280">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1280">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1281">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1281">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1282">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1282">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1283"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="3b819-1283">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="3b819-1284">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1284">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1285">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1285">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1286">Una llamada a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> es funcionalmente equivalente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1286">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1287">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> método como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1287">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="3b819-1288">Sin embargo, tenga en cuenta que hay una diferencia de comportamiento entre los dos métodos relacionados con: <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> de forma predeterminada no permite secundarios tareas iniciadas con el <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> opción para adjuntar a la actual <xref:System.Threading.Tasks.Task%601> de instancia, mientras que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span><span class="sxs-lookup"><span data-stu-id="3b819-1288">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="3b819-1289">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1289">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3b819-1290">El ejemplo siguiente utiliza dos tareas para calcular la secuencia de Fibonacci terminan en F100 = F100 1 + F100-2 con los valores de inicialización F1 = 1, F2 = 1 y F1 = 0, F2 = 1.</span><span class="sxs-lookup"><span data-stu-id="3b819-1290">The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</span></span> <span data-ttu-id="3b819-1291">Aproximadamente la mitad del tiempo, un token de cancelación se establece como las operaciones de ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1291">Approximately half of the time, a cancellation token is set as the operations execute.</span></span> <span data-ttu-id="3b819-1292">El resultado del ejemplo muestra el resultado si las dos tareas se completen correctamente y si se cancela el token.</span><span class="sxs-lookup"><span data-stu-id="3b819-1292">The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]
 [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1293">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1293">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1294">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1294">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1295">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1295">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1296">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1296">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1297">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1297">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1298">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1298">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1299">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1299">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1300">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1300">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1301">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1301">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1302">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1302">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1303">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1303">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1304">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1304">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1305">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1305">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1306">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1306">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1307">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1307">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1308">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1308">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1309">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1309">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1310">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1310">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1311">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1311">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1312">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1312">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1313">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1313">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1314">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1314">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1315">Objeto que contiene los datos que el delegado de <paramref name="function" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1315">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1316"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva <see cref="T:System.Threading.Tasks.Task" /></span><span class="sxs-lookup"><span data-stu-id="3b819-1316">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span></span></param>
        <summary><span data-ttu-id="3b819-1317">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1317">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1318">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1318">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1319">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1319">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1320">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1321">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1321">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1322">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1322">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1323">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1323">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1324">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1324">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1325">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1325">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1326">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1326">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1327">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1327">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1328">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1328">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1329">Objeto que contiene los datos que el delegado de <paramref name="function" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1329">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1330">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1330">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1331">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1331">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1332">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1332">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1333">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1333">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1334">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1334">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1335">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1335">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1336">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1336">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1337">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1337">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1338">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1338">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1339">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1339">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1340">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1340">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1341">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1341">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1342">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1342">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1343">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1343">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1344">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1344">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1345"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1346">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1346">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-1347">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1348">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1348">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1349">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1349">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1350">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1350">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1351">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1351">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1352">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1352">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1353">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1353">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1354">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1354">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1355">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1355">-or-</span></span> 
<span data-ttu-id="3b819-1356">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1356">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1357">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1357">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1358">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1358">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1359">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1359">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1360">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1360">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1361">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1361">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1362">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1362">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3b819-1363">Tipo del resultado que está disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1363">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></typeparam>
        <param name="function"><span data-ttu-id="3b819-1364">Delegado de función que devuelve el resultado futuro que va a estar disponible a través de <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1364">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="state"><span data-ttu-id="3b819-1365">Objeto que contiene los datos que el delegado de <paramref name="function" /> va a usar.</span><span class="sxs-lookup"><span data-stu-id="3b819-1365">An object containing data to be used by the <paramref name="function" /> delegate.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="3b819-1366"><see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que se asignará a la nueva tarea.</span><span class="sxs-lookup"><span data-stu-id="3b819-1366">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="3b819-1367">Valor de TaskCreationOptions que controla el comportamiento del objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1367">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="3b819-1368">Objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se usa para programar el objeto <see cref="T:System.Threading.Tasks.Task`1" /> creado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1368">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="3b819-1369">Crea e inicia un objeto <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1369">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></summary>
        <returns><span data-ttu-id="3b819-1370">Objeto <see cref="T:System.Threading.Tasks.Task`1" /> iniciado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1370">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3b819-1371">Llamar a StartNew equivale funcionalmente a la creación de un <xref:System.Threading.Tasks.Task%601> utilizando uno de sus constructores y, a continuación, llamar a <xref:System.Threading.Tasks.Task.Start%2A> para programar su ejecución.</span><span class="sxs-lookup"><span data-stu-id="3b819-1371">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="3b819-1372">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], puede usar el <xref:System.Threading.Tasks.Task.Run%2A> método con un <xref:System.Action> objeto como una forma rápida para llamar a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> con parámetros predeterminados.</span><span class="sxs-lookup"><span data-stu-id="3b819-1372">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="3b819-1373">Para obtener más información y ejemplos de código, vea la entrada [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) programación en paralelo con .NET blog.</span><span class="sxs-lookup"><span data-stu-id="3b819-1373">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3b819-1374">Ya se eliminó el <see cref="T:System.Threading.CancellationToken" /> proporcionado.</span><span class="sxs-lookup"><span data-stu-id="3b819-1374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3b819-1375">Excepción que se produce cuando el argumento <paramref name="function" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1375">The exception that is thrown when the <paramref name="function" /> argument is null.</span></span>  
  
<span data-ttu-id="3b819-1376">O bien</span><span class="sxs-lookup"><span data-stu-id="3b819-1376">-or-</span></span> 
<span data-ttu-id="3b819-1377">Excepción que se produce cuando el argumento <paramref name="scheduler" /> es null.</span><span class="sxs-lookup"><span data-stu-id="3b819-1377">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="3b819-1378">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1378">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1379">La excepción que se produce cuando el argumento <paramref name="creationOptions" /> especifica un valor TaskCreationOptions no válido.</span><span class="sxs-lookup"><span data-stu-id="3b819-1379">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span></span> <span data-ttu-id="3b819-1380">Para obtener más información, vea la sección Comentarios de <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span><span class="sxs-lookup"><span data-stu-id="3b819-1380">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="3b819-1381">Biblioteca de procesamiento paralelo basado en tareas (TPL)</span><span class="sxs-lookup"><span data-stu-id="3b819-1381">Task Parallel Library (TPL)</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md"><span data-ttu-id="3b819-1382">Encadenar tareas mediante tareas de continuación</span><span class="sxs-lookup"><span data-stu-id="3b819-1382">Chaining Tasks by Using Continuation Tasks</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="3b819-1383">Cancelación de tareas</span><span class="sxs-lookup"><span data-stu-id="3b819-1383">Task Cancellation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>