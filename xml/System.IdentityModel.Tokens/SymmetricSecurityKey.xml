<Type Name="SymmetricSecurityKey" FullName="System.IdentityModel.Tokens.SymmetricSecurityKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88802baa4c050ae1aaeff9d861f919f73374aa9a" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37757785" /></Metadata><TypeSignature Language="C#" Value="public abstract class SymmetricSecurityKey : System.IdentityModel.Tokens.SecurityKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SymmetricSecurityKey extends System.IdentityModel.Tokens.SecurityKey" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SymmetricSecurityKey&#xA;Inherits SecurityKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SymmetricSecurityKey abstract : System::IdentityModel::Tokens::SecurityKey" />
  <TypeSignature Language="F#" Value="type SymmetricSecurityKey = class&#xA;    inherit SecurityKey" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityKey</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="eaca5-101">Representa la clase base abstracta para todas las claves que se generan utilizando los algoritmos simétricos.</span><span class="sxs-lookup"><span data-stu-id="eaca5-101">Represents the abstract base class for all keys that are generated using symmetric algorithms.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-102">Normalmente, la infraestructura utiliza esta clase para transformar XML mediante una clave simétrica.</span><span class="sxs-lookup"><span data-stu-id="eaca5-102">Typically, this class is used by the infrastructure to transform XML using a symmetric key.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SymmetricSecurityKey ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SymmetricSecurityKey();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eaca5-103">Inicializa una nueva instancia de la clase <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" />.</span><span class="sxs-lookup"><span data-stu-id="eaca5-103">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDerivedKey">
      <MemberSignature Language="C#" Value="public abstract byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GenerateDerivedKey(string algorithm, unsigned int8[] label, unsigned int8[] nonce, int32 derivedKeyLength, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GenerateDerivedKey (algorithm As String, label As Byte(), nonce As Byte(), derivedKeyLength As Integer, offset As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ GenerateDerivedKey(System::String ^ algorithm, cli::array &lt;System::Byte&gt; ^ label, cli::array &lt;System::Byte&gt; ^ nonce, int derivedKeyLength, int offset);" />
      <MemberSignature Language="F#" Value="abstract member GenerateDerivedKey : string * byte[] * byte[] * int * int -&gt; byte[]" Usage="symmetricSecurityKey.GenerateDerivedKey (algorithm, label, nonce, derivedKeyLength, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="label" Type="System.Byte[]" />
        <Parameter Name="nonce" Type="System.Byte[]" />
        <Parameter Name="derivedKeyLength" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-104">Un URI que representa el algoritmo criptográfico que se utiliza para generar la clave derivada.</span><span class="sxs-lookup"><span data-stu-id="eaca5-104">A URI that represents the cryptographic algorithm to use to generate the derived key.</span></span></param>
        <param name="label"><span data-ttu-id="eaca5-105">Una matriz de <see cref="T:System.Byte" /> que contiene el parámetro de etiqueta para el algoritmo criptográfico.</span><span class="sxs-lookup"><span data-stu-id="eaca5-105">An array of <see cref="T:System.Byte" /> that contains the label parameter for the cryptographic algorithm.</span></span></param>
        <param name="nonce"><span data-ttu-id="eaca5-106">Una matriz de <see cref="T:System.Byte" /> que contiene el valor de seguridad (nonce) que se utiliza para crear una clave derivada.</span><span class="sxs-lookup"><span data-stu-id="eaca5-106">An array of <see cref="T:System.Byte" /> that contains the nonce that is used to create a derived key.</span></span></param>
        <param name="derivedKeyLength"><span data-ttu-id="eaca5-107">El tamaño de la clave derivada.</span><span class="sxs-lookup"><span data-stu-id="eaca5-107">The size of the derived key.</span></span></param>
        <param name="offset"><span data-ttu-id="eaca5-108">La posición en la que la clave derivada se encuentra en la matriz de bytes que se devuelve de este método.</span><span class="sxs-lookup"><span data-stu-id="eaca5-108">The position at which the derived key is located in the byte array that is returned from this method.</span></span></param>
        <summary><span data-ttu-id="eaca5-109">Cuando se invalida en una clase derivada, genera una clave derivada utilizando el algoritmo criptográfico y los parámetros especificados para la clave actual.</span><span class="sxs-lookup"><span data-stu-id="eaca5-109">When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.</span></span></summary>
        <returns><span data-ttu-id="eaca5-110">Una matriz de <see cref="T:System.Byte" /> que contiene la clave derivada.</span><span class="sxs-lookup"><span data-stu-id="eaca5-110">An array of <see cref="T:System.Byte" /> that contains the derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-111">Para especificar P-SHA1 como el algoritmo criptográfico, utilice el campo <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>.</span><span class="sxs-lookup"><span data-stu-id="eaca5-111">To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptionTransform">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.ICryptoTransform GetDecryptionTransform(string algorithm, unsigned int8[] iv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDecryptionTransform (algorithm As String, iv As Byte()) As ICryptoTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::ICryptoTransform ^ GetDecryptionTransform(System::String ^ algorithm, cli::array &lt;System::Byte&gt; ^ iv);" />
      <MemberSignature Language="F#" Value="abstract member GetDecryptionTransform : string * byte[] -&gt; System.Security.Cryptography.ICryptoTransform" Usage="symmetricSecurityKey.GetDecryptionTransform (algorithm, iv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="iv" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-112">Un algoritmo criptográfico que descifra el texto cifrado, como XML cifrado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-112">A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</span></span></param>
        <param name="iv"><span data-ttu-id="eaca5-113">Una matriz de <see cref="T:System.Byte" /> que contiene el vector de inicialización (<see langword="IV" />) para el algoritmo especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-113">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</span></span></param>
        <summary><span data-ttu-id="eaca5-114">Cuando se invalida en una clase derivada, obtiene una transformación que descifra texto cifrado mediante el algoritmo criptográfico especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-114">When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.</span></span></summary>
        <returns><span data-ttu-id="eaca5-115"><see cref="T:System.Security.Cryptography.ICryptoTransform" /> que representa la transformación del descifrado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-115">An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the decryption transform.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-116">Utilice los campos que representan los algoritmos de descifrado en la clase <xref:System.IdentityModel.Tokens.SecurityAlgorithms> para especificar el algoritmo.</span><span class="sxs-lookup"><span data-stu-id="eaca5-116">Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEncryptionTransform">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.ICryptoTransform GetEncryptionTransform(string algorithm, unsigned int8[] iv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncryptionTransform (algorithm As String, iv As Byte()) As ICryptoTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::ICryptoTransform ^ GetEncryptionTransform(System::String ^ algorithm, cli::array &lt;System::Byte&gt; ^ iv);" />
      <MemberSignature Language="F#" Value="abstract member GetEncryptionTransform : string * byte[] -&gt; System.Security.Cryptography.ICryptoTransform" Usage="symmetricSecurityKey.GetEncryptionTransform (algorithm, iv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="iv" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-117">Un algoritmo criptográfico que cifra XML.</span><span class="sxs-lookup"><span data-stu-id="eaca5-117">A cryptographic algorithm that encrypts XML.</span></span></param>
        <param name="iv"><span data-ttu-id="eaca5-118">Una matriz de <see cref="T:System.Byte" /> que contiene el vector de inicialización (<see langword="IV" />) para el algoritmo especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-118">An array of <see cref="T:System.Byte" /> that contains the initialization vector (<see langword="IV" />) for the specified algorithm.</span></span></param>
        <summary><span data-ttu-id="eaca5-119">Cuando se invalida en una clase derivada, obtiene una transformación que cifra XML mediante el algoritmo criptográfico especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-119">When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.</span></span></summary>
        <returns><span data-ttu-id="eaca5-120"><see cref="T:System.Security.Cryptography.ICryptoTransform" /> que representa la transformación del cifrado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-120">An <see cref="T:System.Security.Cryptography.ICryptoTransform" /> that represents the encryption transform.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-121">Utilice los campos que representan los algoritmos de descifrado en la clase <xref:System.IdentityModel.Tokens.SecurityAlgorithms> para especificar el algoritmo.</span><span class="sxs-lookup"><span data-stu-id="eaca5-121">Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIVSize">
      <MemberSignature Language="C#" Value="public abstract int GetIVSize (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetIVSize(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIVSize (algorithm As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetIVSize(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member GetIVSize : string -&gt; int" Usage="symmetricSecurityKey.GetIVSize algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-122">El algoritmo criptográfico para obtener el tamaño del vector de inicialización (<see langword="IV" />).</span><span class="sxs-lookup"><span data-stu-id="eaca5-122">The cryptographic algorithm to get the size of the initialization vector (<see langword="IV" />).</span></span></param>
        <summary><span data-ttu-id="eaca5-123">Cuando se invalida en una clase derivada, obtiene el tamaño, en bits, del vector de inicialización (<see langword="IV" />) que se requiere para el algoritmo criptográfico especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-123">When overridden in a derived class, gets the size, in bits, of the initialization vector (<see langword="IV" />) that is required for the specified cryptographic algorithm.</span></span></summary>
        <returns><span data-ttu-id="eaca5-124">El tamaño, en bits, del vector de inicialización (<see langword="IV" />) que se requiere para el algoritmo criptográfico especificado en el parámetro <paramref name="algorithm" />.</span><span class="sxs-lookup"><span data-stu-id="eaca5-124">The size, in bits, of the initialization vector (<see langword="IV" />) that is required for the cryptographic algorithm specified in the <paramref name="algorithm" /> parameter.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyedHashAlgorithm">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetKeyedHashAlgorithm (algorithm As String) As KeyedHashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::KeyedHashAlgorithm ^ GetKeyedHashAlgorithm(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyedHashAlgorithm : string -&gt; System.Security.Cryptography.KeyedHashAlgorithm" Usage="symmetricSecurityKey.GetKeyedHashAlgorithm algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.KeyedHashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-125">El algoritmo hash con clave del que obtener una instancia.</span><span class="sxs-lookup"><span data-stu-id="eaca5-125">The keyed hash algorithm to get an instance of.</span></span></param>
        <summary><span data-ttu-id="eaca5-126">Cuando se invalida en una clase derivada, obtiene una instancia del algoritmo hash en clave especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-126">When overridden in a derived class, gets an instance of the specified keyed hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="eaca5-127"><see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> que representa el algoritmo hash con clave.</span><span class="sxs-lookup"><span data-stu-id="eaca5-127">A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> that represents the keyed hash algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-128">Utilice los campos que representan los algoritmos hash con clave de la clase <xref:System.IdentityModel.Tokens.SecurityAlgorithms> para especificar el algoritmo.</span><span class="sxs-lookup"><span data-stu-id="eaca5-128">Use the fields that represent keyed hash algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymmetricAlgorithm">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSymmetricAlgorithm (algorithm As String) As SymmetricAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::Cryptography::SymmetricAlgorithm ^ GetSymmetricAlgorithm(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member GetSymmetricAlgorithm : string -&gt; System.Security.Cryptography.SymmetricAlgorithm" Usage="symmetricSecurityKey.GetSymmetricAlgorithm algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="eaca5-129">El algoritmo simétrico del que obtener una instancia.</span><span class="sxs-lookup"><span data-stu-id="eaca5-129">The symmetric algorithm to get an instance of.</span></span></param>
        <summary><span data-ttu-id="eaca5-130">Cuando se invalida en una clase derivada, obtiene una instancia del algoritmo simétrico especificado.</span><span class="sxs-lookup"><span data-stu-id="eaca5-130">When overridden in a derived class, gets an instance of the specified symmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="eaca5-131"><see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> que representa el algoritmo simétrico.</span><span class="sxs-lookup"><span data-stu-id="eaca5-131">A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> that represents the symmetric algorithm.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaca5-132">Utilice los campos que representan los algoritmos simétricos en la clase <xref:System.IdentityModel.Tokens.SecurityAlgorithms> para especificar el algoritmo.</span><span class="sxs-lookup"><span data-stu-id="eaca5-132">Use the fields that represent symmetric algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSymmetricKey">
      <MemberSignature Language="C#" Value="public abstract byte[] GetSymmetricKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetSymmetricKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSymmetricKey () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ GetSymmetricKey();" />
      <MemberSignature Language="F#" Value="abstract member GetSymmetricKey : unit -&gt; byte[]" Usage="symmetricSecurityKey.GetSymmetricKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eaca5-133">Cuando se invalida en una clase derivada, obtiene los bytes que representan la clave simétrica.</span><span class="sxs-lookup"><span data-stu-id="eaca5-133">When overridden in a derived class, gets the bytes that represent the symmetric key.</span></span></summary>
        <returns><span data-ttu-id="eaca5-134">Una matriz de <see cref="T:System.Byte" /> que contiene la clave simétrica.</span><span class="sxs-lookup"><span data-stu-id="eaca5-134">An array of <see cref="T:System.Byte" /> that contains the symmetric key.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>